
updi_test.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00005cf0  00000000  00000000  00010000  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .relocate     00002350  20000000  00005cf0  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  2 .lpram        00000000  30000000  30000000  00022350  2**0
                  CONTENTS
  3 .bss          000000e8  20002350  00008040  00022350  2**2
                  ALLOC
  4 .stack        00002000  20002438  00008128  00022350  2**0
                  ALLOC
  5 .ARM.attributes 00000028  00000000  00000000  00022350  2**0
                  CONTENTS, READONLY
  6 .comment      00000059  00000000  00000000  00022378  2**0
                  CONTENTS, READONLY
  7 .debug_info   00020ecf  00000000  00000000  000223d1  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 00003d33  00000000  00000000  000432a0  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_loc    0000eff1  00000000  00000000  00046fd3  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_aranges 00000d08  00000000  00000000  00055fc4  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00001768  00000000  00000000  00056ccc  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_macro  0001e461  00000000  00000000  00058434  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_line   00012b13  00000000  00000000  00076895  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_str    00094817  00000000  00000000  000893a8  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_frame  0000267c  00000000  00000000  0011dbc0  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <exception_table>:
       0:	38 44 00 20 71 29 00 00 6d 29 00 00 6d 29 00 00     8D. q)..m)..m)..
	...
      2c:	6d 29 00 00 00 00 00 00 00 00 00 00 6d 29 00 00     m)..........m)..
      3c:	6d 29 00 00 6d 29 00 00 6d 29 00 00 6d 29 00 00     m)..m)..m)..m)..
      4c:	6d 29 00 00 6d 29 00 00 6d 29 00 00 6d 29 00 00     m)..m)..m)..m)..
      5c:	6d 29 00 00 6d 29 00 00 6d 29 00 00 6d 29 00 00     m)..m)..m)..m)..
      6c:	6d 29 00 00 2d 35 00 00 6d 29 00 00 6d 29 00 00     m)..-5..m)..m)..
      7c:	6d 29 00 00 6d 29 00 00 6d 29 00 00 6d 29 00 00     m)..m)..m)..m)..
      8c:	6d 29 00 00 6d 29 00 00 6d 29 00 00 6d 29 00 00     m)..m)..m)..m)..
      9c:	6d 29 00 00 6d 29 00 00 6d 29 00 00 6d 29 00 00     m)..m)..m)..m)..
      ac:	6d 29 00 00 00 00 00 00                             m)......

000000b4 <__do_global_dtors_aux>:
      b4:	b510      	push	{r4, lr}
      b6:	4c06      	ldr	r4, [pc, #24]	; (d0 <__do_global_dtors_aux+0x1c>)
      b8:	7823      	ldrb	r3, [r4, #0]
      ba:	2b00      	cmp	r3, #0
      bc:	d107      	bne.n	ce <__do_global_dtors_aux+0x1a>
      be:	4b05      	ldr	r3, [pc, #20]	; (d4 <__do_global_dtors_aux+0x20>)
      c0:	2b00      	cmp	r3, #0
      c2:	d002      	beq.n	ca <__do_global_dtors_aux+0x16>
      c4:	4804      	ldr	r0, [pc, #16]	; (d8 <__do_global_dtors_aux+0x24>)
      c6:	e000      	b.n	ca <__do_global_dtors_aux+0x16>
      c8:	bf00      	nop
      ca:	2301      	movs	r3, #1
      cc:	7023      	strb	r3, [r4, #0]
      ce:	bd10      	pop	{r4, pc}
      d0:	20002350 	.word	0x20002350
      d4:	00000000 	.word	0x00000000
      d8:	00005cf0 	.word	0x00005cf0

000000dc <frame_dummy>:
      dc:	4b08      	ldr	r3, [pc, #32]	; (100 <frame_dummy+0x24>)
      de:	b510      	push	{r4, lr}
      e0:	2b00      	cmp	r3, #0
      e2:	d003      	beq.n	ec <frame_dummy+0x10>
      e4:	4907      	ldr	r1, [pc, #28]	; (104 <frame_dummy+0x28>)
      e6:	4808      	ldr	r0, [pc, #32]	; (108 <frame_dummy+0x2c>)
      e8:	e000      	b.n	ec <frame_dummy+0x10>
      ea:	bf00      	nop
      ec:	4807      	ldr	r0, [pc, #28]	; (10c <frame_dummy+0x30>)
      ee:	6803      	ldr	r3, [r0, #0]
      f0:	2b00      	cmp	r3, #0
      f2:	d100      	bne.n	f6 <frame_dummy+0x1a>
      f4:	bd10      	pop	{r4, pc}
      f6:	4b06      	ldr	r3, [pc, #24]	; (110 <frame_dummy+0x34>)
      f8:	2b00      	cmp	r3, #0
      fa:	d0fb      	beq.n	f4 <frame_dummy+0x18>
      fc:	4798      	blx	r3
      fe:	e7f9      	b.n	f4 <frame_dummy+0x18>
     100:	00000000 	.word	0x00000000
     104:	20002354 	.word	0x20002354
     108:	00005cf0 	.word	0x00005cf0
     10c:	00005cf0 	.word	0x00005cf0
     110:	00000000 	.word	0x00000000

00000114 <atmel_start_init>:

/**
 * Initializes MCU, drivers and middleware in the project
 **/
void atmel_start_init(void)
{
     114:	b510      	push	{r4, lr}
	system_init();
     116:	4b01      	ldr	r3, [pc, #4]	; (11c <atmel_start_init+0x8>)
     118:	4798      	blx	r3
}
     11a:	bd10      	pop	{r4, pc}
     11c:	00002a75 	.word	0x00002a75

00000120 <set_default_segment_id>:

    return 0;
}

int set_default_segment_id(hex_data_t *dhex, ihex_segment_t segmentid)
{
     120:	22a0      	movs	r2, #160	; 0xa0
     122:	00d2      	lsls	r2, r2, #3
     124:	0003      	movs	r3, r0
     126:	1882      	adds	r2, r0, r2
	segment_buffer_t *seg;
	int result = 0;
     128:	2000      	movs	r0, #0
{
     12a:	b510      	push	{r4, lr}

	for (int i = 0; i < MAX_SEGMENT_COUNT_IN_RECORDS; i++) {
		seg = &dhex->segment[i];
		if (!seg->sid && seg->addr_to && seg->data) {
     12c:	881c      	ldrh	r4, [r3, #0]
     12e:	2c00      	cmp	r4, #0
     130:	d107      	bne.n	142 <set_default_segment_id+0x22>
     132:	689c      	ldr	r4, [r3, #8]
     134:	2c00      	cmp	r4, #0
     136:	d004      	beq.n	142 <set_default_segment_id+0x22>
     138:	68dc      	ldr	r4, [r3, #12]
     13a:	2c00      	cmp	r4, #0
     13c:	d001      	beq.n	142 <set_default_segment_id+0x22>
			seg->sid = segmentid;
     13e:	8019      	strh	r1, [r3, #0]
			result++;
     140:	3001      	adds	r0, #1
     142:	3314      	adds	r3, #20
	for (int i = 0; i < MAX_SEGMENT_COUNT_IN_RECORDS; i++) {
     144:	4293      	cmp	r3, r2
     146:	d1f1      	bne.n	12c <set_default_segment_id+0xc>
		}
	}

	return result;
}
     148:	bd10      	pop	{r4, pc}
	...

0000014c <updi_program>:
    @nvm_ptr: updi_nvm_init() device handle
    @file: hex/ihex file path
    @returns 0 - success, other value failed code
*/
int updi_program(void *nvm_ptr)
{
     14c:	b5f0      	push	{r4, r5, r6, r7, lr}
     14e:	b085      	sub	sp, #20
    segment_buffer_t *seg;
    ihex_segment_t sid;
    nvm_info_t iflash;
    int i, result = 0;

    result = nvm_get_block_info(nvm_ptr, NVM_FLASH, &iflash);
     150:	aa02      	add	r2, sp, #8
     152:	2100      	movs	r1, #0
     154:	4b1f      	ldr	r3, [pc, #124]	; (1d4 <updi_program+0x88>)
{
     156:	9001      	str	r0, [sp, #4]
    result = nvm_get_block_info(nvm_ptr, NVM_FLASH, &iflash);
     158:	4798      	blx	r3
     15a:	1e02      	subs	r2, r0, #0
    if (result) {
     15c:	d008      	beq.n	170 <updi_program+0x24>
        DBG_INFO(UPDI_DEBUG, "nvm_get_block_info failed %d", result);
     15e:	491e      	ldr	r1, [pc, #120]	; (1d8 <updi_program+0x8c>)
     160:	2001      	movs	r0, #1
     162:	4b1e      	ldr	r3, [pc, #120]	; (1dc <updi_program+0x90>)
     164:	4798      	blx	r3
        return -2;
     166:	2502      	movs	r5, #2
        seg = &dhex->segment[i];
        if (seg->data) {
            result = nvm_write_auto(nvm_ptr, SEGMENTID_TO_ADDR(seg->sid) + seg->addr_from, (u8 *)seg->data, seg->len);
            if (result) {
                DBG_INFO(UPDI_DEBUG, "nvm_write_auto %d failed %d", i, result);
                result = -5;
     168:	426d      	negs	r5, r5

    DBG_INFO(UPDI_DEBUG, "Program finished");

out:
    return result;
}
     16a:	0028      	movs	r0, r5
     16c:	b005      	add	sp, #20
     16e:	bdf0      	pop	{r4, r5, r6, r7, pc}
    sid = ADDR_TO_SEGMENTID(iflash.nvm_start);
     170:	ab02      	add	r3, sp, #8
     172:	8819      	ldrh	r1, [r3, #0]
    set_default_segment_id(dhex, sid);
     174:	4c1a      	ldr	r4, [pc, #104]	; (1e0 <updi_program+0x94>)
     176:	0909      	lsrs	r1, r1, #4
     178:	4b1a      	ldr	r3, [pc, #104]	; (1e4 <updi_program+0x98>)
     17a:	0020      	movs	r0, r4
     17c:	4798      	blx	r3
    result = nvm_chip_erase(nvm_ptr);
     17e:	9801      	ldr	r0, [sp, #4]
     180:	4b19      	ldr	r3, [pc, #100]	; (1e8 <updi_program+0x9c>)
     182:	4798      	blx	r3
     184:	0005      	movs	r5, r0
    if (result) {
     186:	1e07      	subs	r7, r0, #0
     188:	d006      	beq.n	198 <updi_program+0x4c>
        DBG_INFO(UPDI_DEBUG, "nvm_chip_erase failed %d", result);
     18a:	0002      	movs	r2, r0
     18c:	4917      	ldr	r1, [pc, #92]	; (1ec <updi_program+0xa0>)
     18e:	2001      	movs	r0, #1
     190:	4b12      	ldr	r3, [pc, #72]	; (1dc <updi_program+0x90>)
     192:	4798      	blx	r3
        result = -4;
     194:	2504      	movs	r5, #4
     196:	e7e7      	b.n	168 <updi_program+0x1c>
        if (seg->data) {
     198:	68e2      	ldr	r2, [r4, #12]
     19a:	2a00      	cmp	r2, #0
     19c:	d011      	beq.n	1c2 <updi_program+0x76>
            result = nvm_write_auto(nvm_ptr, SEGMENTID_TO_ADDR(seg->sid) + seg->addr_from, (u8 *)seg->data, seg->len);
     19e:	8821      	ldrh	r1, [r4, #0]
     1a0:	6863      	ldr	r3, [r4, #4]
     1a2:	0109      	lsls	r1, r1, #4
     1a4:	1859      	adds	r1, r3, r1
     1a6:	b289      	uxth	r1, r1
     1a8:	6923      	ldr	r3, [r4, #16]
     1aa:	9801      	ldr	r0, [sp, #4]
     1ac:	4e10      	ldr	r6, [pc, #64]	; (1f0 <updi_program+0xa4>)
     1ae:	47b0      	blx	r6
     1b0:	1e03      	subs	r3, r0, #0
            if (result) {
     1b2:	d006      	beq.n	1c2 <updi_program+0x76>
                DBG_INFO(UPDI_DEBUG, "nvm_write_auto %d failed %d", i, result);
     1b4:	003a      	movs	r2, r7
     1b6:	490f      	ldr	r1, [pc, #60]	; (1f4 <updi_program+0xa8>)
     1b8:	2001      	movs	r0, #1
     1ba:	4c08      	ldr	r4, [pc, #32]	; (1dc <updi_program+0x90>)
     1bc:	47a0      	blx	r4
                result = -5;
     1be:	2505      	movs	r5, #5
     1c0:	e7d2      	b.n	168 <updi_program+0x1c>
    for (i = 0; i < ARRAY_SIZE(dhex->segment); i++) {
     1c2:	3701      	adds	r7, #1
     1c4:	3414      	adds	r4, #20
     1c6:	2f40      	cmp	r7, #64	; 0x40
     1c8:	d1e6      	bne.n	198 <updi_program+0x4c>
    DBG_INFO(UPDI_DEBUG, "Program finished");
     1ca:	490b      	ldr	r1, [pc, #44]	; (1f8 <updi_program+0xac>)
     1cc:	2001      	movs	r0, #1
     1ce:	4b03      	ldr	r3, [pc, #12]	; (1dc <updi_program+0x90>)
     1d0:	4798      	blx	r3
     1d2:	e7ca      	b.n	16a <updi_program+0x1e>
     1d4:	00002101 	.word	0x00002101
     1d8:	00004447 	.word	0x00004447
     1dc:	00000357 	.word	0x00000357
     1e0:	20000000 	.word	0x20000000
     1e4:	00000121 	.word	0x00000121
     1e8:	00001e81 	.word	0x00001e81
     1ec:	00004464 	.word	0x00004464
     1f0:	00002361 	.word	0x00002361
     1f4:	0000447d 	.word	0x0000447d
     1f8:	00004499 	.word	0x00004499

000001fc <cupdi_operate>:
{
     1fc:	b570      	push	{r4, r5, r6, lr}
    dev = get_chip_info(dev_name);
     1fe:	4c26      	ldr	r4, [pc, #152]	; (298 <cupdi_operate+0x9c>)
     200:	4b26      	ldr	r3, [pc, #152]	; (29c <cupdi_operate+0xa0>)
     202:	0020      	movs	r0, r4
     204:	4798      	blx	r3
     206:	1e02      	subs	r2, r0, #0
    if (!dev) {
     208:	d108      	bne.n	21c <cupdi_operate+0x20>
        DBG_INFO(UPDI_DEBUG, "Device %s not support", dev_name);
     20a:	0022      	movs	r2, r4
     20c:	4924      	ldr	r1, [pc, #144]	; (2a0 <cupdi_operate+0xa4>)
     20e:	2001      	movs	r0, #1
     210:	4b24      	ldr	r3, [pc, #144]	; (2a4 <cupdi_operate+0xa8>)
        return -2;
     212:	2402      	movs	r4, #2
        DBG_INFO(UPDI_DEBUG, "Device %s not support", dev_name);
     214:	4798      	blx	r3
        return -2;
     216:	4264      	negs	r4, r4
}
     218:	0020      	movs	r0, r4
     21a:	bd70      	pop	{r4, r5, r6, pc}
    nvm_ptr = updi_nvm_init(comport, baudrate, (void *)dev);
     21c:	21e1      	movs	r1, #225	; 0xe1
     21e:	2000      	movs	r0, #0
     220:	0249      	lsls	r1, r1, #9
     222:	4b21      	ldr	r3, [pc, #132]	; (2a8 <cupdi_operate+0xac>)
     224:	4798      	blx	r3
     226:	1e05      	subs	r5, r0, #0
    if (!nvm_ptr) {
     228:	d10c      	bne.n	244 <cupdi_operate+0x48>
        DBG_INFO(UPDI_DEBUG, "Nvm initialize failed");
     22a:	4920      	ldr	r1, [pc, #128]	; (2ac <cupdi_operate+0xb0>)
     22c:	2001      	movs	r0, #1
     22e:	4b1d      	ldr	r3, [pc, #116]	; (2a4 <cupdi_operate+0xa8>)
     230:	4798      	blx	r3
        result = -3;
     232:	2403      	movs	r4, #3
        result = -9;
     234:	4264      	negs	r4, r4
    nvm_leave_progmode(nvm_ptr);
     236:	0028      	movs	r0, r5
     238:	4b1d      	ldr	r3, [pc, #116]	; (2b0 <cupdi_operate+0xb4>)
     23a:	4798      	blx	r3
    updi_nvm_deinit(nvm_ptr);
     23c:	0028      	movs	r0, r5
     23e:	4b1d      	ldr	r3, [pc, #116]	; (2b4 <cupdi_operate+0xb8>)
     240:	4798      	blx	r3
    return result;
     242:	e7e9      	b.n	218 <cupdi_operate+0x1c>
    result = nvm_get_device_info(nvm_ptr);
     244:	4b1c      	ldr	r3, [pc, #112]	; (2b8 <cupdi_operate+0xbc>)
     246:	4798      	blx	r3
    if (result) {
     248:	2800      	cmp	r0, #0
     24a:	d005      	beq.n	258 <cupdi_operate+0x5c>
        DBG_INFO(UPDI_DEBUG, "nvm_get_device_info failed");
     24c:	491b      	ldr	r1, [pc, #108]	; (2bc <cupdi_operate+0xc0>)
     24e:	2001      	movs	r0, #1
     250:	4b14      	ldr	r3, [pc, #80]	; (2a4 <cupdi_operate+0xa8>)
     252:	4798      	blx	r3
        result = -4;
     254:	2404      	movs	r4, #4
     256:	e7ed      	b.n	234 <cupdi_operate+0x38>
    result = nvm_enter_progmode(nvm_ptr);
     258:	0028      	movs	r0, r5
     25a:	4b19      	ldr	r3, [pc, #100]	; (2c0 <cupdi_operate+0xc4>)
     25c:	4798      	blx	r3
     25e:	1e02      	subs	r2, r0, #0
    if (result) {
     260:	d00d      	beq.n	27e <cupdi_operate+0x82>
        DBG_INFO(UPDI_DEBUG, "Device is locked(%d). Performing unlock with chip erase.", result);
     262:	4918      	ldr	r1, [pc, #96]	; (2c4 <cupdi_operate+0xc8>)
     264:	2001      	movs	r0, #1
     266:	4c0f      	ldr	r4, [pc, #60]	; (2a4 <cupdi_operate+0xa8>)
     268:	47a0      	blx	r4
        result = nvm_unlock_device(nvm_ptr);
     26a:	0028      	movs	r0, r5
     26c:	4b16      	ldr	r3, [pc, #88]	; (2c8 <cupdi_operate+0xcc>)
     26e:	4798      	blx	r3
     270:	1e02      	subs	r2, r0, #0
        if (result) {
     272:	d004      	beq.n	27e <cupdi_operate+0x82>
            DBG_INFO(UPDI_DEBUG, "NVM unlock device failed %d", result);
     274:	4915      	ldr	r1, [pc, #84]	; (2cc <cupdi_operate+0xd0>)
     276:	2001      	movs	r0, #1
     278:	47a0      	blx	r4
            result = -5;
     27a:	2405      	movs	r4, #5
     27c:	e7da      	b.n	234 <cupdi_operate+0x38>
    result = updi_program(nvm_ptr);//file);
     27e:	0028      	movs	r0, r5
     280:	4b13      	ldr	r3, [pc, #76]	; (2d0 <cupdi_operate+0xd4>)
     282:	4798      	blx	r3
     284:	1e04      	subs	r4, r0, #0
    if (result) {
     286:	d0d6      	beq.n	236 <cupdi_operate+0x3a>
        DBG_INFO(UPDI_DEBUG, "updi_program failed %d", result);
     288:	0002      	movs	r2, r0
     28a:	4912      	ldr	r1, [pc, #72]	; (2d4 <cupdi_operate+0xd8>)
     28c:	2001      	movs	r0, #1
     28e:	4b05      	ldr	r3, [pc, #20]	; (2a4 <cupdi_operate+0xa8>)
     290:	4798      	blx	r3
        result = -9;
     292:	2409      	movs	r4, #9
     294:	e7ce      	b.n	234 <cupdi_operate+0x38>
     296:	46c0      	nop			; (mov r8, r8)
     298:	000044aa 	.word	0x000044aa
     29c:	000002d9 	.word	0x000002d9
     2a0:	000044b3 	.word	0x000044b3
     2a4:	00000357 	.word	0x00000357
     2a8:	00001cdd 	.word	0x00001cdd
     2ac:	000044c9 	.word	0x000044c9
     2b0:	00001dd1 	.word	0x00001dd1
     2b4:	00001d21 	.word	0x00001d21
     2b8:	00001d51 	.word	0x00001d51
     2bc:	000044df 	.word	0x000044df
     2c0:	00001d85 	.word	0x00001d85
     2c4:	000044fa 	.word	0x000044fa
     2c8:	00001e25 	.word	0x00001e25
     2cc:	00004533 	.word	0x00004533
     2d0:	0000014d 	.word	0x0000014d
     2d4:	0000454f 	.word	0x0000454f

000002d8 <get_chip_info>:
    { "tiny817", &device_tiny_81x },
    { "tiny417", &device_tiny_41x },
};

const device_info_t * get_chip_info(const char *dev_name) 
{
     2d8:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
    const device_info_t *dev;
    int i;

    for (i = 0; i < ARRAY_SIZE(g_device_list); i++) {
     2da:	2500      	movs	r5, #0
        dev = &g_device_list[i];
        if (!strcmp(dev_name, dev->name)) {
     2dc:	4c08      	ldr	r4, [pc, #32]	; (300 <get_chip_info+0x28>)
     2de:	4f09      	ldr	r7, [pc, #36]	; (304 <get_chip_info+0x2c>)
{
     2e0:	9001      	str	r0, [sp, #4]
    for (i = 0; i < ARRAY_SIZE(g_device_list); i++) {
     2e2:	2d08      	cmp	r5, #8
     2e4:	d101      	bne.n	2ea <get_chip_info+0x12>
            return dev;
        }
    }

    return NULL;
     2e6:	2000      	movs	r0, #0
     2e8:	e006      	b.n	2f8 <get_chip_info+0x20>
     2ea:	00ee      	lsls	r6, r5, #3
        if (!strcmp(dev_name, dev->name)) {
     2ec:	5931      	ldr	r1, [r6, r4]
     2ee:	9801      	ldr	r0, [sp, #4]
     2f0:	47b8      	blx	r7
     2f2:	2800      	cmp	r0, #0
     2f4:	d101      	bne.n	2fa <get_chip_info+0x22>
        dev = &g_device_list[i];
     2f6:	19a0      	adds	r0, r4, r6
}
     2f8:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
    for (i = 0; i < ARRAY_SIZE(g_device_list); i++) {
     2fa:	3501      	adds	r5, #1
     2fc:	e7f1      	b.n	2e2 <get_chip_info+0xa>
     2fe:	46c0      	nop			; (mov r8, r8)
     300:	00004568 	.word	0x00004568
     304:	0000441b 	.word	0x0000441b

00000308 <dev_get_nvm_info>:
    @type: NVM type
    @info: chip flash information
    @return 0 successful, other value failed
*/
int dev_get_nvm_info(const void *dev_ptr, NVM_TYPE_T type, nvm_info_t * info)
{
     308:	b510      	push	{r4, lr}
     30a:	0013      	movs	r3, r2
     30c:	0004      	movs	r4, r0
    get NVM information
    */
    const device_info_t *dev = (const device_info_t *)dev_ptr;
    const nvm_info_t *iblock;

    switch (type) {
     30e:	2903      	cmp	r1, #3
     310:	d812      	bhi.n	338 <dev_get_nvm_info+0x30>
     312:	0008      	movs	r0, r1
     314:	6861      	ldr	r1, [r4, #4]
     316:	f003 f949 	bl	35ac <__gnu_thumb1_case_uqi>
     31a:	0902      	.short	0x0902
     31c:	0d0b      	.short	0x0d0b
    case NVM_FLASH:
        iblock = &dev->mmap->flash;
     31e:	3104      	adds	r1, #4
        break;
    default:
        return -2;
    }

    memcpy(info, iblock, sizeof(*info));
     320:	0018      	movs	r0, r3
     322:	2206      	movs	r2, #6
     324:	4b06      	ldr	r3, [pc, #24]	; (340 <dev_get_nvm_info+0x38>)
     326:	4798      	blx	r3

    return 0;
     328:	2000      	movs	r0, #0
}
     32a:	bd10      	pop	{r4, pc}
        iblock = &dev->mmap->eeprom;
     32c:	311c      	adds	r1, #28
        break;
     32e:	e7f7      	b.n	320 <dev_get_nvm_info+0x18>
        iblock = &dev->mmap->userrow;
     330:	3116      	adds	r1, #22
        break;
     332:	e7f5      	b.n	320 <dev_get_nvm_info+0x18>
        iblock = &dev->mmap->fuse;
     334:	3110      	adds	r1, #16
        break;
     336:	e7f3      	b.n	320 <dev_get_nvm_info+0x18>
        return -2;
     338:	2002      	movs	r0, #2
     33a:	4240      	negs	r0, r0
     33c:	e7f5      	b.n	32a <dev_get_nvm_info+0x22>
     33e:	46c0      	nop			; (mov r8, r8)
     340:	000043f9 	.word	0x000043f9

00000344 <msleep>:

#include "hal_delay.h"

//delay millisecond here
void msleep(int ms)
{
     344:	b510      	push	{r4, lr}
    /*usleep(ms * 1000);*/
	delay_ms(ms);
     346:	b280      	uxth	r0, r0
     348:	4b01      	ldr	r3, [pc, #4]	; (350 <msleep+0xc>)
     34a:	4798      	blx	r3
}
     34c:	bd10      	pop	{r4, pc}
     34e:	46c0      	nop			; (mov r8, r8)
     350:	00002aa5 	.word	0x00002aa5

00000354 <DBG>:
    va_end(args);
}
#else
void DBG(verbose_t level, char *format, const unsigned char *data, int len, const unsigned char * dformat, ...)
{
}
     354:	4770      	bx	lr

00000356 <DBG_INFO>:

void DBG_INFO(verbose_t level, char* format, ...)
{
     356:	b40e      	push	{r1, r2, r3}
}
     358:	b003      	add	sp, #12
     35a:	4770      	bx	lr

0000035c <err_cb_USART_0>:
	/* Transfer completed */
}
static void err_cb_USART_0(const struct usart_async_descriptor *const io_descr)
{
	/* Transfer completed */
}
     35c:	4770      	bx	lr

0000035e <rx_cb_USART_0>:
     35e:	4770      	bx	lr

00000360 <tx_cb_USART_0>:
     360:	4770      	bx	lr
	...

00000364 <SetPortState>:
* @param BYTE byteSize The data size
* @param BYTE stopBits The number of stop bits ONESTOPBIT|ONE5STOPBITS|TWOSTOPBITS
* @param BYTE parity The partity checksum  NOPARITY|ODDPARITY|EVENPARITY
* @returns 0 - success, other value failed code
*/
int SetPortState(void *ptr_ser, const SER_PORT_STATE_T *st) {
     364:	b570      	push	{r4, r5, r6, lr}

    //if (!VALID_SER(ser))
    //    return ERROR_PTR;
			
	// Set baund rate
	usart_async_set_baud_rate(&USART_0, USART_BAUD_RATE(st->baudRate));
     366:	6808      	ldr	r0, [r1, #0]
     368:	4b23      	ldr	r3, [pc, #140]	; (3f8 <SetPortState+0x94>)
int SetPortState(void *ptr_ser, const SER_PORT_STATE_T *st) {
     36a:	000d      	movs	r5, r1
	usart_async_set_baud_rate(&USART_0, USART_BAUD_RATE(st->baudRate));
     36c:	4798      	blx	r3
     36e:	2193      	movs	r1, #147	; 0x93
     370:	4b22      	ldr	r3, [pc, #136]	; (3fc <SetPortState+0x98>)
     372:	05c9      	lsls	r1, r1, #23
     374:	4798      	blx	r3
     376:	4b22      	ldr	r3, [pc, #136]	; (400 <SetPortState+0x9c>)
     378:	4922      	ldr	r1, [pc, #136]	; (404 <SetPortState+0xa0>)
     37a:	4798      	blx	r3
     37c:	1c01      	adds	r1, r0, #0
     37e:	208f      	movs	r0, #143	; 0x8f
     380:	4b21      	ldr	r3, [pc, #132]	; (408 <SetPortState+0xa4>)
     382:	05c0      	lsls	r0, r0, #23
     384:	4798      	blx	r3
     386:	4b21      	ldr	r3, [pc, #132]	; (40c <SetPortState+0xa8>)
     388:	4798      	blx	r3
     38a:	4c21      	ldr	r4, [pc, #132]	; (410 <SetPortState+0xac>)
     38c:	0001      	movs	r1, r0
     38e:	4b21      	ldr	r3, [pc, #132]	; (414 <SetPortState+0xb0>)
     390:	0020      	movs	r0, r4
     392:	4798      	blx	r3

    /* Set databits */
	enum usart_character_size charSize;
    switch (st->byteSize) {
     394:	7928      	ldrb	r0, [r5, #4]
     396:	3805      	subs	r0, #5
     398:	2803      	cmp	r0, #3
     39a:	d825      	bhi.n	3e8 <SetPortState+0x84>
     39c:	f003 f906 	bl	35ac <__gnu_thumb1_case_uqi>
     3a0:	1e1c0220 	.word	0x1e1c0220
        case 5:
            charSize = USART_CHARACTER_SIZE_5BITS;
            break;
        case 6:
            charSize = USART_CHARACTER_SIZE_6BITS;
     3a4:	2106      	movs	r1, #6
            break;
        default:
            charSize = USART_CHARACTER_SIZE_9BITS;
            return -6;
    }
	usart_async_set_character_size(&USART_0, charSize);
     3a6:	0020      	movs	r0, r4
     3a8:	4b1b      	ldr	r3, [pc, #108]	; (418 <SetPortState+0xb4>)
     3aa:	4798      	blx	r3

    /* Set stopbits */
	enum usart_stop_bits stopBits;
    switch (st->stopBits) {
     3ac:	7969      	ldrb	r1, [r5, #5]
     3ae:	2900      	cmp	r1, #0
     3b0:	d002      	beq.n	3b8 <SetPortState+0x54>
     3b2:	2902      	cmp	r1, #2
     3b4:	d11b      	bne.n	3ee <SetPortState+0x8a>
        case ONESTOPBIT:
            stopBits = USART_STOP_BITS_ONE;
            break;
        case TWOSTOPBITS:
            stopBits = USART_STOP_BITS_TWO;
     3b6:	3901      	subs	r1, #1
            break;
        default:
            stopBits = USART_STOP_BITS_ONE;
            return -7;
    }
	usart_async_set_stopbits(&USART_0, stopBits);
     3b8:	0020      	movs	r0, r4
     3ba:	4b18      	ldr	r3, [pc, #96]	; (41c <SetPortState+0xb8>)
     3bc:	4798      	blx	r3

    /* Set parity */
	enum usart_parity parity;
    switch (st->parity) {
     3be:	79a9      	ldrb	r1, [r5, #6]
     3c0:	2901      	cmp	r1, #1
     3c2:	d004      	beq.n	3ce <SetPortState+0x6a>
     3c4:	2900      	cmp	r1, #0
     3c6:	d00d      	beq.n	3e4 <SetPortState+0x80>
     3c8:	2902      	cmp	r1, #2
     3ca:	d112      	bne.n	3f2 <SetPortState+0x8e>
            break;
        case ODDPARITY:
            parity = USART_PARITY_ODD;
            break;
        case EVENPARITY:
            parity = USART_PARITY_EVEN;
     3cc:	2100      	movs	r1, #0
            break;
        default:
            parity = USART_PARITY_NONE;
            return -8;
    }
	usart_async_set_parity(&USART_0, parity);
     3ce:	0020      	movs	r0, r4
     3d0:	4b13      	ldr	r3, [pc, #76]	; (420 <SetPortState+0xbc>)
     3d2:	4798      	blx	r3

    return 0;
     3d4:	2000      	movs	r0, #0
}
     3d6:	bd70      	pop	{r4, r5, r6, pc}
            charSize = USART_CHARACTER_SIZE_7BITS;
     3d8:	2107      	movs	r1, #7
            break;
     3da:	e7e4      	b.n	3a6 <SetPortState+0x42>
            charSize = USART_CHARACTER_SIZE_8BITS;
     3dc:	2100      	movs	r1, #0
            break;
     3de:	e7e2      	b.n	3a6 <SetPortState+0x42>
            charSize = USART_CHARACTER_SIZE_5BITS;
     3e0:	2105      	movs	r1, #5
     3e2:	e7e0      	b.n	3a6 <SetPortState+0x42>
            parity = USART_PARITY_NONE;
     3e4:	2102      	movs	r1, #2
     3e6:	e7f2      	b.n	3ce <SetPortState+0x6a>
            return -6;
     3e8:	2006      	movs	r0, #6
            return -8;
     3ea:	4240      	negs	r0, r0
     3ec:	e7f3      	b.n	3d6 <SetPortState+0x72>
            return -7;
     3ee:	2007      	movs	r0, #7
     3f0:	e7fb      	b.n	3ea <SetPortState+0x86>
            return -8;
     3f2:	2008      	movs	r0, #8
     3f4:	e7f9      	b.n	3ea <SetPortState+0x86>
     3f6:	46c0      	nop			; (mov r8, r8)
     3f8:	00004125 	.word	0x00004125
     3fc:	00003b6d 	.word	0x00003b6d
     400:	000038dd 	.word	0x000038dd
     404:	4b742400 	.word	0x4b742400
     408:	00003dad 	.word	0x00003dad
     40c:	000038ad 	.word	0x000038ad
     410:	200023e8 	.word	0x200023e8
     414:	00002ded 	.word	0x00002ded
     418:	00002e7d 	.word	0x00002e7d
     41c:	00002e4d 	.word	0x00002e4d
     420:	00002e1d 	.word	0x00002e1d

00000424 <OpenPort>:
HANDLE OpenPort(const void *port, const SER_PORT_STATE_T *st) {
     424:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
     426:	000e      	movs	r6, r1
	usart_async_register_callback(&USART_0, USART_ASYNC_TXC_CB, tx_cb_USART_0);
     428:	4c12      	ldr	r4, [pc, #72]	; (474 <OpenPort+0x50>)
     42a:	4d13      	ldr	r5, [pc, #76]	; (478 <OpenPort+0x54>)
     42c:	4a13      	ldr	r2, [pc, #76]	; (47c <OpenPort+0x58>)
     42e:	2101      	movs	r1, #1
     430:	0020      	movs	r0, r4
     432:	47a8      	blx	r5
	usart_async_register_callback(&USART_0, USART_ASYNC_RXC_CB, rx_cb_USART_0);
     434:	4a12      	ldr	r2, [pc, #72]	; (480 <OpenPort+0x5c>)
     436:	2100      	movs	r1, #0
     438:	0020      	movs	r0, r4
     43a:	47a8      	blx	r5
	usart_async_register_callback(&USART_0, USART_ASYNC_ERROR_CB, err_cb_USART_0);
     43c:	4a11      	ldr	r2, [pc, #68]	; (484 <OpenPort+0x60>)
     43e:	2102      	movs	r1, #2
     440:	0020      	movs	r0, r4
     442:	47a8      	blx	r5
	usart_async_get_io_descriptor(&USART_0, &iodes);
     444:	4f10      	ldr	r7, [pc, #64]	; (488 <OpenPort+0x64>)
     446:	4b11      	ldr	r3, [pc, #68]	; (48c <OpenPort+0x68>)
     448:	0039      	movs	r1, r7
     44a:	0020      	movs	r0, r4
     44c:	4798      	blx	r3
	usart_async_enable(&USART_0);
     44e:	4b10      	ldr	r3, [pc, #64]	; (490 <OpenPort+0x6c>)
     450:	0020      	movs	r0, r4
     452:	4798      	blx	r3
    ser->mgwd = UPD_SERCOM_MAGIC_WORD;
     454:	4d0f      	ldr	r5, [pc, #60]	; (494 <OpenPort+0x70>)
     456:	4b10      	ldr	r3, [pc, #64]	; (498 <OpenPort+0x74>)
    if (SetPortState(ser, st) != 0) {
     458:	0031      	movs	r1, r6
    ser->mgwd = UPD_SERCOM_MAGIC_WORD;
     45a:	602b      	str	r3, [r5, #0]
    ser->io = iodes;
     45c:	683b      	ldr	r3, [r7, #0]
    if (SetPortState(ser, st) != 0) {
     45e:	0028      	movs	r0, r5
    ser->io = iodes;
     460:	606b      	str	r3, [r5, #4]
    if (SetPortState(ser, st) != 0) {
     462:	4b0e      	ldr	r3, [pc, #56]	; (49c <OpenPort+0x78>)
     464:	4798      	blx	r3
     466:	2800      	cmp	r0, #0
     468:	d002      	beq.n	470 <OpenPort+0x4c>
    upd_sercom_t *ser = (upd_sercom_t *)ptr_ser;

    if (!ser)
        return;

    usart_async_disable(&USART_0);
     46a:	0020      	movs	r0, r4
     46c:	4b0c      	ldr	r3, [pc, #48]	; (4a0 <OpenPort+0x7c>)
     46e:	4798      	blx	r3
}
     470:	0028      	movs	r0, r5
     472:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
     474:	200023e8 	.word	0x200023e8
     478:	00002d81 	.word	0x00002d81
     47c:	00000361 	.word	0x00000361
     480:	0000035f 	.word	0x0000035f
     484:	0000035d 	.word	0x0000035d
     488:	20002394 	.word	0x20002394
     48c:	00002d59 	.word	0x00002d59
     490:	00002d01 	.word	0x00002d01
     494:	20002398 	.word	0x20002398
     498:	0000a5a5 	.word	0x0000a5a5
     49c:	00000365 	.word	0x00000365
     4a0:	00002d2d 	.word	0x00002d2d

000004a4 <FlushPort>:
{
     4a4:	b510      	push	{r4, lr}
    if (!VALID_SER(ser))
     4a6:	2800      	cmp	r0, #0
     4a8:	d008      	beq.n	4bc <FlushPort+0x18>
     4aa:	4b06      	ldr	r3, [pc, #24]	; (4c4 <FlushPort+0x20>)
     4ac:	6802      	ldr	r2, [r0, #0]
     4ae:	429a      	cmp	r2, r3
     4b0:	d104      	bne.n	4bc <FlushPort+0x18>
    usart_async_flush_rx_buffer(&USART_0);
     4b2:	4805      	ldr	r0, [pc, #20]	; (4c8 <FlushPort+0x24>)
     4b4:	4b05      	ldr	r3, [pc, #20]	; (4cc <FlushPort+0x28>)
     4b6:	4798      	blx	r3
    return 0;
     4b8:	2000      	movs	r0, #0
}
     4ba:	bd10      	pop	{r4, pc}
        return ERROR_PTR;
     4bc:	2001      	movs	r0, #1
     4be:	4240      	negs	r0, r0
     4c0:	e7fb      	b.n	4ba <FlushPort+0x16>
     4c2:	46c0      	nop			; (mov r8, r8)
     4c4:	0000a5a5 	.word	0x0000a5a5
     4c8:	200023e8 	.word	0x200023e8
     4cc:	00002ead 	.word	0x00002ead

000004d0 <SendData>:
int SendData(void *ptr_ser, const /*LPVOID*/u8 *tx, DWORD len) {
     4d0:	b510      	push	{r4, lr}
    if (!VALID_SER(ser))
     4d2:	2800      	cmp	r0, #0
     4d4:	d009      	beq.n	4ea <SendData+0x1a>
     4d6:	4b06      	ldr	r3, [pc, #24]	; (4f0 <SendData+0x20>)
     4d8:	6804      	ldr	r4, [r0, #0]
     4da:	429c      	cmp	r4, r3
     4dc:	d105      	bne.n	4ea <SendData+0x1a>
	written = io_write(ser->io, tx, len);
     4de:	b292      	uxth	r2, r2
     4e0:	6840      	ldr	r0, [r0, #4]
     4e2:	4b04      	ldr	r3, [pc, #16]	; (4f4 <SendData+0x24>)
     4e4:	4798      	blx	r3
    return 0;
     4e6:	2000      	movs	r0, #0
}
     4e8:	bd10      	pop	{r4, pc}
        return ERROR_PTR;
     4ea:	2001      	movs	r0, #1
     4ec:	4240      	negs	r0, r0
     4ee:	e7fb      	b.n	4e8 <SendData+0x18>
     4f0:	0000a5a5 	.word	0x0000a5a5
     4f4:	00002ac5 	.word	0x00002ac5

000004f8 <ReadData>:
int ReadData(void *ptr_ser, LPVOID rx, DWORD len) {
     4f8:	b510      	push	{r4, lr}
    reading = io_read(ser->io, rx, len);
     4fa:	b292      	uxth	r2, r2
     4fc:	6840      	ldr	r0, [r0, #4]
     4fe:	4b01      	ldr	r3, [pc, #4]	; (504 <ReadData+0xc>)
     500:	4798      	blx	r3
}
     502:	bd10      	pop	{r4, pc}
     504:	00002af5 	.word	0x00002af5

00000508 <ClosePort>:
void ClosePort(void *ptr_ser) {
     508:	b510      	push	{r4, lr}
    if (!ser)
     50a:	2800      	cmp	r0, #0
     50c:	d002      	beq.n	514 <ClosePort+0xc>
    usart_async_disable(&USART_0);
     50e:	4802      	ldr	r0, [pc, #8]	; (518 <ClosePort+0x10>)
     510:	4b02      	ldr	r3, [pc, #8]	; (51c <ClosePort+0x14>)
     512:	4798      	blx	r3
}
     514:	bd10      	pop	{r4, pc}
     516:	46c0      	nop			; (mov r8, r8)
     518:	200023e8 	.word	0x200023e8
     51c:	00002d2d 	.word	0x00002d2d

00000520 <updi_application_init>:
    @dev: point chip dev object
    @return APP ptr, NULL if failed
*/
upd_application_t application;
void *updi_application_init(const char *port, int baud, void *dev)
{
     520:	b570      	push	{r4, r5, r6, lr}
     522:	0005      	movs	r5, r0
     524:	000e      	movs	r6, r1
    upd_application_t *app = NULL;
    void *link;

    DBG_INFO(APP_DEBUG, "<APP> init application");
     526:	2003      	movs	r0, #3
     528:	4908      	ldr	r1, [pc, #32]	; (54c <updi_application_init+0x2c>)
     52a:	4b09      	ldr	r3, [pc, #36]	; (550 <updi_application_init+0x30>)
{
     52c:	0014      	movs	r4, r2
    DBG_INFO(APP_DEBUG, "<APP> init application");
     52e:	4798      	blx	r3

    link = updi_datalink_init(port, baud);
     530:	4b08      	ldr	r3, [pc, #32]	; (554 <updi_application_init+0x34>)
     532:	0031      	movs	r1, r6
     534:	0028      	movs	r0, r5
     536:	4798      	blx	r3
    upd_application_t *app = NULL;
     538:	1e03      	subs	r3, r0, #0
    if (link) {
     53a:	d004      	beq.n	546 <updi_application_init+0x26>
        app = &application;//(upd_application_t *)malloc(sizeof(*app));
        app->mgwd = UPD_APPLICATION_MAGIC_WORD;
     53c:	4b06      	ldr	r3, [pc, #24]	; (558 <updi_application_init+0x38>)
     53e:	4a07      	ldr	r2, [pc, #28]	; (55c <updi_application_init+0x3c>)
        app->link = (void *)link;
     540:	6058      	str	r0, [r3, #4]
        app->mgwd = UPD_APPLICATION_MAGIC_WORD;
     542:	601a      	str	r2, [r3, #0]
        app->dev = (device_info_t *)dev;
     544:	609c      	str	r4, [r3, #8]
    }

    return app;
}
     546:	0018      	movs	r0, r3
     548:	bd70      	pop	{r4, r5, r6, pc}
     54a:	46c0      	nop			; (mov r8, r8)
     54c:	00004695 	.word	0x00004695
     550:	00000357 	.word	0x00000357
     554:	000014c9 	.word	0x000014c9
     558:	200023a0 	.word	0x200023a0
     55c:	0000b4b4 	.word	0x0000b4b4

00000560 <updi_application_deinit>:
    APP object destroy
    @app_ptr: APP object pointer, acquired from updi_application_init()
    @no return
*/
void updi_application_deinit(void *app_ptr)
{
     560:	b510      	push	{r4, lr}
     562:	1e04      	subs	r4, r0, #0
    upd_application_t *app = (upd_application_t *)app_ptr;
    if (VALID_APP(app)) {
     564:	d00a      	beq.n	57c <updi_application_deinit+0x1c>
     566:	4b06      	ldr	r3, [pc, #24]	; (580 <updi_application_deinit+0x20>)
     568:	6802      	ldr	r2, [r0, #0]
     56a:	429a      	cmp	r2, r3
     56c:	d106      	bne.n	57c <updi_application_deinit+0x1c>
        DBG_INFO(APP_DEBUG, "<APP> deinit application");
     56e:	2003      	movs	r0, #3
     570:	4b04      	ldr	r3, [pc, #16]	; (584 <updi_application_deinit+0x24>)
     572:	4905      	ldr	r1, [pc, #20]	; (588 <updi_application_deinit+0x28>)
     574:	4798      	blx	r3

        updi_datalink_deinit(LINK(app));
     576:	6860      	ldr	r0, [r4, #4]
     578:	4b04      	ldr	r3, [pc, #16]	; (58c <updi_application_deinit+0x2c>)
     57a:	4798      	blx	r3
        //free(app);
    }
}
     57c:	bd10      	pop	{r4, pc}
     57e:	46c0      	nop			; (mov r8, r8)
     580:	0000b4b4 	.word	0x0000b4b4
     584:	00000357 	.word	0x00000357
     588:	000046ac 	.word	0x000046ac
     58c:	000011fd 	.word	0x000011fd

00000590 <app_in_prog_mode>:
    APP check whether device in Unlocked Mode
    @app_ptr: APP object pointer, acquired from updi_application_init()
    @return true if Unlocked, other value if Locked
*/
bool app_in_prog_mode(void *app_ptr)
{
     590:	b537      	push	{r0, r1, r2, r4, r5, lr}
    u8 status;
    int result;
    bool ret = false;

    if (!VALID_APP(app))
        return ret;
     592:	1e04      	subs	r4, r0, #0
    if (!VALID_APP(app))
     594:	d015      	beq.n	5c2 <app_in_prog_mode+0x32>
     596:	4b0c      	ldr	r3, [pc, #48]	; (5c8 <app_in_prog_mode+0x38>)
     598:	6802      	ldr	r2, [r0, #0]
        return ret;
     59a:	2400      	movs	r4, #0
    if (!VALID_APP(app))
     59c:	429a      	cmp	r2, r3
     59e:	d110      	bne.n	5c2 <app_in_prog_mode+0x32>

    result = _link_ldcs(LINK(app), UPDI_ASI_SYS_STATUS, &status);
     5a0:	466b      	mov	r3, sp
     5a2:	1ddd      	adds	r5, r3, #7
     5a4:	002a      	movs	r2, r5
     5a6:	210b      	movs	r1, #11
     5a8:	6840      	ldr	r0, [r0, #4]
     5aa:	4b08      	ldr	r3, [pc, #32]	; (5cc <app_in_prog_mode+0x3c>)
     5ac:	4798      	blx	r3
    if (!result && status & (1 << UPDI_ASI_SYS_STATUS_NVMPROG))
     5ae:	42a0      	cmp	r0, r4
     5b0:	d102      	bne.n	5b8 <app_in_prog_mode+0x28>
     5b2:	782c      	ldrb	r4, [r5, #0]
     5b4:	0724      	lsls	r4, r4, #28
     5b6:	0fe4      	lsrs	r4, r4, #31
        ret = true;

    DBG_INFO(APP_DEBUG, "<APP> In PROG mode: %d", ret);
     5b8:	0022      	movs	r2, r4
     5ba:	4905      	ldr	r1, [pc, #20]	; (5d0 <app_in_prog_mode+0x40>)
     5bc:	2003      	movs	r0, #3
     5be:	4b05      	ldr	r3, [pc, #20]	; (5d4 <app_in_prog_mode+0x44>)
     5c0:	4798      	blx	r3

    return ret;
}
     5c2:	0020      	movs	r0, r4
     5c4:	bd3e      	pop	{r1, r2, r3, r4, r5, pc}
     5c6:	46c0      	nop			; (mov r8, r8)
     5c8:	0000b4b4 	.word	0x0000b4b4
     5cc:	0000122d 	.word	0x0000122d
     5d0:	000046c5 	.word	0x000046c5
     5d4:	00000357 	.word	0x00000357

000005d8 <app_wait_unlocked>:
    @app_ptr: APP object pointer, acquired from updi_application_init()
    @timeout: max waiting time
    @return 0 successful, other value if failed
*/
int app_wait_unlocked(void *app_ptr, int timeout)
{
     5d8:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
     5da:	0007      	movs	r7, r0
     5dc:	000d      	movs	r5, r1
    */
    upd_application_t *app = (upd_application_t *)app_ptr;
    u8 status;
    int result;

    if (!VALID_APP(app))
     5de:	2800      	cmp	r0, #0
     5e0:	d02c      	beq.n	63c <app_wait_unlocked+0x64>
     5e2:	4b17      	ldr	r3, [pc, #92]	; (640 <app_wait_unlocked+0x68>)
     5e4:	6802      	ldr	r2, [r0, #0]
     5e6:	429a      	cmp	r2, r3
     5e8:	d128      	bne.n	63c <app_wait_unlocked+0x64>
        return ERROR_PTR;

    DBG_INFO(APP_DEBUG, "<APP> Wait Unlock");
     5ea:	4916      	ldr	r1, [pc, #88]	; (644 <app_wait_unlocked+0x6c>)
     5ec:	2003      	movs	r0, #3
     5ee:	4b16      	ldr	r3, [pc, #88]	; (648 <app_wait_unlocked+0x70>)
     5f0:	4798      	blx	r3

    do {
        result = _link_ldcs(LINK(app), UPDI_ASI_SYS_STATUS, &status);
     5f2:	466b      	mov	r3, sp
     5f4:	1dde      	adds	r6, r3, #7
     5f6:	0032      	movs	r2, r6
     5f8:	210b      	movs	r1, #11
     5fa:	6878      	ldr	r0, [r7, #4]
     5fc:	4b13      	ldr	r3, [pc, #76]	; (64c <app_wait_unlocked+0x74>)
     5fe:	4798      	blx	r3
     600:	1e04      	subs	r4, r0, #0
        if (result) {
     602:	d014      	beq.n	62e <app_wait_unlocked+0x56>
            DBG_INFO(APP_DEBUG, "_link_ldcs failed %d", result);
     604:	0002      	movs	r2, r0
     606:	4912      	ldr	r1, [pc, #72]	; (650 <app_wait_unlocked+0x78>)
     608:	2003      	movs	r0, #3
     60a:	4b0f      	ldr	r3, [pc, #60]	; (648 <app_wait_unlocked+0x70>)
     60c:	4798      	blx	r3
        else {
            if (!(status & (1 << UPDI_ASI_SYS_STATUS_LOCKSTATUS)))
                break;
        }

        msleep(1);
     60e:	2001      	movs	r0, #1
     610:	4b10      	ldr	r3, [pc, #64]	; (654 <app_wait_unlocked+0x7c>)
    } while (--timeout > 0);
     612:	3d01      	subs	r5, #1
        msleep(1);
     614:	4798      	blx	r3
    } while (--timeout > 0);
     616:	2d00      	cmp	r5, #0
     618:	dceb      	bgt.n	5f2 <app_wait_unlocked+0x1a>

    if (timeout <= 0 || result) {
        DBG_INFO(APP_DEBUG, "Timeout waiting for device to unlock status %02x result %d", status, result);
     61a:	0023      	movs	r3, r4
     61c:	7832      	ldrb	r2, [r6, #0]
     61e:	4c0a      	ldr	r4, [pc, #40]	; (648 <app_wait_unlocked+0x70>)
     620:	490d      	ldr	r1, [pc, #52]	; (658 <app_wait_unlocked+0x80>)
     622:	2003      	movs	r0, #3
     624:	47a0      	blx	r4
        return -2;
     626:	2402      	movs	r4, #2
        return ERROR_PTR;
     628:	4264      	negs	r4, r4
    }

    return 0;
}
     62a:	0020      	movs	r0, r4
     62c:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
            if (!(status & (1 << UPDI_ASI_SYS_STATUS_LOCKSTATUS)))
     62e:	2201      	movs	r2, #1
     630:	7833      	ldrb	r3, [r6, #0]
     632:	4213      	tst	r3, r2
     634:	d1eb      	bne.n	60e <app_wait_unlocked+0x36>
    if (timeout <= 0 || result) {
     636:	2d00      	cmp	r5, #0
     638:	dcf7      	bgt.n	62a <app_wait_unlocked+0x52>
     63a:	e7ee      	b.n	61a <app_wait_unlocked+0x42>
        return ERROR_PTR;
     63c:	2401      	movs	r4, #1
     63e:	e7f3      	b.n	628 <app_wait_unlocked+0x50>
     640:	0000b4b4 	.word	0x0000b4b4
     644:	000046dc 	.word	0x000046dc
     648:	00000357 	.word	0x00000357
     64c:	0000122d 	.word	0x0000122d
     650:	000046ee 	.word	0x000046ee
     654:	00000345 	.word	0x00000345
     658:	00004703 	.word	0x00004703

0000065c <app_disable>:
APP disable updi interface
@app_ptr: APP object pointer, acquired from updi_application_init()
@return 0 successful, other value if failed
*/
int app_disable(void *app_ptr)
{
     65c:	b570      	push	{r4, r5, r6, lr}
     65e:	1e04      	subs	r4, r0, #0
    Disable UPDI interface temperarily
    */
    upd_application_t *app = (upd_application_t *)app_ptr;
    int result;

    if (!VALID_APP(app))
     660:	d015      	beq.n	68e <app_disable+0x32>
     662:	4b0c      	ldr	r3, [pc, #48]	; (694 <app_disable+0x38>)
     664:	6802      	ldr	r2, [r0, #0]
     666:	429a      	cmp	r2, r3
     668:	d111      	bne.n	68e <app_disable+0x32>
        return ERROR_PTR;

    DBG_INFO(APP_DEBUG, "<APP> Disable");
     66a:	490b      	ldr	r1, [pc, #44]	; (698 <app_disable+0x3c>)
     66c:	2003      	movs	r0, #3
     66e:	4d0b      	ldr	r5, [pc, #44]	; (69c <app_disable+0x40>)
     670:	47a8      	blx	r5

    result = link_stcs(LINK(app), UPDI_CS_CTRLB, (1 << UPDI_CTRLB_UPDIDIS_BIT) | (1 << UPDI_CTRLB_CCDETDIS_BIT));
     672:	220c      	movs	r2, #12
     674:	2103      	movs	r1, #3
     676:	6860      	ldr	r0, [r4, #4]
     678:	4b09      	ldr	r3, [pc, #36]	; (6a0 <app_disable+0x44>)
     67a:	4798      	blx	r3
    if (result) {
     67c:	2800      	cmp	r0, #0
     67e:	d005      	beq.n	68c <app_disable+0x30>
        DBG_INFO(APP_DEBUG, "link_stcs failed %d", result);
     680:	0002      	movs	r2, r0
     682:	4908      	ldr	r1, [pc, #32]	; (6a4 <app_disable+0x48>)
     684:	2003      	movs	r0, #3
     686:	47a8      	blx	r5
        return -2;
     688:	2002      	movs	r0, #2
        return ERROR_PTR;
     68a:	4240      	negs	r0, r0
    }

    return 0;
}
     68c:	bd70      	pop	{r4, r5, r6, pc}
        return ERROR_PTR;
     68e:	2001      	movs	r0, #1
     690:	e7fb      	b.n	68a <app_disable+0x2e>
     692:	46c0      	nop			; (mov r8, r8)
     694:	0000b4b4 	.word	0x0000b4b4
     698:	0000473e 	.word	0x0000473e
     69c:	00000357 	.word	0x00000357
     6a0:	0000135d 	.word	0x0000135d
     6a4:	0000474c 	.word	0x0000474c

000006a8 <app_reset>:
    @app_ptr: APP object pointer, acquired from updi_application_init()
    @apply_reset: true - set, false - clear
    @return 0 successful, other value if failed
*/
int app_reset(void *app_ptr, bool apply_reset)
{
     6a8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
     6aa:	0005      	movs	r5, r0
     6ac:	000e      	movs	r6, r1
    Applies or releases an UPDI reset condition
    */
    upd_application_t *app = (upd_application_t *)app_ptr;
    int result;

    if (!VALID_APP(app))
     6ae:	2800      	cmp	r0, #0
     6b0:	d020      	beq.n	6f4 <app_reset+0x4c>
     6b2:	4b11      	ldr	r3, [pc, #68]	; (6f8 <app_reset+0x50>)
     6b4:	6802      	ldr	r2, [r0, #0]
     6b6:	429a      	cmp	r2, r3
     6b8:	d11c      	bne.n	6f4 <app_reset+0x4c>
        return ERROR_PTR;

    DBG_INFO(APP_DEBUG, "<APP> Reset %d", apply_reset);
     6ba:	000a      	movs	r2, r1
     6bc:	2003      	movs	r0, #3
     6be:	490f      	ldr	r1, [pc, #60]	; (6fc <app_reset+0x54>)
     6c0:	4c0f      	ldr	r4, [pc, #60]	; (700 <app_reset+0x58>)
     6c2:	47a0      	blx	r4
     6c4:	4f0f      	ldr	r7, [pc, #60]	; (704 <app_reset+0x5c>)

    if (apply_reset) {
     6c6:	2e00      	cmp	r6, #0
     6c8:	d00f      	beq.n	6ea <app_reset+0x42>
        DBG_INFO(APP_DEBUG, "Apply reset");
     6ca:	490f      	ldr	r1, [pc, #60]	; (708 <app_reset+0x60>)
     6cc:	2003      	movs	r0, #3
     6ce:	47a0      	blx	r4
        result = link_stcs(LINK(app), UPDI_ASI_RESET_REQ, UPDI_RESET_REQ_VALUE);
     6d0:	2259      	movs	r2, #89	; 0x59
    }
    else {
        DBG_INFO(APP_DEBUG, "Release reset");
        result = link_stcs(LINK(app), UPDI_ASI_RESET_REQ, 0);
     6d2:	2108      	movs	r1, #8
     6d4:	6868      	ldr	r0, [r5, #4]
     6d6:	47b8      	blx	r7
    }

    if (result) {
     6d8:	2800      	cmp	r0, #0
     6da:	d005      	beq.n	6e8 <app_reset+0x40>
        DBG_INFO(APP_DEBUG, "link_stcs failed %d", result);
     6dc:	0002      	movs	r2, r0
     6de:	490b      	ldr	r1, [pc, #44]	; (70c <app_reset+0x64>)
     6e0:	2003      	movs	r0, #3
     6e2:	47a0      	blx	r4
        return -2;
     6e4:	2002      	movs	r0, #2
        return ERROR_PTR;
     6e6:	4240      	negs	r0, r0
    }

    return 0;
}
     6e8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
        DBG_INFO(APP_DEBUG, "Release reset");
     6ea:	4909      	ldr	r1, [pc, #36]	; (710 <app_reset+0x68>)
     6ec:	2003      	movs	r0, #3
     6ee:	47a0      	blx	r4
        result = link_stcs(LINK(app), UPDI_ASI_RESET_REQ, 0);
     6f0:	0032      	movs	r2, r6
     6f2:	e7ee      	b.n	6d2 <app_reset+0x2a>
        return ERROR_PTR;
     6f4:	2001      	movs	r0, #1
     6f6:	e7f6      	b.n	6e6 <app_reset+0x3e>
     6f8:	0000b4b4 	.word	0x0000b4b4
     6fc:	00004760 	.word	0x00004760
     700:	00000357 	.word	0x00000357
     704:	0000135d 	.word	0x0000135d
     708:	0000476f 	.word	0x0000476f
     70c:	0000474c 	.word	0x0000474c
     710:	0000477b 	.word	0x0000477b

00000714 <app_toggle_reset>:
    @app_ptr: APP object pointer, acquired from updi_application_init()
    @delay: Reset keep time before clear
    @return 0 successful, other value if failed
*/
int app_toggle_reset(void *app_ptr, int delay)
{
     714:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
     716:	1e04      	subs	r4, r0, #0
     718:	9101      	str	r1, [sp, #4]
    Toggle an UPDI reset condition
    */
    upd_application_t *app = (upd_application_t *)app_ptr;
    int result;

    if (!VALID_APP(app))
     71a:	d022      	beq.n	762 <app_toggle_reset+0x4e>
     71c:	4b12      	ldr	r3, [pc, #72]	; (768 <app_toggle_reset+0x54>)
     71e:	6802      	ldr	r2, [r0, #0]
     720:	429a      	cmp	r2, r3
     722:	d11e      	bne.n	762 <app_toggle_reset+0x4e>
        return ERROR_PTR;

    DBG_INFO(APP_DEBUG, "<APP> Toggle Reset");
     724:	4911      	ldr	r1, [pc, #68]	; (76c <app_toggle_reset+0x58>)
     726:	2003      	movs	r0, #3
     728:	4d11      	ldr	r5, [pc, #68]	; (770 <app_toggle_reset+0x5c>)
     72a:	47a8      	blx	r5

    //Toggle reset
    result = app_reset(app, true);
     72c:	2101      	movs	r1, #1
     72e:	0020      	movs	r0, r4
     730:	4f10      	ldr	r7, [pc, #64]	; (774 <app_toggle_reset+0x60>)
     732:	47b8      	blx	r7
     734:	1e06      	subs	r6, r0, #0
    if (result) {
     736:	d006      	beq.n	746 <app_toggle_reset+0x32>
        DBG_INFO(APP_DEBUG, "app_reset failed %d", result);
     738:	0002      	movs	r2, r0
     73a:	490f      	ldr	r1, [pc, #60]	; (778 <app_toggle_reset+0x64>)
     73c:	2003      	movs	r0, #3
     73e:	47a8      	blx	r5
        return -2;
     740:	2002      	movs	r0, #2
        return ERROR_PTR;
     742:	4240      	negs	r0, r0
        DBG_INFO(APP_DEBUG, "app_reset failed %d", result);
        return -3;
    }

    return 0;
}
     744:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
    msleep(delay);
     746:	9801      	ldr	r0, [sp, #4]
     748:	4b0c      	ldr	r3, [pc, #48]	; (77c <app_toggle_reset+0x68>)
     74a:	4798      	blx	r3
    result = app_reset(app, false);
     74c:	0031      	movs	r1, r6
     74e:	0020      	movs	r0, r4
     750:	47b8      	blx	r7
    if (result) {
     752:	2800      	cmp	r0, #0
     754:	d0f6      	beq.n	744 <app_toggle_reset+0x30>
        DBG_INFO(APP_DEBUG, "app_reset failed %d", result);
     756:	0002      	movs	r2, r0
     758:	4907      	ldr	r1, [pc, #28]	; (778 <app_toggle_reset+0x64>)
     75a:	2003      	movs	r0, #3
     75c:	47a8      	blx	r5
        return -3;
     75e:	2003      	movs	r0, #3
     760:	e7ef      	b.n	742 <app_toggle_reset+0x2e>
        return ERROR_PTR;
     762:	2001      	movs	r0, #1
     764:	e7ed      	b.n	742 <app_toggle_reset+0x2e>
     766:	46c0      	nop			; (mov r8, r8)
     768:	0000b4b4 	.word	0x0000b4b4
     76c:	00004789 	.word	0x00004789
     770:	00000357 	.word	0x00000357
     774:	000006a9 	.word	0x000006a9
     778:	0000479c 	.word	0x0000479c
     77c:	00000345 	.word	0x00000345

00000780 <app_unlock>:
{
     780:	b573      	push	{r0, r1, r4, r5, r6, lr}
     782:	1e04      	subs	r4, r0, #0
    if (!VALID_APP(app))
     784:	d03d      	beq.n	802 <app_unlock+0x82>
     786:	4b20      	ldr	r3, [pc, #128]	; (808 <app_unlock+0x88>)
     788:	6802      	ldr	r2, [r0, #0]
     78a:	429a      	cmp	r2, r3
     78c:	d139      	bne.n	802 <app_unlock+0x82>
    DBG_INFO(APP_DEBUG, "<APP> unlock");
     78e:	491f      	ldr	r1, [pc, #124]	; (80c <app_unlock+0x8c>)
     790:	2003      	movs	r0, #3
     792:	4d1f      	ldr	r5, [pc, #124]	; (810 <app_unlock+0x90>)
     794:	47a8      	blx	r5
    result = link_key(LINK(app), UPDI_KEY_64, UPDI_KEY_CHIPERASE);
     796:	4a1f      	ldr	r2, [pc, #124]	; (814 <app_unlock+0x94>)
     798:	2100      	movs	r1, #0
     79a:	6860      	ldr	r0, [r4, #4]
     79c:	4b1e      	ldr	r3, [pc, #120]	; (818 <app_unlock+0x98>)
     79e:	4798      	blx	r3
     7a0:	1e02      	subs	r2, r0, #0
    if (result) {
     7a2:	d005      	beq.n	7b0 <app_unlock+0x30>
        DBG_INFO(APP_DEBUG, "link_key failed %d", result);
     7a4:	2003      	movs	r0, #3
     7a6:	491d      	ldr	r1, [pc, #116]	; (81c <app_unlock+0x9c>)
     7a8:	47a8      	blx	r5
        return -2;
     7aa:	2002      	movs	r0, #2
        return ERROR_PTR;
     7ac:	4240      	negs	r0, r0
}
     7ae:	bd76      	pop	{r1, r2, r4, r5, r6, pc}
    result = _link_ldcs(LINK(app), UPDI_ASI_KEY_STATUS, &status);
     7b0:	466b      	mov	r3, sp
     7b2:	1dde      	adds	r6, r3, #7
     7b4:	0032      	movs	r2, r6
     7b6:	2107      	movs	r1, #7
     7b8:	6860      	ldr	r0, [r4, #4]
     7ba:	4b19      	ldr	r3, [pc, #100]	; (820 <app_unlock+0xa0>)
     7bc:	4798      	blx	r3
     7be:	1e02      	subs	r2, r0, #0
    if (result || !(status & (1 << UPDI_ASI_KEY_STATUS_CHIPERASE))) {
     7c0:	d102      	bne.n	7c8 <app_unlock+0x48>
     7c2:	7833      	ldrb	r3, [r6, #0]
     7c4:	071b      	lsls	r3, r3, #28
     7c6:	d405      	bmi.n	7d4 <app_unlock+0x54>
        DBG_INFO(APP_DEBUG, "_link_ldcs Chiperase Key not accepted(%d), status 0x%02x", result, status);
     7c8:	2003      	movs	r0, #3
     7ca:	7833      	ldrb	r3, [r6, #0]
     7cc:	4915      	ldr	r1, [pc, #84]	; (824 <app_unlock+0xa4>)
     7ce:	47a8      	blx	r5
        return -3;
     7d0:	2003      	movs	r0, #3
     7d2:	e7eb      	b.n	7ac <app_unlock+0x2c>
    result = app_toggle_reset(app_ptr, 1);
     7d4:	2101      	movs	r1, #1
     7d6:	0020      	movs	r0, r4
     7d8:	4b13      	ldr	r3, [pc, #76]	; (828 <app_unlock+0xa8>)
     7da:	4798      	blx	r3
     7dc:	1e02      	subs	r2, r0, #0
    if (result) {
     7de:	d004      	beq.n	7ea <app_unlock+0x6a>
        DBG_INFO(APP_DEBUG, "app_toggle_reset failed %d", result);
     7e0:	2003      	movs	r0, #3
     7e2:	4912      	ldr	r1, [pc, #72]	; (82c <app_unlock+0xac>)
     7e4:	47a8      	blx	r5
        return -4;
     7e6:	2004      	movs	r0, #4
     7e8:	e7e0      	b.n	7ac <app_unlock+0x2c>
    result = app_wait_unlocked(app, 100);
     7ea:	2164      	movs	r1, #100	; 0x64
     7ec:	0020      	movs	r0, r4
     7ee:	4b10      	ldr	r3, [pc, #64]	; (830 <app_unlock+0xb0>)
     7f0:	4798      	blx	r3
    if (result) {
     7f2:	2800      	cmp	r0, #0
     7f4:	d0db      	beq.n	7ae <app_unlock+0x2e>
        DBG_INFO(APP_DEBUG, "Failed to chip erase using key result %d", result);
     7f6:	0002      	movs	r2, r0
     7f8:	490e      	ldr	r1, [pc, #56]	; (834 <app_unlock+0xb4>)
     7fa:	2003      	movs	r0, #3
     7fc:	47a8      	blx	r5
        return -5;
     7fe:	2005      	movs	r0, #5
     800:	e7d4      	b.n	7ac <app_unlock+0x2c>
        return ERROR_PTR;
     802:	2001      	movs	r0, #1
     804:	e7d2      	b.n	7ac <app_unlock+0x2c>
     806:	46c0      	nop			; (mov r8, r8)
     808:	0000b4b4 	.word	0x0000b4b4
     80c:	000047b0 	.word	0x000047b0
     810:	00000357 	.word	0x00000357
     814:	000047bd 	.word	0x000047bd
     818:	00001b9d 	.word	0x00001b9d
     81c:	000047c6 	.word	0x000047c6
     820:	0000122d 	.word	0x0000122d
     824:	000047d9 	.word	0x000047d9
     828:	00000715 	.word	0x00000715
     82c:	00004812 	.word	0x00004812
     830:	000005d9 	.word	0x000005d9
     834:	0000482d 	.word	0x0000482d

00000838 <app_enter_progmode>:
{
     838:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
     83a:	1e06      	subs	r6, r0, #0
    if (!VALID_APP(app))
     83c:	d058      	beq.n	8f0 <app_enter_progmode+0xb8>
     83e:	4b2d      	ldr	r3, [pc, #180]	; (8f4 <app_enter_progmode+0xbc>)
     840:	6802      	ldr	r2, [r0, #0]
     842:	429a      	cmp	r2, r3
     844:	d154      	bne.n	8f0 <app_enter_progmode+0xb8>
    DBG_INFO(APP_DEBUG, "<APP> Enter Progmode");
     846:	492c      	ldr	r1, [pc, #176]	; (8f8 <app_enter_progmode+0xc0>)
     848:	2003      	movs	r0, #3
     84a:	4d2c      	ldr	r5, [pc, #176]	; (8fc <app_enter_progmode+0xc4>)
     84c:	47a8      	blx	r5
    if (app_in_prog_mode(app_ptr)) {
     84e:	0030      	movs	r0, r6
     850:	4f2b      	ldr	r7, [pc, #172]	; (900 <app_enter_progmode+0xc8>)
     852:	47b8      	blx	r7
     854:	1e04      	subs	r4, r0, #0
     856:	d005      	beq.n	864 <app_enter_progmode+0x2c>
        DBG_INFO(APP_DEBUG, "Already in NVM programming mode");
     858:	492a      	ldr	r1, [pc, #168]	; (904 <app_enter_progmode+0xcc>)
     85a:	2003      	movs	r0, #3
     85c:	47a8      	blx	r5
        return 0;
     85e:	2400      	movs	r4, #0
}
     860:	0020      	movs	r0, r4
     862:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
    DBG_INFO(APP_DEBUG, "Entering NVM programming mode");
     864:	4928      	ldr	r1, [pc, #160]	; (908 <app_enter_progmode+0xd0>)
     866:	2003      	movs	r0, #3
     868:	47a8      	blx	r5
    result = link_key(LINK(app), UPDI_KEY_64, UPDI_KEY_NVM);
     86a:	4a28      	ldr	r2, [pc, #160]	; (90c <app_enter_progmode+0xd4>)
     86c:	0021      	movs	r1, r4
     86e:	6870      	ldr	r0, [r6, #4]
     870:	4b27      	ldr	r3, [pc, #156]	; (910 <app_enter_progmode+0xd8>)
     872:	4798      	blx	r3
     874:	1e02      	subs	r2, r0, #0
    if (result) {
     876:	d005      	beq.n	884 <app_enter_progmode+0x4c>
        DBG_INFO(APP_DEBUG, "link_key failed %d", result);
     878:	4926      	ldr	r1, [pc, #152]	; (914 <app_enter_progmode+0xdc>)
     87a:	2003      	movs	r0, #3
     87c:	47a8      	blx	r5
        return -2;
     87e:	2402      	movs	r4, #2
        return ERROR_PTR;
     880:	4264      	negs	r4, r4
     882:	e7ed      	b.n	860 <app_enter_progmode+0x28>
    result = _link_ldcs(LINK(app), UPDI_ASI_KEY_STATUS, &status);
     884:	466b      	mov	r3, sp
     886:	1ddc      	adds	r4, r3, #7
     888:	0022      	movs	r2, r4
     88a:	2107      	movs	r1, #7
     88c:	6870      	ldr	r0, [r6, #4]
     88e:	4b22      	ldr	r3, [pc, #136]	; (918 <app_enter_progmode+0xe0>)
     890:	4798      	blx	r3
     892:	1e02      	subs	r2, r0, #0
    if (result || !(status & (1 << UPDI_ASI_KEY_STATUS_NVMPROG))) {
     894:	d102      	bne.n	89c <app_enter_progmode+0x64>
     896:	7823      	ldrb	r3, [r4, #0]
     898:	06db      	lsls	r3, r3, #27
     89a:	d405      	bmi.n	8a8 <app_enter_progmode+0x70>
        DBG_INFO(APP_DEBUG, "_link_ldcs Nvm Key not accepted(%d), status 0x%02x", result, status);
     89c:	7823      	ldrb	r3, [r4, #0]
     89e:	491f      	ldr	r1, [pc, #124]	; (91c <app_enter_progmode+0xe4>)
     8a0:	2003      	movs	r0, #3
     8a2:	47a8      	blx	r5
        return -3;
     8a4:	2403      	movs	r4, #3
     8a6:	e7eb      	b.n	880 <app_enter_progmode+0x48>
    result = app_toggle_reset(app_ptr, 1);
     8a8:	2101      	movs	r1, #1
     8aa:	0030      	movs	r0, r6
     8ac:	4b1c      	ldr	r3, [pc, #112]	; (920 <app_enter_progmode+0xe8>)
     8ae:	4798      	blx	r3
     8b0:	1e02      	subs	r2, r0, #0
    if (result) {
     8b2:	d004      	beq.n	8be <app_enter_progmode+0x86>
        DBG_INFO(APP_DEBUG, "app_toggle_reset failed %d", result);
     8b4:	491b      	ldr	r1, [pc, #108]	; (924 <app_enter_progmode+0xec>)
     8b6:	2003      	movs	r0, #3
     8b8:	47a8      	blx	r5
        return -4;
     8ba:	2404      	movs	r4, #4
     8bc:	e7e0      	b.n	880 <app_enter_progmode+0x48>
    result = app_wait_unlocked(app_ptr, 100);
     8be:	2164      	movs	r1, #100	; 0x64
     8c0:	0030      	movs	r0, r6
     8c2:	4b19      	ldr	r3, [pc, #100]	; (928 <app_enter_progmode+0xf0>)
     8c4:	4798      	blx	r3
     8c6:	1e04      	subs	r4, r0, #0
    if (result) {
     8c8:	d005      	beq.n	8d6 <app_enter_progmode+0x9e>
        DBG_INFO(APP_DEBUG, "Failed to enter NVM programming mode: device is locked result %d", result);
     8ca:	0002      	movs	r2, r0
     8cc:	4917      	ldr	r1, [pc, #92]	; (92c <app_enter_progmode+0xf4>)
     8ce:	2003      	movs	r0, #3
     8d0:	47a8      	blx	r5
        return -5;
     8d2:	2405      	movs	r4, #5
     8d4:	e7d4      	b.n	880 <app_enter_progmode+0x48>
    if (!app_in_prog_mode(app_ptr)) {
     8d6:	0030      	movs	r0, r6
     8d8:	47b8      	blx	r7
     8da:	2800      	cmp	r0, #0
     8dc:	d104      	bne.n	8e8 <app_enter_progmode+0xb0>
        DBG_INFO(APP_DEBUG, "Failed to enter NVM programming mode");
     8de:	4914      	ldr	r1, [pc, #80]	; (930 <app_enter_progmode+0xf8>)
     8e0:	3003      	adds	r0, #3
     8e2:	47a8      	blx	r5
        return -6;
     8e4:	2406      	movs	r4, #6
     8e6:	e7cb      	b.n	880 <app_enter_progmode+0x48>
        DBG_INFO(APP_DEBUG, "Now in NVM programming mode");
     8e8:	4912      	ldr	r1, [pc, #72]	; (934 <app_enter_progmode+0xfc>)
     8ea:	2003      	movs	r0, #3
     8ec:	47a8      	blx	r5
        return 0;
     8ee:	e7b7      	b.n	860 <app_enter_progmode+0x28>
        return ERROR_PTR;
     8f0:	2401      	movs	r4, #1
     8f2:	e7c5      	b.n	880 <app_enter_progmode+0x48>
     8f4:	0000b4b4 	.word	0x0000b4b4
     8f8:	00004856 	.word	0x00004856
     8fc:	00000357 	.word	0x00000357
     900:	00000591 	.word	0x00000591
     904:	0000486b 	.word	0x0000486b
     908:	00005357 	.word	0x00005357
     90c:	0000488b 	.word	0x0000488b
     910:	00001b9d 	.word	0x00001b9d
     914:	000047c6 	.word	0x000047c6
     918:	0000122d 	.word	0x0000122d
     91c:	00004894 	.word	0x00004894
     920:	00000715 	.word	0x00000715
     924:	00004812 	.word	0x00004812
     928:	000005d9 	.word	0x000005d9
     92c:	000048c7 	.word	0x000048c7
     930:	00004908 	.word	0x00004908
     934:	0000492d 	.word	0x0000492d

00000938 <app_leave_progmode>:
{
     938:	b570      	push	{r4, r5, r6, lr}
     93a:	1e04      	subs	r4, r0, #0
    if (!VALID_APP(app))
     93c:	d01e      	beq.n	97c <app_leave_progmode+0x44>
     93e:	4b10      	ldr	r3, [pc, #64]	; (980 <app_leave_progmode+0x48>)
     940:	6802      	ldr	r2, [r0, #0]
     942:	429a      	cmp	r2, r3
     944:	d11a      	bne.n	97c <app_leave_progmode+0x44>
    DBG_INFO(APP_DEBUG, "<APP> Leaving program mode");
     946:	490f      	ldr	r1, [pc, #60]	; (984 <app_leave_progmode+0x4c>)
     948:	2003      	movs	r0, #3
     94a:	4d0f      	ldr	r5, [pc, #60]	; (988 <app_leave_progmode+0x50>)
     94c:	47a8      	blx	r5
    result = app_toggle_reset(app_ptr, 1);
     94e:	2101      	movs	r1, #1
     950:	0020      	movs	r0, r4
     952:	4b0e      	ldr	r3, [pc, #56]	; (98c <app_leave_progmode+0x54>)
     954:	4798      	blx	r3
     956:	1e02      	subs	r2, r0, #0
    if (result) {
     958:	d005      	beq.n	966 <app_leave_progmode+0x2e>
        DBG_INFO(APP_DEBUG, "app_toggle_reset failed %d", result);
     95a:	2003      	movs	r0, #3
     95c:	490c      	ldr	r1, [pc, #48]	; (990 <app_leave_progmode+0x58>)
     95e:	47a8      	blx	r5
        return -2;
     960:	2002      	movs	r0, #2
        return ERROR_PTR;
     962:	4240      	negs	r0, r0
}
     964:	bd70      	pop	{r4, r5, r6, pc}
    result = app_disable(app_ptr);
     966:	0020      	movs	r0, r4
     968:	4b0a      	ldr	r3, [pc, #40]	; (994 <app_leave_progmode+0x5c>)
     96a:	4798      	blx	r3
    if (result) {
     96c:	2800      	cmp	r0, #0
     96e:	d0f9      	beq.n	964 <app_leave_progmode+0x2c>
        DBG_INFO(APP_DEBUG, "app_disable failed %d", result);
     970:	0002      	movs	r2, r0
     972:	4909      	ldr	r1, [pc, #36]	; (998 <app_leave_progmode+0x60>)
     974:	2003      	movs	r0, #3
     976:	47a8      	blx	r5
        return -3;
     978:	2003      	movs	r0, #3
     97a:	e7f2      	b.n	962 <app_leave_progmode+0x2a>
        return ERROR_PTR;
     97c:	2001      	movs	r0, #1
     97e:	e7f0      	b.n	962 <app_leave_progmode+0x2a>
     980:	0000b4b4 	.word	0x0000b4b4
     984:	00004949 	.word	0x00004949
     988:	00000357 	.word	0x00000357
     98c:	00000715 	.word	0x00000715
     990:	00004812 	.word	0x00004812
     994:	0000065d 	.word	0x0000065d
     998:	00004964 	.word	0x00004964

0000099c <app_wait_flash_ready>:
    @app_ptr: APP object pointer, acquired from updi_application_init()
    @timeout: max flash programing time
    @return 0 successful, other value if failed
*/
int app_wait_flash_ready(void *app_ptr, int timeout)
{
     99c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
     99e:	0006      	movs	r6, r0
     9a0:	000d      	movs	r5, r1
    */
    upd_application_t *app = (upd_application_t *)app_ptr;
    u8 status;
    int result;

    if (!VALID_APP(app))
     9a2:	2800      	cmp	r0, #0
     9a4:	d035      	beq.n	a12 <app_wait_flash_ready+0x76>
     9a6:	4b1d      	ldr	r3, [pc, #116]	; (a1c <app_wait_flash_ready+0x80>)
     9a8:	6802      	ldr	r2, [r0, #0]
     9aa:	429a      	cmp	r2, r3
     9ac:	d131      	bne.n	a12 <app_wait_flash_ready+0x76>
        return ERROR_PTR;

    DBG_INFO(APP_DEBUG, "<APP> Wait flash ready");
     9ae:	491c      	ldr	r1, [pc, #112]	; (a20 <app_wait_flash_ready+0x84>)
     9b0:	2003      	movs	r0, #3
     9b2:	4b1c      	ldr	r3, [pc, #112]	; (a24 <app_wait_flash_ready+0x88>)
     9b4:	4798      	blx	r3

    do {
        result = _link_ld(LINK(app), APP_REG(app, nvmctrl_address) + UPDI_NVMCTRL_STATUS, &status);
     9b6:	466b      	mov	r3, sp
     9b8:	1ddf      	adds	r7, r3, #7
     9ba:	68b3      	ldr	r3, [r6, #8]
     9bc:	003a      	movs	r2, r7
     9be:	685b      	ldr	r3, [r3, #4]
     9c0:	6870      	ldr	r0, [r6, #4]
     9c2:	8999      	ldrh	r1, [r3, #12]
     9c4:	4b18      	ldr	r3, [pc, #96]	; (a28 <app_wait_flash_ready+0x8c>)
     9c6:	3102      	adds	r1, #2
     9c8:	b289      	uxth	r1, r1
     9ca:	4798      	blx	r3
     9cc:	1e04      	subs	r4, r0, #0
        if (result) {
     9ce:	d007      	beq.n	9e0 <app_wait_flash_ready+0x44>
            DBG_INFO(APP_DEBUG, "_link_ld failed %d", result);
     9d0:	0002      	movs	r2, r0
     9d2:	4916      	ldr	r1, [pc, #88]	; (a2c <app_wait_flash_ready+0x90>)
     9d4:	2003      	movs	r0, #3
     9d6:	4b13      	ldr	r3, [pc, #76]	; (a24 <app_wait_flash_ready+0x88>)
     9d8:	4798      	blx	r3
            result = -2;
     9da:	2402      	movs	r4, #2
            break;
        }
        else {
            if (status & (1 << UPDI_NVM_STATUS_WRITE_ERROR)) {
                result = -3;
     9dc:	4264      	negs	r4, r4
     9de:	e00c      	b.n	9fa <app_wait_flash_ready+0x5e>
            if (status & (1 << UPDI_NVM_STATUS_WRITE_ERROR)) {
     9e0:	2204      	movs	r2, #4
     9e2:	783b      	ldrb	r3, [r7, #0]
     9e4:	4213      	tst	r3, r2
     9e6:	d112      	bne.n	a0e <app_wait_flash_ready+0x72>
                break;
            }

            if (!(status & ((1 << UPDI_NVM_STATUS_EEPROM_BUSY) | (1 << UPDI_NVM_STATUS_FLASH_BUSY))))
     9e8:	3a01      	subs	r2, #1
     9ea:	4213      	tst	r3, r2
     9ec:	d013      	beq.n	a16 <app_wait_flash_ready+0x7a>
                break;
        }

        msleep(1);
     9ee:	2001      	movs	r0, #1
     9f0:	4b0f      	ldr	r3, [pc, #60]	; (a30 <app_wait_flash_ready+0x94>)
    } while (--timeout > 0);
     9f2:	3d01      	subs	r5, #1
        msleep(1);
     9f4:	4798      	blx	r3
    } while (--timeout > 0);
     9f6:	2d00      	cmp	r5, #0
     9f8:	dcdd      	bgt.n	9b6 <app_wait_flash_ready+0x1a>

    if (timeout <= 0 || result) {
        DBG_INFO(APP_DEBUG, "Timeout waiting for wait flash ready status %02x result %d", status, result);
     9fa:	0023      	movs	r3, r4
     9fc:	783a      	ldrb	r2, [r7, #0]
     9fe:	4c09      	ldr	r4, [pc, #36]	; (a24 <app_wait_flash_ready+0x88>)
     a00:	490c      	ldr	r1, [pc, #48]	; (a34 <app_wait_flash_ready+0x98>)
     a02:	2003      	movs	r0, #3
     a04:	47a0      	blx	r4
        return -3;
     a06:	2403      	movs	r4, #3
        return ERROR_PTR;
     a08:	4264      	negs	r4, r4
    }

    return 0;
}
     a0a:	0020      	movs	r0, r4
     a0c:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
                result = -3;
     a0e:	2403      	movs	r4, #3
     a10:	e7e4      	b.n	9dc <app_wait_flash_ready+0x40>
        return ERROR_PTR;
     a12:	2401      	movs	r4, #1
     a14:	e7f8      	b.n	a08 <app_wait_flash_ready+0x6c>
    if (timeout <= 0 || result) {
     a16:	2d00      	cmp	r5, #0
     a18:	dcf7      	bgt.n	a0a <app_wait_flash_ready+0x6e>
     a1a:	e7ee      	b.n	9fa <app_wait_flash_ready+0x5e>
     a1c:	0000b4b4 	.word	0x0000b4b4
     a20:	0000497a 	.word	0x0000497a
     a24:	00000357 	.word	0x00000357
     a28:	00001565 	.word	0x00001565
     a2c:	00004991 	.word	0x00004991
     a30:	00000345 	.word	0x00000345
     a34:	000049a4 	.word	0x000049a4

00000a38 <app_execute_nvm_command>:
    @app_ptr: APP object pointer, acquired from updi_application_init()
    @command: command content
    @return 0 successful, other value if failed
*/
int app_execute_nvm_command(void *app_ptr, u8 command)
{
     a38:	b570      	push	{r4, r5, r6, lr}
     a3a:	0004      	movs	r4, r0
     a3c:	000d      	movs	r5, r1
    /*
        Executes an NVM COMMAND on the NVM CTRL
    */
    upd_application_t *app = (upd_application_t *)app_ptr;

    if (!VALID_APP(app))
     a3e:	2800      	cmp	r0, #0
     a40:	d010      	beq.n	a64 <app_execute_nvm_command+0x2c>
     a42:	4b0a      	ldr	r3, [pc, #40]	; (a6c <app_execute_nvm_command+0x34>)
     a44:	6802      	ldr	r2, [r0, #0]
     a46:	429a      	cmp	r2, r3
     a48:	d10c      	bne.n	a64 <app_execute_nvm_command+0x2c>
        return ERROR_PTR;

    DBG_INFO(APP_DEBUG, "<APP> NVMCMD %d executing", command);
     a4a:	000a      	movs	r2, r1
     a4c:	2003      	movs	r0, #3
     a4e:	4908      	ldr	r1, [pc, #32]	; (a70 <app_execute_nvm_command+0x38>)
     a50:	4b08      	ldr	r3, [pc, #32]	; (a74 <app_execute_nvm_command+0x3c>)
     a52:	4798      	blx	r3

    return link_st(LINK(app), APP_REG(app, nvmctrl_address) + UPDI_NVMCTRL_CTRLA, command);
     a54:	68a3      	ldr	r3, [r4, #8]
     a56:	002a      	movs	r2, r5
     a58:	685b      	ldr	r3, [r3, #4]
     a5a:	6860      	ldr	r0, [r4, #4]
     a5c:	8999      	ldrh	r1, [r3, #12]
     a5e:	4b06      	ldr	r3, [pc, #24]	; (a78 <app_execute_nvm_command+0x40>)
     a60:	4798      	blx	r3
}
     a62:	bd70      	pop	{r4, r5, r6, pc}
        return ERROR_PTR;
     a64:	2001      	movs	r0, #1
     a66:	4240      	negs	r0, r0
     a68:	e7fb      	b.n	a62 <app_execute_nvm_command+0x2a>
     a6a:	46c0      	nop			; (mov r8, r8)
     a6c:	0000b4b4 	.word	0x0000b4b4
     a70:	000049df 	.word	0x000049df
     a74:	00000357 	.word	0x00000357
     a78:	0000165d 	.word	0x0000165d

00000a7c <app_chip_erase>:
    APP erase chip
    @app_ptr: APP object pointer, acquired from updi_application_init()
    @return 0 successful, other value if failed
*/
int app_chip_erase(void *app_ptr)
{
     a7c:	b570      	push	{r4, r5, r6, lr}
     a7e:	1e04      	subs	r4, r0, #0
    */

    upd_application_t *app = (upd_application_t *)app_ptr;
    int result;

    if (!VALID_APP(app))
     a80:	d027      	beq.n	ad2 <app_chip_erase+0x56>
     a82:	4b15      	ldr	r3, [pc, #84]	; (ad8 <app_chip_erase+0x5c>)
     a84:	6802      	ldr	r2, [r0, #0]
     a86:	429a      	cmp	r2, r3
     a88:	d123      	bne.n	ad2 <app_chip_erase+0x56>
        return ERROR_PTR;

    DBG_INFO(APP_DEBUG, "<APP> Chip erase using NVM CTRL");
     a8a:	4914      	ldr	r1, [pc, #80]	; (adc <app_chip_erase+0x60>)
     a8c:	2003      	movs	r0, #3
     a8e:	4d14      	ldr	r5, [pc, #80]	; (ae0 <app_chip_erase+0x64>)
     a90:	47a8      	blx	r5

    //Wait until NVM CTRL is ready to erase
    result = app_wait_flash_ready(app, TIMEOUT_WAIT_FLASH_READY);
     a92:	21fa      	movs	r1, #250	; 0xfa
     a94:	0020      	movs	r0, r4
     a96:	0089      	lsls	r1, r1, #2
     a98:	4e12      	ldr	r6, [pc, #72]	; (ae4 <app_chip_erase+0x68>)
     a9a:	47b0      	blx	r6
    if (result) {
        DBG_INFO(APP_DEBUG, "app_wait_flash_ready timeout before erase failed %d", result);
     a9c:	4912      	ldr	r1, [pc, #72]	; (ae8 <app_chip_erase+0x6c>)
    result = app_wait_flash_ready(app, TIMEOUT_WAIT_FLASH_READY);
     a9e:	1e02      	subs	r2, r0, #0
    if (result) {
     aa0:	d113      	bne.n	aca <app_chip_erase+0x4e>
        return -2;
    }

    //Erase
    result = app_execute_nvm_command(app, UPDI_NVMCTRL_CTRLA_CHIP_ERASE);
     aa2:	2105      	movs	r1, #5
     aa4:	0020      	movs	r0, r4
     aa6:	4b11      	ldr	r3, [pc, #68]	; (aec <app_chip_erase+0x70>)
     aa8:	4798      	blx	r3
     aaa:	1e02      	subs	r2, r0, #0
    if (result) {
     aac:	d005      	beq.n	aba <app_chip_erase+0x3e>
        DBG_INFO(APP_DEBUG, "app_execute_nvm_command failed %d", result);
     aae:	2003      	movs	r0, #3
     ab0:	490f      	ldr	r1, [pc, #60]	; (af0 <app_chip_erase+0x74>)
     ab2:	47a8      	blx	r5
        return -3;
     ab4:	2003      	movs	r0, #3
        return ERROR_PTR;
     ab6:	4240      	negs	r0, r0
        DBG_INFO(APP_DEBUG, "app_wait_flash_ready timeout after erase failed %d", result);
        return -2;
    }

    return 0;
}
     ab8:	bd70      	pop	{r4, r5, r6, pc}
    result = app_wait_flash_ready(app, TIMEOUT_WAIT_FLASH_READY);
     aba:	21fa      	movs	r1, #250	; 0xfa
     abc:	0020      	movs	r0, r4
     abe:	0089      	lsls	r1, r1, #2
     ac0:	47b0      	blx	r6
    if (result) {
     ac2:	2800      	cmp	r0, #0
     ac4:	d0f8      	beq.n	ab8 <app_chip_erase+0x3c>
        DBG_INFO(APP_DEBUG, "app_wait_flash_ready timeout after erase failed %d", result);
     ac6:	0002      	movs	r2, r0
     ac8:	490a      	ldr	r1, [pc, #40]	; (af4 <app_chip_erase+0x78>)
     aca:	2003      	movs	r0, #3
     acc:	47a8      	blx	r5
        return -2;
     ace:	2002      	movs	r0, #2
     ad0:	e7f1      	b.n	ab6 <app_chip_erase+0x3a>
        return ERROR_PTR;
     ad2:	2001      	movs	r0, #1
     ad4:	e7ef      	b.n	ab6 <app_chip_erase+0x3a>
     ad6:	46c0      	nop			; (mov r8, r8)
     ad8:	0000b4b4 	.word	0x0000b4b4
     adc:	00004aa2 	.word	0x00004aa2
     ae0:	00000357 	.word	0x00000357
     ae4:	0000099d 	.word	0x0000099d
     ae8:	00004a19 	.word	0x00004a19
     aec:	00000a39 	.word	0x00000a39
     af0:	00004a4d 	.word	0x00004a4d
     af4:	00004a6f 	.word	0x00004a6f

00000af8 <app_read_data_words>:
    @data: data output buffer
    @len: data len
    @return 0 successful, other value if failed
*/
int app_read_data_words(void *app_ptr, u16 address, u8 *data, int len)
{
     af8:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
     afa:	0005      	movs	r5, r0
     afc:	9101      	str	r1, [sp, #4]
     afe:	0016      	movs	r6, r2
     b00:	001c      	movs	r4, r3
    Reads a number of words of data from UPDI
    */
    upd_application_t *app = (upd_application_t *)app_ptr;
    int result;

    if (!VALID_APP(app) || !VALID_PTR(data) || len < 2)
     b02:	2800      	cmp	r0, #0
     b04:	d04d      	beq.n	ba2 <app_read_data_words+0xaa>
     b06:	4b28      	ldr	r3, [pc, #160]	; (ba8 <app_read_data_words+0xb0>)
     b08:	6802      	ldr	r2, [r0, #0]
     b0a:	429a      	cmp	r2, r3
     b0c:	d149      	bne.n	ba2 <app_read_data_words+0xaa>
     b0e:	2e00      	cmp	r6, #0
     b10:	d047      	beq.n	ba2 <app_read_data_words+0xaa>
        return ERROR_PTR;
     b12:	0030      	movs	r0, r6
    if (!VALID_APP(app) || !VALID_PTR(data) || len < 2)
     b14:	1c73      	adds	r3, r6, #1
     b16:	d011      	beq.n	b3c <app_read_data_words+0x44>
     b18:	2c01      	cmp	r4, #1
     b1a:	dd42      	ble.n	ba2 <app_read_data_words+0xaa>

    DBG_INFO(APP_DEBUG, "<APP> Read words data(%d) addr: %hX", len, address);
     b1c:	000b      	movs	r3, r1
     b1e:	0022      	movs	r2, r4
     b20:	4922      	ldr	r1, [pc, #136]	; (bac <app_read_data_words+0xb4>)
     b22:	2003      	movs	r0, #3
     b24:	4f22      	ldr	r7, [pc, #136]	; (bb0 <app_read_data_words+0xb8>)
     b26:	47b8      	blx	r7

    // Special-case of 1 word
    if (len == 2) {
     b28:	2c02      	cmp	r4, #2
     b2a:	d10e      	bne.n	b4a <app_read_data_words+0x52>
        result = _link_ld16(LINK(app), address, (u16 *)data);
     b2c:	0032      	movs	r2, r6
     b2e:	9901      	ldr	r1, [sp, #4]
     b30:	6868      	ldr	r0, [r5, #4]
     b32:	4b20      	ldr	r3, [pc, #128]	; (bb4 <app_read_data_words+0xbc>)
     b34:	4798      	blx	r3
     b36:	1e02      	subs	r2, r0, #0
        if (result) {
     b38:	d101      	bne.n	b3e <app_read_data_words+0x46>
            DBG_INFO(APP_DEBUG, "_link_ld16 failed %d", result);
            return -2;
        }

        return 0;
     b3a:	2000      	movs	r0, #0
        DBG_INFO(APP_DEBUG, "link_ld_ptr_inc16 failed %d", result);
        return -6;
    }

    return 0;
}
     b3c:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
            DBG_INFO(APP_DEBUG, "_link_ld16 failed %d", result);
     b3e:	2003      	movs	r0, #3
     b40:	491d      	ldr	r1, [pc, #116]	; (bb8 <app_read_data_words+0xc0>)
     b42:	47b8      	blx	r7
            return -2;
     b44:	2002      	movs	r0, #2
        return ERROR_PTR;
     b46:	4240      	negs	r0, r0
     b48:	e7f8      	b.n	b3c <app_read_data_words+0x44>
    if (len > (UPDI_MAX_REPEAT_SIZE >> 1) + 1) {
     b4a:	2c80      	cmp	r4, #128	; 0x80
     b4c:	dd05      	ble.n	b5a <app_read_data_words+0x62>
        DBG_INFO(APP_DEBUG, "Read data length out of size %d", len);
     b4e:	2003      	movs	r0, #3
     b50:	0022      	movs	r2, r4
     b52:	491a      	ldr	r1, [pc, #104]	; (bbc <app_read_data_words+0xc4>)
     b54:	47b8      	blx	r7
        return -3;
     b56:	2003      	movs	r0, #3
     b58:	e7f5      	b.n	b46 <app_read_data_words+0x4e>
    result = link_st_ptr(LINK(app), address);
     b5a:	9901      	ldr	r1, [sp, #4]
     b5c:	6868      	ldr	r0, [r5, #4]
     b5e:	4b18      	ldr	r3, [pc, #96]	; (bc0 <app_read_data_words+0xc8>)
     b60:	4798      	blx	r3
     b62:	1e02      	subs	r2, r0, #0
    if (result) {
     b64:	d004      	beq.n	b70 <app_read_data_words+0x78>
        DBG_INFO(APP_DEBUG, "link_st_ptr failed %d", result);
     b66:	2003      	movs	r0, #3
     b68:	4916      	ldr	r1, [pc, #88]	; (bc4 <app_read_data_words+0xcc>)
     b6a:	47b8      	blx	r7
        return -4;
     b6c:	2004      	movs	r0, #4
     b6e:	e7ea      	b.n	b46 <app_read_data_words+0x4e>
    result = link_repeat16(LINK(app), (len >> 1) - 1);
     b70:	1061      	asrs	r1, r4, #1
     b72:	3901      	subs	r1, #1
     b74:	b289      	uxth	r1, r1
     b76:	6868      	ldr	r0, [r5, #4]
     b78:	4b13      	ldr	r3, [pc, #76]	; (bc8 <app_read_data_words+0xd0>)
     b7a:	4798      	blx	r3
     b7c:	1e02      	subs	r2, r0, #0
    if (result) {
     b7e:	d004      	beq.n	b8a <app_read_data_words+0x92>
        DBG_INFO(APP_DEBUG, "link_repeat16 failed %d", result);
     b80:	2003      	movs	r0, #3
     b82:	4912      	ldr	r1, [pc, #72]	; (bcc <app_read_data_words+0xd4>)
     b84:	47b8      	blx	r7
        return -5;
     b86:	2005      	movs	r0, #5
     b88:	e7dd      	b.n	b46 <app_read_data_words+0x4e>
    result = link_ld_ptr_inc16(LINK(app), data, len);
     b8a:	0022      	movs	r2, r4
     b8c:	0031      	movs	r1, r6
     b8e:	6868      	ldr	r0, [r5, #4]
     b90:	4b0f      	ldr	r3, [pc, #60]	; (bd0 <app_read_data_words+0xd8>)
     b92:	4798      	blx	r3
     b94:	1e02      	subs	r2, r0, #0
    if (result) {
     b96:	d0d0      	beq.n	b3a <app_read_data_words+0x42>
        DBG_INFO(APP_DEBUG, "link_ld_ptr_inc16 failed %d", result);
     b98:	2003      	movs	r0, #3
     b9a:	490e      	ldr	r1, [pc, #56]	; (bd4 <app_read_data_words+0xdc>)
     b9c:	47b8      	blx	r7
        return -6;
     b9e:	2006      	movs	r0, #6
     ba0:	e7d1      	b.n	b46 <app_read_data_words+0x4e>
        return ERROR_PTR;
     ba2:	2001      	movs	r0, #1
     ba4:	e7cf      	b.n	b46 <app_read_data_words+0x4e>
     ba6:	46c0      	nop			; (mov r8, r8)
     ba8:	0000b4b4 	.word	0x0000b4b4
     bac:	00004ac2 	.word	0x00004ac2
     bb0:	00000357 	.word	0x00000357
     bb4:	000015e1 	.word	0x000015e1
     bb8:	00004ae6 	.word	0x00004ae6
     bbc:	00004afb 	.word	0x00004afb
     bc0:	00001895 	.word	0x00001895
     bc4:	00004b1b 	.word	0x00004b1b
     bc8:	00001afd 	.word	0x00001afd
     bcc:	00004b31 	.word	0x00004b31
     bd0:	00001825 	.word	0x00001825
     bd4:	00004b49 	.word	0x00004b49

00000bd8 <app_read_data_bytes>:
    @data: data output buffer
    @len: data len
    @return 0 successful, other value if failed
*/
int app_read_data_bytes(void *app_ptr, u16 address, u8 *data, int len)
{
     bd8:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
     bda:	0005      	movs	r5, r0
     bdc:	9101      	str	r1, [sp, #4]
     bde:	0016      	movs	r6, r2
     be0:	001c      	movs	r4, r3
    Reads a number of bytes of data from UPDI
    */
    upd_application_t *app = (upd_application_t *)app_ptr;
    int result;

    if (!VALID_APP(app) || !VALID_PTR(data) || len < 1)
     be2:	2800      	cmp	r0, #0
     be4:	d04e      	beq.n	c84 <app_read_data_bytes+0xac>
     be6:	4b28      	ldr	r3, [pc, #160]	; (c88 <app_read_data_bytes+0xb0>)
     be8:	6802      	ldr	r2, [r0, #0]
     bea:	429a      	cmp	r2, r3
     bec:	d14a      	bne.n	c84 <app_read_data_bytes+0xac>
     bee:	2e00      	cmp	r6, #0
     bf0:	d048      	beq.n	c84 <app_read_data_bytes+0xac>
        return ERROR_PTR;
     bf2:	0030      	movs	r0, r6
    if (!VALID_APP(app) || !VALID_PTR(data) || len < 1)
     bf4:	1c73      	adds	r3, r6, #1
     bf6:	d011      	beq.n	c1c <app_read_data_bytes+0x44>
     bf8:	2c00      	cmp	r4, #0
     bfa:	dd43      	ble.n	c84 <app_read_data_bytes+0xac>

    DBG_INFO(APP_DEBUG, "<APP> Read bytes data(%d) addr: %hX", len, address);
     bfc:	000b      	movs	r3, r1
     bfe:	0022      	movs	r2, r4
     c00:	4922      	ldr	r1, [pc, #136]	; (c8c <app_read_data_bytes+0xb4>)
     c02:	2003      	movs	r0, #3
     c04:	4f22      	ldr	r7, [pc, #136]	; (c90 <app_read_data_bytes+0xb8>)
     c06:	47b8      	blx	r7

    // Special-case of 1 byte
    if (len == 1) {
     c08:	2c01      	cmp	r4, #1
     c0a:	d10e      	bne.n	c2a <app_read_data_bytes+0x52>
        result = _link_ld(LINK(app), address, data);
     c0c:	0032      	movs	r2, r6
     c0e:	9901      	ldr	r1, [sp, #4]
     c10:	6868      	ldr	r0, [r5, #4]
     c12:	4b20      	ldr	r3, [pc, #128]	; (c94 <app_read_data_bytes+0xbc>)
     c14:	4798      	blx	r3
     c16:	1e02      	subs	r2, r0, #0
        if (result) {
     c18:	d101      	bne.n	c1e <app_read_data_bytes+0x46>
            DBG_INFO(APP_DEBUG, "_link_ld failed %d", result);
            return -2;
        }

        return 0;
     c1a:	2000      	movs	r0, #0
        DBG_INFO(APP_DEBUG, "link_ld_ptr_inc failed %d", result);
        return -6;
    }

    return 0;
}
     c1c:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
            DBG_INFO(APP_DEBUG, "_link_ld failed %d", result);
     c1e:	2003      	movs	r0, #3
     c20:	491d      	ldr	r1, [pc, #116]	; (c98 <app_read_data_bytes+0xc0>)
     c22:	47b8      	blx	r7
            return -2;
     c24:	2002      	movs	r0, #2
        return ERROR_PTR;
     c26:	4240      	negs	r0, r0
     c28:	e7f8      	b.n	c1c <app_read_data_bytes+0x44>
    if (len > UPDI_MAX_REPEAT_SIZE + 1) {
     c2a:	2380      	movs	r3, #128	; 0x80
     c2c:	005b      	lsls	r3, r3, #1
     c2e:	429c      	cmp	r4, r3
     c30:	dd05      	ble.n	c3e <app_read_data_bytes+0x66>
        DBG_INFO(APP_DEBUG, "Read data length out of size %d", len);
     c32:	2003      	movs	r0, #3
     c34:	0022      	movs	r2, r4
     c36:	4919      	ldr	r1, [pc, #100]	; (c9c <app_read_data_bytes+0xc4>)
     c38:	47b8      	blx	r7
        return -3;
     c3a:	2003      	movs	r0, #3
     c3c:	e7f3      	b.n	c26 <app_read_data_bytes+0x4e>
    result = link_st_ptr(LINK(app), address);
     c3e:	9901      	ldr	r1, [sp, #4]
     c40:	6868      	ldr	r0, [r5, #4]
     c42:	4b17      	ldr	r3, [pc, #92]	; (ca0 <app_read_data_bytes+0xc8>)
     c44:	4798      	blx	r3
     c46:	1e02      	subs	r2, r0, #0
    if (result) {
     c48:	d004      	beq.n	c54 <app_read_data_bytes+0x7c>
        DBG_INFO(APP_DEBUG, "link_st_ptr failed %d", result);
     c4a:	2003      	movs	r0, #3
     c4c:	4915      	ldr	r1, [pc, #84]	; (ca4 <app_read_data_bytes+0xcc>)
     c4e:	47b8      	blx	r7
        return -4;
     c50:	2004      	movs	r0, #4
     c52:	e7e8      	b.n	c26 <app_read_data_bytes+0x4e>
    result = link_repeat(LINK(app), len - 1);
     c54:	1e61      	subs	r1, r4, #1
     c56:	b2c9      	uxtb	r1, r1
     c58:	6868      	ldr	r0, [r5, #4]
     c5a:	4b13      	ldr	r3, [pc, #76]	; (ca8 <app_read_data_bytes+0xd0>)
     c5c:	4798      	blx	r3
     c5e:	1e02      	subs	r2, r0, #0
    if (result) {
     c60:	d004      	beq.n	c6c <app_read_data_bytes+0x94>
        DBG_INFO(APP_DEBUG, "link_repeat failed %d", result);
     c62:	2003      	movs	r0, #3
     c64:	4911      	ldr	r1, [pc, #68]	; (cac <app_read_data_bytes+0xd4>)
     c66:	47b8      	blx	r7
        return -5;
     c68:	2005      	movs	r0, #5
     c6a:	e7dc      	b.n	c26 <app_read_data_bytes+0x4e>
    result = link_ld_ptr_inc(LINK(app), data, len);
     c6c:	0022      	movs	r2, r4
     c6e:	0031      	movs	r1, r6
     c70:	6868      	ldr	r0, [r5, #4]
     c72:	4b0f      	ldr	r3, [pc, #60]	; (cb0 <app_read_data_bytes+0xd8>)
     c74:	4798      	blx	r3
     c76:	1e02      	subs	r2, r0, #0
    if (result) {
     c78:	d0cf      	beq.n	c1a <app_read_data_bytes+0x42>
        DBG_INFO(APP_DEBUG, "link_ld_ptr_inc failed %d", result);
     c7a:	2003      	movs	r0, #3
     c7c:	490d      	ldr	r1, [pc, #52]	; (cb4 <app_read_data_bytes+0xdc>)
     c7e:	47b8      	blx	r7
        return -6;
     c80:	2006      	movs	r0, #6
     c82:	e7d0      	b.n	c26 <app_read_data_bytes+0x4e>
        return ERROR_PTR;
     c84:	2001      	movs	r0, #1
     c86:	e7ce      	b.n	c26 <app_read_data_bytes+0x4e>
     c88:	0000b4b4 	.word	0x0000b4b4
     c8c:	00004b65 	.word	0x00004b65
     c90:	00000357 	.word	0x00000357
     c94:	00001565 	.word	0x00001565
     c98:	00004991 	.word	0x00004991
     c9c:	00004afb 	.word	0x00004afb
     ca0:	00001895 	.word	0x00001895
     ca4:	00004b1b 	.word	0x00004b1b
     ca8:	00001aa1 	.word	0x00001aa1
     cac:	00004b89 	.word	0x00004b89
     cb0:	000017b9 	.word	0x000017b9
     cb4:	00004b9f 	.word	0x00004b9f

00000cb8 <app_read_data>:
    @data: data output buffer
    @len: data len
    @return 0 successful, other value if failed
*/
int app_read_data(void *app_ptr, u16 address, u8 *data, int len)
{
     cb8:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
     cba:	001d      	movs	r5, r3
    /*
    Reads a number of bytes of data from UPDI
    */
    bool use_word_access = !(len & 0x1);
     cbc:	2301      	movs	r3, #1
     cbe:	402b      	ands	r3, r5
{
     cc0:	0014      	movs	r4, r2
     cc2:	0006      	movs	r6, r0
     cc4:	000f      	movs	r7, r1
    bool use_word_access = !(len & 0x1);
     cc6:	9301      	str	r3, [sp, #4]
    int result;

    DBG_INFO(APP_DEBUG, "<APP> Read data(%d)", len);
     cc8:	002a      	movs	r2, r5
     cca:	490f      	ldr	r1, [pc, #60]	; (d08 <app_read_data+0x50>)
     ccc:	2003      	movs	r0, #3
     cce:	4b0f      	ldr	r3, [pc, #60]	; (d0c <app_read_data+0x54>)
     cd0:	4798      	blx	r3

    if (!VALID_PTR(data) || len <= 0)
     cd2:	2c00      	cmp	r4, #0
     cd4:	d014      	beq.n	d00 <app_read_data+0x48>
        return ERROR_PTR;
     cd6:	0020      	movs	r0, r4
    if (!VALID_PTR(data) || len <= 0)
     cd8:	1c63      	adds	r3, r4, #1
     cda:	d00a      	beq.n	cf2 <app_read_data+0x3a>
     cdc:	2d00      	cmp	r5, #0
     cde:	dd0f      	ble.n	d00 <app_read_data+0x48>

    if (use_word_access)
     ce0:	9b01      	ldr	r3, [sp, #4]
     ce2:	2b00      	cmp	r3, #0
     ce4:	d106      	bne.n	cf4 <app_read_data+0x3c>
        result = app_read_data_words(app_ptr, address, data, len);
     ce6:	002b      	movs	r3, r5
     ce8:	0039      	movs	r1, r7
     cea:	0030      	movs	r0, r6
     cec:	0022      	movs	r2, r4
     cee:	4c08      	ldr	r4, [pc, #32]	; (d10 <app_read_data+0x58>)
    else
        result = app_read_data_bytes(app_ptr, address, data, len);
     cf0:	47a0      	blx	r4

    return result;
}
     cf2:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
        result = app_read_data_bytes(app_ptr, address, data, len);
     cf4:	0022      	movs	r2, r4
     cf6:	002b      	movs	r3, r5
     cf8:	0039      	movs	r1, r7
     cfa:	0030      	movs	r0, r6
     cfc:	4c05      	ldr	r4, [pc, #20]	; (d14 <app_read_data+0x5c>)
     cfe:	e7f7      	b.n	cf0 <app_read_data+0x38>
        return ERROR_PTR;
     d00:	2001      	movs	r0, #1
     d02:	4240      	negs	r0, r0
     d04:	e7f5      	b.n	cf2 <app_read_data+0x3a>
     d06:	46c0      	nop			; (mov r8, r8)
     d08:	00004bb9 	.word	0x00004bb9
     d0c:	00000357 	.word	0x00000357
     d10:	00000af9 	.word	0x00000af9
     d14:	00000bd9 	.word	0x00000bd9

00000d18 <app_device_info>:
{
     d18:	b5f0      	push	{r4, r5, r6, r7, lr}
     d1a:	0005      	movs	r5, r0
     d1c:	b08f      	sub	sp, #60	; 0x3c
    if (!VALID_APP(app))
     d1e:	2800      	cmp	r0, #0
     d20:	d100      	bne.n	d24 <app_device_info+0xc>
     d22:	e088      	b.n	e36 <app_device_info+0x11e>
     d24:	4b45      	ldr	r3, [pc, #276]	; (e3c <app_device_info+0x124>)
     d26:	6802      	ldr	r2, [r0, #0]
     d28:	429a      	cmp	r2, r3
     d2a:	d000      	beq.n	d2e <app_device_info+0x16>
     d2c:	e083      	b.n	e36 <app_device_info+0x11e>
    DBG_INFO(APP_DEBUG, "<APP> Device info");
     d2e:	4944      	ldr	r1, [pc, #272]	; (e40 <app_device_info+0x128>)
     d30:	2003      	movs	r0, #3
     d32:	4e44      	ldr	r6, [pc, #272]	; (e44 <app_device_info+0x12c>)
     d34:	47b0      	blx	r6
    result = link_read_sib(LINK(app), sib, sizeof(sib));
     d36:	ab0a      	add	r3, sp, #40	; 0x28
     d38:	9303      	str	r3, [sp, #12]
     d3a:	0019      	movs	r1, r3
     d3c:	2210      	movs	r2, #16
     d3e:	6868      	ldr	r0, [r5, #4]
     d40:	4b41      	ldr	r3, [pc, #260]	; (e48 <app_device_info+0x130>)
     d42:	4798      	blx	r3
     d44:	1e04      	subs	r4, r0, #0
    if (result) {
     d46:	d006      	beq.n	d56 <app_device_info+0x3e>
        DBG_INFO(APP_DEBUG, "link_read_sib failed %d", result);
     d48:	0002      	movs	r2, r0
     d4a:	4940      	ldr	r1, [pc, #256]	; (e4c <app_device_info+0x134>)
     d4c:	2003      	movs	r0, #3
     d4e:	47b0      	blx	r6
        return -2;
     d50:	2402      	movs	r4, #2
        return ERROR_PTR;
     d52:	4264      	negs	r4, r4
     d54:	e06c      	b.n	e30 <app_device_info+0x118>
    DBG(APP_DEBUG, "[SIB]", sib, sizeof(sib), (unsigned char *)"%02x ");
     d56:	4b3e      	ldr	r3, [pc, #248]	; (e50 <app_device_info+0x138>)
     d58:	9a03      	ldr	r2, [sp, #12]
     d5a:	9300      	str	r3, [sp, #0]
     d5c:	493d      	ldr	r1, [pc, #244]	; (e54 <app_device_info+0x13c>)
     d5e:	2310      	movs	r3, #16
     d60:	2003      	movs	r0, #3
     d62:	4f3d      	ldr	r7, [pc, #244]	; (e58 <app_device_info+0x140>)
     d64:	47b8      	blx	r7
    DBG(APP_DEBUG, "[Family ID]", sib, 7, (unsigned char *)"%c");
     d66:	4b3d      	ldr	r3, [pc, #244]	; (e5c <app_device_info+0x144>)
     d68:	9a03      	ldr	r2, [sp, #12]
     d6a:	9300      	str	r3, [sp, #0]
     d6c:	493c      	ldr	r1, [pc, #240]	; (e60 <app_device_info+0x148>)
     d6e:	2307      	movs	r3, #7
     d70:	2003      	movs	r0, #3
     d72:	4f39      	ldr	r7, [pc, #228]	; (e58 <app_device_info+0x140>)
     d74:	47b8      	blx	r7
    DBG(APP_DEBUG, "[NVM revision]", sib + 8, 3, (unsigned char *)"%c");
     d76:	4b39      	ldr	r3, [pc, #228]	; (e5c <app_device_info+0x144>)
     d78:	aa0c      	add	r2, sp, #48	; 0x30
     d7a:	9300      	str	r3, [sp, #0]
     d7c:	2303      	movs	r3, #3
     d7e:	4939      	ldr	r1, [pc, #228]	; (e64 <app_device_info+0x14c>)
     d80:	0018      	movs	r0, r3
     d82:	4f35      	ldr	r7, [pc, #212]	; (e58 <app_device_info+0x140>)
     d84:	47b8      	blx	r7
    DBG(APP_DEBUG, "[OCD revision]", sib + 11, 3, (unsigned char *)"%c");
     d86:	4b35      	ldr	r3, [pc, #212]	; (e5c <app_device_info+0x144>)
     d88:	222b      	movs	r2, #43	; 0x2b
     d8a:	9300      	str	r3, [sp, #0]
     d8c:	2303      	movs	r3, #3
     d8e:	a902      	add	r1, sp, #8
     d90:	1852      	adds	r2, r2, r1
     d92:	0018      	movs	r0, r3
     d94:	4934      	ldr	r1, [pc, #208]	; (e68 <app_device_info+0x150>)
     d96:	4f30      	ldr	r7, [pc, #192]	; (e58 <app_device_info+0x140>)
     d98:	47b8      	blx	r7
    DBG_INFO(APP_DEBUG, "[PDI OSC] is %cMHz", sib[15]);
     d9a:	9b03      	ldr	r3, [sp, #12]
     d9c:	4933      	ldr	r1, [pc, #204]	; (e6c <app_device_info+0x154>)
     d9e:	7bda      	ldrb	r2, [r3, #15]
     da0:	2003      	movs	r0, #3
     da2:	47b0      	blx	r6
    pdi = link_ldcs(LINK(app), UPDI_CS_STATUSA);
     da4:	4b32      	ldr	r3, [pc, #200]	; (e70 <app_device_info+0x158>)
     da6:	0021      	movs	r1, r4
     da8:	6868      	ldr	r0, [r5, #4]
     daa:	4798      	blx	r3
    DBG_INFO(APP_DEBUG, "[PDI Rev] is %d", (pdi >> 4));
     dac:	0900      	lsrs	r0, r0, #4
     dae:	b2c2      	uxtb	r2, r0
     db0:	4930      	ldr	r1, [pc, #192]	; (e74 <app_device_info+0x15c>)
     db2:	2003      	movs	r0, #3
     db4:	47b0      	blx	r6
    if (app_in_prog_mode(app)) {
     db6:	0028      	movs	r0, r5
     db8:	4b2f      	ldr	r3, [pc, #188]	; (e78 <app_device_info+0x160>)
     dba:	4798      	blx	r3
     dbc:	2800      	cmp	r0, #0
     dbe:	d037      	beq.n	e30 <app_device_info+0x118>
        result = app_read_data(app, APP_REG(app, sigrow_address), sigrow, sizeof(sigrow));
     dc0:	68ab      	ldr	r3, [r5, #8]
     dc2:	aa06      	add	r2, sp, #24
     dc4:	685b      	ldr	r3, [r3, #4]
     dc6:	0028      	movs	r0, r5
     dc8:	89d9      	ldrh	r1, [r3, #14]
     dca:	4c2c      	ldr	r4, [pc, #176]	; (e7c <app_device_info+0x164>)
     dcc:	230e      	movs	r3, #14
     dce:	47a0      	blx	r4
     dd0:	1e02      	subs	r2, r0, #0
        if (result) {
     dd2:	d004      	beq.n	dde <app_device_info+0xc6>
            DBG_INFO(APP_DEBUG, "app_read_data sigrow failed %d", result);
     dd4:	492a      	ldr	r1, [pc, #168]	; (e80 <app_device_info+0x168>)
     dd6:	2003      	movs	r0, #3
     dd8:	47b0      	blx	r6
            return -3;
     dda:	2403      	movs	r4, #3
     ddc:	e7b9      	b.n	d52 <app_device_info+0x3a>
        result = app_read_data(app, APP_REG(app, syscfg_address) + 1, revid, sizeof(revid));
     dde:	68ab      	ldr	r3, [r5, #8]
     de0:	af05      	add	r7, sp, #20
     de2:	685b      	ldr	r3, [r3, #4]
     de4:	003a      	movs	r2, r7
     de6:	8959      	ldrh	r1, [r3, #10]
     de8:	0028      	movs	r0, r5
     dea:	3101      	adds	r1, #1
     dec:	b289      	uxth	r1, r1
     dee:	2301      	movs	r3, #1
     df0:	47a0      	blx	r4
     df2:	1e04      	subs	r4, r0, #0
        if (result) {
     df4:	d005      	beq.n	e02 <app_device_info+0xea>
            DBG_INFO(APP_DEBUG, "app_read_data revid failed %d", result);
     df6:	0002      	movs	r2, r0
     df8:	4922      	ldr	r1, [pc, #136]	; (e84 <app_device_info+0x16c>)
     dfa:	2003      	movs	r0, #3
     dfc:	47b0      	blx	r6
            return -4;
     dfe:	2404      	movs	r4, #4
     e00:	e7a7      	b.n	d52 <app_device_info+0x3a>
        DBG(APP_DEBUG, "[Device ID]", sigrow, 3, (unsigned char *)"%02x ");
     e02:	4b13      	ldr	r3, [pc, #76]	; (e50 <app_device_info+0x138>)
     e04:	aa06      	add	r2, sp, #24
     e06:	9300      	str	r3, [sp, #0]
     e08:	2303      	movs	r3, #3
     e0a:	491f      	ldr	r1, [pc, #124]	; (e88 <app_device_info+0x170>)
     e0c:	0018      	movs	r0, r3
     e0e:	4d12      	ldr	r5, [pc, #72]	; (e58 <app_device_info+0x140>)
     e10:	47a8      	blx	r5
        DBG(APP_DEBUG, "[Sernum ID]", sigrow + 3, 10, (unsigned char *)"%02x ");
     e12:	2213      	movs	r2, #19
     e14:	4b0e      	ldr	r3, [pc, #56]	; (e50 <app_device_info+0x138>)
     e16:	a902      	add	r1, sp, #8
     e18:	1852      	adds	r2, r2, r1
     e1a:	9300      	str	r3, [sp, #0]
     e1c:	491b      	ldr	r1, [pc, #108]	; (e8c <app_device_info+0x174>)
     e1e:	2003      	movs	r0, #3
     e20:	230a      	movs	r3, #10
     e22:	4d0d      	ldr	r5, [pc, #52]	; (e58 <app_device_info+0x140>)
     e24:	47a8      	blx	r5
        DBG_INFO(APP_DEBUG, "[Device Rev] is %c", revid[0] + 'A');
     e26:	783a      	ldrb	r2, [r7, #0]
     e28:	4919      	ldr	r1, [pc, #100]	; (e90 <app_device_info+0x178>)
     e2a:	3241      	adds	r2, #65	; 0x41
     e2c:	2003      	movs	r0, #3
     e2e:	47b0      	blx	r6
}
     e30:	0020      	movs	r0, r4
     e32:	b00f      	add	sp, #60	; 0x3c
     e34:	bdf0      	pop	{r4, r5, r6, r7, pc}
        return ERROR_PTR;
     e36:	2401      	movs	r4, #1
     e38:	e78b      	b.n	d52 <app_device_info+0x3a>
     e3a:	46c0      	nop			; (mov r8, r8)
     e3c:	0000b4b4 	.word	0x0000b4b4
     e40:	00004bcd 	.word	0x00004bcd
     e44:	00000357 	.word	0x00000357
     e48:	00001b5d 	.word	0x00001b5d
     e4c:	00004bdf 	.word	0x00004bdf
     e50:	00005828 	.word	0x00005828
     e54:	00004bf7 	.word	0x00004bf7
     e58:	00000355 	.word	0x00000355
     e5c:	00004caf 	.word	0x00004caf
     e60:	00004bfd 	.word	0x00004bfd
     e64:	00004c09 	.word	0x00004c09
     e68:	00004c18 	.word	0x00004c18
     e6c:	00004c27 	.word	0x00004c27
     e70:	00001331 	.word	0x00001331
     e74:	00004c3a 	.word	0x00004c3a
     e78:	00000591 	.word	0x00000591
     e7c:	00000cb9 	.word	0x00000cb9
     e80:	00004c4a 	.word	0x00004c4a
     e84:	00004c69 	.word	0x00004c69
     e88:	00004c87 	.word	0x00004c87
     e8c:	00004c93 	.word	0x00004c93
     e90:	00004c9f 	.word	0x00004c9f

00000e94 <app_write_data_words>:
    @data: data buffer
    @len: data len
    @return 0 successful, other value if failed
*/
int app_write_data_words(void *app_ptr, u16 address, const u8 *data, int len)
{
     e94:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
     e96:	0005      	movs	r5, r0
     e98:	9101      	str	r1, [sp, #4]
     e9a:	0016      	movs	r6, r2
     e9c:	001c      	movs	r4, r3
        Writes a number of words to memory
    */
    upd_application_t *app = (upd_application_t *)app_ptr;
    int result;

    if (!VALID_APP(app) || !VALID_PTR(data) || len < 2)
     e9e:	2800      	cmp	r0, #0
     ea0:	d050      	beq.n	f44 <app_write_data_words+0xb0>
     ea2:	4b29      	ldr	r3, [pc, #164]	; (f48 <app_write_data_words+0xb4>)
     ea4:	6802      	ldr	r2, [r0, #0]
     ea6:	429a      	cmp	r2, r3
     ea8:	d14c      	bne.n	f44 <app_write_data_words+0xb0>
     eaa:	2e00      	cmp	r6, #0
     eac:	d04a      	beq.n	f44 <app_write_data_words+0xb0>
        return ERROR_PTR;
     eae:	0030      	movs	r0, r6
    if (!VALID_APP(app) || !VALID_PTR(data) || len < 2)
     eb0:	1c73      	adds	r3, r6, #1
     eb2:	d015      	beq.n	ee0 <app_write_data_words+0x4c>
     eb4:	2c01      	cmp	r4, #1
     eb6:	dd45      	ble.n	f44 <app_write_data_words+0xb0>

    DBG_INFO(APP_DEBUG, "<APP> Write words data(%d) addr: %hX", len, address);
     eb8:	000b      	movs	r3, r1
     eba:	0022      	movs	r2, r4
     ebc:	4923      	ldr	r1, [pc, #140]	; (f4c <app_write_data_words+0xb8>)
     ebe:	2003      	movs	r0, #3
     ec0:	4f23      	ldr	r7, [pc, #140]	; (f50 <app_write_data_words+0xbc>)
     ec2:	47b8      	blx	r7
    
    // Special-case of 1 word
    if (len == 2) {
     ec4:	2c02      	cmp	r4, #2
     ec6:	d112      	bne.n	eee <app_write_data_words+0x5a>
        result = link_st16(LINK(app), address, data[0] + (data[1] << 8));
     ec8:	7873      	ldrb	r3, [r6, #1]
     eca:	7832      	ldrb	r2, [r6, #0]
     ecc:	021b      	lsls	r3, r3, #8
     ece:	18d2      	adds	r2, r2, r3
     ed0:	b292      	uxth	r2, r2
     ed2:	9901      	ldr	r1, [sp, #4]
     ed4:	6868      	ldr	r0, [r5, #4]
     ed6:	4b1f      	ldr	r3, [pc, #124]	; (f54 <app_write_data_words+0xc0>)
     ed8:	4798      	blx	r3
     eda:	1e02      	subs	r2, r0, #0
        if (result) {
     edc:	d101      	bne.n	ee2 <app_write_data_words+0x4e>
            DBG_INFO(APP_DEBUG, "link_st16 failed %d", result);
            return -3;
        }

        return 0;
     ede:	2000      	movs	r0, #0
        DBG_INFO(APP_DEBUG, "link_st_ptr_inc16 failed %d", result);
        return -6;
    }

    return 0;
}
     ee0:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
            DBG_INFO(APP_DEBUG, "link_st16 failed %d", result);
     ee2:	491d      	ldr	r1, [pc, #116]	; (f58 <app_write_data_words+0xc4>)
        DBG_INFO(APP_DEBUG, "Write words data length out of size %d", len);
     ee4:	2003      	movs	r0, #3
     ee6:	47b8      	blx	r7
        return -3;
     ee8:	2003      	movs	r0, #3
        return ERROR_PTR;
     eea:	4240      	negs	r0, r0
     eec:	e7f8      	b.n	ee0 <app_write_data_words+0x4c>
    if (len > ((UPDI_MAX_REPEAT_SIZE + 1) << 1)) {
     eee:	2380      	movs	r3, #128	; 0x80
     ef0:	009b      	lsls	r3, r3, #2
     ef2:	429c      	cmp	r4, r3
     ef4:	dd02      	ble.n	efc <app_write_data_words+0x68>
        DBG_INFO(APP_DEBUG, "Write words data length out of size %d", len);
     ef6:	0022      	movs	r2, r4
     ef8:	4918      	ldr	r1, [pc, #96]	; (f5c <app_write_data_words+0xc8>)
     efa:	e7f3      	b.n	ee4 <app_write_data_words+0x50>
    result = link_st_ptr(LINK(app), address);
     efc:	9901      	ldr	r1, [sp, #4]
     efe:	6868      	ldr	r0, [r5, #4]
     f00:	4b17      	ldr	r3, [pc, #92]	; (f60 <app_write_data_words+0xcc>)
     f02:	4798      	blx	r3
     f04:	1e02      	subs	r2, r0, #0
    if (result) {
     f06:	d004      	beq.n	f12 <app_write_data_words+0x7e>
        DBG_INFO(APP_DEBUG, "link_st_ptr failed %d", result);
     f08:	2003      	movs	r0, #3
     f0a:	4916      	ldr	r1, [pc, #88]	; (f64 <app_write_data_words+0xd0>)
     f0c:	47b8      	blx	r7
        return -4;
     f0e:	2004      	movs	r0, #4
     f10:	e7eb      	b.n	eea <app_write_data_words+0x56>
    result = link_repeat16(LINK(app), (len >> 1) - 1);
     f12:	1061      	asrs	r1, r4, #1
     f14:	3901      	subs	r1, #1
     f16:	b289      	uxth	r1, r1
     f18:	6868      	ldr	r0, [r5, #4]
     f1a:	4b13      	ldr	r3, [pc, #76]	; (f68 <app_write_data_words+0xd4>)
     f1c:	4798      	blx	r3
     f1e:	1e02      	subs	r2, r0, #0
    if (result) {
     f20:	d004      	beq.n	f2c <app_write_data_words+0x98>
        DBG_INFO(APP_DEBUG, "link_repeat16 failed %d", result);
     f22:	2003      	movs	r0, #3
     f24:	4911      	ldr	r1, [pc, #68]	; (f6c <app_write_data_words+0xd8>)
     f26:	47b8      	blx	r7
        return -5;
     f28:	2005      	movs	r0, #5
     f2a:	e7de      	b.n	eea <app_write_data_words+0x56>
    result = link_st_ptr_inc16(LINK(app), data, len);
     f2c:	0022      	movs	r2, r4
     f2e:	0031      	movs	r1, r6
     f30:	6868      	ldr	r0, [r5, #4]
     f32:	4b0f      	ldr	r3, [pc, #60]	; (f70 <app_write_data_words+0xdc>)
     f34:	4798      	blx	r3
     f36:	1e02      	subs	r2, r0, #0
    if (result) {
     f38:	d0d1      	beq.n	ede <app_write_data_words+0x4a>
        DBG_INFO(APP_DEBUG, "link_st_ptr_inc16 failed %d", result);
     f3a:	2003      	movs	r0, #3
     f3c:	490d      	ldr	r1, [pc, #52]	; (f74 <app_write_data_words+0xe0>)
     f3e:	47b8      	blx	r7
        return -6;
     f40:	2006      	movs	r0, #6
     f42:	e7d2      	b.n	eea <app_write_data_words+0x56>
        return ERROR_PTR;
     f44:	2001      	movs	r0, #1
     f46:	e7d0      	b.n	eea <app_write_data_words+0x56>
     f48:	0000b4b4 	.word	0x0000b4b4
     f4c:	00004cde 	.word	0x00004cde
     f50:	00000357 	.word	0x00000357
     f54:	00001705 	.word	0x00001705
     f58:	00004d03 	.word	0x00004d03
     f5c:	00004d17 	.word	0x00004d17
     f60:	00001895 	.word	0x00001895
     f64:	00004b1b 	.word	0x00004b1b
     f68:	00001afd 	.word	0x00001afd
     f6c:	00004b31 	.word	0x00004b31
     f70:	000019d1 	.word	0x000019d1
     f74:	00004d3e 	.word	0x00004d3e

00000f78 <app_write_data_bytes>:
    @data: data buffer
    @len: data len
    @return 0 successful, other value if failed
*/
int app_write_data_bytes(void *app_ptr, u16 address, const u8 *data, int len)
{
     f78:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
     f7a:	0005      	movs	r5, r0
     f7c:	9101      	str	r1, [sp, #4]
     f7e:	0016      	movs	r6, r2
     f80:	001c      	movs	r4, r3
    Writes a number of bytes to memory
    */
    upd_application_t *app = (upd_application_t *)app_ptr;
    int result;

    if (!VALID_APP(app) || !VALID_PTR(data) || len < 1)
     f82:	2800      	cmp	r0, #0
     f84:	d052      	beq.n	102c <app_write_data_bytes+0xb4>
     f86:	4b2a      	ldr	r3, [pc, #168]	; (1030 <app_write_data_bytes+0xb8>)
     f88:	6802      	ldr	r2, [r0, #0]
     f8a:	429a      	cmp	r2, r3
     f8c:	d14e      	bne.n	102c <app_write_data_bytes+0xb4>
     f8e:	2e00      	cmp	r6, #0
     f90:	d04c      	beq.n	102c <app_write_data_bytes+0xb4>
        return ERROR_PTR;
     f92:	0030      	movs	r0, r6
    if (!VALID_APP(app) || !VALID_PTR(data) || len < 1)
     f94:	1c73      	adds	r3, r6, #1
     f96:	d016      	beq.n	fc6 <app_write_data_bytes+0x4e>
     f98:	2c00      	cmp	r4, #0
     f9a:	dd47      	ble.n	102c <app_write_data_bytes+0xb4>

    DBG_INFO(APP_DEBUG, "<APP> Write bytes data(%d) addr: %hX", len, address);
     f9c:	000b      	movs	r3, r1
     f9e:	0022      	movs	r2, r4
     fa0:	4924      	ldr	r1, [pc, #144]	; (1034 <app_write_data_bytes+0xbc>)
     fa2:	2003      	movs	r0, #3
     fa4:	4f24      	ldr	r7, [pc, #144]	; (1038 <app_write_data_bytes+0xc0>)
     fa6:	47b8      	blx	r7

    // Special-case of 1 byte
    if (len == 1) {
     fa8:	2c01      	cmp	r4, #1
     faa:	d10d      	bne.n	fc8 <app_write_data_bytes+0x50>
        result = link_st(LINK(app), address, data[0]);
     fac:	7832      	ldrb	r2, [r6, #0]
     fae:	9901      	ldr	r1, [sp, #4]
     fb0:	6868      	ldr	r0, [r5, #4]
     fb2:	4b22      	ldr	r3, [pc, #136]	; (103c <app_write_data_bytes+0xc4>)
     fb4:	4798      	blx	r3
     fb6:	1e02      	subs	r2, r0, #0
        if (result) {
     fb8:	d011      	beq.n	fde <app_write_data_bytes+0x66>
            DBG_INFO(APP_DEBUG, "link_st16 failed %d", result);
     fba:	2003      	movs	r0, #3
     fbc:	4920      	ldr	r1, [pc, #128]	; (1040 <app_write_data_bytes+0xc8>)
     fbe:	4b1e      	ldr	r3, [pc, #120]	; (1038 <app_write_data_bytes+0xc0>)
     fc0:	4798      	blx	r3
            return -2;
     fc2:	2002      	movs	r0, #2
        return ERROR_PTR;
     fc4:	4240      	negs	r0, r0
        DBG_INFO(APP_DEBUG, "link_st_ptr_inc16 failed %d", result);
        return -6;
    }

    return 0;
}
     fc6:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
    if (len > UPDI_MAX_REPEAT_SIZE + 1) {
     fc8:	2380      	movs	r3, #128	; 0x80
     fca:	005b      	lsls	r3, r3, #1
     fcc:	429c      	cmp	r4, r3
     fce:	dd06      	ble.n	fde <app_write_data_bytes+0x66>
        DBG_INFO(APP_DEBUG, "Write data length out of size %d", len);
     fd0:	2003      	movs	r0, #3
     fd2:	0022      	movs	r2, r4
     fd4:	491b      	ldr	r1, [pc, #108]	; (1044 <app_write_data_bytes+0xcc>)
     fd6:	4b18      	ldr	r3, [pc, #96]	; (1038 <app_write_data_bytes+0xc0>)
     fd8:	4798      	blx	r3
        return -3;
     fda:	2003      	movs	r0, #3
     fdc:	e7f2      	b.n	fc4 <app_write_data_bytes+0x4c>
    result = link_st_ptr(LINK(app), address);
     fde:	9901      	ldr	r1, [sp, #4]
     fe0:	6868      	ldr	r0, [r5, #4]
     fe2:	4b19      	ldr	r3, [pc, #100]	; (1048 <app_write_data_bytes+0xd0>)
     fe4:	4798      	blx	r3
     fe6:	1e02      	subs	r2, r0, #0
    if (result) {
     fe8:	d005      	beq.n	ff6 <app_write_data_bytes+0x7e>
        DBG_INFO(APP_DEBUG, "link_st_ptr failed %d", result);
     fea:	2003      	movs	r0, #3
     fec:	4917      	ldr	r1, [pc, #92]	; (104c <app_write_data_bytes+0xd4>)
     fee:	4b12      	ldr	r3, [pc, #72]	; (1038 <app_write_data_bytes+0xc0>)
     ff0:	4798      	blx	r3
        return -4;
     ff2:	2004      	movs	r0, #4
     ff4:	e7e6      	b.n	fc4 <app_write_data_bytes+0x4c>
    result = link_repeat(LINK(app), len - 1);
     ff6:	1e61      	subs	r1, r4, #1
     ff8:	b2c9      	uxtb	r1, r1
     ffa:	6868      	ldr	r0, [r5, #4]
     ffc:	4b14      	ldr	r3, [pc, #80]	; (1050 <app_write_data_bytes+0xd8>)
     ffe:	4798      	blx	r3
    1000:	1e02      	subs	r2, r0, #0
    if (result) {
    1002:	d005      	beq.n	1010 <app_write_data_bytes+0x98>
        DBG_INFO(APP_DEBUG, "link_repeat failed %d", result);
    1004:	2003      	movs	r0, #3
    1006:	4913      	ldr	r1, [pc, #76]	; (1054 <app_write_data_bytes+0xdc>)
    1008:	4b0b      	ldr	r3, [pc, #44]	; (1038 <app_write_data_bytes+0xc0>)
    100a:	4798      	blx	r3
        return -5;
    100c:	2005      	movs	r0, #5
    100e:	e7d9      	b.n	fc4 <app_write_data_bytes+0x4c>
    result = link_st_ptr_inc(LINK(app), data, len);
    1010:	0022      	movs	r2, r4
    1012:	0031      	movs	r1, r6
    1014:	6868      	ldr	r0, [r5, #4]
    1016:	4b10      	ldr	r3, [pc, #64]	; (1058 <app_write_data_bytes+0xe0>)
    1018:	4798      	blx	r3
    if (result) {
    101a:	2800      	cmp	r0, #0
    101c:	d0d3      	beq.n	fc6 <app_write_data_bytes+0x4e>
        DBG_INFO(APP_DEBUG, "link_st_ptr_inc16 failed %d", result);
    101e:	0002      	movs	r2, r0
    1020:	490e      	ldr	r1, [pc, #56]	; (105c <app_write_data_bytes+0xe4>)
    1022:	2003      	movs	r0, #3
    1024:	4b04      	ldr	r3, [pc, #16]	; (1038 <app_write_data_bytes+0xc0>)
    1026:	4798      	blx	r3
        return -6;
    1028:	2006      	movs	r0, #6
    102a:	e7cb      	b.n	fc4 <app_write_data_bytes+0x4c>
        return ERROR_PTR;
    102c:	2001      	movs	r0, #1
    102e:	e7c9      	b.n	fc4 <app_write_data_bytes+0x4c>
    1030:	0000b4b4 	.word	0x0000b4b4
    1034:	00004d5a 	.word	0x00004d5a
    1038:	00000357 	.word	0x00000357
    103c:	0000165d 	.word	0x0000165d
    1040:	00004d03 	.word	0x00004d03
    1044:	00004d7f 	.word	0x00004d7f
    1048:	00001895 	.word	0x00001895
    104c:	00004b1b 	.word	0x00004b1b
    1050:	00001aa1 	.word	0x00001aa1
    1054:	00004b89 	.word	0x00004b89
    1058:	00001911 	.word	0x00001911
    105c:	00004d3e 	.word	0x00004d3e

00001060 <app_write_data>:
    @len: data len
    @use_word_access: whether use 2 bytes mode for writing
    @return 0 successful, other value if failed
*/
int app_write_data(void *app_ptr, u16 address, const u8 *data, int len, bool use_word_access)
{
    1060:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
    1062:	001d      	movs	r5, r3
    1064:	ab08      	add	r3, sp, #32
    1066:	781b      	ldrb	r3, [r3, #0]
    1068:	0014      	movs	r4, r2
    106a:	0006      	movs	r6, r0
    106c:	000f      	movs	r7, r1
    106e:	9301      	str	r3, [sp, #4]
    /*
    Writes a number of data to memory
    */
    int result;

    DBG_INFO(APP_DEBUG, "<APP> Write data(%d)", len);
    1070:	002a      	movs	r2, r5
    1072:	490f      	ldr	r1, [pc, #60]	; (10b0 <app_write_data+0x50>)
    1074:	2003      	movs	r0, #3
    1076:	4b0f      	ldr	r3, [pc, #60]	; (10b4 <app_write_data+0x54>)
    1078:	4798      	blx	r3

    if (!VALID_PTR(data) || len <= 0)
    107a:	2c00      	cmp	r4, #0
    107c:	d014      	beq.n	10a8 <app_write_data+0x48>
        return ERROR_PTR;
    107e:	0020      	movs	r0, r4
    if (!VALID_PTR(data) || len <= 0)
    1080:	1c63      	adds	r3, r4, #1
    1082:	d00a      	beq.n	109a <app_write_data+0x3a>
    1084:	2d00      	cmp	r5, #0
    1086:	dd0f      	ble.n	10a8 <app_write_data+0x48>

    if (use_word_access)
    1088:	9b01      	ldr	r3, [sp, #4]
    108a:	2b00      	cmp	r3, #0
    108c:	d006      	beq.n	109c <app_write_data+0x3c>
        result = app_write_data_words(app_ptr, address, data, len);
    108e:	002b      	movs	r3, r5
    1090:	0039      	movs	r1, r7
    1092:	0030      	movs	r0, r6
    1094:	0022      	movs	r2, r4
    1096:	4c08      	ldr	r4, [pc, #32]	; (10b8 <app_write_data+0x58>)
    else
        result = app_write_data_bytes(app_ptr, address, data, len);
    1098:	47a0      	blx	r4
    
    return result;
}
    109a:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
        result = app_write_data_bytes(app_ptr, address, data, len);
    109c:	0022      	movs	r2, r4
    109e:	002b      	movs	r3, r5
    10a0:	0039      	movs	r1, r7
    10a2:	0030      	movs	r0, r6
    10a4:	4c05      	ldr	r4, [pc, #20]	; (10bc <app_write_data+0x5c>)
    10a6:	e7f7      	b.n	1098 <app_write_data+0x38>
        return ERROR_PTR;
    10a8:	2001      	movs	r0, #1
    10aa:	4240      	negs	r0, r0
    10ac:	e7f5      	b.n	109a <app_write_data+0x3a>
    10ae:	46c0      	nop			; (mov r8, r8)
    10b0:	00004da0 	.word	0x00004da0
    10b4:	00000357 	.word	0x00000357
    10b8:	00000e95 	.word	0x00000e95
    10bc:	00000f79 	.word	0x00000f79

000010c0 <_app_write_nvm>:
    @len: data len
    @nvm_command: programming command
    @return 0 successful, other value if failed
*/
int _app_write_nvm(void *app_ptr, u16 address, const u8 *data, int len, u8 nvm_command, bool use_word_access)
{
    10c0:	b5f0      	push	{r4, r5, r6, r7, lr}
    10c2:	b087      	sub	sp, #28
    10c4:	9304      	str	r3, [sp, #16]
    10c6:	ab0c      	add	r3, sp, #48	; 0x30
    10c8:	781b      	ldrb	r3, [r3, #0]
    10ca:	0005      	movs	r5, r0
    10cc:	9302      	str	r3, [sp, #8]
    10ce:	ab0d      	add	r3, sp, #52	; 0x34
    10d0:	781b      	ldrb	r3, [r3, #0]
    10d2:	000f      	movs	r7, r1
    10d4:	9203      	str	r2, [sp, #12]
    10d6:	9305      	str	r3, [sp, #20]
        By default the PAGE_WRITE command is used, which requires that the page is already erased.
    */
    upd_application_t *app = (upd_application_t *)app_ptr;
    int result;

    if (!VALID_APP(app))
    10d8:	2800      	cmp	r0, #0
    10da:	d059      	beq.n	1190 <_app_write_nvm+0xd0>
    10dc:	4b2d      	ldr	r3, [pc, #180]	; (1194 <_app_write_nvm+0xd4>)
    10de:	6802      	ldr	r2, [r0, #0]
    10e0:	429a      	cmp	r2, r3
    10e2:	d155      	bne.n	1190 <_app_write_nvm+0xd0>
        return ERROR_PTR;

    DBG_INFO(APP_DEBUG, "<APP> Chip write nvm");
    10e4:	492c      	ldr	r1, [pc, #176]	; (1198 <_app_write_nvm+0xd8>)
    10e6:	2003      	movs	r0, #3
    10e8:	4c2c      	ldr	r4, [pc, #176]	; (119c <_app_write_nvm+0xdc>)
    10ea:	47a0      	blx	r4

    // Check that NVM controller is ready
    result = app_wait_flash_ready(app, TIMEOUT_WAIT_FLASH_READY);
    10ec:	21fa      	movs	r1, #250	; 0xfa
    10ee:	0028      	movs	r0, r5
    10f0:	0089      	lsls	r1, r1, #2
    10f2:	4e2b      	ldr	r6, [pc, #172]	; (11a0 <_app_write_nvm+0xe0>)
    10f4:	47b0      	blx	r6
    10f6:	1e02      	subs	r2, r0, #0
    if (result) {
    10f8:	d006      	beq.n	1108 <_app_write_nvm+0x48>
        DBG_INFO(APP_DEBUG, "app_wait_flash_ready timeout before page buffer clear failed %d", result);
    10fa:	2003      	movs	r0, #3
    10fc:	4929      	ldr	r1, [pc, #164]	; (11a4 <_app_write_nvm+0xe4>)
    10fe:	47a0      	blx	r4
        return -2;
    1100:	2002      	movs	r0, #2
        return ERROR_PTR;
    1102:	4240      	negs	r0, r0
        DBG_INFO(APP_DEBUG, "app_wait_flash_ready timeout after page write failed %d", result);
        return -7;
    }

    return 0;
}
    1104:	b007      	add	sp, #28
    1106:	bdf0      	pop	{r4, r5, r6, r7, pc}
    DBG_INFO(APP_DEBUG, "Clear page buffer");
    1108:	4927      	ldr	r1, [pc, #156]	; (11a8 <_app_write_nvm+0xe8>)
    110a:	2003      	movs	r0, #3
    110c:	47a0      	blx	r4
    result = app_execute_nvm_command(app, UPDI_NVMCTRL_CTRLA_PAGE_BUFFER_CLR);
    110e:	4b27      	ldr	r3, [pc, #156]	; (11ac <_app_write_nvm+0xec>)
    1110:	2104      	movs	r1, #4
    1112:	0028      	movs	r0, r5
    1114:	4798      	blx	r3
    1116:	1e03      	subs	r3, r0, #0
    if (result) {
    1118:	d005      	beq.n	1126 <_app_write_nvm+0x66>
        DBG_INFO(APP_DEBUG, "app_execute_nvm_command failed %d", UPDI_NVMCTRL_CTRLA_PAGE_BUFFER_CLR, result);
    111a:	2003      	movs	r0, #3
    111c:	2204      	movs	r2, #4
    111e:	4924      	ldr	r1, [pc, #144]	; (11b0 <_app_write_nvm+0xf0>)
    1120:	47a0      	blx	r4
        return -3;
    1122:	2003      	movs	r0, #3
    1124:	e7ed      	b.n	1102 <_app_write_nvm+0x42>
    result = app_wait_flash_ready(app, TIMEOUT_WAIT_FLASH_READY);
    1126:	21fa      	movs	r1, #250	; 0xfa
    1128:	0028      	movs	r0, r5
    112a:	0089      	lsls	r1, r1, #2
    112c:	47b0      	blx	r6
    112e:	1e02      	subs	r2, r0, #0
    if (result) {
    1130:	d004      	beq.n	113c <_app_write_nvm+0x7c>
        DBG_INFO(APP_DEBUG, "app_wait_flash_ready timeout after page buffer clear failed %d", result);
    1132:	2003      	movs	r0, #3
    1134:	491f      	ldr	r1, [pc, #124]	; (11b4 <_app_write_nvm+0xf4>)
    1136:	47a0      	blx	r4
        return -4;
    1138:	2004      	movs	r0, #4
    113a:	e7e2      	b.n	1102 <_app_write_nvm+0x42>
    result = app_write_data(app, address, data, len, use_word_access);
    113c:	9b05      	ldr	r3, [sp, #20]
    113e:	9a03      	ldr	r2, [sp, #12]
    1140:	9300      	str	r3, [sp, #0]
    1142:	0039      	movs	r1, r7
    1144:	9b04      	ldr	r3, [sp, #16]
    1146:	0028      	movs	r0, r5
    1148:	4f1b      	ldr	r7, [pc, #108]	; (11b8 <_app_write_nvm+0xf8>)
    114a:	47b8      	blx	r7
    114c:	1e02      	subs	r2, r0, #0
    if (result) {
    114e:	d004      	beq.n	115a <_app_write_nvm+0x9a>
        DBG_INFO(APP_DEBUG, "app_write_data failed %d", result);
    1150:	2003      	movs	r0, #3
    1152:	491a      	ldr	r1, [pc, #104]	; (11bc <_app_write_nvm+0xfc>)
    1154:	47a0      	blx	r4
        return -5;
    1156:	2005      	movs	r0, #5
    1158:	e7d3      	b.n	1102 <_app_write_nvm+0x42>
    DBG_INFO(APP_DEBUG, "Committing page");
    115a:	4919      	ldr	r1, [pc, #100]	; (11c0 <_app_write_nvm+0x100>)
    115c:	2003      	movs	r0, #3
    115e:	47a0      	blx	r4
    result = app_execute_nvm_command(app, nvm_command);
    1160:	4b12      	ldr	r3, [pc, #72]	; (11ac <_app_write_nvm+0xec>)
    1162:	9902      	ldr	r1, [sp, #8]
    1164:	0028      	movs	r0, r5
    1166:	4798      	blx	r3
    1168:	1e03      	subs	r3, r0, #0
    if (result) {
    116a:	d005      	beq.n	1178 <_app_write_nvm+0xb8>
        DBG_INFO(APP_DEBUG, "app_execute_nvm_command(%d) failed %d", nvm_command, result);
    116c:	2003      	movs	r0, #3
    116e:	9a02      	ldr	r2, [sp, #8]
    1170:	4914      	ldr	r1, [pc, #80]	; (11c4 <_app_write_nvm+0x104>)
    1172:	47a0      	blx	r4
        return -6;
    1174:	2006      	movs	r0, #6
    1176:	e7c4      	b.n	1102 <_app_write_nvm+0x42>
    result = app_wait_flash_ready(app, TIMEOUT_WAIT_FLASH_READY);
    1178:	21fa      	movs	r1, #250	; 0xfa
    117a:	0028      	movs	r0, r5
    117c:	0089      	lsls	r1, r1, #2
    117e:	47b0      	blx	r6
    if (result) {
    1180:	2800      	cmp	r0, #0
    1182:	d0bf      	beq.n	1104 <_app_write_nvm+0x44>
        DBG_INFO(APP_DEBUG, "app_wait_flash_ready timeout after page write failed %d", result);
    1184:	0002      	movs	r2, r0
    1186:	4910      	ldr	r1, [pc, #64]	; (11c8 <_app_write_nvm+0x108>)
    1188:	2003      	movs	r0, #3
    118a:	47a0      	blx	r4
        return -7;
    118c:	2007      	movs	r0, #7
    118e:	e7b8      	b.n	1102 <_app_write_nvm+0x42>
        return ERROR_PTR;
    1190:	2001      	movs	r0, #1
    1192:	e7b6      	b.n	1102 <_app_write_nvm+0x42>
    1194:	0000b4b4 	.word	0x0000b4b4
    1198:	00004db5 	.word	0x00004db5
    119c:	00000357 	.word	0x00000357
    11a0:	0000099d 	.word	0x0000099d
    11a4:	00004dca 	.word	0x00004dca
    11a8:	00004e0a 	.word	0x00004e0a
    11ac:	00000a39 	.word	0x00000a39
    11b0:	00004a4d 	.word	0x00004a4d
    11b4:	00004e1c 	.word	0x00004e1c
    11b8:	00001061 	.word	0x00001061
    11bc:	00004e5b 	.word	0x00004e5b
    11c0:	00004e74 	.word	0x00004e74
    11c4:	00004e84 	.word	0x00004e84
    11c8:	00004eaa 	.word	0x00004eaa

000011cc <app_write_nvm>:
    @data: data buffer
    @len: data len
    @return 0 successful, other value if failed
*/
int app_write_nvm(void *app_ptr, u16 address, const u8 *data, int len)
{
    11cc:	b537      	push	{r0, r1, r2, r4, r5, lr}
    bool use_word_access = !(len & 0x1);
    11ce:	2401      	movs	r4, #1

    return _app_write_nvm(app_ptr, address, data, len, UPDI_NVMCTRL_CTRLA_WRITE_PAGE, use_word_access);
    11d0:	0025      	movs	r5, r4
    11d2:	439d      	bics	r5, r3
    11d4:	9501      	str	r5, [sp, #4]
    11d6:	9400      	str	r4, [sp, #0]
    11d8:	4c01      	ldr	r4, [pc, #4]	; (11e0 <app_write_nvm+0x14>)
    11da:	47a0      	blx	r4
}
    11dc:	bd3e      	pop	{r1, r2, r3, r4, r5, pc}
    11de:	46c0      	nop			; (mov r8, r8)
    11e0:	000010c1 	.word	0x000010c1

000011e4 <_app_erase_write_nvm>:
    @len: data len
    @use_word_access: 2 bytes mode for writting
    @return 0 successful, other value if failed
*/
int _app_erase_write_nvm(void *app_ptr, u16 address, const u8 *data, int len, bool use_word_access)
{
    11e4:	b513      	push	{r0, r1, r4, lr}
    11e6:	ac04      	add	r4, sp, #16
    11e8:	7824      	ldrb	r4, [r4, #0]
    return _app_write_nvm(app_ptr, address, data, len, UPDI_NVMCTRL_CTRLA_ERASE_WRITE_PAGE, use_word_access);
    11ea:	9401      	str	r4, [sp, #4]
    11ec:	2403      	movs	r4, #3
    11ee:	9400      	str	r4, [sp, #0]
    11f0:	4c01      	ldr	r4, [pc, #4]	; (11f8 <_app_erase_write_nvm+0x14>)
    11f2:	47a0      	blx	r4
}
    11f4:	bd16      	pop	{r1, r2, r4, pc}
    11f6:	46c0      	nop			; (mov r8, r8)
    11f8:	000010c1 	.word	0x000010c1

000011fc <updi_datalink_deinit>:
    LINK object destroy
    @link_ptr: APP object pointer, acquired from updi_datalink_init()
    @no return
*/
void updi_datalink_deinit(void *link_ptr)
{
    11fc:	b510      	push	{r4, lr}
    11fe:	1e04      	subs	r4, r0, #0
    upd_datalink_t *link = (upd_datalink_t *)link_ptr;
    if (VALID_LINK(link)) {
    1200:	d00a      	beq.n	1218 <updi_datalink_deinit+0x1c>
    1202:	4b06      	ldr	r3, [pc, #24]	; (121c <updi_datalink_deinit+0x20>)
    1204:	6802      	ldr	r2, [r0, #0]
    1206:	429a      	cmp	r2, r3
    1208:	d106      	bne.n	1218 <updi_datalink_deinit+0x1c>
        DBG_INFO(LINK_DEBUG, "<LINK> deinit link");
    120a:	2004      	movs	r0, #4
    120c:	4b04      	ldr	r3, [pc, #16]	; (1220 <updi_datalink_deinit+0x24>)
    120e:	4905      	ldr	r1, [pc, #20]	; (1224 <updi_datalink_deinit+0x28>)
    1210:	4798      	blx	r3

        updi_physical_deinit(PHY(link));
    1212:	6860      	ldr	r0, [r4, #4]
    1214:	4b04      	ldr	r3, [pc, #16]	; (1228 <updi_datalink_deinit+0x2c>)
    1216:	4798      	blx	r3
        //free(link);
    }
}
    1218:	bd10      	pop	{r4, pc}
    121a:	46c0      	nop			; (mov r8, r8)
    121c:	0000c3c3 	.word	0x0000c3c3
    1220:	00000357 	.word	0x00000357
    1224:	00004ee6 	.word	0x00004ee6
    1228:	000023fd 	.word	0x000023fd

0000122c <_link_ldcs>:
    @address: reg address
    @data: output 8bit buffer
    @return 0 successful, other value if failed
*/
int _link_ldcs(void *link_ptr, u8 address, u8 *data)
{
    122c:	b5f0      	push	{r4, r5, r6, r7, lr}
    /*
        Load data from Control / Status space
        default return 0 if error
    */
    upd_datalink_t *link = (upd_datalink_t *)link_ptr;
    u8 cmd[] = { UPDI_PHY_SYNC, UPDI_LDCS | (address & 0x0F) };
    122e:	2355      	movs	r3, #85	; 0x55
{
    1230:	0016      	movs	r6, r2
    u8 cmd[] = { UPDI_PHY_SYNC, UPDI_LDCS | (address & 0x0F) };
    1232:	220f      	movs	r2, #15
{
    1234:	b085      	sub	sp, #20
    u8 cmd[] = { UPDI_PHY_SYNC, UPDI_LDCS | (address & 0x0F) };
    1236:	ad03      	add	r5, sp, #12
    1238:	702b      	strb	r3, [r5, #0]
    123a:	400a      	ands	r2, r1
    123c:	3bd5      	subs	r3, #213	; 0xd5
    123e:	4313      	orrs	r3, r2
{
    1240:	1e04      	subs	r4, r0, #0
    u8 cmd[] = { UPDI_PHY_SYNC, UPDI_LDCS | (address & 0x0F) };
    1242:	706b      	strb	r3, [r5, #1]
    u8 resp;
    int result;

    if (!VALID_LINK(link) || !data)
    1244:	d022      	beq.n	128c <_link_ldcs+0x60>
    1246:	4b12      	ldr	r3, [pc, #72]	; (1290 <_link_ldcs+0x64>)
    1248:	6802      	ldr	r2, [r0, #0]
    124a:	429a      	cmp	r2, r3
    124c:	d11e      	bne.n	128c <_link_ldcs+0x60>
    124e:	2e00      	cmp	r6, #0
    1250:	d01c      	beq.n	128c <_link_ldcs+0x60>
        return ERROR_PTR;

    DBG_INFO(LINK_DEBUG, "<LINK> LDCS from 0x%02x", address);
    1252:	000a      	movs	r2, r1
    1254:	2004      	movs	r0, #4
    1256:	490f      	ldr	r1, [pc, #60]	; (1294 <_link_ldcs+0x68>)
    1258:	4f0f      	ldr	r7, [pc, #60]	; (1298 <_link_ldcs+0x6c>)
    125a:	47b8      	blx	r7
    result = phy_transfer(PHY(link), cmd, sizeof(cmd), &resp, sizeof(resp));
    125c:	2301      	movs	r3, #1
    125e:	9300      	str	r3, [sp, #0]
    1260:	330a      	adds	r3, #10
    1262:	2202      	movs	r2, #2
    1264:	6860      	ldr	r0, [r4, #4]
    1266:	446b      	add	r3, sp
    1268:	0029      	movs	r1, r5
    126a:	4c0c      	ldr	r4, [pc, #48]	; (129c <_link_ldcs+0x70>)
    126c:	47a0      	blx	r4
    126e:	0002      	movs	r2, r0
     if (result != sizeof(resp)) {
    1270:	2801      	cmp	r0, #1
    1272:	d005      	beq.n	1280 <_link_ldcs+0x54>
        DBG_INFO(LINK_DEBUG, "phy_transfer failed %d", result);
    1274:	2004      	movs	r0, #4
    1276:	490a      	ldr	r1, [pc, #40]	; (12a0 <_link_ldcs+0x74>)
    1278:	47b8      	blx	r7
        return -2;
    127a:	2002      	movs	r0, #2
        return ERROR_PTR;
    127c:	4240      	negs	r0, r0
    127e:	e003      	b.n	1288 <_link_ldcs+0x5c>
    }

    
    *data = resp;
    1280:	466b      	mov	r3, sp

    return 0;
    1282:	2000      	movs	r0, #0
    *data = resp;
    1284:	7adb      	ldrb	r3, [r3, #11]
    1286:	7033      	strb	r3, [r6, #0]
}
    1288:	b005      	add	sp, #20
    128a:	bdf0      	pop	{r4, r5, r6, r7, pc}
        return ERROR_PTR;
    128c:	2001      	movs	r0, #1
    128e:	e7f5      	b.n	127c <_link_ldcs+0x50>
    1290:	0000c3c3 	.word	0x0000c3c3
    1294:	00004ef9 	.word	0x00004ef9
    1298:	00000357 	.word	0x00000357
    129c:	00002895 	.word	0x00002895
    12a0:	00005b89 	.word	0x00005b89

000012a4 <link_check>:
{
    12a4:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
    12a6:	1e04      	subs	r4, r0, #0
    if (!VALID_LINK(link))
    12a8:	d02f      	beq.n	130a <link_check+0x66>
    12aa:	4b19      	ldr	r3, [pc, #100]	; (1310 <link_check+0x6c>)
    12ac:	6802      	ldr	r2, [r0, #0]
    12ae:	429a      	cmp	r2, r3
    12b0:	d12b      	bne.n	130a <link_check+0x66>
    DBG_INFO(LINK_DEBUG, "<LINK> link check");
    12b2:	4918      	ldr	r1, [pc, #96]	; (1314 <link_check+0x70>)
    12b4:	2004      	movs	r0, #4
    12b6:	4d18      	ldr	r5, [pc, #96]	; (1318 <link_check+0x74>)
    12b8:	47a8      	blx	r5
    result = _link_ldcs(link_ptr, UPDI_CS_STATUSB, &resp);
    12ba:	466b      	mov	r3, sp
    12bc:	1dde      	adds	r6, r3, #7
    12be:	0032      	movs	r2, r6
    12c0:	2101      	movs	r1, #1
    12c2:	0020      	movs	r0, r4
    12c4:	4f15      	ldr	r7, [pc, #84]	; (131c <link_check+0x78>)
    12c6:	47b8      	blx	r7
    if (result) {
    12c8:	2800      	cmp	r0, #0
    12ca:	d005      	beq.n	12d8 <link_check+0x34>
        DBG_INFO(LINK_DEBUG, "UPDI not ready");
    12cc:	4914      	ldr	r1, [pc, #80]	; (1320 <link_check+0x7c>)
    12ce:	2004      	movs	r0, #4
    12d0:	47a8      	blx	r5
        return -2;
    12d2:	2402      	movs	r4, #2
        return ERROR_PTR;
    12d4:	4264      	negs	r4, r4
    12d6:	e012      	b.n	12fe <link_check+0x5a>
    if (resp) {
    12d8:	7832      	ldrb	r2, [r6, #0]
    12da:	2a00      	cmp	r2, #0
    12dc:	d002      	beq.n	12e4 <link_check+0x40>
        DBG_INFO(LINK_DEBUG, "UPDI status error %d, send BREAK", resp);
    12de:	4911      	ldr	r1, [pc, #68]	; (1324 <link_check+0x80>)
    12e0:	2004      	movs	r0, #4
    12e2:	47a8      	blx	r5
    result = _link_ldcs(link_ptr, UPDI_CS_STATUSA, &resp);
    12e4:	0020      	movs	r0, r4
    12e6:	0032      	movs	r2, r6
    12e8:	2100      	movs	r1, #0
    12ea:	47b8      	blx	r7
    12ec:	1e04      	subs	r4, r0, #0
    if (result) {
    12ee:	d1ed      	bne.n	12cc <link_check+0x28>
    if (resp == 0) {
    12f0:	7832      	ldrb	r2, [r6, #0]
    12f2:	2a00      	cmp	r2, #0
    12f4:	d105      	bne.n	1302 <link_check+0x5e>
        DBG_INFO(LINK_DEBUG, "UPDI not OK - reinitialisation required");
    12f6:	490c      	ldr	r1, [pc, #48]	; (1328 <link_check+0x84>)
    12f8:	2004      	movs	r0, #4
    12fa:	47a8      	blx	r5
        return -3;
    12fc:	3c03      	subs	r4, #3
}
    12fe:	0020      	movs	r0, r4
    1300:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
    DBG_INFO(LINK_DEBUG, "UPDI init OK (%02x)", resp);
    1302:	490a      	ldr	r1, [pc, #40]	; (132c <link_check+0x88>)
    1304:	2004      	movs	r0, #4
    1306:	47a8      	blx	r5
    return 0;
    1308:	e7f9      	b.n	12fe <link_check+0x5a>
        return ERROR_PTR;
    130a:	2401      	movs	r4, #1
    130c:	e7e2      	b.n	12d4 <link_check+0x30>
    130e:	46c0      	nop			; (mov r8, r8)
    1310:	0000c3c3 	.word	0x0000c3c3
    1314:	00004f11 	.word	0x00004f11
    1318:	00000357 	.word	0x00000357
    131c:	0000122d 	.word	0x0000122d
    1320:	00004f23 	.word	0x00004f23
    1324:	00004f32 	.word	0x00004f32
    1328:	00004f53 	.word	0x00004f53
    132c:	00004f7b 	.word	0x00004f7b

00001330 <link_ldcs>:
    @link_ptr: APP object pointer, acquired from updi_datalink_init()
    @address: reg address
    @return reg value if successful, zero if not accessiable(this will confict with reg value zero)
*/
u8 link_ldcs(void *link_ptr, u8 address)
{
    1330:	b513      	push	{r0, r1, r4, lr}
    u8 resp;
    int result;

    result = _link_ldcs(link_ptr, address, &resp);
    1332:	466b      	mov	r3, sp
    1334:	1ddc      	adds	r4, r3, #7
    1336:	0022      	movs	r2, r4
    1338:	4b05      	ldr	r3, [pc, #20]	; (1350 <link_ldcs+0x20>)
    133a:	4798      	blx	r3
    133c:	1e02      	subs	r2, r0, #0
    if (result) {
    133e:	d005      	beq.n	134c <link_ldcs+0x1c>
        DBG_INFO(LINK_DEBUG, "_link_ldcs failed %d", result);
    1340:	2004      	movs	r0, #4
    1342:	4904      	ldr	r1, [pc, #16]	; (1354 <link_ldcs+0x24>)
    1344:	4b04      	ldr	r3, [pc, #16]	; (1358 <link_ldcs+0x28>)
    1346:	4798      	blx	r3
        return 0;
    1348:	2000      	movs	r0, #0
    }

    return resp;
}
    134a:	bd16      	pop	{r1, r2, r4, pc}
    return resp;
    134c:	7820      	ldrb	r0, [r4, #0]
    134e:	e7fc      	b.n	134a <link_ldcs+0x1a>
    1350:	0000122d 	.word	0x0000122d
    1354:	000046ee 	.word	0x000046ee
    1358:	00000357 	.word	0x00000357

0000135c <link_stcs>:
    @address: reg address
    @value: reg value
    @return 0 successful, other value if failed
*/
int link_stcs(void *link_ptr, u8 address, u8 value)
{
    135c:	b573      	push	{r0, r1, r4, r5, r6, lr}
    /*
        Store a value to Control / Status space
    */
    upd_datalink_t *link = (upd_datalink_t *)link_ptr;
    u8 cmd[] = { UPDI_PHY_SYNC, UPDI_STCS | (address & 0x0F), value };
    135e:	2355      	movs	r3, #85	; 0x55
{
    1360:	0005      	movs	r5, r0
    u8 cmd[] = { UPDI_PHY_SYNC, UPDI_STCS | (address & 0x0F), value };
    1362:	200f      	movs	r0, #15
    1364:	ac01      	add	r4, sp, #4
    1366:	7023      	strb	r3, [r4, #0]
    1368:	4008      	ands	r0, r1
    136a:	3b95      	subs	r3, #149	; 0x95
    136c:	4303      	orrs	r3, r0
    136e:	7063      	strb	r3, [r4, #1]
    1370:	70a2      	strb	r2, [r4, #2]
    int result;

    if (!VALID_LINK(link))
    1372:	2d00      	cmp	r5, #0
    1374:	d016      	beq.n	13a4 <link_stcs+0x48>
    1376:	4b0c      	ldr	r3, [pc, #48]	; (13a8 <link_stcs+0x4c>)
    1378:	682a      	ldr	r2, [r5, #0]
    137a:	429a      	cmp	r2, r3
    137c:	d112      	bne.n	13a4 <link_stcs+0x48>
        return ERROR_PTR;

    DBG_INFO(LINK_DEBUG, "<LINK> STCS to 0x02x", address);
    137e:	000a      	movs	r2, r1
    1380:	2004      	movs	r0, #4
    1382:	490a      	ldr	r1, [pc, #40]	; (13ac <link_stcs+0x50>)
    1384:	4e0a      	ldr	r6, [pc, #40]	; (13b0 <link_stcs+0x54>)
    1386:	47b0      	blx	r6

    result = phy_send(PHY(link), cmd, sizeof(cmd));
    1388:	2203      	movs	r2, #3
    138a:	0021      	movs	r1, r4
    138c:	6868      	ldr	r0, [r5, #4]
    138e:	4b09      	ldr	r3, [pc, #36]	; (13b4 <link_stcs+0x58>)
    1390:	4798      	blx	r3
    if (result) {
    1392:	2800      	cmp	r0, #0
    1394:	d005      	beq.n	13a2 <link_stcs+0x46>
        DBG_INFO(LINK_DEBUG, "phy_send failed %d", result);
    1396:	0002      	movs	r2, r0
    1398:	4907      	ldr	r1, [pc, #28]	; (13b8 <link_stcs+0x5c>)
    139a:	2004      	movs	r0, #4
    139c:	47b0      	blx	r6
        return -2;
    139e:	2002      	movs	r0, #2
        return ERROR_PTR;
    13a0:	4240      	negs	r0, r0
    }

    return 0;
}
    13a2:	bd76      	pop	{r1, r2, r4, r5, r6, pc}
        return ERROR_PTR;
    13a4:	2001      	movs	r0, #1
    13a6:	e7fb      	b.n	13a0 <link_stcs+0x44>
    13a8:	0000c3c3 	.word	0x0000c3c3
    13ac:	00004f8f 	.word	0x00004f8f
    13b0:	00000357 	.word	0x00000357
    13b4:	0000259d 	.word	0x0000259d
    13b8:	00005937 	.word	0x00005937

000013bc <link_set_init>:
{
    13bc:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
    u8 clksel, resp = 0;
    13be:	466b      	mov	r3, sp
    13c0:	1ddf      	adds	r7, r3, #7
    13c2:	2300      	movs	r3, #0
{
    13c4:	0004      	movs	r4, r0
    13c6:	000d      	movs	r5, r1
    u8 clksel, resp = 0;
    13c8:	703b      	strb	r3, [r7, #0]
    if (!VALID_LINK(link))
    13ca:	4298      	cmp	r0, r3
    13cc:	d05d      	beq.n	148a <link_set_init+0xce>
    13ce:	4b30      	ldr	r3, [pc, #192]	; (1490 <link_set_init+0xd4>)
    13d0:	6802      	ldr	r2, [r0, #0]
    13d2:	429a      	cmp	r2, r3
    13d4:	d159      	bne.n	148a <link_set_init+0xce>
    result = phy_set_baudrate(PHY(link), 115200);
    13d6:	21e1      	movs	r1, #225	; 0xe1
    13d8:	6840      	ldr	r0, [r0, #4]
    13da:	0249      	lsls	r1, r1, #9
    13dc:	4b2d      	ldr	r3, [pc, #180]	; (1494 <link_set_init+0xd8>)
    13de:	4798      	blx	r3
        DBG_INFO(LINK_DEBUG, "phy_set_baudrate default failed %d", result);
    13e0:	492d      	ldr	r1, [pc, #180]	; (1498 <link_set_init+0xdc>)
    result = phy_set_baudrate(PHY(link), 115200);
    13e2:	1e02      	subs	r2, r0, #0
    if (result) {
    13e4:	d14c      	bne.n	1480 <link_set_init+0xc4>
    result = link_stcs(link, UPDI_CS_CTRLB, 1 << UPDI_CTRLB_CCDETDIS_BIT);
    13e6:	2208      	movs	r2, #8
    13e8:	2103      	movs	r1, #3
    13ea:	0020      	movs	r0, r4
    13ec:	4e2b      	ldr	r6, [pc, #172]	; (149c <link_set_init+0xe0>)
    13ee:	47b0      	blx	r6
    13f0:	1e02      	subs	r2, r0, #0
    if (result) {
    13f2:	d006      	beq.n	1402 <link_set_init+0x46>
        DBG_INFO(LINK_DEBUG, "link_stcs UPDI_CS_CTRLB failed %d", result);
    13f4:	2004      	movs	r0, #4
    13f6:	492a      	ldr	r1, [pc, #168]	; (14a0 <link_set_init+0xe4>)
    13f8:	4b2a      	ldr	r3, [pc, #168]	; (14a4 <link_set_init+0xe8>)
    13fa:	4798      	blx	r3
        return -5;
    13fc:	2005      	movs	r0, #5
        return ERROR_PTR;
    13fe:	4240      	negs	r0, r0
}
    1400:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
    result = link_stcs(link, UPDI_CS_CTRLA, 1 << UPDI_CTRLA_IBDLY_BIT);
    1402:	2280      	movs	r2, #128	; 0x80
    1404:	2102      	movs	r1, #2
    1406:	0020      	movs	r0, r4
    1408:	47b0      	blx	r6
    140a:	1e02      	subs	r2, r0, #0
    if (result) {
    140c:	d005      	beq.n	141a <link_set_init+0x5e>
        DBG_INFO(LINK_DEBUG, "link_stcs UPDI_CS_CTRLA failed %d", result);
    140e:	2004      	movs	r0, #4
    1410:	4925      	ldr	r1, [pc, #148]	; (14a8 <link_set_init+0xec>)
    1412:	4b24      	ldr	r3, [pc, #144]	; (14a4 <link_set_init+0xe8>)
    1414:	4798      	blx	r3
        return -6;
    1416:	2006      	movs	r0, #6
    1418:	e7f1      	b.n	13fe <link_set_init+0x42>
    if (baud <= 225000) {
    141a:	4b24      	ldr	r3, [pc, #144]	; (14ac <link_set_init+0xf0>)
    141c:	429d      	cmp	r5, r3
    141e:	dd0d      	ble.n	143c <link_set_init+0x80>
    else if (baud <= 450000) {
    1420:	4b23      	ldr	r3, [pc, #140]	; (14b0 <link_set_init+0xf4>)
    1422:	429d      	cmp	r5, r3
    1424:	dd22      	ble.n	146c <link_set_init+0xb0>
    else if (baud <= 900000) {
    1426:	4b23      	ldr	r3, [pc, #140]	; (14b4 <link_set_init+0xf8>)
        clksel = UPDI_ASI_CTRLA_CLKSEL_16M;
    1428:	2601      	movs	r6, #1
    else if (baud <= 900000) {
    142a:	429d      	cmp	r5, r3
    142c:	dd07      	ble.n	143e <link_set_init+0x82>
        DBG_INFO(LINK_DEBUG, "Unsupported baudrate for UPDI clk %d, max 0.9Mhz", baud);
    142e:	2004      	movs	r0, #4
    1430:	002a      	movs	r2, r5
    1432:	4921      	ldr	r1, [pc, #132]	; (14b8 <link_set_init+0xfc>)
    1434:	4b1b      	ldr	r3, [pc, #108]	; (14a4 <link_set_init+0xe8>)
    1436:	4798      	blx	r3
        return -2;
    1438:	2002      	movs	r0, #2
    143a:	e7e0      	b.n	13fe <link_set_init+0x42>
        clksel = UPDI_ASI_CTRLA_CLKSEL_4M;
    143c:	2603      	movs	r6, #3
    result = _link_ldcs(link_ptr, UPDI_ASI_CTRLA, &resp);
    143e:	003a      	movs	r2, r7
    1440:	2109      	movs	r1, #9
    1442:	0020      	movs	r0, r4
    1444:	4b1d      	ldr	r3, [pc, #116]	; (14bc <link_set_init+0x100>)
    1446:	4798      	blx	r3
    if (result || resp != clksel) {
    1448:	2800      	cmp	r0, #0
    144a:	d102      	bne.n	1452 <link_set_init+0x96>
    144c:	783b      	ldrb	r3, [r7, #0]
    144e:	42b3      	cmp	r3, r6
    1450:	d00e      	beq.n	1470 <link_set_init+0xb4>
        result = link_stcs(link, UPDI_ASI_CTRLA, clksel);
    1452:	0032      	movs	r2, r6
    1454:	2109      	movs	r1, #9
    1456:	0020      	movs	r0, r4
    1458:	4b10      	ldr	r3, [pc, #64]	; (149c <link_set_init+0xe0>)
    145a:	4798      	blx	r3
    145c:	1e02      	subs	r2, r0, #0
        if (result) {
    145e:	d007      	beq.n	1470 <link_set_init+0xb4>
            DBG_INFO(LINK_DEBUG, "link_stcs UPDI_ASI_CTRLA failed %d", result);
    1460:	2004      	movs	r0, #4
    1462:	4917      	ldr	r1, [pc, #92]	; (14c0 <link_set_init+0x104>)
    1464:	4b0f      	ldr	r3, [pc, #60]	; (14a4 <link_set_init+0xe8>)
    1466:	4798      	blx	r3
            return -3;
    1468:	2003      	movs	r0, #3
    146a:	e7c8      	b.n	13fe <link_set_init+0x42>
        clksel = UPDI_ASI_CTRLA_CLKSEL_8M;
    146c:	2602      	movs	r6, #2
    146e:	e7e6      	b.n	143e <link_set_init+0x82>
    result = phy_set_baudrate(PHY(link), baud);
    1470:	0029      	movs	r1, r5
    1472:	6860      	ldr	r0, [r4, #4]
    1474:	4b07      	ldr	r3, [pc, #28]	; (1494 <link_set_init+0xd8>)
    1476:	4798      	blx	r3
    if (result) {
    1478:	2800      	cmp	r0, #0
    147a:	d0c1      	beq.n	1400 <link_set_init+0x44>
        DBG_INFO(LINK_DEBUG, "phy_set_baudrate failed %d", result);
    147c:	0002      	movs	r2, r0
    147e:	4911      	ldr	r1, [pc, #68]	; (14c4 <link_set_init+0x108>)
    1480:	2004      	movs	r0, #4
    1482:	4b08      	ldr	r3, [pc, #32]	; (14a4 <link_set_init+0xe8>)
    1484:	4798      	blx	r3
        return -4;
    1486:	2004      	movs	r0, #4
    1488:	e7b9      	b.n	13fe <link_set_init+0x42>
        return ERROR_PTR;
    148a:	2001      	movs	r0, #1
    148c:	e7b7      	b.n	13fe <link_set_init+0x42>
    148e:	46c0      	nop			; (mov r8, r8)
    1490:	0000c3c3 	.word	0x0000c3c3
    1494:	00002431 	.word	0x00002431
    1498:	00004fa4 	.word	0x00004fa4
    149c:	0000135d 	.word	0x0000135d
    14a0:	00004fc7 	.word	0x00004fc7
    14a4:	00000357 	.word	0x00000357
    14a8:	00004fe9 	.word	0x00004fe9
    14ac:	00036ee8 	.word	0x00036ee8
    14b0:	0006ddd0 	.word	0x0006ddd0
    14b4:	000dbba0 	.word	0x000dbba0
    14b8:	0000500b 	.word	0x0000500b
    14bc:	0000122d 	.word	0x0000122d
    14c0:	0000503c 	.word	0x0000503c
    14c4:	0000505f 	.word	0x0000505f

000014c8 <updi_datalink_init>:
{
    14c8:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
    DBG_INFO(LINK_DEBUG, "<LINK> init link");
    14ca:	4b1b      	ldr	r3, [pc, #108]	; (1538 <updi_datalink_init+0x70>)
{
    14cc:	0004      	movs	r4, r0
    14ce:	9101      	str	r1, [sp, #4]
    DBG_INFO(LINK_DEBUG, "<LINK> init link");
    14d0:	2004      	movs	r0, #4
    14d2:	491a      	ldr	r1, [pc, #104]	; (153c <updi_datalink_init+0x74>)
    14d4:	4798      	blx	r3
    phy = updi_physical_init(port, 115200);  //default baudrate first
    14d6:	21e1      	movs	r1, #225	; 0xe1
    14d8:	0020      	movs	r0, r4
    14da:	0249      	lsls	r1, r1, #9
    14dc:	4b18      	ldr	r3, [pc, #96]	; (1540 <updi_datalink_init+0x78>)
    14de:	4798      	blx	r3
    14e0:	1e05      	subs	r5, r0, #0
    if (phy) {
    14e2:	d019      	beq.n	1518 <updi_datalink_init+0x50>
        link->mgwd = UPD_DATALINK_MAGIC_WORD;
    14e4:	4b17      	ldr	r3, [pc, #92]	; (1544 <updi_datalink_init+0x7c>)
    14e6:	4a18      	ldr	r2, [pc, #96]	; (1548 <updi_datalink_init+0x80>)
    int result, retry = 3;
    14e8:	2703      	movs	r7, #3
        link->mgwd = UPD_DATALINK_MAGIC_WORD;
    14ea:	6013      	str	r3, [r2, #0]
        link->phy = (void *)phy;
    14ec:	0013      	movs	r3, r2
    14ee:	6058      	str	r0, [r3, #4]
          result = link_set_init(link, baud);
    14f0:	9901      	ldr	r1, [sp, #4]
    14f2:	4815      	ldr	r0, [pc, #84]	; (1548 <updi_datalink_init+0x80>)
    14f4:	4b15      	ldr	r3, [pc, #84]	; (154c <updi_datalink_init+0x84>)
    14f6:	4798      	blx	r3
    14f8:	1e04      	subs	r4, r0, #0
          if (result) {
    14fa:	d00e      	beq.n	151a <updi_datalink_init+0x52>
              DBG_INFO(LINK_DEBUG, "link_set_init failed %d, retry=%d", result, retry);
    14fc:	003b      	movs	r3, r7
    14fe:	0002      	movs	r2, r0
    1500:	4913      	ldr	r1, [pc, #76]	; (1550 <updi_datalink_init+0x88>)
              DBG_INFO(LINK_DEBUG, "link_check failed %d, retry=%d", result, retry);
    1502:	2004      	movs	r0, #4
    1504:	4e0c      	ldr	r6, [pc, #48]	; (1538 <updi_datalink_init+0x70>)
    1506:	47b0      	blx	r6
              phy_send_double_break(phy);
    1508:	0028      	movs	r0, r5
    150a:	4b12      	ldr	r3, [pc, #72]	; (1554 <updi_datalink_init+0x8c>)
    150c:	4798      	blx	r3
    150e:	480e      	ldr	r0, [pc, #56]	; (1548 <updi_datalink_init+0x80>)
        }while(retry-- && result);
    1510:	3f01      	subs	r7, #1
    1512:	d30b      	bcc.n	152c <updi_datalink_init+0x64>
    1514:	2c00      	cmp	r4, #0
    1516:	d1eb      	bne.n	14f0 <updi_datalink_init+0x28>
}
    1518:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
          result = link_check(link);
    151a:	480b      	ldr	r0, [pc, #44]	; (1548 <updi_datalink_init+0x80>)
    151c:	4b0e      	ldr	r3, [pc, #56]	; (1558 <updi_datalink_init+0x90>)
    151e:	4798      	blx	r3
    1520:	1e04      	subs	r4, r0, #0
          if (result) {
    1522:	d0f4      	beq.n	150e <updi_datalink_init+0x46>
              DBG_INFO(LINK_DEBUG, "link_check failed %d, retry=%d", result, retry);
    1524:	003b      	movs	r3, r7
    1526:	0002      	movs	r2, r0
    1528:	490c      	ldr	r1, [pc, #48]	; (155c <updi_datalink_init+0x94>)
    152a:	e7ea      	b.n	1502 <updi_datalink_init+0x3a>
        if (result) {
    152c:	2c00      	cmp	r4, #0
    152e:	d0f3      	beq.n	1518 <updi_datalink_init+0x50>
          updi_datalink_deinit(link);
    1530:	4b0b      	ldr	r3, [pc, #44]	; (1560 <updi_datalink_init+0x98>)
    1532:	4798      	blx	r3
          return NULL;
    1534:	2000      	movs	r0, #0
    1536:	e7ef      	b.n	1518 <updi_datalink_init+0x50>
    1538:	00000357 	.word	0x00000357
    153c:	0000507a 	.word	0x0000507a
    1540:	00002759 	.word	0x00002759
    1544:	0000c3c3 	.word	0x0000c3c3
    1548:	200023ac 	.word	0x200023ac
    154c:	000013bd 	.word	0x000013bd
    1550:	0000508b 	.word	0x0000508b
    1554:	000026b5 	.word	0x000026b5
    1558:	000012a5 	.word	0x000012a5
    155c:	000050ad 	.word	0x000050ad
    1560:	000011fd 	.word	0x000011fd

00001564 <_link_ld>:
    /*
        Load a single byte direct from a 16 - bit address
        return 0 if error
    */
    upd_datalink_t *link = (upd_datalink_t *)link_ptr;
    const u8 cmd[] = { UPDI_PHY_SYNC, UPDI_LDS | UPDI_ADDRESS_16 | UPDI_DATA_8, address & 0xFF, (address >> 8) & 0xFF};
    1564:	2355      	movs	r3, #85	; 0x55
{
    1566:	b5f0      	push	{r4, r5, r6, r7, lr}
    const u8 cmd[] = { UPDI_PHY_SYNC, UPDI_LDS | UPDI_ADDRESS_16 | UPDI_DATA_8, address & 0xFF, (address >> 8) & 0xFF};
    1568:	2504      	movs	r5, #4
{
    156a:	b085      	sub	sp, #20
    const u8 cmd[] = { UPDI_PHY_SYNC, UPDI_LDS | UPDI_ADDRESS_16 | UPDI_DATA_8, address & 0xFF, (address >> 8) & 0xFF};
    156c:	ac03      	add	r4, sp, #12
    156e:	7023      	strb	r3, [r4, #0]
    1570:	0a0b      	lsrs	r3, r1, #8
{
    1572:	0006      	movs	r6, r0
    1574:	0017      	movs	r7, r2
    const u8 cmd[] = { UPDI_PHY_SYNC, UPDI_LDS | UPDI_ADDRESS_16 | UPDI_DATA_8, address & 0xFF, (address >> 8) & 0xFF};
    1576:	7065      	strb	r5, [r4, #1]
    1578:	70a1      	strb	r1, [r4, #2]
    157a:	70e3      	strb	r3, [r4, #3]
    u8 resp;
    int result;

    if (!VALID_LINK(link) || !val)
    157c:	2800      	cmp	r0, #0
    157e:	d023      	beq.n	15c8 <_link_ld+0x64>
    1580:	4b12      	ldr	r3, [pc, #72]	; (15cc <_link_ld+0x68>)
    1582:	6802      	ldr	r2, [r0, #0]
    1584:	429a      	cmp	r2, r3
    1586:	d11f      	bne.n	15c8 <_link_ld+0x64>
    1588:	2f00      	cmp	r7, #0
    158a:	d01d      	beq.n	15c8 <_link_ld+0x64>
        return ERROR_PTR;

    DBG_INFO(LINK_DEBUG, "<LINK> LD from %04X}", address);
    158c:	000a      	movs	r2, r1
    158e:	0028      	movs	r0, r5
    1590:	490f      	ldr	r1, [pc, #60]	; (15d0 <_link_ld+0x6c>)
    1592:	4b10      	ldr	r3, [pc, #64]	; (15d4 <_link_ld+0x70>)
    1594:	4798      	blx	r3
  
    result = phy_transfer(PHY(link), cmd, sizeof(cmd), &resp, sizeof(resp));
    1596:	2301      	movs	r3, #1
    1598:	9300      	str	r3, [sp, #0]
    159a:	330a      	adds	r3, #10
    159c:	002a      	movs	r2, r5
    159e:	0021      	movs	r1, r4
    15a0:	446b      	add	r3, sp
    15a2:	6870      	ldr	r0, [r6, #4]
    15a4:	4c0c      	ldr	r4, [pc, #48]	; (15d8 <_link_ld+0x74>)
    15a6:	47a0      	blx	r4
    15a8:	0002      	movs	r2, r0
    if (result != sizeof(resp)) {
    15aa:	2801      	cmp	r0, #1
    15ac:	d006      	beq.n	15bc <_link_ld+0x58>
        DBG_INFO(LINK_DEBUG, "phy_transfer failed %d", result);
    15ae:	0028      	movs	r0, r5
    15b0:	490a      	ldr	r1, [pc, #40]	; (15dc <_link_ld+0x78>)
    15b2:	4b08      	ldr	r3, [pc, #32]	; (15d4 <_link_ld+0x70>)
    15b4:	4798      	blx	r3
        return -2;
    15b6:	2002      	movs	r0, #2
        return ERROR_PTR;
    15b8:	4240      	negs	r0, r0
    15ba:	e003      	b.n	15c4 <_link_ld+0x60>
    }

    *val = resp;
    15bc:	466b      	mov	r3, sp

    return 0;
    15be:	2000      	movs	r0, #0
    *val = resp;
    15c0:	7adb      	ldrb	r3, [r3, #11]
    15c2:	703b      	strb	r3, [r7, #0]
}
    15c4:	b005      	add	sp, #20
    15c6:	bdf0      	pop	{r4, r5, r6, r7, pc}
        return ERROR_PTR;
    15c8:	2001      	movs	r0, #1
    15ca:	e7f5      	b.n	15b8 <_link_ld+0x54>
    15cc:	0000c3c3 	.word	0x0000c3c3
    15d0:	000050cc 	.word	0x000050cc
    15d4:	00000357 	.word	0x00000357
    15d8:	00002895 	.word	0x00002895
    15dc:	00005b89 	.word	0x00005b89

000015e0 <_link_ld16>:
{
    /*
    Load a 2 byte direct from a 16 - bit address
    */
    upd_datalink_t *link = (upd_datalink_t *)link_ptr;
    const u8 cmd[] = { UPDI_PHY_SYNC , UPDI_LDS | UPDI_ADDRESS_16 | UPDI_DATA_16, address & 0xFF, (address >> 8) & 0xFF};
    15e0:	2355      	movs	r3, #85	; 0x55
{
    15e2:	b5f0      	push	{r4, r5, r6, r7, lr}
    15e4:	b087      	sub	sp, #28
    const u8 cmd[] = { UPDI_PHY_SYNC , UPDI_LDS | UPDI_ADDRESS_16 | UPDI_DATA_16, address & 0xFF, (address >> 8) & 0xFF};
    15e6:	ac05      	add	r4, sp, #20
    15e8:	7023      	strb	r3, [r4, #0]
    15ea:	3b50      	subs	r3, #80	; 0x50
    15ec:	7063      	strb	r3, [r4, #1]
    15ee:	0a0b      	lsrs	r3, r1, #8
{
    15f0:	1e06      	subs	r6, r0, #0
    15f2:	9203      	str	r2, [sp, #12]
    const u8 cmd[] = { UPDI_PHY_SYNC , UPDI_LDS | UPDI_ADDRESS_16 | UPDI_DATA_16, address & 0xFF, (address >> 8) & 0xFF};
    15f4:	70a1      	strb	r1, [r4, #2]
    15f6:	70e3      	strb	r3, [r4, #3]
    u8 resp[2];
    int result;

    if (!VALID_LINK(link))
    15f8:	d023      	beq.n	1642 <_link_ld16+0x62>
    15fa:	4b13      	ldr	r3, [pc, #76]	; (1648 <_link_ld16+0x68>)
    15fc:	6802      	ldr	r2, [r0, #0]
    15fe:	429a      	cmp	r2, r3
    1600:	d11f      	bne.n	1642 <_link_ld16+0x62>
        return ERROR_PTR;

    DBG_INFO(LINK_DEBUG, "<LINK> LD from %04X}", address);
    1602:	000a      	movs	r2, r1
    1604:	2004      	movs	r0, #4
    1606:	4911      	ldr	r1, [pc, #68]	; (164c <_link_ld16+0x6c>)
    1608:	4f11      	ldr	r7, [pc, #68]	; (1650 <_link_ld16+0x70>)
    160a:	47b8      	blx	r7

    result = phy_transfer(PHY(link), cmd, sizeof(cmd), resp, sizeof(resp));
    160c:	2302      	movs	r3, #2
    160e:	ad04      	add	r5, sp, #16
    1610:	9300      	str	r3, [sp, #0]
    1612:	2204      	movs	r2, #4
    1614:	0021      	movs	r1, r4
    1616:	002b      	movs	r3, r5
    1618:	6870      	ldr	r0, [r6, #4]
    161a:	4c0e      	ldr	r4, [pc, #56]	; (1654 <_link_ld16+0x74>)
    161c:	47a0      	blx	r4
    161e:	0002      	movs	r2, r0
    if (result != sizeof(resp)) {
    1620:	2802      	cmp	r0, #2
    1622:	d005      	beq.n	1630 <_link_ld16+0x50>
        DBG_INFO(LINK_DEBUG, "phy_transfer failed %d", result);
    1624:	2004      	movs	r0, #4
    1626:	490c      	ldr	r1, [pc, #48]	; (1658 <_link_ld16+0x78>)
    1628:	47b8      	blx	r7
        return -2;
    162a:	2002      	movs	r0, #2
        return ERROR_PTR;
    162c:	4240      	negs	r0, r0
    162e:	e006      	b.n	163e <_link_ld16+0x5e>
    }

    *val = resp[0] | (resp[1] << 8);
    return 0;
    1630:	2000      	movs	r0, #0
    *val = resp[0] | (resp[1] << 8);
    1632:	786a      	ldrb	r2, [r5, #1]
    1634:	782b      	ldrb	r3, [r5, #0]
    1636:	0212      	lsls	r2, r2, #8
    1638:	4313      	orrs	r3, r2
    163a:	9a03      	ldr	r2, [sp, #12]
    163c:	8013      	strh	r3, [r2, #0]
}
    163e:	b007      	add	sp, #28
    1640:	bdf0      	pop	{r4, r5, r6, r7, pc}
        return ERROR_PTR;
    1642:	2001      	movs	r0, #1
    1644:	e7f2      	b.n	162c <_link_ld16+0x4c>
    1646:	46c0      	nop			; (mov r8, r8)
    1648:	0000c3c3 	.word	0x0000c3c3
    164c:	000050cc 	.word	0x000050cc
    1650:	00000357 	.word	0x00000357
    1654:	00002895 	.word	0x00002895
    1658:	00005b89 	.word	0x00005b89

0000165c <link_st>:
    @address: target address
    @value: target value
    @return 0 successful, other value if failed
*/
int link_st(void *link_ptr, u16 address, u8 value)
{
    165c:	0013      	movs	r3, r2
    /*
        Store a single byte value directly to a 16 - bit address
    */
    upd_datalink_t *link = (upd_datalink_t *)link_ptr;
    const u8 cmd[] = { UPDI_PHY_SYNC, UPDI_STS | UPDI_ADDRESS_16 | UPDI_DATA_8, address & 0xFF, (address >> 8) & 0xFF};
    165e:	2255      	movs	r2, #85	; 0x55
{
    1660:	b5f0      	push	{r4, r5, r6, r7, lr}
    1662:	b085      	sub	sp, #20
    const u8 cmd[] = { UPDI_PHY_SYNC, UPDI_STS | UPDI_ADDRESS_16 | UPDI_DATA_8, address & 0xFF, (address >> 8) & 0xFF};
    1664:	ad03      	add	r5, sp, #12
    1666:	702a      	strb	r2, [r5, #0]
    1668:	3a11      	subs	r2, #17
    166a:	706a      	strb	r2, [r5, #1]
    166c:	0a0a      	lsrs	r2, r1, #8
    166e:	70ea      	strb	r2, [r5, #3]
    const u8 val[] = { value };
    1670:	466a      	mov	r2, sp
    u8 resp = 0xff;
    1672:	240b      	movs	r4, #11
    const u8 val[] = { value };
    1674:	7213      	strb	r3, [r2, #8]
    u8 resp = 0xff;
    1676:	22ff      	movs	r2, #255	; 0xff
    1678:	446c      	add	r4, sp
{
    167a:	1e06      	subs	r6, r0, #0
    const u8 cmd[] = { UPDI_PHY_SYNC, UPDI_STS | UPDI_ADDRESS_16 | UPDI_DATA_8, address & 0xFF, (address >> 8) & 0xFF};
    167c:	70a9      	strb	r1, [r5, #2]
    u8 resp = 0xff;
    167e:	7022      	strb	r2, [r4, #0]
    int result;

    if (!VALID_LINK(link))
    1680:	d031      	beq.n	16e6 <link_st+0x8a>
    1682:	4a1a      	ldr	r2, [pc, #104]	; (16ec <link_st+0x90>)
    1684:	6800      	ldr	r0, [r0, #0]
    1686:	4290      	cmp	r0, r2
    1688:	d12d      	bne.n	16e6 <link_st+0x8a>
        return ERROR_PTR;

    DBG_INFO(LINK_DEBUG, "<LINK> ST to 0x04X: %02x", address, value);
    168a:	000a      	movs	r2, r1
    168c:	2004      	movs	r0, #4
    168e:	4918      	ldr	r1, [pc, #96]	; (16f0 <link_st+0x94>)
    1690:	4f18      	ldr	r7, [pc, #96]	; (16f4 <link_st+0x98>)
    1692:	47b8      	blx	r7

    result = phy_transfer(PHY(link), cmd, sizeof(cmd), &resp, sizeof(resp));
    1694:	2301      	movs	r3, #1
    1696:	2204      	movs	r2, #4
    1698:	9300      	str	r3, [sp, #0]
    169a:	0029      	movs	r1, r5
    169c:	0023      	movs	r3, r4
    169e:	6870      	ldr	r0, [r6, #4]
    16a0:	4d15      	ldr	r5, [pc, #84]	; (16f8 <link_st+0x9c>)
    16a2:	47a8      	blx	r5
    16a4:	0002      	movs	r2, r0
    if (result != sizeof(resp) || resp != UPDI_PHY_ACK) {
    16a6:	2801      	cmp	r0, #1
    16a8:	d102      	bne.n	16b0 <link_st+0x54>
    16aa:	7823      	ldrb	r3, [r4, #0]
    16ac:	2b40      	cmp	r3, #64	; 0x40
    16ae:	d009      	beq.n	16c4 <link_st+0x68>
        DBG_INFO(LINK_DEBUG, "phy_transfer failed %d ack %02x", result, resp);
    16b0:	230b      	movs	r3, #11
    16b2:	446b      	add	r3, sp
    16b4:	781b      	ldrb	r3, [r3, #0]
    16b6:	4911      	ldr	r1, [pc, #68]	; (16fc <link_st+0xa0>)
        return -2;
    }

    result = phy_transfer(PHY(link), val, sizeof(val), &resp, sizeof(resp));
    if (result != sizeof(resp) || resp != UPDI_PHY_ACK) {
        DBG_INFO(LINK_DEBUG, "phy_transfer #2 failed %d ack %02x", result, resp);
    16b8:	2004      	movs	r0, #4
    16ba:	47b8      	blx	r7
        return -2;
    16bc:	2002      	movs	r0, #2
        return ERROR_PTR;
    16be:	4240      	negs	r0, r0
    }

    return 0;
}
    16c0:	b005      	add	sp, #20
    16c2:	bdf0      	pop	{r4, r5, r6, r7, pc}
    result = phy_transfer(PHY(link), val, sizeof(val), &resp, sizeof(resp));
    16c4:	9000      	str	r0, [sp, #0]
    16c6:	0023      	movs	r3, r4
    16c8:	a902      	add	r1, sp, #8
    16ca:	6870      	ldr	r0, [r6, #4]
    16cc:	47a8      	blx	r5
    16ce:	0002      	movs	r2, r0
    if (result != sizeof(resp) || resp != UPDI_PHY_ACK) {
    16d0:	2801      	cmp	r0, #1
    16d2:	d103      	bne.n	16dc <link_st+0x80>
    16d4:	7821      	ldrb	r1, [r4, #0]
    return 0;
    16d6:	2000      	movs	r0, #0
    if (result != sizeof(resp) || resp != UPDI_PHY_ACK) {
    16d8:	2940      	cmp	r1, #64	; 0x40
    16da:	d0f1      	beq.n	16c0 <link_st+0x64>
        DBG_INFO(LINK_DEBUG, "phy_transfer #2 failed %d ack %02x", result, resp);
    16dc:	230b      	movs	r3, #11
    16de:	446b      	add	r3, sp
    16e0:	781b      	ldrb	r3, [r3, #0]
    16e2:	4907      	ldr	r1, [pc, #28]	; (1700 <link_st+0xa4>)
    16e4:	e7e8      	b.n	16b8 <link_st+0x5c>
        return ERROR_PTR;
    16e6:	2001      	movs	r0, #1
    16e8:	e7e9      	b.n	16be <link_st+0x62>
    16ea:	46c0      	nop			; (mov r8, r8)
    16ec:	0000c3c3 	.word	0x0000c3c3
    16f0:	000050e1 	.word	0x000050e1
    16f4:	00000357 	.word	0x00000357
    16f8:	00002895 	.word	0x00002895
    16fc:	000050fa 	.word	0x000050fa
    1700:	0000511a 	.word	0x0000511a

00001704 <link_st16>:
    @address: target address
    @value: target value
    @return 0 successful, other value if failed
*/
int link_st16(void *link_ptr, u16 address, u16 value)
{
    1704:	0013      	movs	r3, r2
    /*
        Store a 16 - bit word value directly to a 16 - bit address
    */
    upd_datalink_t *link = (upd_datalink_t *)link_ptr;
    const u8 cmd[] = { UPDI_PHY_SYNC, UPDI_STS | UPDI_ADDRESS_16 | UPDI_DATA_16, address & 0xFF, (address >> 8) & 0xFF };
    1706:	2255      	movs	r2, #85	; 0x55
{
    1708:	b5f0      	push	{r4, r5, r6, r7, lr}
    170a:	b087      	sub	sp, #28
    const u8 cmd[] = { UPDI_PHY_SYNC, UPDI_STS | UPDI_ADDRESS_16 | UPDI_DATA_16, address & 0xFF, (address >> 8) & 0xFF };
    170c:	ad05      	add	r5, sp, #20
    170e:	702a      	strb	r2, [r5, #0]
    1710:	3a10      	subs	r2, #16
    1712:	706a      	strb	r2, [r5, #1]
    1714:	0a0a      	lsrs	r2, r1, #8
    1716:	70ea      	strb	r2, [r5, #3]
    const u8 val[] = { value & 0xFF, (value >> 8) & 0xFF };
    1718:	466a      	mov	r2, sp
{
    171a:	0006      	movs	r6, r0
    const u8 val[] = { value & 0xFF, (value >> 8) & 0xFF };
    171c:	4668      	mov	r0, sp
    171e:	7413      	strb	r3, [r2, #16]
    u8 resp = 0xff;
    1720:	240f      	movs	r4, #15
    const u8 val[] = { value & 0xFF, (value >> 8) & 0xFF };
    1722:	0a1a      	lsrs	r2, r3, #8
    1724:	7442      	strb	r2, [r0, #17]
    u8 resp = 0xff;
    1726:	22ff      	movs	r2, #255	; 0xff
    1728:	446c      	add	r4, sp
    const u8 cmd[] = { UPDI_PHY_SYNC, UPDI_STS | UPDI_ADDRESS_16 | UPDI_DATA_16, address & 0xFF, (address >> 8) & 0xFF };
    172a:	70a9      	strb	r1, [r5, #2]
    u8 resp = 0xff;
    172c:	7022      	strb	r2, [r4, #0]
    int result;

    if (!VALID_LINK(link))
    172e:	2e00      	cmp	r6, #0
    1730:	d033      	beq.n	179a <link_st16+0x96>
    1732:	4a1b      	ldr	r2, [pc, #108]	; (17a0 <link_st16+0x9c>)
    1734:	6830      	ldr	r0, [r6, #0]
    1736:	4290      	cmp	r0, r2
    1738:	d12f      	bne.n	179a <link_st16+0x96>
        return ERROR_PTR;

    DBG_INFO(LINK_DEBUG, "<LINK> ST16 to 0x04X: %04x", address, value);
    173a:	000a      	movs	r2, r1
    173c:	2004      	movs	r0, #4
    173e:	4919      	ldr	r1, [pc, #100]	; (17a4 <link_st16+0xa0>)
    1740:	4f19      	ldr	r7, [pc, #100]	; (17a8 <link_st16+0xa4>)
    1742:	47b8      	blx	r7

    result = phy_transfer(PHY(link), cmd, sizeof(cmd), &resp, sizeof(resp));
    1744:	2301      	movs	r3, #1
    1746:	2204      	movs	r2, #4
    1748:	9300      	str	r3, [sp, #0]
    174a:	0029      	movs	r1, r5
    174c:	0023      	movs	r3, r4
    174e:	6870      	ldr	r0, [r6, #4]
    1750:	4d16      	ldr	r5, [pc, #88]	; (17ac <link_st16+0xa8>)
    1752:	47a8      	blx	r5
    1754:	0002      	movs	r2, r0
    if (result != sizeof(resp) || resp != UPDI_PHY_ACK) {
    1756:	2801      	cmp	r0, #1
    1758:	d102      	bne.n	1760 <link_st16+0x5c>
    175a:	7823      	ldrb	r3, [r4, #0]
    175c:	2b40      	cmp	r3, #64	; 0x40
    175e:	d00a      	beq.n	1776 <link_st16+0x72>
        DBG_INFO(LINK_DEBUG, "phy_transfer failed %d ack %02x", result, resp);
    1760:	230f      	movs	r3, #15
    1762:	446b      	add	r3, sp
    1764:	781b      	ldrb	r3, [r3, #0]
    1766:	4912      	ldr	r1, [pc, #72]	; (17b0 <link_st16+0xac>)
        return -2;
    }

    result = phy_transfer(PHY(link), val, sizeof(val), &resp, sizeof(resp));
    if (result != sizeof(resp) || resp != UPDI_PHY_ACK) {
        DBG_INFO(LINK_DEBUG, "phy_transfer #2 failed %d ack %02x", result, resp);
    1768:	2004      	movs	r0, #4
    176a:	4c0f      	ldr	r4, [pc, #60]	; (17a8 <link_st16+0xa4>)
    176c:	47a0      	blx	r4
        return -2;
    176e:	2002      	movs	r0, #2
        return ERROR_PTR;
    1770:	4240      	negs	r0, r0
    }

    return 0;
}
    1772:	b007      	add	sp, #28
    1774:	bdf0      	pop	{r4, r5, r6, r7, pc}
    result = phy_transfer(PHY(link), val, sizeof(val), &resp, sizeof(resp));
    1776:	9000      	str	r0, [sp, #0]
    1778:	2202      	movs	r2, #2
    177a:	0023      	movs	r3, r4
    177c:	a904      	add	r1, sp, #16
    177e:	6870      	ldr	r0, [r6, #4]
    1780:	47a8      	blx	r5
    1782:	0002      	movs	r2, r0
    if (result != sizeof(resp) || resp != UPDI_PHY_ACK) {
    1784:	2801      	cmp	r0, #1
    1786:	d103      	bne.n	1790 <link_st16+0x8c>
    1788:	7821      	ldrb	r1, [r4, #0]
    return 0;
    178a:	2000      	movs	r0, #0
    if (result != sizeof(resp) || resp != UPDI_PHY_ACK) {
    178c:	2940      	cmp	r1, #64	; 0x40
    178e:	d0f0      	beq.n	1772 <link_st16+0x6e>
        DBG_INFO(LINK_DEBUG, "phy_transfer #2 failed %d ack %02x", result, resp);
    1790:	230f      	movs	r3, #15
    1792:	446b      	add	r3, sp
    1794:	781b      	ldrb	r3, [r3, #0]
    1796:	4907      	ldr	r1, [pc, #28]	; (17b4 <link_st16+0xb0>)
    1798:	e7e6      	b.n	1768 <link_st16+0x64>
        return ERROR_PTR;
    179a:	2001      	movs	r0, #1
    179c:	e7e8      	b.n	1770 <link_st16+0x6c>
    179e:	46c0      	nop			; (mov r8, r8)
    17a0:	0000c3c3 	.word	0x0000c3c3
    17a4:	0000513d 	.word	0x0000513d
    17a8:	00000357 	.word	0x00000357
    17ac:	00002895 	.word	0x00002895
    17b0:	000050fa 	.word	0x000050fa
    17b4:	0000511a 	.word	0x0000511a

000017b8 <link_ld_ptr_inc>:
    @data: data output buffer
    @len: data length to be read
    @return 0 successful, other value if failed
*/
int link_ld_ptr_inc(void *link_ptr, u8 *data, int len)
{
    17b8:	b5f0      	push	{r4, r5, r6, r7, lr}
    17ba:	b085      	sub	sp, #20
    17bc:	0004      	movs	r4, r0
    17be:	000f      	movs	r7, r1
    17c0:	0016      	movs	r6, r2
    /*
        Loads a number of bytes from the pointer location with pointer post - increment
    */
    upd_datalink_t *link = (upd_datalink_t *)link_ptr;
    const u8 cmd[] = { UPDI_PHY_SYNC, UPDI_LD | UPDI_PTR_INC | UPDI_DATA_8 };
    17c2:	4911      	ldr	r1, [pc, #68]	; (1808 <link_ld_ptr_inc+0x50>)
    17c4:	2202      	movs	r2, #2
    17c6:	a803      	add	r0, sp, #12
    17c8:	4b10      	ldr	r3, [pc, #64]	; (180c <link_ld_ptr_inc+0x54>)
    17ca:	4798      	blx	r3
    int result;

    if (!VALID_LINK(link))
    17cc:	2c00      	cmp	r4, #0
    17ce:	d019      	beq.n	1804 <link_ld_ptr_inc+0x4c>
    17d0:	4b0f      	ldr	r3, [pc, #60]	; (1810 <link_ld_ptr_inc+0x58>)
    17d2:	6822      	ldr	r2, [r4, #0]
    17d4:	429a      	cmp	r2, r3
    17d6:	d115      	bne.n	1804 <link_ld_ptr_inc+0x4c>
        return ERROR_PTR;

    DBG_INFO(LINK_DEBUG, "<LINK> LD8 from ptr++");
    17d8:	490e      	ldr	r1, [pc, #56]	; (1814 <link_ld_ptr_inc+0x5c>)
    17da:	2004      	movs	r0, #4
    17dc:	4d0e      	ldr	r5, [pc, #56]	; (1818 <link_ld_ptr_inc+0x60>)
    17de:	47a8      	blx	r5
 
    result = phy_transfer(PHY(link), cmd, sizeof(cmd), data, len);
    17e0:	9600      	str	r6, [sp, #0]
    17e2:	2202      	movs	r2, #2
    17e4:	6860      	ldr	r0, [r4, #4]
    17e6:	003b      	movs	r3, r7
    17e8:	a903      	add	r1, sp, #12
    17ea:	4c0c      	ldr	r4, [pc, #48]	; (181c <link_ld_ptr_inc+0x64>)
    17ec:	47a0      	blx	r4
    17ee:	0002      	movs	r2, r0
    if (result != len) {
        DBG_INFO(LINK_DEBUG, "phy_transfer failed %d", result);
        return -2;
    }

    return 0;
    17f0:	2000      	movs	r0, #0
    if (result != len) {
    17f2:	4296      	cmp	r6, r2
    17f4:	d004      	beq.n	1800 <link_ld_ptr_inc+0x48>
        DBG_INFO(LINK_DEBUG, "phy_transfer failed %d", result);
    17f6:	3004      	adds	r0, #4
    17f8:	4909      	ldr	r1, [pc, #36]	; (1820 <link_ld_ptr_inc+0x68>)
    17fa:	47a8      	blx	r5
        return -2;
    17fc:	2002      	movs	r0, #2
        return ERROR_PTR;
    17fe:	4240      	negs	r0, r0
}
    1800:	b005      	add	sp, #20
    1802:	bdf0      	pop	{r4, r5, r6, r7, pc}
        return ERROR_PTR;
    1804:	2001      	movs	r0, #1
    1806:	e7fa      	b.n	17fe <link_ld_ptr_inc+0x46>
    1808:	00004ee2 	.word	0x00004ee2
    180c:	000043f9 	.word	0x000043f9
    1810:	0000c3c3 	.word	0x0000c3c3
    1814:	00005158 	.word	0x00005158
    1818:	00000357 	.word	0x00000357
    181c:	00002895 	.word	0x00002895
    1820:	00005b89 	.word	0x00005b89

00001824 <link_ld_ptr_inc16>:
    @data: data output buffer
    @len: data length to be read
    @return 0 successful, other value if failed
*/
int link_ld_ptr_inc16(void *link_ptr, u8 *data, int len)
{
    1824:	b5f0      	push	{r4, r5, r6, r7, lr}
    1826:	0016      	movs	r6, r2
    /*
        Load a 16-bit word value from the pointer location with pointer post-increment
    */
    upd_datalink_t *link = (upd_datalink_t *)link_ptr;
    const u8 cmd[] = { UPDI_PHY_SYNC, UPDI_LD | UPDI_PTR_INC | UPDI_DATA_16 };
    1828:	2202      	movs	r2, #2
{
    182a:	000f      	movs	r7, r1
    const u8 cmd[] = { UPDI_PHY_SYNC, UPDI_LD | UPDI_PTR_INC | UPDI_DATA_16 };
    182c:	4912      	ldr	r1, [pc, #72]	; (1878 <link_ld_ptr_inc16+0x54>)
{
    182e:	b085      	sub	sp, #20
    1830:	0004      	movs	r4, r0
    const u8 cmd[] = { UPDI_PHY_SYNC, UPDI_LD | UPDI_PTR_INC | UPDI_DATA_16 };
    1832:	1889      	adds	r1, r1, r2
    1834:	a803      	add	r0, sp, #12
    1836:	4b11      	ldr	r3, [pc, #68]	; (187c <link_ld_ptr_inc16+0x58>)
    1838:	4798      	blx	r3
    int result;

    if (!VALID_LINK(link))
    183a:	2c00      	cmp	r4, #0
    183c:	d019      	beq.n	1872 <link_ld_ptr_inc16+0x4e>
    183e:	4b10      	ldr	r3, [pc, #64]	; (1880 <link_ld_ptr_inc16+0x5c>)
    1840:	6822      	ldr	r2, [r4, #0]
    1842:	429a      	cmp	r2, r3
    1844:	d115      	bne.n	1872 <link_ld_ptr_inc16+0x4e>
        return ERROR_PTR;

    DBG_INFO(LINK_DEBUG, "<LINK> LD16 from ptr++");
    1846:	490f      	ldr	r1, [pc, #60]	; (1884 <link_ld_ptr_inc16+0x60>)
    1848:	2004      	movs	r0, #4
    184a:	4d0f      	ldr	r5, [pc, #60]	; (1888 <link_ld_ptr_inc16+0x64>)
    184c:	47a8      	blx	r5

    result = phy_transfer(PHY(link), cmd, sizeof(cmd), data, len);
    184e:	9600      	str	r6, [sp, #0]
    1850:	2202      	movs	r2, #2
    1852:	6860      	ldr	r0, [r4, #4]
    1854:	003b      	movs	r3, r7
    1856:	a903      	add	r1, sp, #12
    1858:	4c0c      	ldr	r4, [pc, #48]	; (188c <link_ld_ptr_inc16+0x68>)
    185a:	47a0      	blx	r4
    185c:	0002      	movs	r2, r0
    if (result != len) {
        DBG_INFO(LINK_DEBUG, "phy_transfer failed %d", result);
        return -2;
    }

    return 0;
    185e:	2000      	movs	r0, #0
    if (result != len) {
    1860:	4296      	cmp	r6, r2
    1862:	d004      	beq.n	186e <link_ld_ptr_inc16+0x4a>
        DBG_INFO(LINK_DEBUG, "phy_transfer failed %d", result);
    1864:	3004      	adds	r0, #4
    1866:	490a      	ldr	r1, [pc, #40]	; (1890 <link_ld_ptr_inc16+0x6c>)
    1868:	47a8      	blx	r5
        return -2;
    186a:	2002      	movs	r0, #2
        return ERROR_PTR;
    186c:	4240      	negs	r0, r0
}
    186e:	b005      	add	sp, #20
    1870:	bdf0      	pop	{r4, r5, r6, r7, pc}
        return ERROR_PTR;
    1872:	2001      	movs	r0, #1
    1874:	e7fa      	b.n	186c <link_ld_ptr_inc16+0x48>
    1876:	46c0      	nop			; (mov r8, r8)
    1878:	00004ee2 	.word	0x00004ee2
    187c:	000043f9 	.word	0x000043f9
    1880:	0000c3c3 	.word	0x0000c3c3
    1884:	0000516e 	.word	0x0000516e
    1888:	00000357 	.word	0x00000357
    188c:	00002895 	.word	0x00002895
    1890:	00005b89 	.word	0x00005b89

00001894 <link_st_ptr>:
{
    /*
        Set the pointer location
    */
    upd_datalink_t *link = (upd_datalink_t *)link_ptr;
    const u8 cmd[] = { UPDI_PHY_SYNC, UPDI_ST | UPDI_PTR_ADDRESS | UPDI_DATA_16, address & 0xFF, (address >> 8) & 0xFF };
    1894:	2355      	movs	r3, #85	; 0x55
{
    1896:	b5f0      	push	{r4, r5, r6, r7, lr}
    1898:	b085      	sub	sp, #20
    const u8 cmd[] = { UPDI_PHY_SYNC, UPDI_ST | UPDI_PTR_ADDRESS | UPDI_DATA_16, address & 0xFF, (address >> 8) & 0xFF };
    189a:	ac03      	add	r4, sp, #12
    189c:	7023      	strb	r3, [r4, #0]
    189e:	3314      	adds	r3, #20
    18a0:	7063      	strb	r3, [r4, #1]
    u8 resp = 0xFF;
    18a2:	250b      	movs	r5, #11
    const u8 cmd[] = { UPDI_PHY_SYNC, UPDI_ST | UPDI_PTR_ADDRESS | UPDI_DATA_16, address & 0xFF, (address >> 8) & 0xFF };
    18a4:	0a0b      	lsrs	r3, r1, #8
    18a6:	70e3      	strb	r3, [r4, #3]
    u8 resp = 0xFF;
    18a8:	23ff      	movs	r3, #255	; 0xff
    18aa:	446d      	add	r5, sp
{
    18ac:	0007      	movs	r7, r0
    18ae:	000a      	movs	r2, r1
    const u8 cmd[] = { UPDI_PHY_SYNC, UPDI_ST | UPDI_PTR_ADDRESS | UPDI_DATA_16, address & 0xFF, (address >> 8) & 0xFF };
    18b0:	70a1      	strb	r1, [r4, #2]
    u8 resp = 0xFF;
    18b2:	702b      	strb	r3, [r5, #0]
    int result;

    if (!VALID_LINK(link))
    18b4:	2800      	cmp	r0, #0
    18b6:	d01e      	beq.n	18f6 <link_st_ptr+0x62>
    18b8:	4b10      	ldr	r3, [pc, #64]	; (18fc <link_st_ptr+0x68>)
    18ba:	6801      	ldr	r1, [r0, #0]
    18bc:	4299      	cmp	r1, r3
    18be:	d11a      	bne.n	18f6 <link_st_ptr+0x62>
        return ERROR_PTR;

    DBG_INFO(LINK_DEBUG, "<LINK> ST ptr %x", address);
    18c0:	490f      	ldr	r1, [pc, #60]	; (1900 <link_st_ptr+0x6c>)
    18c2:	2004      	movs	r0, #4
    18c4:	4e0f      	ldr	r6, [pc, #60]	; (1904 <link_st_ptr+0x70>)
    18c6:	47b0      	blx	r6

    result = phy_transfer(PHY(link), cmd, sizeof(cmd), &resp, sizeof(resp));
    18c8:	2301      	movs	r3, #1
    18ca:	9300      	str	r3, [sp, #0]
    18cc:	2204      	movs	r2, #4
    18ce:	0021      	movs	r1, r4
    18d0:	002b      	movs	r3, r5
    18d2:	6878      	ldr	r0, [r7, #4]
    18d4:	4c0c      	ldr	r4, [pc, #48]	; (1908 <link_st_ptr+0x74>)
    18d6:	47a0      	blx	r4
    18d8:	0002      	movs	r2, r0
    if (result != sizeof(resp) || resp != UPDI_PHY_ACK) {
    18da:	2801      	cmp	r0, #1
    18dc:	d103      	bne.n	18e6 <link_st_ptr+0x52>
    18de:	7829      	ldrb	r1, [r5, #0]
        DBG_INFO(LINK_DEBUG, "phy_transfer failed %d resp = 0x%02x", result, resp);
        return -2;
    }

    return 0;
    18e0:	2000      	movs	r0, #0
    if (result != sizeof(resp) || resp != UPDI_PHY_ACK) {
    18e2:	2940      	cmp	r1, #64	; 0x40
    18e4:	d005      	beq.n	18f2 <link_st_ptr+0x5e>
        DBG_INFO(LINK_DEBUG, "phy_transfer failed %d resp = 0x%02x", result, resp);
    18e6:	2004      	movs	r0, #4
    18e8:	782b      	ldrb	r3, [r5, #0]
    18ea:	4908      	ldr	r1, [pc, #32]	; (190c <link_st_ptr+0x78>)
    18ec:	47b0      	blx	r6
        return -2;
    18ee:	2002      	movs	r0, #2
        return ERROR_PTR;
    18f0:	4240      	negs	r0, r0
}
    18f2:	b005      	add	sp, #20
    18f4:	bdf0      	pop	{r4, r5, r6, r7, pc}
        return ERROR_PTR;
    18f6:	2001      	movs	r0, #1
    18f8:	e7fa      	b.n	18f0 <link_st_ptr+0x5c>
    18fa:	46c0      	nop			; (mov r8, r8)
    18fc:	0000c3c3 	.word	0x0000c3c3
    1900:	00005185 	.word	0x00005185
    1904:	00000357 	.word	0x00000357
    1908:	00002895 	.word	0x00002895
    190c:	00005196 	.word	0x00005196

00001910 <link_st_ptr_inc>:
{
    /*
        Store data to the pointer location with pointer post - increment
    */
    upd_datalink_t *link = (upd_datalink_t *)link_ptr;
    const u8 cmd[] = { UPDI_PHY_SYNC, UPDI_ST | UPDI_PTR_INC | UPDI_DATA_8, data[0] };
    1910:	2355      	movs	r3, #85	; 0x55
{
    1912:	b5f0      	push	{r4, r5, r6, r7, lr}
    1914:	b089      	sub	sp, #36	; 0x24
    const u8 cmd[] = { UPDI_PHY_SYNC, UPDI_ST | UPDI_PTR_INC | UPDI_DATA_8, data[0] };
    1916:	ac07      	add	r4, sp, #28
    1918:	7023      	strb	r3, [r4, #0]
    191a:	330f      	adds	r3, #15
    191c:	7063      	strb	r3, [r4, #1]
    191e:	780b      	ldrb	r3, [r1, #0]
{
    1920:	1e05      	subs	r5, r0, #0
    1922:	9103      	str	r1, [sp, #12]
    1924:	9205      	str	r2, [sp, #20]
    const u8 cmd[] = { UPDI_PHY_SYNC, UPDI_ST | UPDI_PTR_INC | UPDI_DATA_8, data[0] };
    1926:	70a3      	strb	r3, [r4, #2]
    u8 resp;
    int i;
    int result;

    if (!VALID_LINK(link))
    1928:	d043      	beq.n	19b2 <link_st_ptr_inc+0xa2>
    192a:	4b23      	ldr	r3, [pc, #140]	; (19b8 <link_st_ptr_inc+0xa8>)
    192c:	6802      	ldr	r2, [r0, #0]
    192e:	429a      	cmp	r2, r3
    1930:	d13f      	bne.n	19b2 <link_st_ptr_inc+0xa2>
        return ERROR_PTR;

    DBG_INFO(LINK_DEBUG, "<LINK> ST8 to *ptr++");

    result = phy_transfer(PHY(link), cmd, sizeof(cmd), &resp, sizeof(resp));
    1932:	260b      	movs	r6, #11
    DBG_INFO(LINK_DEBUG, "<LINK> ST8 to *ptr++");
    1934:	4921      	ldr	r1, [pc, #132]	; (19bc <link_st_ptr_inc+0xac>)
    1936:	2004      	movs	r0, #4
    1938:	4f21      	ldr	r7, [pc, #132]	; (19c0 <link_st_ptr_inc+0xb0>)
    193a:	47b8      	blx	r7
    result = phy_transfer(PHY(link), cmd, sizeof(cmd), &resp, sizeof(resp));
    193c:	ab04      	add	r3, sp, #16
    193e:	18f6      	adds	r6, r6, r3
    1940:	2301      	movs	r3, #1
    1942:	0021      	movs	r1, r4
    1944:	9300      	str	r3, [sp, #0]
    1946:	4c1f      	ldr	r4, [pc, #124]	; (19c4 <link_st_ptr_inc+0xb4>)
    1948:	0033      	movs	r3, r6
    194a:	2203      	movs	r2, #3
    194c:	6868      	ldr	r0, [r5, #4]
    194e:	47a0      	blx	r4
    1950:	0004      	movs	r4, r0
    if (result != sizeof(resp) || resp != UPDI_PHY_ACK) {
    1952:	2801      	cmp	r0, #1
    1954:	d102      	bne.n	195c <link_st_ptr_inc+0x4c>
    1956:	7833      	ldrb	r3, [r6, #0]
    1958:	2b40      	cmp	r3, #64	; 0x40
    195a:	d024      	beq.n	19a6 <link_st_ptr_inc+0x96>
        DBG_INFO(LINK_DEBUG, "phy_transfer failed %d resp 0x%02x", result, resp);
    195c:	7833      	ldrb	r3, [r6, #0]
    195e:	0022      	movs	r2, r4
    1960:	4919      	ldr	r1, [pc, #100]	; (19c8 <link_st_ptr_inc+0xb8>)
    1962:	2004      	movs	r0, #4
    1964:	47b8      	blx	r7

    for (i = 1; i < len; i++) {
        result = phy_transfer(PHY(link), &data[i], 1, &resp, sizeof(resp));
        if (result != sizeof(resp) || resp != UPDI_PHY_ACK) {
            DBG_INFO(LINK_DEBUG, "phy_transfer failed %d i %d resp 0x%02x", result, i, resp);
            return -2;
    1966:	2002      	movs	r0, #2
        return ERROR_PTR;
    1968:	4240      	negs	r0, r0
    196a:	e020      	b.n	19ae <link_st_ptr_inc+0x9e>
        result = phy_transfer(PHY(link), &data[i], 1, &resp, sizeof(resp));
    196c:	270b      	movs	r7, #11
    196e:	ab04      	add	r3, sp, #16
    1970:	18ff      	adds	r7, r7, r3
    1972:	9b03      	ldr	r3, [sp, #12]
    1974:	9704      	str	r7, [sp, #16]
    1976:	1919      	adds	r1, r3, r4
    1978:	2301      	movs	r3, #1
    197a:	2201      	movs	r2, #1
    197c:	9300      	str	r3, [sp, #0]
    197e:	6868      	ldr	r0, [r5, #4]
    1980:	003b      	movs	r3, r7
    1982:	4f10      	ldr	r7, [pc, #64]	; (19c4 <link_st_ptr_inc+0xb4>)
    1984:	47b8      	blx	r7
    1986:	0002      	movs	r2, r0
        if (result != sizeof(resp) || resp != UPDI_PHY_ACK) {
    1988:	2801      	cmp	r0, #1
    198a:	d103      	bne.n	1994 <link_st_ptr_inc+0x84>
    198c:	9b04      	ldr	r3, [sp, #16]
    198e:	781b      	ldrb	r3, [r3, #0]
    1990:	2b40      	cmp	r3, #64	; 0x40
    1992:	d007      	beq.n	19a4 <link_st_ptr_inc+0x94>
            DBG_INFO(LINK_DEBUG, "phy_transfer failed %d i %d resp 0x%02x", result, i, resp);
    1994:	7833      	ldrb	r3, [r6, #0]
    1996:	490d      	ldr	r1, [pc, #52]	; (19cc <link_st_ptr_inc+0xbc>)
    1998:	9300      	str	r3, [sp, #0]
    199a:	2004      	movs	r0, #4
    199c:	0023      	movs	r3, r4
    199e:	4c08      	ldr	r4, [pc, #32]	; (19c0 <link_st_ptr_inc+0xb0>)
    19a0:	47a0      	blx	r4
    19a2:	e7e0      	b.n	1966 <link_st_ptr_inc+0x56>
    for (i = 1; i < len; i++) {
    19a4:	3401      	adds	r4, #1
    19a6:	9b05      	ldr	r3, [sp, #20]
    19a8:	429c      	cmp	r4, r3
    19aa:	dbdf      	blt.n	196c <link_st_ptr_inc+0x5c>
        }
    }

    return 0;
    19ac:	2000      	movs	r0, #0
}
    19ae:	b009      	add	sp, #36	; 0x24
    19b0:	bdf0      	pop	{r4, r5, r6, r7, pc}
        return ERROR_PTR;
    19b2:	2001      	movs	r0, #1
    19b4:	e7d8      	b.n	1968 <link_st_ptr_inc+0x58>
    19b6:	46c0      	nop			; (mov r8, r8)
    19b8:	0000c3c3 	.word	0x0000c3c3
    19bc:	000051bb 	.word	0x000051bb
    19c0:	00000357 	.word	0x00000357
    19c4:	00002895 	.word	0x00002895
    19c8:	000051d0 	.word	0x000051d0
    19cc:	000051f3 	.word	0x000051f3

000019d0 <link_st_ptr_inc16>:
{
    /*
        Store a 16 - bit word value to the pointer location with pointer post - increment
    */
    upd_datalink_t *link = (upd_datalink_t *)link_ptr;
    const u8 cmd[] = { UPDI_PHY_SYNC, UPDI_ST | UPDI_PTR_INC | UPDI_DATA_16, data[0], data[1] };
    19d0:	2355      	movs	r3, #85	; 0x55
{
    19d2:	b5f0      	push	{r4, r5, r6, r7, lr}
    u8 resp = 0xFF;
    19d4:	260b      	movs	r6, #11
{
    19d6:	b089      	sub	sp, #36	; 0x24
    const u8 cmd[] = { UPDI_PHY_SYNC, UPDI_ST | UPDI_PTR_INC | UPDI_DATA_16, data[0], data[1] };
    19d8:	ac07      	add	r4, sp, #28
    19da:	7023      	strb	r3, [r4, #0]
    19dc:	3310      	adds	r3, #16
    19de:	7063      	strb	r3, [r4, #1]
    19e0:	780b      	ldrb	r3, [r1, #0]
{
    19e2:	0005      	movs	r5, r0
    const u8 cmd[] = { UPDI_PHY_SYNC, UPDI_ST | UPDI_PTR_INC | UPDI_DATA_16, data[0], data[1] };
    19e4:	70a3      	strb	r3, [r4, #2]
    19e6:	784b      	ldrb	r3, [r1, #1]
{
    19e8:	9103      	str	r1, [sp, #12]
    const u8 cmd[] = { UPDI_PHY_SYNC, UPDI_ST | UPDI_PTR_INC | UPDI_DATA_16, data[0], data[1] };
    19ea:	70e3      	strb	r3, [r4, #3]
    u8 resp = 0xFF;
    19ec:	ab04      	add	r3, sp, #16
    19ee:	18f6      	adds	r6, r6, r3
    19f0:	23ff      	movs	r3, #255	; 0xff
{
    19f2:	9204      	str	r2, [sp, #16]
    u8 resp = 0xFF;
    19f4:	7033      	strb	r3, [r6, #0]
    int i;
    int result;

    if (!VALID_LINK(link))
    19f6:	2800      	cmp	r0, #0
    19f8:	d044      	beq.n	1a84 <link_st_ptr_inc16+0xb4>
    19fa:	4b23      	ldr	r3, [pc, #140]	; (1a88 <link_st_ptr_inc16+0xb8>)
    19fc:	6802      	ldr	r2, [r0, #0]
    19fe:	429a      	cmp	r2, r3
    1a00:	d140      	bne.n	1a84 <link_st_ptr_inc16+0xb4>
        return ERROR_PTR;

    DBG_INFO(LINK_DEBUG, "<LINK> ST16 to *ptr++");
    1a02:	4922      	ldr	r1, [pc, #136]	; (1a8c <link_st_ptr_inc16+0xbc>)
    1a04:	2004      	movs	r0, #4
    1a06:	4f22      	ldr	r7, [pc, #136]	; (1a90 <link_st_ptr_inc16+0xc0>)
    1a08:	47b8      	blx	r7

    result = phy_transfer(PHY(link), cmd, sizeof(cmd), &resp, sizeof(resp));
    1a0a:	2301      	movs	r3, #1
    1a0c:	2204      	movs	r2, #4
    1a0e:	9300      	str	r3, [sp, #0]
    1a10:	0021      	movs	r1, r4
    1a12:	0033      	movs	r3, r6
    1a14:	6868      	ldr	r0, [r5, #4]
    1a16:	4c1f      	ldr	r4, [pc, #124]	; (1a94 <link_st_ptr_inc16+0xc4>)
    1a18:	47a0      	blx	r4
    1a1a:	0002      	movs	r2, r0
    if (result != sizeof(resp) || resp != UPDI_PHY_ACK) {
    1a1c:	2801      	cmp	r0, #1
    1a1e:	d10a      	bne.n	1a36 <link_st_ptr_inc16+0x66>
    1a20:	7833      	ldrb	r3, [r6, #0]
    1a22:	2b40      	cmp	r3, #64	; 0x40
    1a24:	d107      	bne.n	1a36 <link_st_ptr_inc16+0x66>
    1a26:	2402      	movs	r4, #2
        DBG_INFO(LINK_DEBUG, "phy_transfer failed %d resp 0x%02x", result, resp);
        return -2;
    }

    for (i = 2; i < len; i += 2) {
        result = phy_transfer(PHY(link), &data[i], 2, &resp, sizeof(resp));
    1a28:	9005      	str	r0, [sp, #20]
    for (i = 2; i < len; i += 2) {
    1a2a:	9b04      	ldr	r3, [sp, #16]
    1a2c:	429c      	cmp	r4, r3
    1a2e:	db0c      	blt.n	1a4a <link_st_ptr_inc16+0x7a>
            DBG_INFO(LINK_DEBUG, "phy_transfer failed %d i %d resp 0x%02x", result, i, resp);
            return -3;
        }
    }

    return 0;
    1a30:	2000      	movs	r0, #0
}
    1a32:	b009      	add	sp, #36	; 0x24
    1a34:	bdf0      	pop	{r4, r5, r6, r7, pc}
        DBG_INFO(LINK_DEBUG, "phy_transfer failed %d resp 0x%02x", result, resp);
    1a36:	230b      	movs	r3, #11
    1a38:	a904      	add	r1, sp, #16
    1a3a:	185b      	adds	r3, r3, r1
    1a3c:	2004      	movs	r0, #4
    1a3e:	781b      	ldrb	r3, [r3, #0]
    1a40:	4915      	ldr	r1, [pc, #84]	; (1a98 <link_st_ptr_inc16+0xc8>)
    1a42:	47b8      	blx	r7
        return -2;
    1a44:	2002      	movs	r0, #2
        return ERROR_PTR;
    1a46:	4240      	negs	r0, r0
    1a48:	e7f3      	b.n	1a32 <link_st_ptr_inc16+0x62>
        result = phy_transfer(PHY(link), &data[i], 2, &resp, sizeof(resp));
    1a4a:	260b      	movs	r6, #11
    1a4c:	ab04      	add	r3, sp, #16
    1a4e:	18f6      	adds	r6, r6, r3
    1a50:	9b03      	ldr	r3, [sp, #12]
    1a52:	2202      	movs	r2, #2
    1a54:	1919      	adds	r1, r3, r4
    1a56:	9b05      	ldr	r3, [sp, #20]
    1a58:	6868      	ldr	r0, [r5, #4]
    1a5a:	9300      	str	r3, [sp, #0]
    1a5c:	4f0d      	ldr	r7, [pc, #52]	; (1a94 <link_st_ptr_inc16+0xc4>)
    1a5e:	0033      	movs	r3, r6
    1a60:	47b8      	blx	r7
    1a62:	0002      	movs	r2, r0
        if (result != sizeof(resp) || resp != UPDI_PHY_ACK) {
    1a64:	2801      	cmp	r0, #1
    1a66:	d102      	bne.n	1a6e <link_st_ptr_inc16+0x9e>
    1a68:	7833      	ldrb	r3, [r6, #0]
    1a6a:	2b40      	cmp	r3, #64	; 0x40
    1a6c:	d008      	beq.n	1a80 <link_st_ptr_inc16+0xb0>
            DBG_INFO(LINK_DEBUG, "phy_transfer failed %d i %d resp 0x%02x", result, i, resp);
    1a6e:	7833      	ldrb	r3, [r6, #0]
    1a70:	2004      	movs	r0, #4
    1a72:	9300      	str	r3, [sp, #0]
    1a74:	4909      	ldr	r1, [pc, #36]	; (1a9c <link_st_ptr_inc16+0xcc>)
    1a76:	0023      	movs	r3, r4
    1a78:	4c05      	ldr	r4, [pc, #20]	; (1a90 <link_st_ptr_inc16+0xc0>)
    1a7a:	47a0      	blx	r4
            return -3;
    1a7c:	2003      	movs	r0, #3
    1a7e:	e7e2      	b.n	1a46 <link_st_ptr_inc16+0x76>
    for (i = 2; i < len; i += 2) {
    1a80:	3402      	adds	r4, #2
    1a82:	e7d2      	b.n	1a2a <link_st_ptr_inc16+0x5a>
        return ERROR_PTR;
    1a84:	2001      	movs	r0, #1
    1a86:	e7de      	b.n	1a46 <link_st_ptr_inc16+0x76>
    1a88:	0000c3c3 	.word	0x0000c3c3
    1a8c:	0000521b 	.word	0x0000521b
    1a90:	00000357 	.word	0x00000357
    1a94:	00002895 	.word	0x00002895
    1a98:	000051d0 	.word	0x000051d0
    1a9c:	000051f3 	.word	0x000051f3

00001aa0 <link_repeat>:
{
    /*
        Store a value to the 8bit repeat counter
    */
    upd_datalink_t *link = (upd_datalink_t *)link_ptr;
    u8 cmd[] = { UPDI_PHY_SYNC, UPDI_REPEAT | UPDI_REPEAT_BYTE, repeats};
    1aa0:	2355      	movs	r3, #85	; 0x55
{
    1aa2:	b573      	push	{r0, r1, r4, r5, r6, lr}
    u8 cmd[] = { UPDI_PHY_SYNC, UPDI_REPEAT | UPDI_REPEAT_BYTE, repeats};
    1aa4:	ac01      	add	r4, sp, #4
    1aa6:	7023      	strb	r3, [r4, #0]
    1aa8:	334b      	adds	r3, #75	; 0x4b
{
    1aaa:	0005      	movs	r5, r0
    1aac:	000a      	movs	r2, r1
    u8 cmd[] = { UPDI_PHY_SYNC, UPDI_REPEAT | UPDI_REPEAT_BYTE, repeats};
    1aae:	7063      	strb	r3, [r4, #1]
    1ab0:	70a1      	strb	r1, [r4, #2]
    int result;
    
    if (!VALID_LINK(link))
    1ab2:	2800      	cmp	r0, #0
    1ab4:	d015      	beq.n	1ae2 <link_repeat+0x42>
    1ab6:	4b0c      	ldr	r3, [pc, #48]	; (1ae8 <link_repeat+0x48>)
    1ab8:	6801      	ldr	r1, [r0, #0]
    1aba:	4299      	cmp	r1, r3
    1abc:	d111      	bne.n	1ae2 <link_repeat+0x42>
        return ERROR_PTR;

    DBG_INFO(LINK_DEBUG, "<LINK> Repeat %d", repeats);
    1abe:	490b      	ldr	r1, [pc, #44]	; (1aec <link_repeat+0x4c>)
    1ac0:	2004      	movs	r0, #4
    1ac2:	4e0b      	ldr	r6, [pc, #44]	; (1af0 <link_repeat+0x50>)
    1ac4:	47b0      	blx	r6

    result = phy_send(PHY(link), cmd, sizeof(cmd));
    1ac6:	2203      	movs	r2, #3
    1ac8:	0021      	movs	r1, r4
    1aca:	6868      	ldr	r0, [r5, #4]
    1acc:	4b09      	ldr	r3, [pc, #36]	; (1af4 <link_repeat+0x54>)
    1ace:	4798      	blx	r3
    if (result) {
    1ad0:	2800      	cmp	r0, #0
    1ad2:	d005      	beq.n	1ae0 <link_repeat+0x40>
        DBG_INFO(LINK_DEBUG, "phy_send failed %d", result);
    1ad4:	0002      	movs	r2, r0
    1ad6:	4908      	ldr	r1, [pc, #32]	; (1af8 <link_repeat+0x58>)
    1ad8:	2004      	movs	r0, #4
    1ada:	47b0      	blx	r6
        return -2;
    1adc:	2002      	movs	r0, #2
        return ERROR_PTR;
    1ade:	4240      	negs	r0, r0
    }

    return 0;
}
    1ae0:	bd76      	pop	{r1, r2, r4, r5, r6, pc}
        return ERROR_PTR;
    1ae2:	2001      	movs	r0, #1
    1ae4:	e7fb      	b.n	1ade <link_repeat+0x3e>
    1ae6:	46c0      	nop			; (mov r8, r8)
    1ae8:	0000c3c3 	.word	0x0000c3c3
    1aec:	00005231 	.word	0x00005231
    1af0:	00000357 	.word	0x00000357
    1af4:	0000259d 	.word	0x0000259d
    1af8:	00005937 	.word	0x00005937

00001afc <link_repeat16>:
{
    /*
    Store a value to the 16bit repeat counter
    */
    upd_datalink_t *link = (upd_datalink_t *)link_ptr;
    u8 cmd[] = { UPDI_PHY_SYNC, UPDI_REPEAT | UPDI_REPEAT_WORD, repeats & 0xFF, (repeats >> 8) & 0xFF };
    1afc:	2355      	movs	r3, #85	; 0x55
{
    1afe:	b573      	push	{r0, r1, r4, r5, r6, lr}
    u8 cmd[] = { UPDI_PHY_SYNC, UPDI_REPEAT | UPDI_REPEAT_WORD, repeats & 0xFF, (repeats >> 8) & 0xFF };
    1b00:	ac01      	add	r4, sp, #4
    1b02:	7023      	strb	r3, [r4, #0]
    1b04:	334c      	adds	r3, #76	; 0x4c
    1b06:	7063      	strb	r3, [r4, #1]
    1b08:	0a0b      	lsrs	r3, r1, #8
{
    1b0a:	0005      	movs	r5, r0
    1b0c:	000a      	movs	r2, r1
    u8 cmd[] = { UPDI_PHY_SYNC, UPDI_REPEAT | UPDI_REPEAT_WORD, repeats & 0xFF, (repeats >> 8) & 0xFF };
    1b0e:	70a1      	strb	r1, [r4, #2]
    1b10:	70e3      	strb	r3, [r4, #3]
    int result;

    if (!VALID_LINK(link))
    1b12:	2800      	cmp	r0, #0
    1b14:	d015      	beq.n	1b42 <link_repeat16+0x46>
    1b16:	4b0c      	ldr	r3, [pc, #48]	; (1b48 <link_repeat16+0x4c>)
    1b18:	6801      	ldr	r1, [r0, #0]
    1b1a:	4299      	cmp	r1, r3
    1b1c:	d111      	bne.n	1b42 <link_repeat16+0x46>
        return ERROR_PTR;

    DBG_INFO(LINK_DEBUG, "<LINK> Repeat16 %d", repeats);
    1b1e:	490b      	ldr	r1, [pc, #44]	; (1b4c <link_repeat16+0x50>)
    1b20:	2004      	movs	r0, #4
    1b22:	4e0b      	ldr	r6, [pc, #44]	; (1b50 <link_repeat16+0x54>)
    1b24:	47b0      	blx	r6

    result = phy_send(PHY(link), cmd, sizeof(cmd));
    1b26:	2204      	movs	r2, #4
    1b28:	0021      	movs	r1, r4
    1b2a:	6868      	ldr	r0, [r5, #4]
    1b2c:	4b09      	ldr	r3, [pc, #36]	; (1b54 <link_repeat16+0x58>)
    1b2e:	4798      	blx	r3
    if (result) {
    1b30:	2800      	cmp	r0, #0
    1b32:	d005      	beq.n	1b40 <link_repeat16+0x44>
        DBG_INFO(LINK_DEBUG, "phy_send failed %d", result);
    1b34:	0002      	movs	r2, r0
    1b36:	4908      	ldr	r1, [pc, #32]	; (1b58 <link_repeat16+0x5c>)
    1b38:	2004      	movs	r0, #4
    1b3a:	47b0      	blx	r6
        return -2;
    1b3c:	2002      	movs	r0, #2
        return ERROR_PTR;
    1b3e:	4240      	negs	r0, r0
    }

    return 0;
}
    1b40:	bd76      	pop	{r1, r2, r4, r5, r6, pc}
        return ERROR_PTR;
    1b42:	2001      	movs	r0, #1
    1b44:	e7fb      	b.n	1b3e <link_repeat16+0x42>
    1b46:	46c0      	nop			; (mov r8, r8)
    1b48:	0000c3c3 	.word	0x0000c3c3
    1b4c:	00005242 	.word	0x00005242
    1b50:	00000357 	.word	0x00000357
    1b54:	0000259d 	.word	0x0000259d
    1b58:	00005937 	.word	0x00005937

00001b5c <link_read_sib>:
    @link_ptr: APP object pointer, acquired from updi_datalink_init()
    @data: output data
    @return 0 successful, other value if failed
*/
int link_read_sib(void *link_ptr, u8 *data, int len)
{
    1b5c:	b570      	push	{r4, r5, r6, lr}
    1b5e:	0004      	movs	r4, r0
    1b60:	000e      	movs	r6, r1
    1b62:	0015      	movs	r5, r2
    /*
        Read the SIB
    */
    upd_datalink_t *link = (upd_datalink_t *)link_ptr;

    if (!VALID_LINK(link))
    1b64:	2800      	cmp	r0, #0
    1b66:	d00e      	beq.n	1b86 <link_read_sib+0x2a>
    1b68:	4b08      	ldr	r3, [pc, #32]	; (1b8c <link_read_sib+0x30>)
    1b6a:	6802      	ldr	r2, [r0, #0]
    1b6c:	429a      	cmp	r2, r3
    1b6e:	d10a      	bne.n	1b86 <link_read_sib+0x2a>
        return ERROR_PTR;

    DBG_INFO(LINK_DEBUG, "<LINK> Read SIB len %d", len);
    1b70:	002a      	movs	r2, r5
    1b72:	4907      	ldr	r1, [pc, #28]	; (1b90 <link_read_sib+0x34>)
    1b74:	2004      	movs	r0, #4
    1b76:	4b07      	ldr	r3, [pc, #28]	; (1b94 <link_read_sib+0x38>)
    1b78:	4798      	blx	r3

    return phy_sib(PHY(link), data, len);
    1b7a:	002a      	movs	r2, r5
    1b7c:	0031      	movs	r1, r6
    1b7e:	6860      	ldr	r0, [r4, #4]
    1b80:	4b05      	ldr	r3, [pc, #20]	; (1b98 <link_read_sib+0x3c>)
    1b82:	4798      	blx	r3
}
    1b84:	bd70      	pop	{r4, r5, r6, pc}
        return ERROR_PTR;
    1b86:	2001      	movs	r0, #1
    1b88:	4240      	negs	r0, r0
    1b8a:	e7fb      	b.n	1b84 <link_read_sib+0x28>
    1b8c:	0000c3c3 	.word	0x0000c3c3
    1b90:	00005255 	.word	0x00005255
    1b94:	00000357 	.word	0x00000357
    1b98:	000028f9 	.word	0x000028f9

00001b9c <link_key>:
{
    /*
        Write a key
    */
    upd_datalink_t *link = (upd_datalink_t *)link_ptr;
    const u8 cmd[] = { UPDI_PHY_SYNC, UPDI_KEY | UPDI_KEY_KEY | size_k };
    1b9c:	2355      	movs	r3, #85	; 0x55
{
    1b9e:	b5f0      	push	{r4, r5, r6, r7, lr}
    1ba0:	b085      	sub	sp, #20
    const u8 cmd[] = { UPDI_PHY_SYNC, UPDI_KEY | UPDI_KEY_KEY | size_k };
    1ba2:	ac03      	add	r4, sp, #12
    1ba4:	7023      	strb	r3, [r4, #0]
    1ba6:	3b75      	subs	r3, #117	; 0x75
    1ba8:	430b      	orrs	r3, r1
    1baa:	7063      	strb	r3, [r4, #1]
    u8 len = 8 << size_k;
    1bac:	2308      	movs	r3, #8
    1bae:	408b      	lsls	r3, r1
{
    1bb0:	1e06      	subs	r6, r0, #0
    1bb2:	9201      	str	r2, [sp, #4]
    u8 len = 8 << size_k;
    1bb4:	9300      	str	r3, [sp, #0]
    int i;
    int result;

    if (!VALID_LINK(link))
    1bb6:	d033      	beq.n	1c20 <link_key+0x84>
    1bb8:	4b1a      	ldr	r3, [pc, #104]	; (1c24 <link_key+0x88>)
    1bba:	6802      	ldr	r2, [r0, #0]
    1bbc:	429a      	cmp	r2, r3
    1bbe:	d12f      	bne.n	1c20 <link_key+0x84>
        return ERROR_PTR;

    DBG_INFO(LINK_DEBUG, "<LINK> Key %x", size_k);
    1bc0:	000a      	movs	r2, r1
    1bc2:	2004      	movs	r0, #4
    1bc4:	4918      	ldr	r1, [pc, #96]	; (1c28 <link_key+0x8c>)
    1bc6:	4f19      	ldr	r7, [pc, #100]	; (1c2c <link_key+0x90>)
    1bc8:	47b8      	blx	r7

    result = phy_send(PHY(link), cmd, sizeof(cmd));
    1bca:	0021      	movs	r1, r4
    1bcc:	2202      	movs	r2, #2
    1bce:	6870      	ldr	r0, [r6, #4]
    1bd0:	4b17      	ldr	r3, [pc, #92]	; (1c30 <link_key+0x94>)
    1bd2:	4798      	blx	r3
    1bd4:	1e04      	subs	r4, r0, #0
    if (result) {
    1bd6:	d109      	bne.n	1bec <link_key+0x50>
    1bd8:	466b      	mov	r3, sp
    1bda:	0005      	movs	r5, r0
    1bdc:	781b      	ldrb	r3, [r3, #0]
    1bde:	9300      	str	r3, [sp, #0]
        DBG_INFO(LINK_DEBUG, "phy_send failed %d", result);
        return -2;
    }

    for (i = 0; i < len; i++) {
    1be0:	9b00      	ldr	r3, [sp, #0]
    1be2:	429d      	cmp	r5, r3
    1be4:	db09      	blt.n	1bfa <link_key+0x5e>
            return -3;
        }
    }

    return 0;
}
    1be6:	0020      	movs	r0, r4
    1be8:	b005      	add	sp, #20
    1bea:	bdf0      	pop	{r4, r5, r6, r7, pc}
        DBG_INFO(LINK_DEBUG, "phy_send failed %d", result);
    1bec:	0002      	movs	r2, r0
    1bee:	4911      	ldr	r1, [pc, #68]	; (1c34 <link_key+0x98>)
    1bf0:	2004      	movs	r0, #4
    1bf2:	47b8      	blx	r7
        return -2;
    1bf4:	2402      	movs	r4, #2
        return ERROR_PTR;
    1bf6:	4264      	negs	r4, r4
    1bf8:	e7f5      	b.n	1be6 <link_key+0x4a>
        result = phy_send_byte(PHY(link), (u8)key[len - i - 1]); //Reserse the string
    1bfa:	9b00      	ldr	r3, [sp, #0]
    1bfc:	9a01      	ldr	r2, [sp, #4]
    1bfe:	1b5b      	subs	r3, r3, r5
    1c00:	18d3      	adds	r3, r2, r3
    1c02:	3b01      	subs	r3, #1
    1c04:	7819      	ldrb	r1, [r3, #0]
    1c06:	6870      	ldr	r0, [r6, #4]
    1c08:	4b0b      	ldr	r3, [pc, #44]	; (1c38 <link_key+0x9c>)
    1c0a:	4798      	blx	r3
    1c0c:	1e03      	subs	r3, r0, #0
        if (result) {
    1c0e:	d005      	beq.n	1c1c <link_key+0x80>
            DBG_INFO(LINK_DEBUG, "phy_send byte %d failed %d", i, result);
    1c10:	002a      	movs	r2, r5
    1c12:	490a      	ldr	r1, [pc, #40]	; (1c3c <link_key+0xa0>)
    1c14:	2004      	movs	r0, #4
    1c16:	47b8      	blx	r7
            return -3;
    1c18:	2403      	movs	r4, #3
    1c1a:	e7ec      	b.n	1bf6 <link_key+0x5a>
    for (i = 0; i < len; i++) {
    1c1c:	3501      	adds	r5, #1
    1c1e:	e7df      	b.n	1be0 <link_key+0x44>
        return ERROR_PTR;
    1c20:	2401      	movs	r4, #1
    1c22:	e7e8      	b.n	1bf6 <link_key+0x5a>
    1c24:	0000c3c3 	.word	0x0000c3c3
    1c28:	0000526c 	.word	0x0000526c
    1c2c:	00000357 	.word	0x00000357
    1c30:	0000259d 	.word	0x0000259d
    1c34:	00005937 	.word	0x00005937
    1c38:	000027ed 	.word	0x000027ed
    1c3c:	0000527a 	.word	0x0000527a

00001c40 <nvm_write_mem>:
    @data: data buffer
    @len: data len
    @return 0 successful, other value failed
*/
int nvm_write_mem(void *nvm_ptr, u16 address, const u8 *data, int len)
{
    1c40:	b5f0      	push	{r4, r5, r6, r7, lr}
    1c42:	b085      	sub	sp, #20
    1c44:	1e07      	subs	r7, r0, #0
    1c46:	9102      	str	r1, [sp, #8]
    1c48:	9203      	str	r2, [sp, #12]
    1c4a:	9300      	str	r3, [sp, #0]
    */
    upd_nvm_t *nvm = (upd_nvm_t *)nvm_ptr;
    int size, off;
    int result;

    if (!VALID_NVM(nvm))
    1c4c:	d034      	beq.n	1cb8 <nvm_write_mem+0x78>
    1c4e:	4b1c      	ldr	r3, [pc, #112]	; (1cc0 <nvm_write_mem+0x80>)
    1c50:	6802      	ldr	r2, [r0, #0]
    1c52:	429a      	cmp	r2, r3
    1c54:	d130      	bne.n	1cb8 <nvm_write_mem+0x78>
        return ERROR_PTR;

    DBG_INFO(NVM_DEBUG, "<NVM> Write Memory");
    1c56:	491b      	ldr	r1, [pc, #108]	; (1cc4 <nvm_write_mem+0x84>)
    1c58:	2002      	movs	r0, #2
    1c5a:	4c1b      	ldr	r4, [pc, #108]	; (1cc8 <nvm_write_mem+0x88>)
    1c5c:	47a0      	blx	r4

    if (!nvm->progmode)
    1c5e:	793b      	ldrb	r3, [r7, #4]
    1c60:	2b00      	cmp	r3, #0
    1c62:	d102      	bne.n	1c6a <nvm_write_mem+0x2a>
        DBG_INFO(NVM_DEBUG, "Memory write at locked mode");
    1c64:	4919      	ldr	r1, [pc, #100]	; (1ccc <nvm_write_mem+0x8c>)
    1c66:	2002      	movs	r0, #2
    1c68:	47a0      	blx	r4
{
    1c6a:	2400      	movs	r4, #0

    off = 0;
    do {
        size = len - off;
    1c6c:	9b00      	ldr	r3, [sp, #0]
    1c6e:	1b1e      	subs	r6, r3, r4
    1c70:	2380      	movs	r3, #128	; 0x80
    1c72:	005b      	lsls	r3, r3, #1
    1c74:	429e      	cmp	r6, r3
    1c76:	dd00      	ble.n	1c7a <nvm_write_mem+0x3a>
    1c78:	001e      	movs	r6, r3
        if (size > UPDI_MAX_TRANSFER_SIZE)
            size = UPDI_MAX_TRANSFER_SIZE;

        DBG_INFO(NVM_DEBUG, "Writing %d bytes at address 0x%x", size, address + off);
    1c7a:	9b02      	ldr	r3, [sp, #8]
    1c7c:	0032      	movs	r2, r6
    1c7e:	191b      	adds	r3, r3, r4
    1c80:	4913      	ldr	r1, [pc, #76]	; (1cd0 <nvm_write_mem+0x90>)
    1c82:	2002      	movs	r0, #2
    1c84:	4d10      	ldr	r5, [pc, #64]	; (1cc8 <nvm_write_mem+0x88>)
    1c86:	9301      	str	r3, [sp, #4]
    1c88:	47a8      	blx	r5

        result = app_write_data_bytes(APP(nvm), address + off, data + off, size);
    1c8a:	9b03      	ldr	r3, [sp, #12]
    1c8c:	4d11      	ldr	r5, [pc, #68]	; (1cd4 <nvm_write_mem+0x94>)
    1c8e:	191a      	adds	r2, r3, r4
    1c90:	466b      	mov	r3, sp
    1c92:	68b8      	ldr	r0, [r7, #8]
    1c94:	8899      	ldrh	r1, [r3, #4]
    1c96:	0033      	movs	r3, r6
    1c98:	47a8      	blx	r5
    1c9a:	1e05      	subs	r5, r0, #0
        if (result) {
    1c9c:	d007      	beq.n	1cae <nvm_write_mem+0x6e>
            DBG_INFO(NVM_DEBUG, "app_write_data_bytes failed %d", result);
    1c9e:	0002      	movs	r2, r0
    1ca0:	490d      	ldr	r1, [pc, #52]	; (1cd8 <nvm_write_mem+0x98>)
    1ca2:	2002      	movs	r0, #2
    1ca4:	4b08      	ldr	r3, [pc, #32]	; (1cc8 <nvm_write_mem+0x88>)
    1ca6:	4798      	blx	r3

        off += size;
    } while (off < len);

    return result;
}
    1ca8:	0028      	movs	r0, r5
    1caa:	b005      	add	sp, #20
    1cac:	bdf0      	pop	{r4, r5, r6, r7, pc}
    } while (off < len);
    1cae:	9b00      	ldr	r3, [sp, #0]
        off += size;
    1cb0:	19a4      	adds	r4, r4, r6
    } while (off < len);
    1cb2:	42a3      	cmp	r3, r4
    1cb4:	dcda      	bgt.n	1c6c <nvm_write_mem+0x2c>
    1cb6:	e7f7      	b.n	1ca8 <nvm_write_mem+0x68>
        return ERROR_PTR;
    1cb8:	2501      	movs	r5, #1
    1cba:	426d      	negs	r5, r5
    1cbc:	e7f4      	b.n	1ca8 <nvm_write_mem+0x68>
    1cbe:	46c0      	nop			; (mov r8, r8)
    1cc0:	0000d2d2 	.word	0x0000d2d2
    1cc4:	000052a8 	.word	0x000052a8
    1cc8:	00000357 	.word	0x00000357
    1ccc:	000052bb 	.word	0x000052bb
    1cd0:	000052d7 	.word	0x000052d7
    1cd4:	00000f79 	.word	0x00000f79
    1cd8:	000052f8 	.word	0x000052f8

00001cdc <updi_nvm_init>:
{
    1cdc:	b570      	push	{r4, r5, r6, lr}
    1cde:	0005      	movs	r5, r0
    1ce0:	000e      	movs	r6, r1
    1ce2:	0014      	movs	r4, r2
    DBG_INFO(NVM_DEBUG, "<NVM> init nvm");
    1ce4:	4909      	ldr	r1, [pc, #36]	; (1d0c <updi_nvm_init+0x30>)
    1ce6:	2002      	movs	r0, #2
    1ce8:	4b09      	ldr	r3, [pc, #36]	; (1d10 <updi_nvm_init+0x34>)
    1cea:	4798      	blx	r3
    app = updi_application_init(port, baud, dev);
    1cec:	4b09      	ldr	r3, [pc, #36]	; (1d14 <updi_nvm_init+0x38>)
    1cee:	0022      	movs	r2, r4
    1cf0:	0031      	movs	r1, r6
    1cf2:	0028      	movs	r0, r5
    1cf4:	4798      	blx	r3
    upd_nvm_t *nvm = NULL;
    1cf6:	1e03      	subs	r3, r0, #0
    if (app) {
    1cf8:	d006      	beq.n	1d08 <updi_nvm_init+0x2c>
        nvm->mgwd = UPD_NVM_MAGIC_WORD;
    1cfa:	4b07      	ldr	r3, [pc, #28]	; (1d18 <updi_nvm_init+0x3c>)
    1cfc:	4a07      	ldr	r2, [pc, #28]	; (1d1c <updi_nvm_init+0x40>)
        nvm->dev = (device_info_t *)dev;
    1cfe:	60dc      	str	r4, [r3, #12]
        nvm->mgwd = UPD_NVM_MAGIC_WORD;
    1d00:	601a      	str	r2, [r3, #0]
        nvm->progmode = false;
    1d02:	2200      	movs	r2, #0
        nvm->app = (void *)app;
    1d04:	6098      	str	r0, [r3, #8]
        nvm->progmode = false;
    1d06:	711a      	strb	r2, [r3, #4]
}
    1d08:	0018      	movs	r0, r3
    1d0a:	bd70      	pop	{r4, r5, r6, pc}
    1d0c:	00005317 	.word	0x00005317
    1d10:	00000357 	.word	0x00000357
    1d14:	00000521 	.word	0x00000521
    1d18:	200023b4 	.word	0x200023b4
    1d1c:	0000d2d2 	.word	0x0000d2d2

00001d20 <updi_nvm_deinit>:
{
    1d20:	b510      	push	{r4, lr}
    1d22:	1e04      	subs	r4, r0, #0
    if (VALID_NVM(nvm)) {
    1d24:	d00a      	beq.n	1d3c <updi_nvm_deinit+0x1c>
    1d26:	4b06      	ldr	r3, [pc, #24]	; (1d40 <updi_nvm_deinit+0x20>)
    1d28:	6802      	ldr	r2, [r0, #0]
    1d2a:	429a      	cmp	r2, r3
    1d2c:	d106      	bne.n	1d3c <updi_nvm_deinit+0x1c>
        DBG_INFO(NVM_DEBUG, "<NVM> deinit nvm");
    1d2e:	2002      	movs	r0, #2
    1d30:	4b04      	ldr	r3, [pc, #16]	; (1d44 <updi_nvm_deinit+0x24>)
    1d32:	4905      	ldr	r1, [pc, #20]	; (1d48 <updi_nvm_deinit+0x28>)
    1d34:	4798      	blx	r3
        updi_application_deinit(APP(nvm));
    1d36:	68a0      	ldr	r0, [r4, #8]
    1d38:	4b04      	ldr	r3, [pc, #16]	; (1d4c <updi_nvm_deinit+0x2c>)
    1d3a:	4798      	blx	r3
}
    1d3c:	bd10      	pop	{r4, pc}
    1d3e:	46c0      	nop			; (mov r8, r8)
    1d40:	0000d2d2 	.word	0x0000d2d2
    1d44:	00000357 	.word	0x00000357
    1d48:	00005326 	.word	0x00005326
    1d4c:	00000561 	.word	0x00000561

00001d50 <nvm_get_device_info>:
{
    1d50:	b510      	push	{r4, lr}
    1d52:	1e04      	subs	r4, r0, #0
    if (!VALID_NVM(nvm))
    1d54:	d00b      	beq.n	1d6e <nvm_get_device_info+0x1e>
    1d56:	4b07      	ldr	r3, [pc, #28]	; (1d74 <nvm_get_device_info+0x24>)
    1d58:	6802      	ldr	r2, [r0, #0]
    1d5a:	429a      	cmp	r2, r3
    1d5c:	d107      	bne.n	1d6e <nvm_get_device_info+0x1e>
    DBG_INFO(NVM_DEBUG, "<NVM> Reading device info");
    1d5e:	2002      	movs	r0, #2
    1d60:	4b05      	ldr	r3, [pc, #20]	; (1d78 <nvm_get_device_info+0x28>)
    1d62:	4906      	ldr	r1, [pc, #24]	; (1d7c <nvm_get_device_info+0x2c>)
    1d64:	4798      	blx	r3
    return app_device_info(APP(nvm));
    1d66:	68a0      	ldr	r0, [r4, #8]
    1d68:	4b05      	ldr	r3, [pc, #20]	; (1d80 <nvm_get_device_info+0x30>)
    1d6a:	4798      	blx	r3
}
    1d6c:	bd10      	pop	{r4, pc}
        return ERROR_PTR;
    1d6e:	2001      	movs	r0, #1
    1d70:	4240      	negs	r0, r0
    1d72:	e7fb      	b.n	1d6c <nvm_get_device_info+0x1c>
    1d74:	0000d2d2 	.word	0x0000d2d2
    1d78:	00000357 	.word	0x00000357
    1d7c:	00005337 	.word	0x00005337
    1d80:	00000d19 	.word	0x00000d19

00001d84 <nvm_enter_progmode>:
{
    1d84:	b570      	push	{r4, r5, r6, lr}
    1d86:	1e04      	subs	r4, r0, #0
    if (!VALID_NVM(nvm))
    1d88:	d016      	beq.n	1db8 <nvm_enter_progmode+0x34>
    1d8a:	4b0c      	ldr	r3, [pc, #48]	; (1dbc <nvm_enter_progmode+0x38>)
    1d8c:	6802      	ldr	r2, [r0, #0]
    1d8e:	429a      	cmp	r2, r3
    1d90:	d112      	bne.n	1db8 <nvm_enter_progmode+0x34>
    DBG_INFO(NVM_DEBUG, "<NVM> Entering NVM programming mode");
    1d92:	2002      	movs	r0, #2
    1d94:	490a      	ldr	r1, [pc, #40]	; (1dc0 <nvm_enter_progmode+0x3c>)
    1d96:	4d0b      	ldr	r5, [pc, #44]	; (1dc4 <nvm_enter_progmode+0x40>)
    1d98:	47a8      	blx	r5
    result = app_enter_progmode(APP(nvm));
    1d9a:	68a0      	ldr	r0, [r4, #8]
    1d9c:	4b0a      	ldr	r3, [pc, #40]	; (1dc8 <nvm_enter_progmode+0x44>)
    1d9e:	4798      	blx	r3
    if (result) {
    1da0:	2800      	cmp	r0, #0
    1da2:	d006      	beq.n	1db2 <nvm_enter_progmode+0x2e>
        DBG_INFO(NVM_DEBUG, "app_enter_progmode failed %d", result);
    1da4:	0002      	movs	r2, r0
    1da6:	4909      	ldr	r1, [pc, #36]	; (1dcc <nvm_enter_progmode+0x48>)
    1da8:	2002      	movs	r0, #2
    1daa:	47a8      	blx	r5
        return -2;
    1dac:	2002      	movs	r0, #2
        return ERROR_PTR;
    1dae:	4240      	negs	r0, r0
    1db0:	e001      	b.n	1db6 <nvm_enter_progmode+0x32>
    nvm->progmode = true;
    1db2:	2301      	movs	r3, #1
    1db4:	7123      	strb	r3, [r4, #4]
}
    1db6:	bd70      	pop	{r4, r5, r6, pc}
        return ERROR_PTR;
    1db8:	2001      	movs	r0, #1
    1dba:	e7f8      	b.n	1dae <nvm_enter_progmode+0x2a>
    1dbc:	0000d2d2 	.word	0x0000d2d2
    1dc0:	00005351 	.word	0x00005351
    1dc4:	00000357 	.word	0x00000357
    1dc8:	00000839 	.word	0x00000839
    1dcc:	00005375 	.word	0x00005375

00001dd0 <nvm_leave_progmode>:
{
    1dd0:	b570      	push	{r4, r5, r6, lr}
    1dd2:	1e04      	subs	r4, r0, #0
    if (!VALID_NVM(nvm))
    1dd4:	d019      	beq.n	1e0a <nvm_leave_progmode+0x3a>
    1dd6:	4b0e      	ldr	r3, [pc, #56]	; (1e10 <nvm_leave_progmode+0x40>)
    1dd8:	6802      	ldr	r2, [r0, #0]
    1dda:	429a      	cmp	r2, r3
    1ddc:	d115      	bne.n	1e0a <nvm_leave_progmode+0x3a>
    if (!nvm->progmode)
    1dde:	7903      	ldrb	r3, [r0, #4]
        return 0;
    1de0:	2000      	movs	r0, #0
    if (!nvm->progmode)
    1de2:	4283      	cmp	r3, r0
    1de4:	d010      	beq.n	1e08 <nvm_leave_progmode+0x38>
    DBG_INFO(NVM_DEBUG, "<NVM> Leaving NVM programming mode");
    1de6:	3002      	adds	r0, #2
    1de8:	490a      	ldr	r1, [pc, #40]	; (1e14 <nvm_leave_progmode+0x44>)
    1dea:	4d0b      	ldr	r5, [pc, #44]	; (1e18 <nvm_leave_progmode+0x48>)
    1dec:	47a8      	blx	r5
    result = app_leave_progmode(APP(nvm));
    1dee:	68a0      	ldr	r0, [r4, #8]
    1df0:	4b0a      	ldr	r3, [pc, #40]	; (1e1c <nvm_leave_progmode+0x4c>)
    1df2:	4798      	blx	r3
    if (result) {
    1df4:	2800      	cmp	r0, #0
    1df6:	d006      	beq.n	1e06 <nvm_leave_progmode+0x36>
        DBG_INFO(NVM_DEBUG, "app_leave_progmode failed %d", result);
    1df8:	0002      	movs	r2, r0
    1dfa:	4909      	ldr	r1, [pc, #36]	; (1e20 <nvm_leave_progmode+0x50>)
    1dfc:	2002      	movs	r0, #2
    1dfe:	47a8      	blx	r5
        return -2;
    1e00:	2002      	movs	r0, #2
        return ERROR_PTR;
    1e02:	4240      	negs	r0, r0
    1e04:	e000      	b.n	1e08 <nvm_leave_progmode+0x38>
    nvm->progmode = false;
    1e06:	7120      	strb	r0, [r4, #4]
}
    1e08:	bd70      	pop	{r4, r5, r6, pc}
        return ERROR_PTR;
    1e0a:	2001      	movs	r0, #1
    1e0c:	e7f9      	b.n	1e02 <nvm_leave_progmode+0x32>
    1e0e:	46c0      	nop			; (mov r8, r8)
    1e10:	0000d2d2 	.word	0x0000d2d2
    1e14:	00005392 	.word	0x00005392
    1e18:	00000357 	.word	0x00000357
    1e1c:	00000939 	.word	0x00000939
    1e20:	000053b5 	.word	0x000053b5

00001e24 <nvm_unlock_device>:
{
    1e24:	b570      	push	{r4, r5, r6, lr}
    1e26:	1e04      	subs	r4, r0, #0
    if (!VALID_NVM(nvm))
    1e28:	d01c      	beq.n	1e64 <nvm_unlock_device+0x40>
    1e2a:	4b0f      	ldr	r3, [pc, #60]	; (1e68 <nvm_unlock_device+0x44>)
    1e2c:	6802      	ldr	r2, [r0, #0]
    1e2e:	429a      	cmp	r2, r3
    1e30:	d118      	bne.n	1e64 <nvm_unlock_device+0x40>
    DBG_INFO(NVM_DEBUG, "<NVM> Unlock and erase a device");
    1e32:	490e      	ldr	r1, [pc, #56]	; (1e6c <nvm_unlock_device+0x48>)
    1e34:	2002      	movs	r0, #2
    1e36:	4d0e      	ldr	r5, [pc, #56]	; (1e70 <nvm_unlock_device+0x4c>)
    1e38:	47a8      	blx	r5
    if (nvm->progmode)
    1e3a:	7923      	ldrb	r3, [r4, #4]
    1e3c:	2b00      	cmp	r3, #0
    1e3e:	d002      	beq.n	1e46 <nvm_unlock_device+0x22>
        DBG_INFO(NVM_DEBUG, "Device in programe mode and unlocked");
    1e40:	490c      	ldr	r1, [pc, #48]	; (1e74 <nvm_unlock_device+0x50>)
    1e42:	2002      	movs	r0, #2
    1e44:	47a8      	blx	r5
    result = app_unlock(APP(nvm));
    1e46:	68a0      	ldr	r0, [r4, #8]
    1e48:	4b0b      	ldr	r3, [pc, #44]	; (1e78 <nvm_unlock_device+0x54>)
    1e4a:	4798      	blx	r3
    1e4c:	1e02      	subs	r2, r0, #0
    if (!result) {
    1e4e:	d105      	bne.n	1e5c <nvm_unlock_device+0x38>
        DBG_INFO(NVM_DEBUG, "app_unlock failed %d", result);
    1e50:	2002      	movs	r0, #2
    1e52:	490a      	ldr	r1, [pc, #40]	; (1e7c <nvm_unlock_device+0x58>)
    1e54:	47a8      	blx	r5
        return -2;
    1e56:	2002      	movs	r0, #2
        return ERROR_PTR;
    1e58:	4240      	negs	r0, r0
    1e5a:	e002      	b.n	1e62 <nvm_unlock_device+0x3e>
    nvm->progmode = true;
    1e5c:	2301      	movs	r3, #1
    return 0;
    1e5e:	2000      	movs	r0, #0
    nvm->progmode = true;
    1e60:	7123      	strb	r3, [r4, #4]
}
    1e62:	bd70      	pop	{r4, r5, r6, pc}
        return ERROR_PTR;
    1e64:	2001      	movs	r0, #1
    1e66:	e7f7      	b.n	1e58 <nvm_unlock_device+0x34>
    1e68:	0000d2d2 	.word	0x0000d2d2
    1e6c:	000053ef 	.word	0x000053ef
    1e70:	00000357 	.word	0x00000357
    1e74:	0000540f 	.word	0x0000540f
    1e78:	00000781 	.word	0x00000781
    1e7c:	00005434 	.word	0x00005434

00001e80 <nvm_chip_erase>:
{
    1e80:	b570      	push	{r4, r5, r6, lr}
    1e82:	1e04      	subs	r4, r0, #0
    if (!VALID_NVM(nvm))
    1e84:	d01b      	beq.n	1ebe <nvm_chip_erase+0x3e>
    1e86:	4b0f      	ldr	r3, [pc, #60]	; (1ec4 <nvm_chip_erase+0x44>)
    1e88:	6802      	ldr	r2, [r0, #0]
    1e8a:	429a      	cmp	r2, r3
    1e8c:	d117      	bne.n	1ebe <nvm_chip_erase+0x3e>
    DBG_INFO(NVM_DEBUG, "<NVM> Erase device");
    1e8e:	490e      	ldr	r1, [pc, #56]	; (1ec8 <nvm_chip_erase+0x48>)
    1e90:	2002      	movs	r0, #2
    1e92:	4d0e      	ldr	r5, [pc, #56]	; (1ecc <nvm_chip_erase+0x4c>)
    1e94:	47a8      	blx	r5
    if (!nvm->progmode) {
    1e96:	7923      	ldrb	r3, [r4, #4]
    1e98:	2b00      	cmp	r3, #0
    1e9a:	d105      	bne.n	1ea8 <nvm_chip_erase+0x28>
        DBG_INFO(NVM_DEBUG, "Enter progmode first!");
    1e9c:	2002      	movs	r0, #2
    1e9e:	490c      	ldr	r1, [pc, #48]	; (1ed0 <nvm_chip_erase+0x50>)
    1ea0:	47a8      	blx	r5
        return -2;
    1ea2:	2002      	movs	r0, #2
        return ERROR_PTR;
    1ea4:	4240      	negs	r0, r0
}
    1ea6:	bd70      	pop	{r4, r5, r6, pc}
    result = app_chip_erase(APP(nvm));
    1ea8:	68a0      	ldr	r0, [r4, #8]
    1eaa:	4b0a      	ldr	r3, [pc, #40]	; (1ed4 <nvm_chip_erase+0x54>)
    1eac:	4798      	blx	r3
    if (result) {
    1eae:	2800      	cmp	r0, #0
    1eb0:	d0f9      	beq.n	1ea6 <nvm_chip_erase+0x26>
        DBG_INFO(NVM_DEBUG, "app_chip_erase failed %d", result);
    1eb2:	0002      	movs	r2, r0
    1eb4:	4908      	ldr	r1, [pc, #32]	; (1ed8 <nvm_chip_erase+0x58>)
    1eb6:	2002      	movs	r0, #2
    1eb8:	47a8      	blx	r5
        return -3;
    1eba:	2003      	movs	r0, #3
    1ebc:	e7f2      	b.n	1ea4 <nvm_chip_erase+0x24>
        return ERROR_PTR;
    1ebe:	2001      	movs	r0, #1
    1ec0:	e7f0      	b.n	1ea4 <nvm_chip_erase+0x24>
    1ec2:	46c0      	nop			; (mov r8, r8)
    1ec4:	0000d2d2 	.word	0x0000d2d2
    1ec8:	00005449 	.word	0x00005449
    1ecc:	00000357 	.word	0x00000357
    1ed0:	0000545c 	.word	0x0000545c
    1ed4:	00000a7d 	.word	0x00000a7d
    1ed8:	00005472 	.word	0x00005472

00001edc <_nvm_write_eeprom>:
{
    1edc:	b5f0      	push	{r4, r5, r6, r7, lr}
    1ede:	b089      	sub	sp, #36	; 0x24
    1ee0:	0005      	movs	r5, r0
    1ee2:	000e      	movs	r6, r1
    1ee4:	0014      	movs	r4, r2
    1ee6:	9307      	str	r3, [sp, #28]
    if (!VALID_NVM(nvm) || !data)
    1ee8:	2800      	cmp	r0, #0
    1eea:	d100      	bne.n	1eee <_nvm_write_eeprom+0x12>
    1eec:	e069      	b.n	1fc2 <_nvm_write_eeprom+0xe6>
    1eee:	4b36      	ldr	r3, [pc, #216]	; (1fc8 <_nvm_write_eeprom+0xec>)
    1ef0:	6802      	ldr	r2, [r0, #0]
    1ef2:	429a      	cmp	r2, r3
    1ef4:	d165      	bne.n	1fc2 <_nvm_write_eeprom+0xe6>
    1ef6:	9b07      	ldr	r3, [sp, #28]
    1ef8:	2b00      	cmp	r3, #0
    1efa:	d062      	beq.n	1fc2 <_nvm_write_eeprom+0xe6>
    DBG_INFO(NVM_DEBUG, "<NVM> Writes to eeprom");
    1efc:	4933      	ldr	r1, [pc, #204]	; (1fcc <_nvm_write_eeprom+0xf0>)
    1efe:	2002      	movs	r0, #2
    1f00:	4f33      	ldr	r7, [pc, #204]	; (1fd0 <_nvm_write_eeprom+0xf4>)
    1f02:	47b8      	blx	r7
    if (!nvm->progmode) {
    1f04:	792b      	ldrb	r3, [r5, #4]
    1f06:	2b00      	cmp	r3, #0
    1f08:	d105      	bne.n	1f16 <_nvm_write_eeprom+0x3a>
        DBG_INFO(NVM_DEBUG, "Enter progmode first!");
    1f0a:	2002      	movs	r0, #2
    1f0c:	4931      	ldr	r1, [pc, #196]	; (1fd4 <_nvm_write_eeprom+0xf8>)
    1f0e:	47b8      	blx	r7
        return -2;
    1f10:	2002      	movs	r0, #2
        return ERROR_PTR;
    1f12:	4240      	negs	r0, r0
    1f14:	e023      	b.n	1f5e <_nvm_write_eeprom+0x82>
    if (address < info->nvm_start)
    1f16:	8832      	ldrh	r2, [r6, #0]
    1f18:	42a2      	cmp	r2, r4
    1f1a:	d901      	bls.n	1f20 <_nvm_write_eeprom+0x44>
        address += info->nvm_start;
    1f1c:	1914      	adds	r4, r2, r4
    1f1e:	b2a4      	uxth	r4, r4
    if (address + len > info->nvm_start + info->nvm_size) {
    1f20:	9b0e      	ldr	r3, [sp, #56]	; 0x38
    1f22:	18e1      	adds	r1, r4, r3
    1f24:	8873      	ldrh	r3, [r6, #2]
    1f26:	189b      	adds	r3, r3, r2
    1f28:	4299      	cmp	r1, r3
    1f2a:	dd06      	ble.n	1f3a <_nvm_write_eeprom+0x5e>
        DBG_INFO(NVM_DEBUG, "eeprom address overflow, addr %hx, len %x.", address, len);
    1f2c:	2002      	movs	r0, #2
    1f2e:	9b0e      	ldr	r3, [sp, #56]	; 0x38
    1f30:	0022      	movs	r2, r4
    1f32:	4929      	ldr	r1, [pc, #164]	; (1fd8 <_nvm_write_eeprom+0xfc>)
    1f34:	47b8      	blx	r7
        return -3;
    1f36:	2003      	movs	r0, #3
    1f38:	e7eb      	b.n	1f12 <_nvm_write_eeprom+0x36>
    page_size = info->nvm_pagesize;
    1f3a:	88b7      	ldrh	r7, [r6, #4]
    pages = (len + page_size - 1) / page_size;
    1f3c:	9b0e      	ldr	r3, [sp, #56]	; 0x38
    1f3e:	0039      	movs	r1, r7
    1f40:	19d8      	adds	r0, r3, r7
    1f42:	3801      	subs	r0, #1
    1f44:	4b25      	ldr	r3, [pc, #148]	; (1fdc <_nvm_write_eeprom+0x100>)
    1f46:	4798      	blx	r3
    1f48:	9b0e      	ldr	r3, [sp, #56]	; 0x38
    1f4a:	9006      	str	r0, [sp, #24]
    1f4c:	9305      	str	r3, [sp, #20]
    for (i = 0, off = 0; i < pages; i++) {
    1f4e:	2300      	movs	r3, #0
    1f50:	9404      	str	r4, [sp, #16]
    1f52:	9303      	str	r3, [sp, #12]
    1f54:	9b03      	ldr	r3, [sp, #12]
    1f56:	9a06      	ldr	r2, [sp, #24]
    1f58:	4293      	cmp	r3, r2
    1f5a:	db02      	blt.n	1f62 <_nvm_write_eeprom+0x86>
    return 0;
    1f5c:	2000      	movs	r0, #0
}
    1f5e:	b009      	add	sp, #36	; 0x24
    1f60:	bdf0      	pop	{r4, r5, r6, r7, pc}
        DBG_INFO(NVM_DEBUG, "Writing eeprom page(%d/%d) at 0x%x", i, pages, address + off);
    1f62:	9b04      	ldr	r3, [sp, #16]
    1f64:	9a03      	ldr	r2, [sp, #12]
    1f66:	9300      	str	r3, [sp, #0]
    1f68:	491d      	ldr	r1, [pc, #116]	; (1fe0 <_nvm_write_eeprom+0x104>)
    1f6a:	9b06      	ldr	r3, [sp, #24]
    1f6c:	2002      	movs	r0, #2
    1f6e:	4e18      	ldr	r6, [pc, #96]	; (1fd0 <_nvm_write_eeprom+0xf4>)
    1f70:	47b0      	blx	r6
        result = _app_erase_write_nvm(APP(nvm), address + off, data + off, size, false);
    1f72:	9a05      	ldr	r2, [sp, #20]
    1f74:	003b      	movs	r3, r7
    1f76:	4297      	cmp	r7, r2
    1f78:	dd00      	ble.n	1f7c <_nvm_write_eeprom+0xa0>
    1f7a:	0013      	movs	r3, r2
    1f7c:	9a04      	ldr	r2, [sp, #16]
    1f7e:	9907      	ldr	r1, [sp, #28]
    1f80:	1b12      	subs	r2, r2, r4
    1f82:	188a      	adds	r2, r1, r2
    1f84:	2000      	movs	r0, #0
    1f86:	4669      	mov	r1, sp
    1f88:	4e16      	ldr	r6, [pc, #88]	; (1fe4 <_nvm_write_eeprom+0x108>)
    1f8a:	8a09      	ldrh	r1, [r1, #16]
    1f8c:	9000      	str	r0, [sp, #0]
    1f8e:	68a8      	ldr	r0, [r5, #8]
    1f90:	47b0      	blx	r6
    1f92:	9b04      	ldr	r3, [sp, #16]
    1f94:	0006      	movs	r6, r0
    1f96:	19db      	adds	r3, r3, r7
    1f98:	9304      	str	r3, [sp, #16]
    1f9a:	9b05      	ldr	r3, [sp, #20]
    1f9c:	1bdb      	subs	r3, r3, r7
    1f9e:	9305      	str	r3, [sp, #20]
        if (result) {
    1fa0:	2800      	cmp	r0, #0
    1fa2:	d00b      	beq.n	1fbc <_nvm_write_eeprom+0xe0>
            DBG_INFO(NVM_DEBUG, "app_write_nvm failed %d", result);
    1fa4:	0002      	movs	r2, r0
    1fa6:	4910      	ldr	r1, [pc, #64]	; (1fe8 <_nvm_write_eeprom+0x10c>)
    1fa8:	2002      	movs	r0, #2
    1faa:	4c09      	ldr	r4, [pc, #36]	; (1fd0 <_nvm_write_eeprom+0xf4>)
    1fac:	47a0      	blx	r4
        DBG_INFO(NVM_DEBUG, "Write eeprom page %d failed %d", i, result);
    1fae:	2002      	movs	r0, #2
    1fb0:	0033      	movs	r3, r6
    1fb2:	9a03      	ldr	r2, [sp, #12]
    1fb4:	490d      	ldr	r1, [pc, #52]	; (1fec <_nvm_write_eeprom+0x110>)
    1fb6:	47a0      	blx	r4
        return -5;
    1fb8:	2005      	movs	r0, #5
    1fba:	e7aa      	b.n	1f12 <_nvm_write_eeprom+0x36>
    for (i = 0, off = 0; i < pages; i++) {
    1fbc:	9b03      	ldr	r3, [sp, #12]
    1fbe:	3301      	adds	r3, #1
    1fc0:	e7c7      	b.n	1f52 <_nvm_write_eeprom+0x76>
        return ERROR_PTR;
    1fc2:	2001      	movs	r0, #1
    1fc4:	e7a5      	b.n	1f12 <_nvm_write_eeprom+0x36>
    1fc6:	46c0      	nop			; (mov r8, r8)
    1fc8:	0000d2d2 	.word	0x0000d2d2
    1fcc:	0000548b 	.word	0x0000548b
    1fd0:	00000357 	.word	0x00000357
    1fd4:	0000545c 	.word	0x0000545c
    1fd8:	000054a2 	.word	0x000054a2
    1fdc:	000036d5 	.word	0x000036d5
    1fe0:	000054cd 	.word	0x000054cd
    1fe4:	000011e5 	.word	0x000011e5
    1fe8:	000054f0 	.word	0x000054f0
    1fec:	00005508 	.word	0x00005508

00001ff0 <_nvm_write_fuse>:
{
    1ff0:	b5f0      	push	{r4, r5, r6, r7, lr}
    1ff2:	b087      	sub	sp, #28
    1ff4:	9302      	str	r3, [sp, #8]
    1ff6:	ab02      	add	r3, sp, #8
    1ff8:	1d9d      	adds	r5, r3, #6
    1ffa:	802a      	strh	r2, [r5, #0]
    if (!VALID_NVM(nvm))
    1ffc:	4b34      	ldr	r3, [pc, #208]	; (20d0 <STACK_SIZE+0xd0>)
    1ffe:	6802      	ldr	r2, [r0, #0]
{
    2000:	0004      	movs	r4, r0
    2002:	000f      	movs	r7, r1
    if (!VALID_NVM(nvm))
    2004:	429a      	cmp	r2, r3
    2006:	d000      	beq.n	200a <STACK_SIZE+0xa>
    2008:	e060      	b.n	20cc <STACK_SIZE+0xcc>
    u16 nvmctrl_address = NVM_REG(nvm, nvmctrl_address);
    200a:	68c3      	ldr	r3, [r0, #12]
    DBG_INFO(NVM_DEBUG, "<NVM> Writes to fuse");
    200c:	4931      	ldr	r1, [pc, #196]	; (20d4 <STACK_SIZE+0xd4>)
    u16 nvmctrl_address = NVM_REG(nvm, nvmctrl_address);
    200e:	685b      	ldr	r3, [r3, #4]
    DBG_INFO(NVM_DEBUG, "<NVM> Writes to fuse");
    2010:	2002      	movs	r0, #2
    u16 nvmctrl_address = NVM_REG(nvm, nvmctrl_address);
    2012:	899b      	ldrh	r3, [r3, #12]
    DBG_INFO(NVM_DEBUG, "<NVM> Writes to fuse");
    2014:	4e30      	ldr	r6, [pc, #192]	; (20d8 <STACK_SIZE+0xd8>)
    u16 nvmctrl_address = NVM_REG(nvm, nvmctrl_address);
    2016:	9301      	str	r3, [sp, #4]
    DBG_INFO(NVM_DEBUG, "<NVM> Writes to fuse");
    2018:	47b0      	blx	r6
    if (!nvm->progmode) {
    201a:	7923      	ldrb	r3, [r4, #4]
    201c:	2b00      	cmp	r3, #0
    201e:	d104      	bne.n	202a <STACK_SIZE+0x2a>
        DBG_INFO(NVM_DEBUG, "Enter progmode first!");
    2020:	492e      	ldr	r1, [pc, #184]	; (20dc <STACK_SIZE+0xdc>)
    2022:	2002      	movs	r0, #2
    2024:	47b0      	blx	r6
        return -2;
    2026:	2002      	movs	r0, #2
    2028:	e00e      	b.n	2048 <STACK_SIZE+0x48>
    if (address < info->nvm_start)
    202a:	8839      	ldrh	r1, [r7, #0]
    202c:	882b      	ldrh	r3, [r5, #0]
    202e:	4299      	cmp	r1, r3
    2030:	d901      	bls.n	2036 <STACK_SIZE+0x36>
        address += info->nvm_start;
    2032:	18cb      	adds	r3, r1, r3
    2034:	802b      	strh	r3, [r5, #0]
    if (address >= info->nvm_start + info->nvm_size) {
    2036:	887b      	ldrh	r3, [r7, #2]
    2038:	882a      	ldrh	r2, [r5, #0]
    203a:	185b      	adds	r3, r3, r1
    203c:	429a      	cmp	r2, r3
    203e:	db06      	blt.n	204e <STACK_SIZE+0x4e>
        DBG_INFO(NVM_DEBUG, "fuse address overflow, addr %hx.", address);
    2040:	2002      	movs	r0, #2
    2042:	4927      	ldr	r1, [pc, #156]	; (20e0 <STACK_SIZE+0xe0>)
    2044:	47b0      	blx	r6
        return -3;
    2046:	2003      	movs	r0, #3
        return ERROR_PTR;
    2048:	4240      	negs	r0, r0
}
    204a:	b007      	add	sp, #28
    204c:	bdf0      	pop	{r4, r5, r6, r7, pc}
    result = app_wait_flash_ready(APP(nvm), TIMEOUT_WAIT_FLASH_READY);
    204e:	21fa      	movs	r1, #250	; 0xfa
    2050:	68a0      	ldr	r0, [r4, #8]
    2052:	0089      	lsls	r1, r1, #2
    2054:	4b23      	ldr	r3, [pc, #140]	; (20e4 <STACK_SIZE+0xe4>)
    2056:	4798      	blx	r3
    2058:	1e02      	subs	r2, r0, #0
    if (result) {
    205a:	d003      	beq.n	2064 <STACK_SIZE+0x64>
        DBG_INFO(APP_DEBUG, "app_wait_flash_ready timeout before page buffer clear failed %d", result);
    205c:	4922      	ldr	r1, [pc, #136]	; (20e8 <STACK_SIZE+0xe8>)
    205e:	2003      	movs	r0, #3
    2060:	47b0      	blx	r6
    2062:	e7e0      	b.n	2026 <STACK_SIZE+0x26>
    result = app_write_data_bytes(APP(nvm), nvmctrl_address + UPDI_NVMCTRL_ADDRL, (u8 *)&address, 2);
    2064:	9901      	ldr	r1, [sp, #4]
    2066:	2302      	movs	r3, #2
    2068:	3108      	adds	r1, #8
    206a:	b289      	uxth	r1, r1
    206c:	002a      	movs	r2, r5
    206e:	68a0      	ldr	r0, [r4, #8]
    2070:	4e1e      	ldr	r6, [pc, #120]	; (20ec <STACK_SIZE+0xec>)
    2072:	47b0      	blx	r6
    2074:	1e03      	subs	r3, r0, #0
    if (result) {
    2076:	d006      	beq.n	2086 <STACK_SIZE+0x86>
        DBG_INFO(NVM_DEBUG, "app_write_data_bytes fuse address %04x failed %d", address, result);
    2078:	2002      	movs	r0, #2
    207a:	882a      	ldrh	r2, [r5, #0]
    207c:	491c      	ldr	r1, [pc, #112]	; (20f0 <STACK_SIZE+0xf0>)
    207e:	4c16      	ldr	r4, [pc, #88]	; (20d8 <STACK_SIZE+0xd8>)
    2080:	47a0      	blx	r4
        return -4;
    2082:	2004      	movs	r0, #4
    2084:	e7e0      	b.n	2048 <STACK_SIZE+0x48>
    data = value;
    2086:	250e      	movs	r5, #14
    2088:	ab02      	add	r3, sp, #8
    208a:	18ed      	adds	r5, r5, r3
    208c:	466b      	mov	r3, sp
    result = app_write_data_bytes(APP(nvm), nvmctrl_address + UPDI_NVMCTRL_DATAL, (u8 *)&data, 2);
    208e:	9901      	ldr	r1, [sp, #4]
    data = value;
    2090:	891b      	ldrh	r3, [r3, #8]
    result = app_write_data_bytes(APP(nvm), nvmctrl_address + UPDI_NVMCTRL_DATAL, (u8 *)&data, 2);
    2092:	3106      	adds	r1, #6
    data = value;
    2094:	802b      	strh	r3, [r5, #0]
    result = app_write_data_bytes(APP(nvm), nvmctrl_address + UPDI_NVMCTRL_DATAL, (u8 *)&data, 2);
    2096:	b289      	uxth	r1, r1
    2098:	2302      	movs	r3, #2
    209a:	002a      	movs	r2, r5
    209c:	68a0      	ldr	r0, [r4, #8]
    209e:	47b0      	blx	r6
    20a0:	1e03      	subs	r3, r0, #0
    if (result) {
    20a2:	d006      	beq.n	20b2 <STACK_SIZE+0xb2>
        DBG_INFO(NVM_DEBUG, "app_write_data_bytes fuse data %02x failed %d", data, result);
    20a4:	2002      	movs	r0, #2
    20a6:	882a      	ldrh	r2, [r5, #0]
    20a8:	4912      	ldr	r1, [pc, #72]	; (20f4 <STACK_SIZE+0xf4>)
    20aa:	4c0b      	ldr	r4, [pc, #44]	; (20d8 <STACK_SIZE+0xd8>)
    20ac:	47a0      	blx	r4
        return -5;
    20ae:	2005      	movs	r0, #5
    20b0:	e7ca      	b.n	2048 <STACK_SIZE+0x48>
    result = app_execute_nvm_command(APP(nvm), UPDI_NVMCTRL_CTRLA_WRITE_FUSE);
    20b2:	2107      	movs	r1, #7
    20b4:	68a0      	ldr	r0, [r4, #8]
    20b6:	4b10      	ldr	r3, [pc, #64]	; (20f8 <STACK_SIZE+0xf8>)
    20b8:	4798      	blx	r3
    if (result) {
    20ba:	2800      	cmp	r0, #0
    20bc:	d0c5      	beq.n	204a <STACK_SIZE+0x4a>
        DBG_INFO(NVM_DEBUG, "app_execute_nvm_command fuse command failed %d", result);
    20be:	0002      	movs	r2, r0
    20c0:	490e      	ldr	r1, [pc, #56]	; (20fc <STACK_SIZE+0xfc>)
    20c2:	2002      	movs	r0, #2
    20c4:	4b04      	ldr	r3, [pc, #16]	; (20d8 <STACK_SIZE+0xd8>)
    20c6:	4798      	blx	r3
        return -6;
    20c8:	2006      	movs	r0, #6
    20ca:	e7bd      	b.n	2048 <STACK_SIZE+0x48>
        return ERROR_PTR;
    20cc:	2001      	movs	r0, #1
    20ce:	e7bb      	b.n	2048 <STACK_SIZE+0x48>
    20d0:	0000d2d2 	.word	0x0000d2d2
    20d4:	00005527 	.word	0x00005527
    20d8:	00000357 	.word	0x00000357
    20dc:	0000545c 	.word	0x0000545c
    20e0:	0000553c 	.word	0x0000553c
    20e4:	0000099d 	.word	0x0000099d
    20e8:	00004dca 	.word	0x00004dca
    20ec:	00000f79 	.word	0x00000f79
    20f0:	0000555d 	.word	0x0000555d
    20f4:	0000558e 	.word	0x0000558e
    20f8:	00000a39 	.word	0x00000a39
    20fc:	000055bc 	.word	0x000055bc

00002100 <nvm_get_block_info>:
    @type: NVM type
    @info: chip flash information
    @return 0 successful, other value failed
*/
int nvm_get_block_info(void *nvm_ptr, int type, nvm_info_t *info)
{
    2100:	b510      	push	{r4, lr}
    /*
        get block info
    */
    upd_nvm_t *nvm = (upd_nvm_t *)nvm_ptr;
    
    if (!VALID_NVM(nvm))
    2102:	2800      	cmp	r0, #0
    2104:	d008      	beq.n	2118 <nvm_get_block_info+0x18>
    2106:	4b06      	ldr	r3, [pc, #24]	; (2120 <nvm_get_block_info+0x20>)
    2108:	6804      	ldr	r4, [r0, #0]
    210a:	429c      	cmp	r4, r3
    210c:	d104      	bne.n	2118 <nvm_get_block_info+0x18>
        return ERROR_PTR;

    //DBG_INFO(NVM_DEBUG, "<NVM> Get chip nvm type %d info", type);

    return dev_get_nvm_info(nvm->dev, type, info);
    210e:	b2c9      	uxtb	r1, r1
    2110:	68c0      	ldr	r0, [r0, #12]
    2112:	4b04      	ldr	r3, [pc, #16]	; (2124 <nvm_get_block_info+0x24>)
    2114:	4798      	blx	r3
}
    2116:	bd10      	pop	{r4, pc}
        return ERROR_PTR;
    2118:	2001      	movs	r0, #1
    211a:	4240      	negs	r0, r0
    211c:	e7fb      	b.n	2116 <nvm_get_block_info+0x16>
    211e:	46c0      	nop			; (mov r8, r8)
    2120:	0000d2d2 	.word	0x0000d2d2
    2124:	00000309 	.word	0x00000309

00002128 <nvm_write_flash>:
{
    2128:	b5f0      	push	{r4, r5, r6, r7, lr}
    212a:	b08b      	sub	sp, #44	; 0x2c
    212c:	9004      	str	r0, [sp, #16]
    212e:	9102      	str	r1, [sp, #8]
    2130:	9207      	str	r2, [sp, #28]
    2132:	001d      	movs	r5, r3
    if (!VALID_NVM(nvm) || !data)
    2134:	2800      	cmp	r0, #0
    2136:	d100      	bne.n	213a <nvm_write_flash+0x12>
    2138:	e079      	b.n	222e <nvm_write_flash+0x106>
    213a:	6802      	ldr	r2, [r0, #0]
    213c:	4b3d      	ldr	r3, [pc, #244]	; (2234 <nvm_write_flash+0x10c>)
    213e:	9203      	str	r2, [sp, #12]
    2140:	429a      	cmp	r2, r3
    2142:	d000      	beq.n	2146 <nvm_write_flash+0x1e>
    2144:	e073      	b.n	222e <nvm_write_flash+0x106>
    2146:	9b07      	ldr	r3, [sp, #28]
    2148:	2b00      	cmp	r3, #0
    214a:	d100      	bne.n	214e <nvm_write_flash+0x26>
    214c:	e06f      	b.n	222e <nvm_write_flash+0x106>
    DBG_INFO(NVM_DEBUG, "<NVM> Writes to flash");
    214e:	493a      	ldr	r1, [pc, #232]	; (2238 <nvm_write_flash+0x110>)
    2150:	2002      	movs	r0, #2
    2152:	4f3a      	ldr	r7, [pc, #232]	; (223c <nvm_write_flash+0x114>)
    2154:	47b8      	blx	r7
    if (!nvm->progmode) {
    2156:	9b04      	ldr	r3, [sp, #16]
    2158:	791b      	ldrb	r3, [r3, #4]
    215a:	2b00      	cmp	r3, #0
    215c:	d105      	bne.n	216a <nvm_write_flash+0x42>
        DBG_INFO(NVM_DEBUG, "Enter progmode first!");
    215e:	4938      	ldr	r1, [pc, #224]	; (2240 <nvm_write_flash+0x118>)
    2160:	2002      	movs	r0, #2
    2162:	47b8      	blx	r7
        return -2;
    2164:	2402      	movs	r4, #2
        return ERROR_PTR;
    2166:	4264      	negs	r4, r4
    2168:	e02f      	b.n	21ca <nvm_write_flash+0xa2>
    result = nvm_get_block_info(nvm, NVM_FLASH, &info);
    216a:	ae08      	add	r6, sp, #32
    216c:	0032      	movs	r2, r6
    216e:	2100      	movs	r1, #0
    2170:	9804      	ldr	r0, [sp, #16]
    2172:	4b34      	ldr	r3, [pc, #208]	; (2244 <nvm_write_flash+0x11c>)
    2174:	4798      	blx	r3
    2176:	1e04      	subs	r4, r0, #0
    if (result) {
    2178:	d004      	beq.n	2184 <nvm_write_flash+0x5c>
        DBG_INFO(NVM_DEBUG, "nvm_get_block_info failed");
    217a:	4933      	ldr	r1, [pc, #204]	; (2248 <nvm_write_flash+0x120>)
    217c:	2002      	movs	r0, #2
    217e:	47b8      	blx	r7
        return -3;
    2180:	2403      	movs	r4, #3
    2182:	e7f0      	b.n	2166 <nvm_write_flash+0x3e>
    flash_address = info.nvm_start;
    2184:	8833      	ldrh	r3, [r6, #0]
    if (address < flash_address)
    2186:	9a02      	ldr	r2, [sp, #8]
    flash_size = info.nvm_size;
    2188:	8871      	ldrh	r1, [r6, #2]
    if (address < flash_address)
    218a:	4293      	cmp	r3, r2
    218c:	dd02      	ble.n	2194 <nvm_write_flash+0x6c>
        address += flash_address;
    218e:	189a      	adds	r2, r3, r2
    2190:	b292      	uxth	r2, r2
    2192:	9202      	str	r2, [sp, #8]
    if (address + len > flash_address + flash_size) {
    2194:	9a02      	ldr	r2, [sp, #8]
    2196:	185b      	adds	r3, r3, r1
    2198:	1952      	adds	r2, r2, r5
    219a:	429a      	cmp	r2, r3
    219c:	dd07      	ble.n	21ae <nvm_write_flash+0x86>
        DBG_INFO(NVM_DEBUG, "flash address overflow, addr %hx, len %x.", address, len);
    219e:	4c27      	ldr	r4, [pc, #156]	; (223c <nvm_write_flash+0x114>)
    21a0:	002b      	movs	r3, r5
    21a2:	9a02      	ldr	r2, [sp, #8]
    21a4:	4929      	ldr	r1, [pc, #164]	; (224c <nvm_write_flash+0x124>)
    21a6:	2002      	movs	r0, #2
    21a8:	47a0      	blx	r4
        return -4;
    21aa:	2404      	movs	r4, #4
    21ac:	e7db      	b.n	2166 <nvm_write_flash+0x3e>
    page_size = info.nvm_pagesize;
    21ae:	88b7      	ldrh	r7, [r6, #4]
    pages = (len + page_size - 1) / page_size;
    21b0:	4b27      	ldr	r3, [pc, #156]	; (2250 <nvm_write_flash+0x128>)
    21b2:	19e8      	adds	r0, r5, r7
    21b4:	3801      	subs	r0, #1
    21b6:	0039      	movs	r1, r7
    21b8:	4798      	blx	r3
    for (i = 0, off = 0; i < pages; i++) {
    21ba:	2600      	movs	r6, #0
    21bc:	9b02      	ldr	r3, [sp, #8]
    pages = (len + page_size - 1) / page_size;
    21be:	9006      	str	r0, [sp, #24]
    21c0:	9505      	str	r5, [sp, #20]
    for (i = 0, off = 0; i < pages; i++) {
    21c2:	9303      	str	r3, [sp, #12]
    21c4:	9b06      	ldr	r3, [sp, #24]
    21c6:	429e      	cmp	r6, r3
    21c8:	db02      	blt.n	21d0 <nvm_write_flash+0xa8>
}
    21ca:	0020      	movs	r0, r4
    21cc:	b00b      	add	sp, #44	; 0x2c
    21ce:	bdf0      	pop	{r4, r5, r6, r7, pc}
        DBG_INFO(NVM_DEBUG, "Writing flash page(%d/%d) at 0x%x", i, pages, address + off);
    21d0:	9b03      	ldr	r3, [sp, #12]
    21d2:	0032      	movs	r2, r6
    21d4:	9300      	str	r3, [sp, #0]
    21d6:	491f      	ldr	r1, [pc, #124]	; (2254 <nvm_write_flash+0x12c>)
    21d8:	9b06      	ldr	r3, [sp, #24]
    21da:	2002      	movs	r0, #2
    21dc:	4d17      	ldr	r5, [pc, #92]	; (223c <nvm_write_flash+0x114>)
    21de:	47a8      	blx	r5
        result = app_write_nvm(APP(nvm), address + off, data + off, size);
    21e0:	9a05      	ldr	r2, [sp, #20]
    21e2:	003b      	movs	r3, r7
    21e4:	4297      	cmp	r7, r2
    21e6:	dd00      	ble.n	21ea <nvm_write_flash+0xc2>
    21e8:	0013      	movs	r3, r2
    21ea:	9902      	ldr	r1, [sp, #8]
    21ec:	9a03      	ldr	r2, [sp, #12]
    21ee:	9804      	ldr	r0, [sp, #16]
    21f0:	1a52      	subs	r2, r2, r1
    21f2:	9907      	ldr	r1, [sp, #28]
    21f4:	4d18      	ldr	r5, [pc, #96]	; (2258 <nvm_write_flash+0x130>)
    21f6:	188a      	adds	r2, r1, r2
    21f8:	4669      	mov	r1, sp
    21fa:	6880      	ldr	r0, [r0, #8]
    21fc:	8989      	ldrh	r1, [r1, #12]
    21fe:	47a8      	blx	r5
    2200:	9b03      	ldr	r3, [sp, #12]
    2202:	0005      	movs	r5, r0
    2204:	19db      	adds	r3, r3, r7
    2206:	9303      	str	r3, [sp, #12]
    2208:	9b05      	ldr	r3, [sp, #20]
    220a:	1bdb      	subs	r3, r3, r7
    220c:	9305      	str	r3, [sp, #20]
        if (result) {
    220e:	2800      	cmp	r0, #0
    2210:	d00b      	beq.n	222a <nvm_write_flash+0x102>
            DBG_INFO(NVM_DEBUG, "app_write_nvm failed %d", result);
    2212:	0002      	movs	r2, r0
    2214:	4c09      	ldr	r4, [pc, #36]	; (223c <nvm_write_flash+0x114>)
    2216:	4911      	ldr	r1, [pc, #68]	; (225c <nvm_write_flash+0x134>)
    2218:	2002      	movs	r0, #2
    221a:	47a0      	blx	r4
        DBG_INFO(NVM_DEBUG, "Write flash page %d failed %d", i, result);
    221c:	002b      	movs	r3, r5
    221e:	0032      	movs	r2, r6
    2220:	490f      	ldr	r1, [pc, #60]	; (2260 <nvm_write_flash+0x138>)
    2222:	2002      	movs	r0, #2
    2224:	47a0      	blx	r4
        return -6;
    2226:	2406      	movs	r4, #6
    2228:	e79d      	b.n	2166 <nvm_write_flash+0x3e>
    for (i = 0, off = 0; i < pages; i++) {
    222a:	3601      	adds	r6, #1
    222c:	e7ca      	b.n	21c4 <nvm_write_flash+0x9c>
        return ERROR_PTR;
    222e:	2401      	movs	r4, #1
    2230:	e799      	b.n	2166 <nvm_write_flash+0x3e>
    2232:	46c0      	nop			; (mov r8, r8)
    2234:	0000d2d2 	.word	0x0000d2d2
    2238:	00005704 	.word	0x00005704
    223c:	00000357 	.word	0x00000357
    2240:	0000545c 	.word	0x0000545c
    2244:	00002101 	.word	0x00002101
    2248:	000056ea 	.word	0x000056ea
    224c:	0000571a 	.word	0x0000571a
    2250:	000036d5 	.word	0x000036d5
    2254:	00005744 	.word	0x00005744
    2258:	000011cd 	.word	0x000011cd
    225c:	000054f0 	.word	0x000054f0
    2260:	00005766 	.word	0x00005766

00002264 <nvm_write_eeprom>:
{
    2264:	b5f0      	push	{r4, r5, r6, r7, lr}
    2266:	b085      	sub	sp, #20
    2268:	000d      	movs	r5, r1
    226a:	0016      	movs	r6, r2
    226c:	001f      	movs	r7, r3
    result = nvm_get_block_info(nvm, NVM_EEPROM, &info);
    226e:	aa02      	add	r2, sp, #8
    2270:	2101      	movs	r1, #1
    2272:	4b0a      	ldr	r3, [pc, #40]	; (229c <nvm_write_eeprom+0x38>)
{
    2274:	0004      	movs	r4, r0
    result = nvm_get_block_info(nvm, NVM_EEPROM, &info);
    2276:	4798      	blx	r3
    if (result) {
    2278:	2800      	cmp	r0, #0
    227a:	d007      	beq.n	228c <nvm_write_eeprom+0x28>
        DBG_INFO(NVM_DEBUG, "nvm_get_block_info failed");
    227c:	2002      	movs	r0, #2
    227e:	4908      	ldr	r1, [pc, #32]	; (22a0 <nvm_write_eeprom+0x3c>)
    2280:	4b08      	ldr	r3, [pc, #32]	; (22a4 <nvm_write_eeprom+0x40>)
    2282:	4798      	blx	r3
    2284:	2002      	movs	r0, #2
    2286:	4240      	negs	r0, r0
}
    2288:	b005      	add	sp, #20
    228a:	bdf0      	pop	{r4, r5, r6, r7, pc}
    return _nvm_write_eeprom(nvm_ptr, &info, address, data, len);
    228c:	9700      	str	r7, [sp, #0]
    228e:	0033      	movs	r3, r6
    2290:	002a      	movs	r2, r5
    2292:	a902      	add	r1, sp, #8
    2294:	0020      	movs	r0, r4
    2296:	4c04      	ldr	r4, [pc, #16]	; (22a8 <nvm_write_eeprom+0x44>)
    2298:	47a0      	blx	r4
    229a:	e7f5      	b.n	2288 <nvm_write_eeprom+0x24>
    229c:	00002101 	.word	0x00002101
    22a0:	000056ea 	.word	0x000056ea
    22a4:	00000357 	.word	0x00000357
    22a8:	00001edd 	.word	0x00001edd

000022ac <nvm_write_userrow>:
{
    22ac:	b5f0      	push	{r4, r5, r6, r7, lr}
    22ae:	b085      	sub	sp, #20
    22b0:	000d      	movs	r5, r1
    22b2:	0016      	movs	r6, r2
    22b4:	001f      	movs	r7, r3
    result = nvm_get_block_info(nvm, NVM_USERROW, &info);
    22b6:	aa02      	add	r2, sp, #8
    22b8:	2102      	movs	r1, #2
    22ba:	4b0a      	ldr	r3, [pc, #40]	; (22e4 <nvm_write_userrow+0x38>)
{
    22bc:	0004      	movs	r4, r0
    result = nvm_get_block_info(nvm, NVM_USERROW, &info);
    22be:	4798      	blx	r3
    if (result) {
    22c0:	2800      	cmp	r0, #0
    22c2:	d007      	beq.n	22d4 <nvm_write_userrow+0x28>
        DBG_INFO(NVM_DEBUG, "nvm_get_block_info failed");
    22c4:	2002      	movs	r0, #2
    22c6:	4908      	ldr	r1, [pc, #32]	; (22e8 <nvm_write_userrow+0x3c>)
    22c8:	4b08      	ldr	r3, [pc, #32]	; (22ec <nvm_write_userrow+0x40>)
    22ca:	4798      	blx	r3
    22cc:	2002      	movs	r0, #2
    22ce:	4240      	negs	r0, r0
}
    22d0:	b005      	add	sp, #20
    22d2:	bdf0      	pop	{r4, r5, r6, r7, pc}
    return _nvm_write_eeprom(nvm_ptr, &info, address, data, len);
    22d4:	9700      	str	r7, [sp, #0]
    22d6:	0033      	movs	r3, r6
    22d8:	002a      	movs	r2, r5
    22da:	a902      	add	r1, sp, #8
    22dc:	0020      	movs	r0, r4
    22de:	4c04      	ldr	r4, [pc, #16]	; (22f0 <nvm_write_userrow+0x44>)
    22e0:	47a0      	blx	r4
    22e2:	e7f5      	b.n	22d0 <nvm_write_userrow+0x24>
    22e4:	00002101 	.word	0x00002101
    22e8:	000056ea 	.word	0x000056ea
    22ec:	00000357 	.word	0x00000357
    22f0:	00001edd 	.word	0x00001edd

000022f4 <nvm_write_fuse>:
{
    22f4:	b5f0      	push	{r4, r5, r6, r7, lr}
    22f6:	b087      	sub	sp, #28
    22f8:	9101      	str	r1, [sp, #4]
    22fa:	9202      	str	r2, [sp, #8]
    22fc:	9303      	str	r3, [sp, #12]
    result = nvm_get_block_info(nvm, NVM_FUSES, &info);
    22fe:	aa04      	add	r2, sp, #16
    2300:	2103      	movs	r1, #3
    2302:	4b12      	ldr	r3, [pc, #72]	; (234c <nvm_write_fuse+0x58>)
{
    2304:	0006      	movs	r6, r0
    result = nvm_get_block_info(nvm, NVM_FUSES, &info);
    2306:	4798      	blx	r3
    2308:	0005      	movs	r5, r0
    230a:	1e04      	subs	r4, r0, #0
    if (result) {
    230c:	d009      	beq.n	2322 <nvm_write_fuse+0x2e>
        DBG_INFO(NVM_DEBUG, "nvm_get_block_info failed");
    230e:	4910      	ldr	r1, [pc, #64]	; (2350 <nvm_write_fuse+0x5c>)
    2310:	2002      	movs	r0, #2
    2312:	4b10      	ldr	r3, [pc, #64]	; (2354 <nvm_write_fuse+0x60>)
    2314:	4798      	blx	r3
    2316:	2503      	movs	r5, #3
            return -2;
    2318:	426d      	negs	r5, r5
}
    231a:	0028      	movs	r0, r5
    231c:	b007      	add	sp, #28
    231e:	bdf0      	pop	{r4, r5, r6, r7, pc}
    for (i = 0; i < len; i++) {
    2320:	3401      	adds	r4, #1
    2322:	9b03      	ldr	r3, [sp, #12]
    2324:	429c      	cmp	r4, r3
    2326:	daf8      	bge.n	231a <nvm_write_fuse+0x26>
        result = _nvm_write_fuse(nvm_ptr, &info, address + i, data[i]);
    2328:	9a01      	ldr	r2, [sp, #4]
    232a:	9b02      	ldr	r3, [sp, #8]
    232c:	1912      	adds	r2, r2, r4
    232e:	5d1b      	ldrb	r3, [r3, r4]
    2330:	b292      	uxth	r2, r2
    2332:	a904      	add	r1, sp, #16
    2334:	0030      	movs	r0, r6
    2336:	4f08      	ldr	r7, [pc, #32]	; (2358 <nvm_write_fuse+0x64>)
    2338:	47b8      	blx	r7
    233a:	1e03      	subs	r3, r0, #0
        if (result) {
    233c:	d0f0      	beq.n	2320 <nvm_write_fuse+0x2c>
            DBG_INFO(NVM_DEBUG, "_nvm_write_fuse fuse (%d) failed %d", i, result);
    233e:	0022      	movs	r2, r4
    2340:	4906      	ldr	r1, [pc, #24]	; (235c <nvm_write_fuse+0x68>)
    2342:	2002      	movs	r0, #2
    2344:	4c03      	ldr	r4, [pc, #12]	; (2354 <nvm_write_fuse+0x60>)
    2346:	47a0      	blx	r4
            return -2;
    2348:	2502      	movs	r5, #2
    234a:	e7e5      	b.n	2318 <nvm_write_fuse+0x24>
    234c:	00002101 	.word	0x00002101
    2350:	000056ea 	.word	0x000056ea
    2354:	00000357 	.word	0x00000357
    2358:	00001ff1 	.word	0x00001ff1
    235c:	00005784 	.word	0x00005784

00002360 <nvm_write_auto>:
{
    2360:	b5f0      	push	{r4, r5, r6, r7, lr}
    2362:	001f      	movs	r7, r3
    2364:	b089      	sub	sp, #36	; 0x24
    nvm_op op, nvm_ops[] = { nvm_write_flash, nvm_write_eeprom, nvm_write_userrow, nvm_write_fuse };
    2366:	4b1e      	ldr	r3, [pc, #120]	; (23e0 <nvm_write_auto+0x80>)
{
    2368:	9201      	str	r2, [sp, #4]
    nvm_op op, nvm_ops[] = { nvm_write_flash, nvm_write_eeprom, nvm_write_userrow, nvm_write_fuse };
    236a:	aa04      	add	r2, sp, #16
{
    236c:	0005      	movs	r5, r0
    236e:	000e      	movs	r6, r1
    nvm_op op, nvm_ops[] = { nvm_write_flash, nvm_write_eeprom, nvm_write_userrow, nvm_write_fuse };
    2370:	cb13      	ldmia	r3!, {r0, r1, r4}
    2372:	c213      	stmia	r2!, {r0, r1, r4}
    2374:	681b      	ldr	r3, [r3, #0]
    2376:	6013      	str	r3, [r2, #0]
    if (!VALID_NVM(nvm))
    2378:	2d00      	cmp	r5, #0
    237a:	d02e      	beq.n	23da <nvm_write_auto+0x7a>
    237c:	4b19      	ldr	r3, [pc, #100]	; (23e4 <nvm_write_auto+0x84>)
    237e:	682a      	ldr	r2, [r5, #0]
    2380:	429a      	cmp	r2, r3
    2382:	d12a      	bne.n	23da <nvm_write_auto+0x7a>
    DBG_INFO(NVM_DEBUG, "<NVM> Write Auto");
    2384:	4918      	ldr	r1, [pc, #96]	; (23e8 <nvm_write_auto+0x88>)
    2386:	2002      	movs	r0, #2
    2388:	4b18      	ldr	r3, [pc, #96]	; (23ec <nvm_write_auto+0x8c>)
    238a:	4798      	blx	r3
    for (i = 0; i < NUM_NVM_TYPES; i++) {
    238c:	2400      	movs	r4, #0
        result = nvm_get_block_info(nvm_ptr, i, &info);
    238e:	aa02      	add	r2, sp, #8
    2390:	0021      	movs	r1, r4
    2392:	0028      	movs	r0, r5
    2394:	4b16      	ldr	r3, [pc, #88]	; (23f0 <nvm_write_auto+0x90>)
    2396:	4798      	blx	r3
        if (result) {
    2398:	2800      	cmp	r0, #0
    239a:	d007      	beq.n	23ac <nvm_write_auto+0x4c>
            DBG_INFO(NVM_DEBUG, "<NVM> nvm_get_block_info %d failed", i);
    239c:	2002      	movs	r0, #2
    239e:	0022      	movs	r2, r4
    23a0:	4914      	ldr	r1, [pc, #80]	; (23f4 <nvm_write_auto+0x94>)
    23a2:	4b12      	ldr	r3, [pc, #72]	; (23ec <nvm_write_auto+0x8c>)
    23a4:	4798      	blx	r3
            return -i;
    23a6:	4260      	negs	r0, r4
}
    23a8:	b009      	add	sp, #36	; 0x24
    23aa:	bdf0      	pop	{r4, r5, r6, r7, pc}
        if (address >= info.nvm_start && address + len <= info.nvm_start + info.nvm_size) {
    23ac:	ab02      	add	r3, sp, #8
    23ae:	8819      	ldrh	r1, [r3, #0]
    23b0:	42b1      	cmp	r1, r6
    23b2:	d80d      	bhi.n	23d0 <nvm_write_auto+0x70>
    23b4:	885b      	ldrh	r3, [r3, #2]
    23b6:	19f2      	adds	r2, r6, r7
    23b8:	185b      	adds	r3, r3, r1
    23ba:	429a      	cmp	r2, r3
    23bc:	dc08      	bgt.n	23d0 <nvm_write_auto+0x70>
            op = nvm_ops[i];
    23be:	00a4      	lsls	r4, r4, #2
    23c0:	ab04      	add	r3, sp, #16
    23c2:	58e4      	ldr	r4, [r4, r3]
    return op(nvm_ptr, address, data, len);
    23c4:	003b      	movs	r3, r7
    23c6:	9a01      	ldr	r2, [sp, #4]
    23c8:	0031      	movs	r1, r6
    23ca:	0028      	movs	r0, r5
    23cc:	47a0      	blx	r4
    23ce:	e7eb      	b.n	23a8 <nvm_write_auto+0x48>
    for (i = 0; i < NUM_NVM_TYPES; i++) {
    23d0:	3401      	adds	r4, #1
    23d2:	2c04      	cmp	r4, #4
    23d4:	d1db      	bne.n	238e <nvm_write_auto+0x2e>
    op = nvm_write_mem; //default operate memory
    23d6:	4c08      	ldr	r4, [pc, #32]	; (23f8 <nvm_write_auto+0x98>)
    23d8:	e7f4      	b.n	23c4 <nvm_write_auto+0x64>
        return ERROR_PTR;
    23da:	2001      	movs	r0, #1
    23dc:	4240      	negs	r0, r0
    23de:	e7e3      	b.n	23a8 <nvm_write_auto+0x48>
    23e0:	00005298 	.word	0x00005298
    23e4:	0000d2d2 	.word	0x0000d2d2
    23e8:	000057a8 	.word	0x000057a8
    23ec:	00000357 	.word	0x00000357
    23f0:	00002101 	.word	0x00002101
    23f4:	000057b9 	.word	0x000057b9
    23f8:	00001c41 	.word	0x00001c41

000023fc <updi_physical_deinit>:
    PHY object destroy
    @ptr_phy: APP object pointer, acquired from updi_physical_init()
    @no return
*/
void updi_physical_deinit(void *ptr_phy)
{
    23fc:	b510      	push	{r4, lr}
    23fe:	1e04      	subs	r4, r0, #0
    upd_physical_t *phy = (upd_physical_t *)ptr_phy;
    if (!VALID_PHY(phy))
    2400:	d00c      	beq.n	241c <updi_physical_deinit+0x20>
    2402:	4b07      	ldr	r3, [pc, #28]	; (2420 <updi_physical_deinit+0x24>)
    2404:	6802      	ldr	r2, [r0, #0]
    2406:	429a      	cmp	r2, r3
    2408:	d108      	bne.n	241c <updi_physical_deinit+0x20>
        return;

    DBG_INFO(PHY_DEBUG, "<PHY> Deinit");
    240a:	2005      	movs	r0, #5
    240c:	4905      	ldr	r1, [pc, #20]	; (2424 <updi_physical_deinit+0x28>)
    240e:	4b06      	ldr	r3, [pc, #24]	; (2428 <updi_physical_deinit+0x2c>)
    2410:	4798      	blx	r3

    if (phy->ser) {
    2412:	6860      	ldr	r0, [r4, #4]
    2414:	2800      	cmp	r0, #0
    2416:	d001      	beq.n	241c <updi_physical_deinit+0x20>
        ClosePort(SER(phy));
    2418:	4b04      	ldr	r3, [pc, #16]	; (242c <updi_physical_deinit+0x30>)
    241a:	4798      	blx	r3
    }
    //free(phy);
}
    241c:	bd10      	pop	{r4, pc}
    241e:	46c0      	nop			; (mov r8, r8)
    2420:	0000e1e1 	.word	0x0000e1e1
    2424:	000057de 	.word	0x000057de
    2428:	00000357 	.word	0x00000357
    242c:	00000509 	.word	0x00000509

00002430 <phy_set_baudrate>:
PHY set Sercom baudrate
@ptr_phy: APP object pointer, acquired from updi_physical_init()
@return 0 successful, other value if failed
*/
int phy_set_baudrate(void *ptr_phy, int baud)
{
    2430:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
    2432:	0004      	movs	r4, r0
    2434:	000f      	movs	r7, r1
    upd_physical_t *phy = (upd_physical_t *)ptr_phy;
    SER_PORT_STATE_T stat;
    int result;

    if (!VALID_PHY(phy))
    2436:	2800      	cmp	r0, #0
    2438:	d024      	beq.n	2484 <phy_set_baudrate+0x54>
    243a:	4b13      	ldr	r3, [pc, #76]	; (2488 <phy_set_baudrate+0x58>)
    243c:	6802      	ldr	r2, [r0, #0]
    243e:	429a      	cmp	r2, r3
    2440:	d120      	bne.n	2484 <phy_set_baudrate+0x54>
        return ERROR_PTR;

    DBG_INFO(PHY_DEBUG, "<PHY> Set Baudrate");

    memcpy(&stat, &phy->stat, sizeof(stat));
    2442:	0025      	movs	r5, r4
    DBG_INFO(PHY_DEBUG, "<PHY> Set Baudrate");
    2444:	4911      	ldr	r1, [pc, #68]	; (248c <phy_set_baudrate+0x5c>)
    2446:	2005      	movs	r0, #5
    2448:	4e11      	ldr	r6, [pc, #68]	; (2490 <phy_set_baudrate+0x60>)
    memcpy(&stat, &phy->stat, sizeof(stat));
    244a:	3508      	adds	r5, #8
    DBG_INFO(PHY_DEBUG, "<PHY> Set Baudrate");
    244c:	47b0      	blx	r6
    memcpy(&stat, &phy->stat, sizeof(stat));
    244e:	2208      	movs	r2, #8
    2450:	0029      	movs	r1, r5
    2452:	4b10      	ldr	r3, [pc, #64]	; (2494 <phy_set_baudrate+0x64>)
    2454:	4668      	mov	r0, sp
    2456:	4798      	blx	r3

    stat.baudRate = baud;
    result = SetPortState(SER(phy), &stat);
    2458:	6860      	ldr	r0, [r4, #4]
    245a:	4669      	mov	r1, sp
    245c:	4b0e      	ldr	r3, [pc, #56]	; (2498 <phy_set_baudrate+0x68>)
    stat.baudRate = baud;
    245e:	9700      	str	r7, [sp, #0]
    result = SetPortState(SER(phy), &stat);
    2460:	4798      	blx	r3
    2462:	1e04      	subs	r4, r0, #0
    if (result) {
    2464:	d007      	beq.n	2476 <phy_set_baudrate+0x46>
        DBG_INFO(PHY_DEBUG, "<PHY> set Baud %d failed %d", baud, result);
    2466:	0003      	movs	r3, r0
    2468:	003a      	movs	r2, r7
    246a:	490c      	ldr	r1, [pc, #48]	; (249c <phy_set_baudrate+0x6c>)
    246c:	2005      	movs	r0, #5
    246e:	47b0      	blx	r6
        return -2;
    2470:	2402      	movs	r4, #2
        return ERROR_PTR;
    2472:	4264      	negs	r4, r4
    2474:	e004      	b.n	2480 <phy_set_baudrate+0x50>
    }

    memcpy(&phy->stat, &stat, sizeof(stat));
    2476:	2208      	movs	r2, #8
    2478:	4669      	mov	r1, sp
    247a:	0028      	movs	r0, r5
    247c:	4b05      	ldr	r3, [pc, #20]	; (2494 <phy_set_baudrate+0x64>)
    247e:	4798      	blx	r3
    
    return 0;
}
    2480:	0020      	movs	r0, r4
    2482:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
        return ERROR_PTR;
    2484:	2401      	movs	r4, #1
    2486:	e7f4      	b.n	2472 <phy_set_baudrate+0x42>
    2488:	0000e1e1 	.word	0x0000e1e1
    248c:	000057eb 	.word	0x000057eb
    2490:	00000357 	.word	0x00000357
    2494:	000043f9 	.word	0x000043f9
    2498:	00000365 	.word	0x00000365
    249c:	000057fe 	.word	0x000057fe

000024a0 <phy_send_each>:
    @data: data to be sent
    @len: data lenght
    @return 0 successful, other value if failed
*/
int phy_send_each(void *ptr_phy, const u8 *data, int len)
{
    24a0:	b5f0      	push	{r4, r5, r6, r7, lr}
    24a2:	b087      	sub	sp, #28
    24a4:	0006      	movs	r6, r0
    24a6:	000f      	movs	r7, r1
    24a8:	9203      	str	r2, [sp, #12]
     */
    upd_physical_t * phy = (upd_physical_t *)ptr_phy;
    u8 val;
    int result;

    if (!VALID_PHY(phy))
    24aa:	2800      	cmp	r0, #0
    24ac:	d04e      	beq.n	254c <phy_send_each+0xac>
    24ae:	4b2e      	ldr	r3, [pc, #184]	; (2568 <phy_send_each+0xc8>)
    24b0:	6802      	ldr	r2, [r0, #0]
    24b2:	429a      	cmp	r2, r3
    24b4:	d14a      	bne.n	254c <phy_send_each+0xac>
        return ERROR_PTR;

    DBG(PHY_DEBUG, "<PHY> Send:", data, len, (unsigned char *)"0x%02x ");
    24b6:	4b2d      	ldr	r3, [pc, #180]	; (256c <phy_send_each+0xcc>)
    24b8:	000a      	movs	r2, r1
    24ba:	9300      	str	r3, [sp, #0]
    24bc:	492c      	ldr	r1, [pc, #176]	; (2570 <phy_send_each+0xd0>)
    24be:	9b03      	ldr	r3, [sp, #12]
    24c0:	2005      	movs	r0, #5
    24c2:	4c2c      	ldr	r4, [pc, #176]	; (2574 <phy_send_each+0xd4>)
    24c4:	47a0      	blx	r4

    result = FlushPort(SER(phy));
    24c6:	6870      	ldr	r0, [r6, #4]
    24c8:	4b2b      	ldr	r3, [pc, #172]	; (2578 <phy_send_each+0xd8>)
    24ca:	4798      	blx	r3
    24cc:	1e02      	subs	r2, r0, #0
    if (result) {
    24ce:	d003      	beq.n	24d8 <phy_send_each+0x38>
        DBG_INFO(PHY_DEBUG, "<PHY> Send: FlushPort failed %d", result);
    24d0:	492a      	ldr	r1, [pc, #168]	; (257c <phy_send_each+0xdc>)
    24d2:	2005      	movs	r0, #5
    24d4:	4b2a      	ldr	r3, [pc, #168]	; (2580 <phy_send_each+0xe0>)
    24d6:	4798      	blx	r3
    24d8:	2400      	movs	r4, #0
    }

    for (int i = 0; i < len; i++) {
    24da:	9b03      	ldr	r3, [sp, #12]
    24dc:	429c      	cmp	r4, r3
    24de:	db02      	blt.n	24e6 <phy_send_each+0x46>

        if (phy->ibdly)
            msleep(phy->ibdly);
    }

    return 0;
    24e0:	2000      	movs	r0, #0
}
    24e2:	b007      	add	sp, #28
    24e4:	bdf0      	pop	{r4, r5, r6, r7, pc}
        val = data[i];
    24e6:	210f      	movs	r1, #15
    24e8:	ab02      	add	r3, sp, #8
    24ea:	18c9      	adds	r1, r1, r3
    24ec:	5d3b      	ldrb	r3, [r7, r4]
        result = SendData(SER(phy), &val, 1);   //Todo: should check whether we could send all data once
    24ee:	2201      	movs	r2, #1
        val = data[i];
    24f0:	700b      	strb	r3, [r1, #0]
        result = SendData(SER(phy), &val, 1);   //Todo: should check whether we could send all data once
    24f2:	6870      	ldr	r0, [r6, #4]
    24f4:	4b23      	ldr	r3, [pc, #140]	; (2584 <phy_send_each+0xe4>)
    24f6:	4798      	blx	r3
    24f8:	1e05      	subs	r5, r0, #0
        if (result) {
    24fa:	d007      	beq.n	250c <phy_send_each+0x6c>
            DBG_INFO(PHY_DEBUG, "<PHY> Send: SendData failed %d", result);
    24fc:	0002      	movs	r2, r0
    24fe:	4922      	ldr	r1, [pc, #136]	; (2588 <phy_send_each+0xe8>)
    2500:	2005      	movs	r0, #5
    2502:	4b1f      	ldr	r3, [pc, #124]	; (2580 <phy_send_each+0xe0>)
    2504:	4798      	blx	r3
            return -2;
    2506:	2002      	movs	r0, #2
            return -3;
    2508:	4240      	negs	r0, r0
    250a:	e7ea      	b.n	24e2 <phy_send_each+0x42>
    250c:	0004      	movs	r4, r0
			msleep(1);
    250e:	2001      	movs	r0, #1
    2510:	4b1e      	ldr	r3, [pc, #120]	; (258c <phy_send_each+0xec>)
    2512:	4798      	blx	r3
			result += ReadData(SER(phy), &val, 1);
    2514:	230f      	movs	r3, #15
    2516:	a902      	add	r1, sp, #8
    2518:	185b      	adds	r3, r3, r1
    251a:	0019      	movs	r1, r3
    251c:	2201      	movs	r2, #1
    251e:	6870      	ldr	r0, [r6, #4]
    2520:	4b1b      	ldr	r3, [pc, #108]	; (2590 <phy_send_each+0xf0>)
    2522:	4798      	blx	r3
    2524:	182d      	adds	r5, r5, r0
		} while (result != 1 && (i++) < 100);
    2526:	2d01      	cmp	r5, #1
    2528:	d012      	beq.n	2550 <phy_send_each+0xb0>
    252a:	3401      	adds	r4, #1
    252c:	2c65      	cmp	r4, #101	; 0x65
    252e:	d1ee      	bne.n	250e <phy_send_each+0x6e>
            DBG_INFO(PHY_DEBUG, "<PHY> Send: ReadData failed %d", result);
    2530:	2005      	movs	r0, #5
    2532:	002a      	movs	r2, r5
    2534:	4917      	ldr	r1, [pc, #92]	; (2594 <phy_send_each+0xf4>)
    2536:	4b12      	ldr	r3, [pc, #72]	; (2580 <phy_send_each+0xe0>)
    2538:	4798      	blx	r3
            return -3;
    253a:	2003      	movs	r0, #3
    253c:	e7e4      	b.n	2508 <phy_send_each+0x68>
        if (phy->ibdly)
    253e:	6930      	ldr	r0, [r6, #16]
    2540:	2800      	cmp	r0, #0
    2542:	d001      	beq.n	2548 <phy_send_each+0xa8>
            msleep(phy->ibdly);
    2544:	4b11      	ldr	r3, [pc, #68]	; (258c <phy_send_each+0xec>)
    2546:	4798      	blx	r3
    for (int i = 0; i < len; i++) {
    2548:	3401      	adds	r4, #1
    254a:	e7c6      	b.n	24da <phy_send_each+0x3a>
        return ERROR_PTR;
    254c:	2001      	movs	r0, #1
    254e:	e7db      	b.n	2508 <phy_send_each+0x68>
        if (data[i] != val) {
    2550:	aa02      	add	r2, sp, #8
    2552:	5d3b      	ldrb	r3, [r7, r4]
    2554:	7bd2      	ldrb	r2, [r2, #15]
    2556:	4293      	cmp	r3, r2
    2558:	d0f1      	beq.n	253e <phy_send_each+0x9e>
            DBG_INFO(PHY_DEBUG, "<PHY> Send: ReadData mismatch %02x(%02x) located = %d", val, data[i], i);
    255a:	9400      	str	r4, [sp, #0]
    255c:	2005      	movs	r0, #5
    255e:	490e      	ldr	r1, [pc, #56]	; (2598 <phy_send_each+0xf8>)
    2560:	4c07      	ldr	r4, [pc, #28]	; (2580 <phy_send_each+0xe0>)
    2562:	47a0      	blx	r4
            return -4;
    2564:	2004      	movs	r0, #4
    2566:	e7cf      	b.n	2508 <phy_send_each+0x68>
    2568:	0000e1e1 	.word	0x0000e1e1
    256c:	00005826 	.word	0x00005826
    2570:	0000581a 	.word	0x0000581a
    2574:	00000355 	.word	0x00000355
    2578:	000004a5 	.word	0x000004a5
    257c:	0000582e 	.word	0x0000582e
    2580:	00000357 	.word	0x00000357
    2584:	000004d1 	.word	0x000004d1
    2588:	0000584e 	.word	0x0000584e
    258c:	00000345 	.word	0x00000345
    2590:	000004f9 	.word	0x000004f9
    2594:	000058a3 	.word	0x000058a3
    2598:	0000586d 	.word	0x0000586d

0000259c <phy_send>:
@return 0 successful, other value if failed
*/
#define MAX_LEN 16
u8 buffer[MAX_LEN];
int phy_send(void *ptr_phy, const u8 *data, int len)
{
    259c:	b5f0      	push	{r4, r5, r6, r7, lr}
    259e:	0006      	movs	r6, r0
    25a0:	b085      	sub	sp, #20
    25a2:	000f      	movs	r7, r1
    25a4:	0014      	movs	r4, r2
    */
    upd_physical_t * phy = (upd_physical_t *)ptr_phy;
    int i, result;
    u8 *rbuf;

    if (!VALID_PHY(phy))
    25a6:	2800      	cmp	r0, #0
    25a8:	d060      	beq.n	266c <phy_send+0xd0>
    25aa:	4b33      	ldr	r3, [pc, #204]	; (2678 <phy_send+0xdc>)
    25ac:	6802      	ldr	r2, [r0, #0]
    25ae:	429a      	cmp	r2, r3
    25b0:	d15c      	bne.n	266c <phy_send+0xd0>
        return ERROR_PTR;

    DBG(PHY_DEBUG, "<PHY> Send:", data, len, (unsigned char *)"0x%02x ");
    25b2:	4b32      	ldr	r3, [pc, #200]	; (267c <phy_send+0xe0>)
    25b4:	000a      	movs	r2, r1
    25b6:	9300      	str	r3, [sp, #0]
    25b8:	4931      	ldr	r1, [pc, #196]	; (2680 <phy_send+0xe4>)
    25ba:	0023      	movs	r3, r4
    25bc:	2005      	movs	r0, #5
    25be:	4d31      	ldr	r5, [pc, #196]	; (2684 <phy_send+0xe8>)
    25c0:	47a8      	blx	r5

    memset(buffer, 0, sizeof(buffer));
    25c2:	2210      	movs	r2, #16
    25c4:	2100      	movs	r1, #0
    25c6:	4b30      	ldr	r3, [pc, #192]	; (2688 <phy_send+0xec>)
    25c8:	4830      	ldr	r0, [pc, #192]	; (268c <phy_send+0xf0>)
    25ca:	4798      	blx	r3
    if (!rbuf) {
        DBG_INFO(PHY_DEBUG, "<PHY> Send: malloc rbuf(%d) failed", len);
        return -2;
    }*/

    result = FlushPort(SER(phy));
    25cc:	6870      	ldr	r0, [r6, #4]
    25ce:	4b30      	ldr	r3, [pc, #192]	; (2690 <phy_send+0xf4>)
    25d0:	4798      	blx	r3
    25d2:	1e02      	subs	r2, r0, #0
    if (result) {
    25d4:	d003      	beq.n	25de <phy_send+0x42>
        DBG_INFO(PHY_DEBUG, "<PHY> Send: FlushPort failed %d", result);
    25d6:	492f      	ldr	r1, [pc, #188]	; (2694 <phy_send+0xf8>)
    25d8:	2005      	movs	r0, #5
    25da:	4b2f      	ldr	r3, [pc, #188]	; (2698 <phy_send+0xfc>)
    25dc:	4798      	blx	r3
    }
    
    /* Send */
    result = SendData(SER(phy), data, len); 
    25de:	4b2f      	ldr	r3, [pc, #188]	; (269c <phy_send+0x100>)
    25e0:	0022      	movs	r2, r4
    25e2:	0039      	movs	r1, r7
    25e4:	6870      	ldr	r0, [r6, #4]
    25e6:	4798      	blx	r3
    25e8:	2365      	movs	r3, #101	; 0x65
    25ea:	1e05      	subs	r5, r0, #0
    25ec:	9303      	str	r3, [sp, #12]
    if (result) {
    25ee:	d00f      	beq.n	2610 <phy_send+0x74>
        DBG_INFO(PHY_DEBUG, "<PHY> Send: SendData (%d) failed %d", len, result);
    25f0:	0003      	movs	r3, r0
    25f2:	4d29      	ldr	r5, [pc, #164]	; (2698 <phy_send+0xfc>)
    25f4:	0022      	movs	r2, r4
    25f6:	492a      	ldr	r1, [pc, #168]	; (26a0 <phy_send+0x104>)
    25f8:	2005      	movs	r0, #5
    25fa:	47a8      	blx	r5
        result = -3;
    25fc:	2503      	movs	r5, #3
            result += ReadData(SER(phy), rbuf, len);
		} while (result != len && (i++) < 100);
						
        if (result != len) {
            DBG_INFO(PHY_DEBUG, "<PHY> Send: ReadData (%d) failed %d", len, result);
            result = -4;
    25fe:	426d      	negs	r5, r5
        }
    }

    if (result == len) {
    2600:	42a5      	cmp	r5, r4
    2602:	d128      	bne.n	2656 <phy_send+0xba>
            result = -4;
    2604:	2100      	movs	r1, #0
        for (i = 0; i < len; i++) {
            if (data[i] != rbuf[i]) {
    2606:	4821      	ldr	r0, [pc, #132]	; (268c <phy_send+0xf0>)
        for (i = 0; i < len; i++) {
    2608:	42a1      	cmp	r1, r4
    260a:	db19      	blt.n	2640 <phy_send+0xa4>
    260c:	0025      	movs	r5, r4
    260e:	e022      	b.n	2656 <phy_send+0xba>
			msleep(1);
    2610:	2001      	movs	r0, #1
    2612:	4b24      	ldr	r3, [pc, #144]	; (26a4 <phy_send+0x108>)
    2614:	4798      	blx	r3
            result += ReadData(SER(phy), rbuf, len);
    2616:	0022      	movs	r2, r4
    2618:	491c      	ldr	r1, [pc, #112]	; (268c <phy_send+0xf0>)
    261a:	6870      	ldr	r0, [r6, #4]
    261c:	4b22      	ldr	r3, [pc, #136]	; (26a8 <phy_send+0x10c>)
    261e:	4798      	blx	r3
    2620:	182d      	adds	r5, r5, r0
		} while (result != len && (i++) < 100);
    2622:	42ac      	cmp	r4, r5
    2624:	d0ee      	beq.n	2604 <phy_send+0x68>
    2626:	9b03      	ldr	r3, [sp, #12]
    2628:	3b01      	subs	r3, #1
    262a:	9303      	str	r3, [sp, #12]
    262c:	2b00      	cmp	r3, #0
    262e:	d1ef      	bne.n	2610 <phy_send+0x74>
            DBG_INFO(PHY_DEBUG, "<PHY> Send: ReadData (%d) failed %d", len, result);
    2630:	002b      	movs	r3, r5
    2632:	0022      	movs	r2, r4
    2634:	4d18      	ldr	r5, [pc, #96]	; (2698 <phy_send+0xfc>)
    2636:	491d      	ldr	r1, [pc, #116]	; (26ac <phy_send+0x110>)
    2638:	2005      	movs	r0, #5
    263a:	47a8      	blx	r5
            result = -4;
    263c:	2504      	movs	r5, #4
    263e:	e7de      	b.n	25fe <phy_send+0x62>
            if (data[i] != rbuf[i]) {
    2640:	5c7b      	ldrb	r3, [r7, r1]
    2642:	5c42      	ldrb	r2, [r0, r1]
    2644:	4293      	cmp	r3, r2
    2646:	d00f      	beq.n	2668 <phy_send+0xcc>
                DBG_INFO(PHY_DEBUG, "<PHY> Send: ReadData mismatch %02x(%02x) located = %d", rbuf[i], data[i], i);
    2648:	9100      	str	r1, [sp, #0]
    264a:	4d13      	ldr	r5, [pc, #76]	; (2698 <phy_send+0xfc>)
    264c:	4918      	ldr	r1, [pc, #96]	; (26b0 <phy_send+0x114>)
    264e:	2005      	movs	r0, #5
    2650:	47a8      	blx	r5
                result = -5;
    2652:	2505      	movs	r5, #5
    2654:	426d      	negs	r5, r5
                break;
            }
        }
    }

    if (phy->ibdly)
    2656:	6930      	ldr	r0, [r6, #16]
    2658:	2800      	cmp	r0, #0
    265a:	d001      	beq.n	2660 <phy_send+0xc4>
        msleep(phy->ibdly);
    265c:	4b11      	ldr	r3, [pc, #68]	; (26a4 <phy_send+0x108>)
    265e:	4798      	blx	r3

    //free(rbuf);

    if (result == len)	
    2660:	42a5      	cmp	r5, r4
    2662:	d105      	bne.n	2670 <phy_send+0xd4>
        return 0;
    2664:	2500      	movs	r5, #0
    2666:	e003      	b.n	2670 <phy_send+0xd4>
        for (i = 0; i < len; i++) {
    2668:	3101      	adds	r1, #1
    266a:	e7cd      	b.n	2608 <phy_send+0x6c>
        return ERROR_PTR;
    266c:	2501      	movs	r5, #1
    266e:	426d      	negs	r5, r5
    else
        return result;
}
    2670:	0028      	movs	r0, r5
    2672:	b005      	add	sp, #20
    2674:	bdf0      	pop	{r4, r5, r6, r7, pc}
    2676:	46c0      	nop			; (mov r8, r8)
    2678:	0000e1e1 	.word	0x0000e1e1
    267c:	00005826 	.word	0x00005826
    2680:	0000581a 	.word	0x0000581a
    2684:	00000355 	.word	0x00000355
    2688:	0000440b 	.word	0x0000440b
    268c:	200023c4 	.word	0x200023c4
    2690:	000004a5 	.word	0x000004a5
    2694:	0000582e 	.word	0x0000582e
    2698:	00000357 	.word	0x00000357
    269c:	000004d1 	.word	0x000004d1
    26a0:	000058c2 	.word	0x000058c2
    26a4:	00000345 	.word	0x00000345
    26a8:	000004f9 	.word	0x000004f9
    26ac:	000058e6 	.word	0x000058e6
    26b0:	0000586d 	.word	0x0000586d

000026b4 <phy_send_double_break>:
{
    26b4:	b5f0      	push	{r4, r5, r6, r7, lr}
    u8 data[] = { UPDI_BREAK, UPDI_BREAK };
    26b6:	2700      	movs	r7, #0
{
    26b8:	b085      	sub	sp, #20
    u8 data[] = { UPDI_BREAK, UPDI_BREAK };
    26ba:	ae01      	add	r6, sp, #4
{
    26bc:	0004      	movs	r4, r0
    u8 data[] = { UPDI_BREAK, UPDI_BREAK };
    26be:	7037      	strb	r7, [r6, #0]
    26c0:	7077      	strb	r7, [r6, #1]
    if (!VALID_PHY(phy))
    26c2:	42b8      	cmp	r0, r7
    26c4:	d036      	beq.n	2734 <phy_send_double_break+0x80>
    26c6:	4b1c      	ldr	r3, [pc, #112]	; (2738 <phy_send_double_break+0x84>)
    26c8:	6802      	ldr	r2, [r0, #0]
    26ca:	429a      	cmp	r2, r3
    26cc:	d132      	bne.n	2734 <phy_send_double_break+0x80>
    DBG_INFO(PHY_DEBUG, "<PHY> D-Break: Sending double break");
    26ce:	491b      	ldr	r1, [pc, #108]	; (273c <phy_send_double_break+0x88>)
    26d0:	2005      	movs	r0, #5
    26d2:	4d1b      	ldr	r5, [pc, #108]	; (2740 <phy_send_double_break+0x8c>)
    26d4:	47a8      	blx	r5
    stat.baudRate = 300;
    26d6:	2396      	movs	r3, #150	; 0x96
    26d8:	005b      	lsls	r3, r3, #1
    26da:	9302      	str	r3, [sp, #8]
    stat.byteSize = 8;
    26dc:	3b25      	subs	r3, #37	; 0x25
    stat.baudRate = 300;
    26de:	a902      	add	r1, sp, #8
    stat.byteSize = 8;
    26e0:	3bff      	subs	r3, #255	; 0xff
    26e2:	710b      	strb	r3, [r1, #4]
    stat.stopBits = ONESTOPBIT;
    26e4:	714f      	strb	r7, [r1, #5]
    result = SetPortState(SER(phy), &stat);
    26e6:	6860      	ldr	r0, [r4, #4]
    stat.parity = EVENPARITY;
    26e8:	3702      	adds	r7, #2
    result = SetPortState(SER(phy), &stat);
    26ea:	4b16      	ldr	r3, [pc, #88]	; (2744 <phy_send_double_break+0x90>)
    stat.parity = EVENPARITY;
    26ec:	718f      	strb	r7, [r1, #6]
    result = SetPortState(SER(phy), &stat);
    26ee:	4798      	blx	r3
    26f0:	1e02      	subs	r2, r0, #0
    if (result) {
    26f2:	d006      	beq.n	2702 <phy_send_double_break+0x4e>
        DBG_INFO(PHY_DEBUG, "<PHY> D-Break: SetPortState failed %d", result);
    26f4:	2005      	movs	r0, #5
    26f6:	4914      	ldr	r1, [pc, #80]	; (2748 <phy_send_double_break+0x94>)
    26f8:	47a8      	blx	r5
        return -2;
    26fa:	2002      	movs	r0, #2
        return ERROR_PTR;
    26fc:	4240      	negs	r0, r0
}
    26fe:	b005      	add	sp, #20
    2700:	bdf0      	pop	{r4, r5, r6, r7, pc}
    result = phy_send(phy, data, 2);
    2702:	003a      	movs	r2, r7
    2704:	0031      	movs	r1, r6
    2706:	0020      	movs	r0, r4
    2708:	4b10      	ldr	r3, [pc, #64]	; (274c <phy_send_double_break+0x98>)
    270a:	4798      	blx	r3
    270c:	1e02      	subs	r2, r0, #0
    if (result) {
    270e:	d004      	beq.n	271a <phy_send_double_break+0x66>
        DBG_INFO(PHY_DEBUG, "<PHY> D-Break: phy_send failed %d", result);
    2710:	2005      	movs	r0, #5
    2712:	490f      	ldr	r1, [pc, #60]	; (2750 <phy_send_double_break+0x9c>)
    2714:	47a8      	blx	r5
        return -3;
    2716:	2003      	movs	r0, #3
    2718:	e7f0      	b.n	26fc <phy_send_double_break+0x48>
    result = SetPortState(SER(phy), &phy->stat);
    271a:	0021      	movs	r1, r4
    271c:	6860      	ldr	r0, [r4, #4]
    271e:	3108      	adds	r1, #8
    2720:	4b08      	ldr	r3, [pc, #32]	; (2744 <phy_send_double_break+0x90>)
    2722:	4798      	blx	r3
    if (result) {
    2724:	2800      	cmp	r0, #0
    2726:	d0ea      	beq.n	26fe <phy_send_double_break+0x4a>
        DBG_INFO(PHY_DEBUG, "<PHY> D-Break: re-SetPortState failed %d", result);
    2728:	0002      	movs	r2, r0
    272a:	490a      	ldr	r1, [pc, #40]	; (2754 <phy_send_double_break+0xa0>)
    272c:	2005      	movs	r0, #5
    272e:	47a8      	blx	r5
        return -5;
    2730:	2005      	movs	r0, #5
    2732:	e7e3      	b.n	26fc <phy_send_double_break+0x48>
        return ERROR_PTR;
    2734:	2001      	movs	r0, #1
    2736:	e7e1      	b.n	26fc <phy_send_double_break+0x48>
    2738:	0000e1e1 	.word	0x0000e1e1
    273c:	0000594a 	.word	0x0000594a
    2740:	00000357 	.word	0x00000357
    2744:	00000365 	.word	0x00000365
    2748:	0000596e 	.word	0x0000596e
    274c:	0000259d 	.word	0x0000259d
    2750:	00005994 	.word	0x00005994
    2754:	000059b6 	.word	0x000059b6

00002758 <updi_physical_init>:
{
    2758:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
    DBG_INFO(PHY_DEBUG, "<PHY> Opening port %s, baudrate %d", port, baud);
    275a:	000b      	movs	r3, r1
    275c:	0002      	movs	r2, r0
{
    275e:	0006      	movs	r6, r0
    2760:	000f      	movs	r7, r1
    DBG_INFO(PHY_DEBUG, "<PHY> Opening port %s, baudrate %d", port, baud);
    2762:	2005      	movs	r0, #5
    2764:	4918      	ldr	r1, [pc, #96]	; (27c8 <updi_physical_init+0x70>)
    2766:	4c19      	ldr	r4, [pc, #100]	; (27cc <updi_physical_init+0x74>)
    2768:	47a0      	blx	r4
    stat.baudRate = baud;
    276a:	466d      	mov	r5, sp
    stat.byteSize = 8;
    276c:	2308      	movs	r3, #8
    276e:	712b      	strb	r3, [r5, #4]
    stat.stopBits = TWOSTOPBITS;
    2770:	3b06      	subs	r3, #6
    2772:	716b      	strb	r3, [r5, #5]
    stat.parity = EVENPARITY;
    2774:	71ab      	strb	r3, [r5, #6]
    ser = (void *)OpenPort(port, &stat);
    2776:	4669      	mov	r1, sp
    2778:	0030      	movs	r0, r6
    277a:	4b15      	ldr	r3, [pc, #84]	; (27d0 <updi_physical_init+0x78>)
    stat.baudRate = baud;
    277c:	9700      	str	r7, [sp, #0]
    ser = (void *)OpenPort(port, &stat);
    277e:	4798      	blx	r3
    2780:	1e04      	subs	r4, r0, #0
    if (ser) {
    2782:	d01a      	beq.n	27ba <updi_physical_init+0x62>
        phy->mgwd = UPD_PHYSICAL_MAGIC_WORD;
    2784:	4e13      	ldr	r6, [pc, #76]	; (27d4 <updi_physical_init+0x7c>)
    2786:	4b14      	ldr	r3, [pc, #80]	; (27d8 <updi_physical_init+0x80>)
        phy->ser = ser;
    2788:	6070      	str	r0, [r6, #4]
        phy->mgwd = UPD_PHYSICAL_MAGIC_WORD;
    278a:	6033      	str	r3, [r6, #0]
        phy->ibdly = 1;
    278c:	2301      	movs	r3, #1
    278e:	6133      	str	r3, [r6, #16]
        memcpy(&phy->stat, &stat, sizeof(stat));
    2790:	0033      	movs	r3, r6
        stat.baudRate = baud;
    2792:	9700      	str	r7, [sp, #0]
        memcpy(&phy->stat, &stat, sizeof(stat));
    2794:	3308      	adds	r3, #8
    2796:	cd06      	ldmia	r5!, {r1, r2}
    2798:	c306      	stmia	r3!, {r1, r2}
        result = phy_send_double_break(phy);
    279a:	0030      	movs	r0, r6
    279c:	4b0f      	ldr	r3, [pc, #60]	; (27dc <updi_physical_init+0x84>)
    279e:	4798      	blx	r3
        phy = &physical;//(upd_physical_t *)malloc(sizeof(*phy));
    27a0:	0034      	movs	r4, r6
        result = phy_send_double_break(phy);
    27a2:	1e02      	subs	r2, r0, #0
        if (result) {
    27a4:	d007      	beq.n	27b6 <updi_physical_init+0x5e>
            DBG_INFO(PHY_DEBUG, "phy_send_double_break failed %d", result);
    27a6:	490e      	ldr	r1, [pc, #56]	; (27e0 <updi_physical_init+0x88>)
    27a8:	2005      	movs	r0, #5
    27aa:	4b08      	ldr	r3, [pc, #32]	; (27cc <updi_physical_init+0x74>)
    27ac:	4798      	blx	r3
            updi_physical_deinit(phy);
    27ae:	0030      	movs	r0, r6
    27b0:	4b0c      	ldr	r3, [pc, #48]	; (27e4 <updi_physical_init+0x8c>)
    27b2:	4798      	blx	r3
            return NULL;
    27b4:	2400      	movs	r4, #0
}
    27b6:	0020      	movs	r0, r4
    27b8:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
        DBG_INFO(PHY_DEBUG, "<PHY> Init: OpenPort %s failed ", port);
    27ba:	0032      	movs	r2, r6
    27bc:	490a      	ldr	r1, [pc, #40]	; (27e8 <updi_physical_init+0x90>)
    27be:	2005      	movs	r0, #5
    27c0:	4b02      	ldr	r3, [pc, #8]	; (27cc <updi_physical_init+0x74>)
    27c2:	4798      	blx	r3
    27c4:	e7f7      	b.n	27b6 <updi_physical_init+0x5e>
    27c6:	46c0      	nop			; (mov r8, r8)
    27c8:	000059df 	.word	0x000059df
    27cc:	00000357 	.word	0x00000357
    27d0:	00000425 	.word	0x00000425
    27d4:	200023d4 	.word	0x200023d4
    27d8:	0000e1e1 	.word	0x0000e1e1
    27dc:	000026b5 	.word	0x000026b5
    27e0:	00005a02 	.word	0x00005a02
    27e4:	000023fd 	.word	0x000023fd
    27e8:	00005a22 	.word	0x00005a22

000027ec <phy_send_byte>:
    @data: data to be sent
    @len: data lenght
    @return 0 successful, other value if failed
*/
int phy_send_byte(void *ptr_phy, u8 val)
{
    27ec:	b507      	push	{r0, r1, r2, lr}
    27ee:	466b      	mov	r3, sp
    27f0:	71d9      	strb	r1, [r3, #7]
    27f2:	3307      	adds	r3, #7
    return phy_send_each(ptr_phy, &val, 1);
    27f4:	0019      	movs	r1, r3
    27f6:	2201      	movs	r2, #1
    27f8:	4b01      	ldr	r3, [pc, #4]	; (2800 <phy_send_byte+0x14>)
    27fa:	4798      	blx	r3
}
    27fc:	bd0e      	pop	{r1, r2, r3, pc}
    27fe:	46c0      	nop			; (mov r8, r8)
    2800:	000024a1 	.word	0x000024a1

00002804 <phy_receive>:
@data: data buffer to receive
@len: data lenght
@return 0 successful, other value if failed
*/
int phy_receive(void *ptr_phy, u8 *data, int len)
{
    2804:	b5f0      	push	{r4, r5, r6, r7, lr}
    2806:	0007      	movs	r7, r0
    2808:	b087      	sub	sp, #28
    280a:	000e      	movs	r6, r1
    280c:	0015      	movs	r5, r2
    Receives a frame of a known number of chars from UPDI
    */
    upd_physical_t * phy = (upd_physical_t *)ptr_phy;
    int result = 0;

    if (!VALID_PHY(phy))
    280e:	2800      	cmp	r0, #0
    2810:	d02f      	beq.n	2872 <phy_receive+0x6e>
    2812:	4b19      	ldr	r3, [pc, #100]	; (2878 <phy_receive+0x74>)
    2814:	6802      	ldr	r2, [r0, #0]
    2816:	429a      	cmp	r2, r3
    2818:	d12b      	bne.n	2872 <phy_receive+0x6e>
    281a:	230b      	movs	r3, #11
    281c:	2400      	movs	r4, #0
    281e:	9305      	str	r3, [sp, #20]
        return ERROR_PTR;

    /* Read */
	int i = 0;
	do {
		result += ReadData(SER(phy), data, len);
    2820:	4b16      	ldr	r3, [pc, #88]	; (287c <phy_receive+0x78>)
    2822:	002a      	movs	r2, r5
    2824:	0031      	movs	r1, r6
    2826:	6878      	ldr	r0, [r7, #4]
    2828:	4798      	blx	r3
		msleep(1);
    282a:	4b15      	ldr	r3, [pc, #84]	; (2880 <phy_receive+0x7c>)
		result += ReadData(SER(phy), data, len);
    282c:	1824      	adds	r4, r4, r0
		msleep(1);
    282e:	2001      	movs	r0, #1
    2830:	4798      	blx	r3
	} while (result != len && i++ < 10);
    2832:	42a5      	cmp	r5, r4
    2834:	d00f      	beq.n	2856 <phy_receive+0x52>
    2836:	9b05      	ldr	r3, [sp, #20]
    2838:	3b01      	subs	r3, #1
    283a:	9305      	str	r3, [sp, #20]
    283c:	2b00      	cmp	r3, #0
    283e:	d1ef      	bne.n	2820 <phy_receive+0x1c>
    
    if (result != len) {
        DBG(PHY_DEBUG, "<PHY> Recv: Received(%d/%d) failed: ", data, result, (unsigned char *)"0x%02x ", result, len);
    2840:	4b10      	ldr	r3, [pc, #64]	; (2884 <phy_receive+0x80>)
    2842:	9502      	str	r5, [sp, #8]
    2844:	9300      	str	r3, [sp, #0]
    2846:	9401      	str	r4, [sp, #4]
    2848:	0023      	movs	r3, r4
    284a:	0032      	movs	r2, r6
    284c:	490e      	ldr	r1, [pc, #56]	; (2888 <phy_receive+0x84>)
    284e:	2005      	movs	r0, #5
    2850:	4f0e      	ldr	r7, [pc, #56]	; (288c <phy_receive+0x88>)
    2852:	47b8      	blx	r7
    2854:	e000      	b.n	2858 <phy_receive+0x54>
    2856:	002c      	movs	r4, r5
    }

    DBG(PHY_DEBUG, "<PHY> Recv: Received(%d/%d): ", data, result, (unsigned char *)"0x%02x ", result, len);
    2858:	4b0a      	ldr	r3, [pc, #40]	; (2884 <phy_receive+0x80>)
    285a:	9502      	str	r5, [sp, #8]
    285c:	9300      	str	r3, [sp, #0]
    285e:	9401      	str	r4, [sp, #4]
    2860:	0023      	movs	r3, r4
    2862:	0032      	movs	r2, r6
    2864:	490a      	ldr	r1, [pc, #40]	; (2890 <phy_receive+0x8c>)
    2866:	2005      	movs	r0, #5
    2868:	4d08      	ldr	r5, [pc, #32]	; (288c <phy_receive+0x88>)
    286a:	47a8      	blx	r5

    return result;
}
    286c:	0020      	movs	r0, r4
    286e:	b007      	add	sp, #28
    2870:	bdf0      	pop	{r4, r5, r6, r7, pc}
        return ERROR_PTR;
    2872:	2401      	movs	r4, #1
    2874:	4264      	negs	r4, r4
    2876:	e7f9      	b.n	286c <phy_receive+0x68>
    2878:	0000e1e1 	.word	0x0000e1e1
    287c:	000004f9 	.word	0x000004f9
    2880:	00000345 	.word	0x00000345
    2884:	00005826 	.word	0x00005826
    2888:	00005a9c 	.word	0x00005a9c
    288c:	00000355 	.word	0x00000355
    2890:	00005a7e 	.word	0x00005a7e

00002894 <phy_transfer>:
    @rdata: data buffer to receive
    @len: receiving lenght
    @return 0 successful, other value if failed
*/
int phy_transfer(void *ptr_phy, const u8 *wdata, int wlen, u8 *rdata, int rlen)
{
    2894:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
    2896:	0005      	movs	r5, r0
    2898:	000f      	movs	r7, r1
    289a:	0016      	movs	r6, r2
    289c:	9301      	str	r3, [sp, #4]
    int result;
    int retry = 0;  //determine retries in higher level by protocol used

    DBG_INFO(PHY_DEBUG, "<PHY> Transfer: Write %d bytes, Read %d bytes", wlen, rlen);
    289e:	4910      	ldr	r1, [pc, #64]	; (28e0 <phy_transfer+0x4c>)
    28a0:	9b08      	ldr	r3, [sp, #32]
    28a2:	2005      	movs	r0, #5
    28a4:	4c0f      	ldr	r4, [pc, #60]	; (28e4 <phy_transfer+0x50>)
    28a6:	47a0      	blx	r4

    do {
        result = phy_send(ptr_phy, wdata, wlen);
    28a8:	0032      	movs	r2, r6
    28aa:	0039      	movs	r1, r7
    28ac:	0028      	movs	r0, r5
    28ae:	4b0e      	ldr	r3, [pc, #56]	; (28e8 <phy_transfer+0x54>)
    28b0:	4798      	blx	r3
    28b2:	1e02      	subs	r2, r0, #0
        if (result) {
    28b4:	d005      	beq.n	28c2 <phy_transfer+0x2e>
            DBG_INFO(PHY_DEBUG, "<PHY> Transfer: phy_send failed %d", result);
    28b6:	2005      	movs	r0, #5
    28b8:	490c      	ldr	r1, [pc, #48]	; (28ec <phy_transfer+0x58>)
    28ba:	47a0      	blx	r4
            result = -2;
    28bc:	2002      	movs	r0, #2
        }
        else {
            result = phy_receive(ptr_phy, rdata, rlen);
            if (result != rlen) {
                DBG_INFO(PHY_DEBUG, "<PHY> Transfer: phy_receive failed, Got %d bytes", result);
                result = -3;
    28be:	4240      	negs	r0, r0
            retry--;

    } while (retry >= 0);

    return result;
}
    28c0:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
            result = phy_receive(ptr_phy, rdata, rlen);
    28c2:	4b0b      	ldr	r3, [pc, #44]	; (28f0 <phy_transfer+0x5c>)
    28c4:	9a08      	ldr	r2, [sp, #32]
    28c6:	9901      	ldr	r1, [sp, #4]
    28c8:	0028      	movs	r0, r5
    28ca:	4798      	blx	r3
            if (result != rlen) {
    28cc:	9b08      	ldr	r3, [sp, #32]
    28ce:	4283      	cmp	r3, r0
    28d0:	d0f6      	beq.n	28c0 <phy_transfer+0x2c>
                DBG_INFO(PHY_DEBUG, "<PHY> Transfer: phy_receive failed, Got %d bytes", result);
    28d2:	0002      	movs	r2, r0
    28d4:	4907      	ldr	r1, [pc, #28]	; (28f4 <phy_transfer+0x60>)
    28d6:	2005      	movs	r0, #5
    28d8:	47a0      	blx	r4
                result = -3;
    28da:	2003      	movs	r0, #3
    28dc:	e7ef      	b.n	28be <phy_transfer+0x2a>
    28de:	46c0      	nop			; (mov r8, r8)
    28e0:	00005af2 	.word	0x00005af2
    28e4:	00000357 	.word	0x00000357
    28e8:	0000259d 	.word	0x0000259d
    28ec:	00005b20 	.word	0x00005b20
    28f0:	00002805 	.word	0x00002805
    28f4:	00005b43 	.word	0x00005b43

000028f8 <phy_sib>:
    @data: data buffer to store SIB
    @len: SIB lenght
    @return 0 successful, other value if failed
*/
int phy_sib(void *ptr_phy, u8 *data, int len) 
{
    28f8:	b5f0      	push	{r4, r5, r6, r7, lr}
    28fa:	b085      	sub	sp, #20
    28fc:	0005      	movs	r5, r0
    28fe:	000f      	movs	r7, r1
    2900:	0014      	movs	r4, r2
    /*
        System information block is just a string coming back from a SIB command
    */

    upd_physical_t * phy = (upd_physical_t *)ptr_phy;
    const u8 val[] = { UPDI_PHY_SYNC, UPDI_KEY | UPDI_KEY_SIB | UPDI_SIB_16BYTES};
    2902:	4913      	ldr	r1, [pc, #76]	; (2950 <phy_sib+0x58>)
    2904:	2202      	movs	r2, #2
    2906:	a803      	add	r0, sp, #12
    2908:	4b12      	ldr	r3, [pc, #72]	; (2954 <phy_sib+0x5c>)
    290a:	4798      	blx	r3
    const int sib_size = 16;
    int result;

    if (!VALID_PHY(phy))
    290c:	2d00      	cmp	r5, #0
    290e:	d01c      	beq.n	294a <phy_sib+0x52>
    2910:	4b11      	ldr	r3, [pc, #68]	; (2958 <phy_sib+0x60>)
    2912:	682a      	ldr	r2, [r5, #0]
    2914:	429a      	cmp	r2, r3
    2916:	d118      	bne.n	294a <phy_sib+0x52>
        return ERROR_PTR;

    DBG_INFO(PHY_DEBUG, "<PHY> Sib");
    2918:	4910      	ldr	r1, [pc, #64]	; (295c <phy_sib+0x64>)
    291a:	2005      	movs	r0, #5
    291c:	4e10      	ldr	r6, [pc, #64]	; (2960 <phy_sib+0x68>)
    291e:	47b0      	blx	r6
    2920:	2c10      	cmp	r4, #16
    2922:	dd00      	ble.n	2926 <phy_sib+0x2e>
    2924:	2410      	movs	r4, #16

    if (len > sib_size)
        len = sib_size;

    result = phy_transfer(phy, val, sizeof(val), data, len);
    2926:	2202      	movs	r2, #2
    2928:	0028      	movs	r0, r5
    292a:	9400      	str	r4, [sp, #0]
    292c:	003b      	movs	r3, r7
    292e:	a903      	add	r1, sp, #12
    2930:	4d0c      	ldr	r5, [pc, #48]	; (2964 <phy_sib+0x6c>)
    2932:	47a8      	blx	r5
    2934:	0002      	movs	r2, r0
    if (result != len) {
        DBG_INFO(PHY_DEBUG, "<PHY> Sib: phy_transfer failed %d", result);
        return -3;
    }

    return 0;
    2936:	2000      	movs	r0, #0
    if (result != len) {
    2938:	42a2      	cmp	r2, r4
    293a:	d004      	beq.n	2946 <phy_sib+0x4e>
        DBG_INFO(PHY_DEBUG, "<PHY> Sib: phy_transfer failed %d", result);
    293c:	3005      	adds	r0, #5
    293e:	490a      	ldr	r1, [pc, #40]	; (2968 <phy_sib+0x70>)
    2940:	47b0      	blx	r6
        return -3;
    2942:	2003      	movs	r0, #3
        return ERROR_PTR;
    2944:	4240      	negs	r0, r0
}
    2946:	b005      	add	sp, #20
    2948:	bdf0      	pop	{r4, r5, r6, r7, pc}
        return ERROR_PTR;
    294a:	2001      	movs	r0, #1
    294c:	e7fa      	b.n	2944 <phy_sib+0x4c>
    294e:	46c0      	nop			; (mov r8, r8)
    2950:	000057dc 	.word	0x000057dc
    2954:	000043f9 	.word	0x000043f9
    2958:	0000e1e1 	.word	0x0000e1e1
    295c:	00005b74 	.word	0x00005b74
    2960:	00000357 	.word	0x00000357
    2964:	00002895 	.word	0x00002895
    2968:	00005b7e 	.word	0x00005b7e

0000296c <Dummy_Handler>:

/**
 * \brief Default interrupt handler for unused IRQs.
 */
void Dummy_Handler(void)
{
    296c:	e7fe      	b.n	296c <Dummy_Handler>
	...

00002970 <Reset_Handler>:
        if (pSrc != pDest) {
    2970:	4811      	ldr	r0, [pc, #68]	; (29b8 <Reset_Handler+0x48>)
    2972:	4912      	ldr	r1, [pc, #72]	; (29bc <Reset_Handler+0x4c>)
{
    2974:	b570      	push	{r4, r5, r6, lr}
        if (pSrc != pDest) {
    2976:	4288      	cmp	r0, r1
    2978:	d004      	beq.n	2984 <Reset_Handler+0x14>
    297a:	2300      	movs	r3, #0
                for (; pDest < &_erelocate;) {
    297c:	4c10      	ldr	r4, [pc, #64]	; (29c0 <Reset_Handler+0x50>)
    297e:	18ca      	adds	r2, r1, r3
    2980:	42a2      	cmp	r2, r4
    2982:	d313      	bcc.n	29ac <Reset_Handler+0x3c>
                *pDest++ = 0;
    2984:	2100      	movs	r1, #0
    2986:	4b0f      	ldr	r3, [pc, #60]	; (29c4 <Reset_Handler+0x54>)
        for (pDest = &_szero; pDest < &_ezero;) {
    2988:	4a0f      	ldr	r2, [pc, #60]	; (29c8 <Reset_Handler+0x58>)
    298a:	4293      	cmp	r3, r2
    298c:	d312      	bcc.n	29b4 <Reset_Handler+0x44>
        SCB->VTOR = ((uint32_t) pSrc & SCB_VTOR_TBLOFF_Msk);
    298e:	21ff      	movs	r1, #255	; 0xff
    2990:	4b0e      	ldr	r3, [pc, #56]	; (29cc <Reset_Handler+0x5c>)
    2992:	4a0f      	ldr	r2, [pc, #60]	; (29d0 <Reset_Handler+0x60>)
    2994:	438b      	bics	r3, r1
    2996:	6093      	str	r3, [r2, #8]
        NVMCTRL->CTRLB.bit.MANW = 1;
    2998:	2380      	movs	r3, #128	; 0x80
    299a:	4a0e      	ldr	r2, [pc, #56]	; (29d4 <Reset_Handler+0x64>)
    299c:	6851      	ldr	r1, [r2, #4]
    299e:	430b      	orrs	r3, r1
    29a0:	6053      	str	r3, [r2, #4]
        __libc_init_array();
    29a2:	4b0d      	ldr	r3, [pc, #52]	; (29d8 <Reset_Handler+0x68>)
    29a4:	4798      	blx	r3
        main();
    29a6:	4b0d      	ldr	r3, [pc, #52]	; (29dc <Reset_Handler+0x6c>)
    29a8:	4798      	blx	r3
    29aa:	e7fe      	b.n	29aa <Reset_Handler+0x3a>
                        *pDest++ = *pSrc++;
    29ac:	58c5      	ldr	r5, [r0, r3]
    29ae:	3304      	adds	r3, #4
    29b0:	6015      	str	r5, [r2, #0]
    29b2:	e7e4      	b.n	297e <Reset_Handler+0xe>
                *pDest++ = 0;
    29b4:	c302      	stmia	r3!, {r1}
    29b6:	e7e8      	b.n	298a <Reset_Handler+0x1a>
    29b8:	00005cf0 	.word	0x00005cf0
    29bc:	20000000 	.word	0x20000000
    29c0:	20002350 	.word	0x20002350
    29c4:	20002350 	.word	0x20002350
    29c8:	20002438 	.word	0x20002438
    29cc:	00000000 	.word	0x00000000
    29d0:	e000ed00 	.word	0xe000ed00
    29d4:	41004000 	.word	0x41004000
    29d8:	000043b1 	.word	0x000043b1
    29dc:	00003599 	.word	0x00003599

000029e0 <USART_0_CLOCK_init>:
}

static inline void hri_gclk_write_PCHCTRL_reg(const void *const hw, uint8_t index, hri_gclk_pchctrl_reg_t data)
{
	GCLK_CRITICAL_SECTION_ENTER();
	((Gclk *)hw)->PCHCTRL[index].reg = data;
    29e0:	4b06      	ldr	r3, [pc, #24]	; (29fc <USART_0_CLOCK_init+0x1c>)
    29e2:	2140      	movs	r1, #64	; 0x40
    29e4:	001a      	movs	r2, r3
    29e6:	32d8      	adds	r2, #216	; 0xd8
    29e8:	6011      	str	r1, [r2, #0]
    29ea:	2243      	movs	r2, #67	; 0x43
    29ec:	33c4      	adds	r3, #196	; 0xc4
    29ee:	601a      	str	r2, [r3, #0]
}

static inline void hri_mclk_set_APBCMASK_SERCOM4_bit(const void *const hw)
{
	MCLK_CRITICAL_SECTION_ENTER();
	((Mclk *)hw)->APBCMASK.reg |= MCLK_APBCMASK_SERCOM4;
    29f0:	2310      	movs	r3, #16
    29f2:	4a03      	ldr	r2, [pc, #12]	; (2a00 <USART_0_CLOCK_init+0x20>)
    29f4:	69d1      	ldr	r1, [r2, #28]
    29f6:	430b      	orrs	r3, r1
    29f8:	61d3      	str	r3, [r2, #28]

	hri_gclk_write_PCHCTRL_reg(GCLK, SERCOM4_GCLK_ID_CORE, CONF_GCLK_SERCOM4_CORE_SRC | (1 << GCLK_PCHCTRL_CHEN_Pos));
	hri_gclk_write_PCHCTRL_reg(GCLK, SERCOM4_GCLK_ID_SLOW, CONF_GCLK_SERCOM4_SLOW_SRC | (1 << GCLK_PCHCTRL_CHEN_Pos));

	hri_mclk_set_APBCMASK_SERCOM4_bit(MCLK);
}
    29fa:	4770      	bx	lr
    29fc:	40001800 	.word	0x40001800
    2a00:	40000400 	.word	0x40000400

00002a04 <USART_0_PORT_init>:
static inline void hri_port_write_PINCFG_PMUXEN_bit(const void *const hw, uint8_t submodule_index, uint8_t index,
                                                    bool value)
{
	uint8_t tmp;
	PORT_CRITICAL_SECTION_ENTER();
	tmp = ((Port *)hw)->Group[submodule_index].PINCFG[index].reg;
    2a04:	4b0d      	ldr	r3, [pc, #52]	; (2a3c <USART_0_PORT_init+0x38>)
	tmp &= ~PORT_PINCFG_PMUXEN;
    2a06:	2201      	movs	r2, #1
	tmp = ((Port *)hw)->Group[submodule_index].PINCFG[index].reg;
    2a08:	0018      	movs	r0, r3
 * \brief USART pinmux initialization function
 *
 * Set each required pin to USART functionality
 */
void USART_0_PORT_init()
{
    2a0a:	b530      	push	{r4, r5, lr}
    2a0c:	30c8      	adds	r0, #200	; 0xc8
    2a0e:	7801      	ldrb	r1, [r0, #0]
	tmp &= ~PORT_PMUX_PMUXE_Msk;
    2a10:	240f      	movs	r4, #15
	tmp &= ~PORT_PINCFG_PMUXEN;
    2a12:	4391      	bics	r1, r2
	tmp |= value << PORT_PINCFG_PMUXEN_Pos;
    2a14:	4311      	orrs	r1, r2
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg = tmp;
    2a16:	7001      	strb	r1, [r0, #0]
	tmp = ((Port *)hw)->Group[submodule_index].PMUX[index].reg;
    2a18:	0019      	movs	r1, r3
	tmp |= PORT_PMUX_PMUXE(data);
    2a1a:	2003      	movs	r0, #3
	tmp = ((Port *)hw)->Group[submodule_index].PMUX[index].reg;
    2a1c:	31b4      	adds	r1, #180	; 0xb4
    2a1e:	780d      	ldrb	r5, [r1, #0]
	tmp = ((Port *)hw)->Group[submodule_index].PINCFG[index].reg;
    2a20:	33c9      	adds	r3, #201	; 0xc9
	tmp &= ~PORT_PMUX_PMUXE_Msk;
    2a22:	43a5      	bics	r5, r4
	tmp |= PORT_PMUX_PMUXE(data);
    2a24:	4328      	orrs	r0, r5
	((Port *)hw)->Group[submodule_index].PMUX[index].reg = tmp;
    2a26:	7008      	strb	r0, [r1, #0]
	tmp = ((Port *)hw)->Group[submodule_index].PINCFG[index].reg;
    2a28:	7818      	ldrb	r0, [r3, #0]
	tmp &= ~PORT_PINCFG_PMUXEN;
    2a2a:	4390      	bics	r0, r2
	tmp |= value << PORT_PINCFG_PMUXEN_Pos;
    2a2c:	4302      	orrs	r2, r0
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg = tmp;
    2a2e:	701a      	strb	r2, [r3, #0]
	tmp = ((Port *)hw)->Group[submodule_index].PMUX[index].reg;
    2a30:	780b      	ldrb	r3, [r1, #0]
	tmp &= ~PORT_PMUX_PMUXO_Msk;
    2a32:	401c      	ands	r4, r3
	tmp |= PORT_PMUX_PMUXO(data);
    2a34:	2330      	movs	r3, #48	; 0x30
    2a36:	4323      	orrs	r3, r4
	((Port *)hw)->Group[submodule_index].PMUX[index].reg = tmp;
    2a38:	700b      	strb	r3, [r1, #0]

	gpio_set_pin_function(PB08, PINMUX_PB08D_SERCOM4_PAD0);

	gpio_set_pin_function(PB09, PINMUX_PB09D_SERCOM4_PAD1);
}
    2a3a:	bd30      	pop	{r4, r5, pc}
    2a3c:	40002800 	.word	0x40002800

00002a40 <USART_0_init>:
 * \brief USART initialization function
 *
 * Enables USART peripheral, clocks and initializes USART driver
 */
void USART_0_init(void)
{
    2a40:	b513      	push	{r0, r1, r4, lr}
	USART_0_CLOCK_init();
    2a42:	4b06      	ldr	r3, [pc, #24]	; (2a5c <USART_0_init+0x1c>)
    2a44:	4798      	blx	r3
	usart_async_init(&USART_0, SERCOM4, USART_0_buffer, USART_0_BUFFER_SIZE, (void *)NULL);
    2a46:	2300      	movs	r3, #0
    2a48:	4a05      	ldr	r2, [pc, #20]	; (2a60 <USART_0_init+0x20>)
    2a4a:	9300      	str	r3, [sp, #0]
    2a4c:	4905      	ldr	r1, [pc, #20]	; (2a64 <USART_0_init+0x24>)
    2a4e:	3320      	adds	r3, #32
    2a50:	4c05      	ldr	r4, [pc, #20]	; (2a68 <USART_0_init+0x28>)
    2a52:	4806      	ldr	r0, [pc, #24]	; (2a6c <USART_0_init+0x2c>)
    2a54:	47a0      	blx	r4
	USART_0_PORT_init();
    2a56:	4b06      	ldr	r3, [pc, #24]	; (2a70 <USART_0_init+0x30>)
    2a58:	4798      	blx	r3
}
    2a5a:	bd13      	pop	{r0, r1, r4, pc}
    2a5c:	000029e1 	.word	0x000029e1
    2a60:	2000236c 	.word	0x2000236c
    2a64:	42001000 	.word	0x42001000
    2a68:	00002c75 	.word	0x00002c75
    2a6c:	200023e8 	.word	0x200023e8
    2a70:	00002a05 	.word	0x00002a05

00002a74 <system_init>:

void system_init(void)
{
    2a74:	b510      	push	{r4, lr}
 * Currently the following initialization functions are supported:
 *  - System clock initialization
 */
static inline void init_mcu(void)
{
	_init_chip();
    2a76:	4b02      	ldr	r3, [pc, #8]	; (2a80 <system_init+0xc>)
    2a78:	4798      	blx	r3
	init_mcu();

	USART_0_init();
    2a7a:	4b02      	ldr	r3, [pc, #8]	; (2a84 <system_init+0x10>)
    2a7c:	4798      	blx	r3
}
    2a7e:	bd10      	pop	{r4, pc}
    2a80:	00003011 	.word	0x00003011
    2a84:	00002a41 	.word	0x00002a41

00002a88 <atomic_enter_critical>:
 */
__STATIC_FORCEINLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
    2a88:	f3ef 8310 	mrs	r3, PRIMASK
/**
 * \brief Disable interrupts, enter critical section
 */
void atomic_enter_critical(hal_atomic_t volatile *atomic)
{
	*atomic = __get_PRIMASK();
    2a8c:	6003      	str	r3, [r0, #0]
  __ASM volatile ("cpsid i" : : : "memory");
    2a8e:	b672      	cpsid	i
  \details Ensures the apparent order of the explicit memory operations before
           and after the instruction, without ensuring their completion.
 */
__STATIC_FORCEINLINE void __DMB(void)
{
  __ASM volatile ("dmb 0xF":::"memory");
    2a90:	f3bf 8f5f 	dmb	sy
	__disable_irq();
	__DMB();
}
    2a94:	4770      	bx	lr

00002a96 <atomic_leave_critical>:
    2a96:	f3bf 8f5f 	dmb	sy
 * \brief Exit atomic section
 */
void atomic_leave_critical(hal_atomic_t volatile *atomic)
{
	__DMB();
	__set_PRIMASK(*atomic);
    2a9a:	6803      	ldr	r3, [r0, #0]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
    2a9c:	f383 8810 	msr	PRIMASK, r3
}
    2aa0:	4770      	bx	lr
	...

00002aa4 <delay_ms>:
/**
 * \brief Perform delay in ms
 */
void delay_ms(const uint16_t ms)
{
	_delay_cycles(hardware, _get_cycles_for_ms(ms));
    2aa4:	4b04      	ldr	r3, [pc, #16]	; (2ab8 <delay_ms+0x14>)
{
    2aa6:	b510      	push	{r4, lr}
	_delay_cycles(hardware, _get_cycles_for_ms(ms));
    2aa8:	681c      	ldr	r4, [r3, #0]
    2aaa:	4b04      	ldr	r3, [pc, #16]	; (2abc <delay_ms+0x18>)
    2aac:	4798      	blx	r3
    2aae:	4b04      	ldr	r3, [pc, #16]	; (2ac0 <delay_ms+0x1c>)
    2ab0:	0001      	movs	r1, r0
    2ab2:	0020      	movs	r0, r4
    2ab4:	4798      	blx	r3
}
    2ab6:	bd10      	pop	{r4, pc}
    2ab8:	2000238c 	.word	0x2000238c
    2abc:	00002fed 	.word	0x00002fed
    2ac0:	00003009 	.word	0x00003009

00002ac4 <io_write>:

/**
 * \brief I/O write interface
 */
int32_t io_write(struct io_descriptor *const io_descr, const uint8_t *const buf, const uint16_t length)
{
    2ac4:	b570      	push	{r4, r5, r6, lr}
    2ac6:	0004      	movs	r4, r0
    2ac8:	000d      	movs	r5, r1
    2aca:	0016      	movs	r6, r2
	ASSERT(io_descr && buf);
    2acc:	2800      	cmp	r0, #0
    2ace:	d003      	beq.n	2ad8 <io_write+0x14>
    2ad0:	0008      	movs	r0, r1
    2ad2:	1e43      	subs	r3, r0, #1
    2ad4:	4198      	sbcs	r0, r3
    2ad6:	b2c0      	uxtb	r0, r0
    2ad8:	2234      	movs	r2, #52	; 0x34
    2ada:	4904      	ldr	r1, [pc, #16]	; (2aec <io_write+0x28>)
    2adc:	4b04      	ldr	r3, [pc, #16]	; (2af0 <io_write+0x2c>)
    2ade:	4798      	blx	r3
	return io_descr->write(io_descr, buf, length);
    2ae0:	0032      	movs	r2, r6
    2ae2:	0029      	movs	r1, r5
    2ae4:	6823      	ldr	r3, [r4, #0]
    2ae6:	0020      	movs	r0, r4
    2ae8:	4798      	blx	r3
}
    2aea:	bd70      	pop	{r4, r5, r6, pc}
    2aec:	00005ba0 	.word	0x00005ba0
    2af0:	00002ed9 	.word	0x00002ed9

00002af4 <io_read>:

/**
 * \brief I/O read interface
 */
int32_t io_read(struct io_descriptor *const io_descr, uint8_t *const buf, const uint16_t length)
{
    2af4:	b570      	push	{r4, r5, r6, lr}
    2af6:	0004      	movs	r4, r0
    2af8:	000d      	movs	r5, r1
    2afa:	0016      	movs	r6, r2
	ASSERT(io_descr && buf);
    2afc:	2800      	cmp	r0, #0
    2afe:	d003      	beq.n	2b08 <io_read+0x14>
    2b00:	0008      	movs	r0, r1
    2b02:	1e43      	subs	r3, r0, #1
    2b04:	4198      	sbcs	r0, r3
    2b06:	b2c0      	uxtb	r0, r0
    2b08:	223d      	movs	r2, #61	; 0x3d
    2b0a:	4904      	ldr	r1, [pc, #16]	; (2b1c <io_read+0x28>)
    2b0c:	4b04      	ldr	r3, [pc, #16]	; (2b20 <io_read+0x2c>)
    2b0e:	4798      	blx	r3
	return io_descr->read(io_descr, buf, length);
    2b10:	0032      	movs	r2, r6
    2b12:	0029      	movs	r1, r5
    2b14:	6863      	ldr	r3, [r4, #4]
    2b16:	0020      	movs	r0, r4
    2b18:	4798      	blx	r3
}
    2b1a:	bd70      	pop	{r4, r5, r6, pc}
    2b1c:	00005ba0 	.word	0x00005ba0
    2b20:	00002ed9 	.word	0x00002ed9

00002b24 <usart_transmission_complete>:
 */
static void usart_transmission_complete(struct _usart_async_device *device)
{
	struct usart_async_descriptor *descr = CONTAINER_OF(device, struct usart_async_descriptor, device);

	descr->stat = 0;
    2b24:	2300      	movs	r3, #0
	struct usart_async_descriptor *descr = CONTAINER_OF(device, struct usart_async_descriptor, device);
    2b26:	3808      	subs	r0, #8
{
    2b28:	b510      	push	{r4, lr}
	descr->stat = 0;
    2b2a:	6303      	str	r3, [r0, #48]	; 0x30
	if (descr->usart_cb.tx_done) {
    2b2c:	6a43      	ldr	r3, [r0, #36]	; 0x24
    2b2e:	2b00      	cmp	r3, #0
    2b30:	d000      	beq.n	2b34 <usart_transmission_complete+0x10>
		descr->usart_cb.tx_done(descr);
    2b32:	4798      	blx	r3
	}
}
    2b34:	bd10      	pop	{r4, pc}

00002b36 <usart_error>:
 */
static void usart_error(struct _usart_async_device *device)
{
	struct usart_async_descriptor *descr = CONTAINER_OF(device, struct usart_async_descriptor, device);

	descr->stat = 0;
    2b36:	2300      	movs	r3, #0
	struct usart_async_descriptor *descr = CONTAINER_OF(device, struct usart_async_descriptor, device);
    2b38:	3808      	subs	r0, #8
{
    2b3a:	b510      	push	{r4, lr}
	descr->stat = 0;
    2b3c:	6303      	str	r3, [r0, #48]	; 0x30
	if (descr->usart_cb.error) {
    2b3e:	6ac3      	ldr	r3, [r0, #44]	; 0x2c
    2b40:	2b00      	cmp	r3, #0
    2b42:	d000      	beq.n	2b46 <usart_error+0x10>
		descr->usart_cb.error(descr);
    2b44:	4798      	blx	r3
	}
}
    2b46:	bd10      	pop	{r4, pc}

00002b48 <usart_fill_rx_buffer>:
{
    2b48:	b510      	push	{r4, lr}
	struct usart_async_descriptor *descr = CONTAINER_OF(device, struct usart_async_descriptor, device);
    2b4a:	0004      	movs	r4, r0
	ringbuffer_put(&descr->rx, data);
    2b4c:	4b04      	ldr	r3, [pc, #16]	; (2b60 <usart_fill_rx_buffer+0x18>)
    2b4e:	302c      	adds	r0, #44	; 0x2c
    2b50:	4798      	blx	r3
	if (descr->usart_cb.rx_done) {
    2b52:	6a23      	ldr	r3, [r4, #32]
	struct usart_async_descriptor *descr = CONTAINER_OF(device, struct usart_async_descriptor, device);
    2b54:	3c08      	subs	r4, #8
	if (descr->usart_cb.rx_done) {
    2b56:	2b00      	cmp	r3, #0
    2b58:	d001      	beq.n	2b5e <usart_fill_rx_buffer+0x16>
		descr->usart_cb.rx_done(descr);
    2b5a:	0020      	movs	r0, r4
    2b5c:	4798      	blx	r3
}
    2b5e:	bd10      	pop	{r4, pc}
    2b60:	00002f65 	.word	0x00002f65

00002b64 <usart_async_write>:
{
    2b64:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    2b66:	0004      	movs	r4, r0
    2b68:	000e      	movs	r6, r1
    2b6a:	0015      	movs	r5, r2
	ASSERT(descr && buf && length);
    2b6c:	2800      	cmp	r0, #0
    2b6e:	d004      	beq.n	2b7a <usart_async_write+0x16>
    2b70:	1e08      	subs	r0, r1, #0
    2b72:	d002      	beq.n	2b7a <usart_async_write+0x16>
    2b74:	0010      	movs	r0, r2
    2b76:	1e43      	subs	r3, r0, #1
    2b78:	4198      	sbcs	r0, r3
    2b7a:	2701      	movs	r7, #1
    2b7c:	223c      	movs	r2, #60	; 0x3c
    2b7e:	4038      	ands	r0, r7
    2b80:	32ff      	adds	r2, #255	; 0xff
    2b82:	490c      	ldr	r1, [pc, #48]	; (2bb4 <usart_async_write+0x50>)
    2b84:	4b0c      	ldr	r3, [pc, #48]	; (2bb8 <usart_async_write+0x54>)
    2b86:	4798      	blx	r3
	if (descr->tx_por != descr->tx_buffer_length) {
    2b88:	0022      	movs	r2, r4
    2b8a:	1da3      	adds	r3, r4, #6
    2b8c:	324c      	adds	r2, #76	; 0x4c
    2b8e:	8fd8      	ldrh	r0, [r3, #62]	; 0x3e
    2b90:	8811      	ldrh	r1, [r2, #0]
    2b92:	4288      	cmp	r0, r1
    2b94:	d10a      	bne.n	2bac <usart_async_write+0x48>
	descr->tx_buffer        = (uint8_t *)buf;
    2b96:	64a6      	str	r6, [r4, #72]	; 0x48
	_usart_async_enable_byte_sent_irq(&descr->device);
    2b98:	0020      	movs	r0, r4
	descr->tx_buffer_length = length;
    2b9a:	8015      	strh	r5, [r2, #0]
	descr->tx_por           = 0;
    2b9c:	2200      	movs	r2, #0
	_usart_async_enable_byte_sent_irq(&descr->device);
    2b9e:	3008      	adds	r0, #8
	descr->tx_por           = 0;
    2ba0:	87da      	strh	r2, [r3, #62]	; 0x3e
	descr->stat             = USART_ASYNC_STATUS_BUSY;
    2ba2:	6327      	str	r7, [r4, #48]	; 0x30
	_usart_async_enable_byte_sent_irq(&descr->device);
    2ba4:	4b05      	ldr	r3, [pc, #20]	; (2bbc <usart_async_write+0x58>)
    2ba6:	4798      	blx	r3
	return (int32_t)length;
    2ba8:	0028      	movs	r0, r5
}
    2baa:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		return ERR_NO_RESOURCE;
    2bac:	201c      	movs	r0, #28
    2bae:	4240      	negs	r0, r0
    2bb0:	e7fb      	b.n	2baa <usart_async_write+0x46>
    2bb2:	46c0      	nop			; (mov r8, r8)
    2bb4:	00005bb4 	.word	0x00005bb4
    2bb8:	00002ed9 	.word	0x00002ed9
    2bbc:	000034c5 	.word	0x000034c5

00002bc0 <usart_process_byte_sent>:
	if (descr->tx_por != descr->tx_buffer_length) {
    2bc0:	0001      	movs	r1, r0
{
    2bc2:	b510      	push	{r4, lr}
    2bc4:	0004      	movs	r4, r0
	if (descr->tx_por != descr->tx_buffer_length) {
    2bc6:	8f83      	ldrh	r3, [r0, #60]	; 0x3c
    2bc8:	3044      	adds	r0, #68	; 0x44
    2bca:	8800      	ldrh	r0, [r0, #0]
    2bcc:	3908      	subs	r1, #8
    2bce:	4298      	cmp	r0, r3
    2bd0:	d00a      	beq.n	2be8 <usart_process_byte_sent+0x28>
		_usart_async_write_byte(&descr->device, descr->tx_buffer[descr->tx_por++]);
    2bd2:	6c89      	ldr	r1, [r1, #72]	; 0x48
    2bd4:	1c58      	adds	r0, r3, #1
    2bd6:	87a0      	strh	r0, [r4, #60]	; 0x3c
    2bd8:	5cc9      	ldrb	r1, [r1, r3]
    2bda:	0020      	movs	r0, r4
    2bdc:	4b04      	ldr	r3, [pc, #16]	; (2bf0 <usart_process_byte_sent+0x30>)
    2bde:	4798      	blx	r3
		_usart_async_enable_byte_sent_irq(&descr->device);
    2be0:	0020      	movs	r0, r4
    2be2:	4b04      	ldr	r3, [pc, #16]	; (2bf4 <usart_process_byte_sent+0x34>)
		_usart_async_enable_tx_done_irq(&descr->device);
    2be4:	4798      	blx	r3
}
    2be6:	bd10      	pop	{r4, pc}
		_usart_async_enable_tx_done_irq(&descr->device);
    2be8:	0020      	movs	r0, r4
    2bea:	4b03      	ldr	r3, [pc, #12]	; (2bf8 <usart_process_byte_sent+0x38>)
    2bec:	e7fa      	b.n	2be4 <usart_process_byte_sent+0x24>
    2bee:	46c0      	nop			; (mov r8, r8)
    2bf0:	000034bd 	.word	0x000034bd
    2bf4:	000034c5 	.word	0x000034c5
    2bf8:	000034cd 	.word	0x000034cd

00002bfc <usart_async_read>:
{
    2bfc:	b5f0      	push	{r4, r5, r6, r7, lr}
    2bfe:	0005      	movs	r5, r0
    2c00:	b085      	sub	sp, #20
    2c02:	000e      	movs	r6, r1
    2c04:	0014      	movs	r4, r2
	ASSERT(descr && buf && length);
    2c06:	2800      	cmp	r0, #0
    2c08:	d004      	beq.n	2c14 <usart_async_read+0x18>
    2c0a:	1e08      	subs	r0, r1, #0
    2c0c:	d002      	beq.n	2c14 <usart_async_read+0x18>
    2c0e:	0010      	movs	r0, r2
    2c10:	1e43      	subs	r3, r0, #1
    2c12:	4198      	sbcs	r0, r3
    2c14:	22ac      	movs	r2, #172	; 0xac
    2c16:	4911      	ldr	r1, [pc, #68]	; (2c5c <usart_async_read+0x60>)
    2c18:	0052      	lsls	r2, r2, #1
    2c1a:	4b11      	ldr	r3, [pc, #68]	; (2c60 <usart_async_read+0x64>)
    2c1c:	4798      	blx	r3
	num = ringbuffer_num(&descr->rx);
    2c1e:	3534      	adds	r5, #52	; 0x34
	CRITICAL_SECTION_ENTER()
    2c20:	a803      	add	r0, sp, #12
    2c22:	4b10      	ldr	r3, [pc, #64]	; (2c64 <usart_async_read+0x68>)
    2c24:	4798      	blx	r3
	num = ringbuffer_num(&descr->rx);
    2c26:	4b10      	ldr	r3, [pc, #64]	; (2c68 <usart_async_read+0x6c>)
    2c28:	0028      	movs	r0, r5
    2c2a:	4798      	blx	r3
	CRITICAL_SECTION_LEAVE()
    2c2c:	4b0f      	ldr	r3, [pc, #60]	; (2c6c <usart_async_read+0x70>)
	num = ringbuffer_num(&descr->rx);
    2c2e:	0007      	movs	r7, r0
	CRITICAL_SECTION_LEAVE()
    2c30:	a803      	add	r0, sp, #12
    2c32:	4798      	blx	r3
    2c34:	1933      	adds	r3, r6, r4
	while ((was_read < num) && (was_read < length)) {
    2c36:	0034      	movs	r4, r6
    2c38:	19f7      	adds	r7, r6, r7
    2c3a:	9301      	str	r3, [sp, #4]
    2c3c:	1ba0      	subs	r0, r4, r6
    2c3e:	b280      	uxth	r0, r0
    2c40:	42bc      	cmp	r4, r7
    2c42:	d002      	beq.n	2c4a <usart_async_read+0x4e>
    2c44:	9b01      	ldr	r3, [sp, #4]
    2c46:	429c      	cmp	r4, r3
    2c48:	d101      	bne.n	2c4e <usart_async_read+0x52>
}
    2c4a:	b005      	add	sp, #20
    2c4c:	bdf0      	pop	{r4, r5, r6, r7, pc}
		ringbuffer_get(&descr->rx, &buf[was_read++]);
    2c4e:	0021      	movs	r1, r4
    2c50:	0028      	movs	r0, r5
    2c52:	4b07      	ldr	r3, [pc, #28]	; (2c70 <usart_async_read+0x74>)
    2c54:	4798      	blx	r3
    2c56:	3401      	adds	r4, #1
    2c58:	e7f0      	b.n	2c3c <usart_async_read+0x40>
    2c5a:	46c0      	nop			; (mov r8, r8)
    2c5c:	00005bb4 	.word	0x00005bb4
    2c60:	00002ed9 	.word	0x00002ed9
    2c64:	00002a89 	.word	0x00002a89
    2c68:	00002fa5 	.word	0x00002fa5
    2c6c:	00002a97 	.word	0x00002a97
    2c70:	00002f21 	.word	0x00002f21

00002c74 <usart_async_init>:
{
    2c74:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    2c76:	0004      	movs	r4, r0
    2c78:	000d      	movs	r5, r1
    2c7a:	0016      	movs	r6, r2
    2c7c:	001f      	movs	r7, r3
	ASSERT(descr && hw && rx_buffer && rx_buffer_length);
    2c7e:	2800      	cmp	r0, #0
    2c80:	d006      	beq.n	2c90 <usart_async_init+0x1c>
    2c82:	1e08      	subs	r0, r1, #0
    2c84:	d004      	beq.n	2c90 <usart_async_init+0x1c>
    2c86:	1e10      	subs	r0, r2, #0
    2c88:	d002      	beq.n	2c90 <usart_async_init+0x1c>
    2c8a:	0018      	movs	r0, r3
    2c8c:	1e43      	subs	r3, r0, #1
    2c8e:	4198      	sbcs	r0, r3
    2c90:	223a      	movs	r2, #58	; 0x3a
    2c92:	4911      	ldr	r1, [pc, #68]	; (2cd8 <usart_async_init+0x64>)
    2c94:	4b11      	ldr	r3, [pc, #68]	; (2cdc <usart_async_init+0x68>)
    2c96:	4798      	blx	r3
	if (ERR_NONE != ringbuffer_init(&descr->rx, rx_buffer, rx_buffer_length)) {
    2c98:	0020      	movs	r0, r4
    2c9a:	003a      	movs	r2, r7
    2c9c:	0031      	movs	r1, r6
    2c9e:	3034      	adds	r0, #52	; 0x34
    2ca0:	4b0f      	ldr	r3, [pc, #60]	; (2ce0 <usart_async_init+0x6c>)
    2ca2:	4798      	blx	r3
    2ca4:	2800      	cmp	r0, #0
    2ca6:	d113      	bne.n	2cd0 <usart_async_init+0x5c>
	init_status = _usart_async_init(&descr->device, hw);
    2ca8:	0020      	movs	r0, r4
    2caa:	0029      	movs	r1, r5
    2cac:	3008      	adds	r0, #8
    2cae:	4b0d      	ldr	r3, [pc, #52]	; (2ce4 <usart_async_init+0x70>)
    2cb0:	4798      	blx	r3
	if (init_status) {
    2cb2:	2800      	cmp	r0, #0
    2cb4:	d10b      	bne.n	2cce <usart_async_init+0x5a>
	descr->io.read  = usart_async_read;
    2cb6:	4b0c      	ldr	r3, [pc, #48]	; (2ce8 <usart_async_init+0x74>)
    2cb8:	6063      	str	r3, [r4, #4]
	descr->io.write = usart_async_write;
    2cba:	4b0c      	ldr	r3, [pc, #48]	; (2cec <usart_async_init+0x78>)
    2cbc:	6023      	str	r3, [r4, #0]
	descr->device.usart_cb.tx_byte_sent = usart_process_byte_sent;
    2cbe:	4b0c      	ldr	r3, [pc, #48]	; (2cf0 <usart_async_init+0x7c>)
    2cc0:	60a3      	str	r3, [r4, #8]
	descr->device.usart_cb.rx_done_cb   = usart_fill_rx_buffer;
    2cc2:	4b0c      	ldr	r3, [pc, #48]	; (2cf4 <usart_async_init+0x80>)
    2cc4:	60e3      	str	r3, [r4, #12]
	descr->device.usart_cb.tx_done_cb   = usart_transmission_complete;
    2cc6:	4b0c      	ldr	r3, [pc, #48]	; (2cf8 <usart_async_init+0x84>)
    2cc8:	6123      	str	r3, [r4, #16]
	descr->device.usart_cb.error_cb     = usart_error;
    2cca:	4b0c      	ldr	r3, [pc, #48]	; (2cfc <usart_async_init+0x88>)
    2ccc:	6163      	str	r3, [r4, #20]
}
    2cce:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		return ERR_INVALID_ARG;
    2cd0:	200d      	movs	r0, #13
    2cd2:	4240      	negs	r0, r0
    2cd4:	e7fb      	b.n	2cce <usart_async_init+0x5a>
    2cd6:	46c0      	nop			; (mov r8, r8)
    2cd8:	00005bb4 	.word	0x00005bb4
    2cdc:	00002ed9 	.word	0x00002ed9
    2ce0:	00002ee1 	.word	0x00002ee1
    2ce4:	000033e9 	.word	0x000033e9
    2ce8:	00002bfd 	.word	0x00002bfd
    2cec:	00002b65 	.word	0x00002b65
    2cf0:	00002bc1 	.word	0x00002bc1
    2cf4:	00002b49 	.word	0x00002b49
    2cf8:	00002b25 	.word	0x00002b25
    2cfc:	00002b37 	.word	0x00002b37

00002d00 <usart_async_enable>:
{
    2d00:	b510      	push	{r4, lr}
    2d02:	0004      	movs	r4, r0
	ASSERT(descr);
    2d04:	1e43      	subs	r3, r0, #1
    2d06:	4198      	sbcs	r0, r3
    2d08:	2261      	movs	r2, #97	; 0x61
    2d0a:	4905      	ldr	r1, [pc, #20]	; (2d20 <usart_async_enable+0x20>)
    2d0c:	b2c0      	uxtb	r0, r0
    2d0e:	4b05      	ldr	r3, [pc, #20]	; (2d24 <usart_async_enable+0x24>)
    2d10:	4798      	blx	r3
	_usart_async_enable(&descr->device);
    2d12:	0020      	movs	r0, r4
    2d14:	4b04      	ldr	r3, [pc, #16]	; (2d28 <usart_async_enable+0x28>)
    2d16:	3008      	adds	r0, #8
    2d18:	4798      	blx	r3
}
    2d1a:	2000      	movs	r0, #0
    2d1c:	bd10      	pop	{r4, pc}
    2d1e:	46c0      	nop			; (mov r8, r8)
    2d20:	00005bb4 	.word	0x00005bb4
    2d24:	00002ed9 	.word	0x00002ed9
    2d28:	00003455 	.word	0x00003455

00002d2c <usart_async_disable>:
{
    2d2c:	b510      	push	{r4, lr}
    2d2e:	0004      	movs	r4, r0
	ASSERT(descr);
    2d30:	1e43      	subs	r3, r0, #1
    2d32:	4198      	sbcs	r0, r3
    2d34:	226c      	movs	r2, #108	; 0x6c
    2d36:	4905      	ldr	r1, [pc, #20]	; (2d4c <usart_async_disable+0x20>)
    2d38:	b2c0      	uxtb	r0, r0
    2d3a:	4b05      	ldr	r3, [pc, #20]	; (2d50 <usart_async_disable+0x24>)
    2d3c:	4798      	blx	r3
	_usart_async_disable(&descr->device);
    2d3e:	0020      	movs	r0, r4
    2d40:	4b04      	ldr	r3, [pc, #16]	; (2d54 <usart_async_disable+0x28>)
    2d42:	3008      	adds	r0, #8
    2d44:	4798      	blx	r3
}
    2d46:	2000      	movs	r0, #0
    2d48:	bd10      	pop	{r4, pc}
    2d4a:	46c0      	nop			; (mov r8, r8)
    2d4c:	00005bb4 	.word	0x00005bb4
    2d50:	00002ed9 	.word	0x00002ed9
    2d54:	0000346d 	.word	0x0000346d

00002d58 <usart_async_get_io_descriptor>:
{
    2d58:	b570      	push	{r4, r5, r6, lr}
    2d5a:	0004      	movs	r4, r0
    2d5c:	000d      	movs	r5, r1
	ASSERT(descr && io);
    2d5e:	2800      	cmp	r0, #0
    2d60:	d003      	beq.n	2d6a <usart_async_get_io_descriptor+0x12>
    2d62:	0008      	movs	r0, r1
    2d64:	1e43      	subs	r3, r0, #1
    2d66:	4198      	sbcs	r0, r3
    2d68:	b2c0      	uxtb	r0, r0
    2d6a:	2277      	movs	r2, #119	; 0x77
    2d6c:	4902      	ldr	r1, [pc, #8]	; (2d78 <usart_async_get_io_descriptor+0x20>)
    2d6e:	4b03      	ldr	r3, [pc, #12]	; (2d7c <usart_async_get_io_descriptor+0x24>)
    2d70:	4798      	blx	r3
	*io = &descr->io;
    2d72:	602c      	str	r4, [r5, #0]
}
    2d74:	2000      	movs	r0, #0
    2d76:	bd70      	pop	{r4, r5, r6, pc}
    2d78:	00005bb4 	.word	0x00005bb4
    2d7c:	00002ed9 	.word	0x00002ed9

00002d80 <usart_async_register_callback>:
{
    2d80:	b570      	push	{r4, r5, r6, lr}
    2d82:	0005      	movs	r5, r0
	ASSERT(descr);
    2d84:	1e43      	subs	r3, r0, #1
    2d86:	4198      	sbcs	r0, r3
{
    2d88:	000e      	movs	r6, r1
    2d8a:	0014      	movs	r4, r2
	ASSERT(descr);
    2d8c:	b2c0      	uxtb	r0, r0
    2d8e:	2283      	movs	r2, #131	; 0x83
    2d90:	4913      	ldr	r1, [pc, #76]	; (2de0 <usart_async_register_callback+0x60>)
    2d92:	4b14      	ldr	r3, [pc, #80]	; (2de4 <usart_async_register_callback+0x64>)
    2d94:	4798      	blx	r3
	switch (type) {
    2d96:	2e01      	cmp	r6, #1
    2d98:	d011      	beq.n	2dbe <usart_async_register_callback+0x3e>
    2d9a:	2e00      	cmp	r6, #0
    2d9c:	d004      	beq.n	2da8 <usart_async_register_callback+0x28>
    2d9e:	2e02      	cmp	r6, #2
    2da0:	d015      	beq.n	2dce <usart_async_register_callback+0x4e>
		return ERR_INVALID_ARG;
    2da2:	200d      	movs	r0, #13
    2da4:	4240      	negs	r0, r0
    2da6:	e009      	b.n	2dbc <usart_async_register_callback+0x3c>
		descr->usart_cb.rx_done = cb;
    2da8:	62ac      	str	r4, [r5, #40]	; 0x28
		_usart_async_set_irq_state(&descr->device, USART_ASYNC_RX_DONE, NULL != cb);
    2daa:	0028      	movs	r0, r5
    2dac:	1e62      	subs	r2, r4, #1
    2dae:	4194      	sbcs	r4, r2
    2db0:	2101      	movs	r1, #1
    2db2:	b2e2      	uxtb	r2, r4
    2db4:	3008      	adds	r0, #8
		_usart_async_set_irq_state(&descr->device, USART_ASYNC_ERROR, NULL != cb);
    2db6:	4b0c      	ldr	r3, [pc, #48]	; (2de8 <usart_async_register_callback+0x68>)
    2db8:	4798      	blx	r3
	return ERR_NONE;
    2dba:	2000      	movs	r0, #0
}
    2dbc:	bd70      	pop	{r4, r5, r6, pc}
		descr->usart_cb.tx_done = cb;
    2dbe:	626c      	str	r4, [r5, #36]	; 0x24
		_usart_async_set_irq_state(&descr->device, USART_ASYNC_TX_DONE, NULL != cb);
    2dc0:	0028      	movs	r0, r5
    2dc2:	1e62      	subs	r2, r4, #1
    2dc4:	4194      	sbcs	r4, r2
    2dc6:	3008      	adds	r0, #8
    2dc8:	b2e2      	uxtb	r2, r4
    2dca:	2102      	movs	r1, #2
    2dcc:	e7f3      	b.n	2db6 <usart_async_register_callback+0x36>
		descr->usart_cb.error = cb;
    2dce:	62ec      	str	r4, [r5, #44]	; 0x2c
		_usart_async_set_irq_state(&descr->device, USART_ASYNC_ERROR, NULL != cb);
    2dd0:	0028      	movs	r0, r5
    2dd2:	1e62      	subs	r2, r4, #1
    2dd4:	4194      	sbcs	r4, r2
    2dd6:	3008      	adds	r0, #8
    2dd8:	b2e2      	uxtb	r2, r4
    2dda:	2103      	movs	r1, #3
    2ddc:	e7eb      	b.n	2db6 <usart_async_register_callback+0x36>
    2dde:	46c0      	nop			; (mov r8, r8)
    2de0:	00005bb4 	.word	0x00005bb4
    2de4:	00002ed9 	.word	0x00002ed9
    2de8:	000034d5 	.word	0x000034d5

00002dec <usart_async_set_baud_rate>:
{
    2dec:	b570      	push	{r4, r5, r6, lr}
    2dee:	0004      	movs	r4, r0
	ASSERT(descr);
    2df0:	1e43      	subs	r3, r0, #1
    2df2:	4198      	sbcs	r0, r3
{
    2df4:	000d      	movs	r5, r1
	ASSERT(descr);
    2df6:	22aa      	movs	r2, #170	; 0xaa
    2df8:	b2c0      	uxtb	r0, r0
    2dfa:	4905      	ldr	r1, [pc, #20]	; (2e10 <usart_async_set_baud_rate+0x24>)
    2dfc:	4b05      	ldr	r3, [pc, #20]	; (2e14 <usart_async_set_baud_rate+0x28>)
    2dfe:	4798      	blx	r3
	_usart_async_set_baud_rate(&descr->device, baud_rate);
    2e00:	0020      	movs	r0, r4
    2e02:	0029      	movs	r1, r5
    2e04:	3008      	adds	r0, #8
    2e06:	4b04      	ldr	r3, [pc, #16]	; (2e18 <usart_async_set_baud_rate+0x2c>)
    2e08:	4798      	blx	r3
}
    2e0a:	2000      	movs	r0, #0
    2e0c:	bd70      	pop	{r4, r5, r6, pc}
    2e0e:	46c0      	nop			; (mov r8, r8)
    2e10:	00005bb4 	.word	0x00005bb4
    2e14:	00002ed9 	.word	0x00002ed9
    2e18:	0000347d 	.word	0x0000347d

00002e1c <usart_async_set_parity>:
{
    2e1c:	b570      	push	{r4, r5, r6, lr}
    2e1e:	0004      	movs	r4, r0
	ASSERT(descr);
    2e20:	1e43      	subs	r3, r0, #1
    2e22:	4198      	sbcs	r0, r3
{
    2e24:	000d      	movs	r5, r1
	ASSERT(descr);
    2e26:	22cb      	movs	r2, #203	; 0xcb
    2e28:	b2c0      	uxtb	r0, r0
    2e2a:	4905      	ldr	r1, [pc, #20]	; (2e40 <usart_async_set_parity+0x24>)
    2e2c:	4b05      	ldr	r3, [pc, #20]	; (2e44 <usart_async_set_parity+0x28>)
    2e2e:	4798      	blx	r3
	_usart_async_set_parity(&descr->device, parity);
    2e30:	0020      	movs	r0, r4
    2e32:	0029      	movs	r1, r5
    2e34:	3008      	adds	r0, #8
    2e36:	4b04      	ldr	r3, [pc, #16]	; (2e48 <usart_async_set_parity+0x2c>)
    2e38:	4798      	blx	r3
}
    2e3a:	2000      	movs	r0, #0
    2e3c:	bd70      	pop	{r4, r5, r6, pc}
    2e3e:	46c0      	nop			; (mov r8, r8)
    2e40:	00005bb4 	.word	0x00005bb4
    2e44:	00002ed9 	.word	0x00002ed9
    2e48:	0000348d 	.word	0x0000348d

00002e4c <usart_async_set_stopbits>:
{
    2e4c:	b570      	push	{r4, r5, r6, lr}
    2e4e:	0004      	movs	r4, r0
	ASSERT(descr);
    2e50:	1e43      	subs	r3, r0, #1
    2e52:	4198      	sbcs	r0, r3
{
    2e54:	000d      	movs	r5, r1
	ASSERT(descr);
    2e56:	22d6      	movs	r2, #214	; 0xd6
    2e58:	b2c0      	uxtb	r0, r0
    2e5a:	4905      	ldr	r1, [pc, #20]	; (2e70 <usart_async_set_stopbits+0x24>)
    2e5c:	4b05      	ldr	r3, [pc, #20]	; (2e74 <usart_async_set_stopbits+0x28>)
    2e5e:	4798      	blx	r3
	_usart_async_set_stop_bits(&descr->device, stop_bits);
    2e60:	0020      	movs	r0, r4
    2e62:	0029      	movs	r1, r5
    2e64:	3008      	adds	r0, #8
    2e66:	4b04      	ldr	r3, [pc, #16]	; (2e78 <usart_async_set_stopbits+0x2c>)
    2e68:	4798      	blx	r3
}
    2e6a:	2000      	movs	r0, #0
    2e6c:	bd70      	pop	{r4, r5, r6, pc}
    2e6e:	46c0      	nop			; (mov r8, r8)
    2e70:	00005bb4 	.word	0x00005bb4
    2e74:	00002ed9 	.word	0x00002ed9
    2e78:	0000349d 	.word	0x0000349d

00002e7c <usart_async_set_character_size>:
{
    2e7c:	b570      	push	{r4, r5, r6, lr}
    2e7e:	0004      	movs	r4, r0
	ASSERT(descr);
    2e80:	1e43      	subs	r3, r0, #1
    2e82:	4198      	sbcs	r0, r3
{
    2e84:	000d      	movs	r5, r1
	ASSERT(descr);
    2e86:	22e1      	movs	r2, #225	; 0xe1
    2e88:	b2c0      	uxtb	r0, r0
    2e8a:	4905      	ldr	r1, [pc, #20]	; (2ea0 <usart_async_set_character_size+0x24>)
    2e8c:	4b05      	ldr	r3, [pc, #20]	; (2ea4 <usart_async_set_character_size+0x28>)
    2e8e:	4798      	blx	r3
	_usart_async_set_character_size(&descr->device, size);
    2e90:	0020      	movs	r0, r4
    2e92:	0029      	movs	r1, r5
    2e94:	3008      	adds	r0, #8
    2e96:	4b04      	ldr	r3, [pc, #16]	; (2ea8 <usart_async_set_character_size+0x2c>)
    2e98:	4798      	blx	r3
}
    2e9a:	2000      	movs	r0, #0
    2e9c:	bd70      	pop	{r4, r5, r6, pc}
    2e9e:	46c0      	nop			; (mov r8, r8)
    2ea0:	00005bb4 	.word	0x00005bb4
    2ea4:	00002ed9 	.word	0x00002ed9
    2ea8:	000034ad 	.word	0x000034ad

00002eac <usart_async_flush_rx_buffer>:
{
    2eac:	b510      	push	{r4, lr}
	ASSERT(descr);
    2eae:	2222      	movs	r2, #34	; 0x22
{
    2eb0:	0004      	movs	r4, r0
	ASSERT(descr);
    2eb2:	1e43      	subs	r3, r0, #1
    2eb4:	4198      	sbcs	r0, r3
    2eb6:	32ff      	adds	r2, #255	; 0xff
    2eb8:	4904      	ldr	r1, [pc, #16]	; (2ecc <usart_async_flush_rx_buffer+0x20>)
    2eba:	b2c0      	uxtb	r0, r0
    2ebc:	4b04      	ldr	r3, [pc, #16]	; (2ed0 <usart_async_flush_rx_buffer+0x24>)
    2ebe:	4798      	blx	r3
	return ringbuffer_flush(&descr->rx);
    2ec0:	0020      	movs	r0, r4
    2ec2:	4b04      	ldr	r3, [pc, #16]	; (2ed4 <usart_async_flush_rx_buffer+0x28>)
    2ec4:	3034      	adds	r0, #52	; 0x34
    2ec6:	4798      	blx	r3
}
    2ec8:	bd10      	pop	{r4, pc}
    2eca:	46c0      	nop			; (mov r8, r8)
    2ecc:	00005bb4 	.word	0x00005bb4
    2ed0:	00002ed9 	.word	0x00002ed9
    2ed4:	00002fc9 	.word	0x00002fc9

00002ed8 <assert>:
/**
 * \brief Assert function
 */
void assert(const bool condition, const char *const file, const int line)
{
	if (!(condition)) {
    2ed8:	2800      	cmp	r0, #0
    2eda:	d100      	bne.n	2ede <assert+0x6>
		__asm("BKPT #0");
    2edc:	be00      	bkpt	0x0000
	}
	(void)file;
	(void)line;
}
    2ede:	4770      	bx	lr

00002ee0 <ringbuffer_init>:

/**
 * \brief Ringbuffer init
 */
int32_t ringbuffer_init(struct ringbuffer *const rb, void *buf, uint32_t size)
{
    2ee0:	b570      	push	{r4, r5, r6, lr}
    2ee2:	0005      	movs	r5, r0
    2ee4:	000e      	movs	r6, r1
    2ee6:	0014      	movs	r4, r2
	ASSERT(rb && buf && size);
    2ee8:	2800      	cmp	r0, #0
    2eea:	d004      	beq.n	2ef6 <ringbuffer_init+0x16>
    2eec:	1e08      	subs	r0, r1, #0
    2eee:	d002      	beq.n	2ef6 <ringbuffer_init+0x16>
    2ef0:	0010      	movs	r0, r2
    2ef2:	1e43      	subs	r3, r0, #1
    2ef4:	4198      	sbcs	r0, r3
    2ef6:	4b08      	ldr	r3, [pc, #32]	; (2f18 <ringbuffer_init+0x38>)
    2ef8:	2228      	movs	r2, #40	; 0x28
    2efa:	4908      	ldr	r1, [pc, #32]	; (2f1c <ringbuffer_init+0x3c>)
    2efc:	4798      	blx	r3

	/*
	 * buf size must be aligned to power of 2
	 */
	if ((size & (size - 1)) != 0) {
    2efe:	0020      	movs	r0, r4
    2f00:	1e63      	subs	r3, r4, #1
    2f02:	4018      	ands	r0, r3
    2f04:	d104      	bne.n	2f10 <ringbuffer_init+0x30>
		return ERR_INVALID_ARG;
	}

	/* size - 1 is faster in calculation */
	rb->size        = size - 1;
    2f06:	606b      	str	r3, [r5, #4]
	rb->read_index  = 0;
    2f08:	60a8      	str	r0, [r5, #8]
	rb->write_index = rb->read_index;
    2f0a:	60e8      	str	r0, [r5, #12]
	rb->buf         = (uint8_t *)buf;
    2f0c:	602e      	str	r6, [r5, #0]

	return ERR_NONE;
}
    2f0e:	bd70      	pop	{r4, r5, r6, pc}
		return ERR_INVALID_ARG;
    2f10:	200d      	movs	r0, #13
    2f12:	4240      	negs	r0, r0
    2f14:	e7fb      	b.n	2f0e <ringbuffer_init+0x2e>
    2f16:	46c0      	nop			; (mov r8, r8)
    2f18:	00002ed9 	.word	0x00002ed9
    2f1c:	00005bd1 	.word	0x00005bd1

00002f20 <ringbuffer_get>:
/**
 * \brief Get one byte from ringbuffer
 *
 */
int32_t ringbuffer_get(struct ringbuffer *const rb, uint8_t *data)
{
    2f20:	b570      	push	{r4, r5, r6, lr}
    2f22:	0004      	movs	r4, r0
    2f24:	000d      	movs	r5, r1
	ASSERT(rb && data);
    2f26:	2800      	cmp	r0, #0
    2f28:	d003      	beq.n	2f32 <ringbuffer_get+0x12>
    2f2a:	0008      	movs	r0, r1
    2f2c:	1e43      	subs	r3, r0, #1
    2f2e:	4198      	sbcs	r0, r3
    2f30:	b2c0      	uxtb	r0, r0
    2f32:	2240      	movs	r2, #64	; 0x40
    2f34:	4b09      	ldr	r3, [pc, #36]	; (2f5c <ringbuffer_get+0x3c>)
    2f36:	490a      	ldr	r1, [pc, #40]	; (2f60 <ringbuffer_get+0x40>)
    2f38:	4798      	blx	r3

	if (rb->write_index != rb->read_index) {
    2f3a:	68a3      	ldr	r3, [r4, #8]
    2f3c:	68e2      	ldr	r2, [r4, #12]
    2f3e:	429a      	cmp	r2, r3
    2f40:	d009      	beq.n	2f56 <ringbuffer_get+0x36>
		*data = rb->buf[rb->read_index & rb->size];
		rb->read_index++;
		return ERR_NONE;
    2f42:	2000      	movs	r0, #0
		*data = rb->buf[rb->read_index & rb->size];
    2f44:	6862      	ldr	r2, [r4, #4]
    2f46:	4013      	ands	r3, r2
    2f48:	6822      	ldr	r2, [r4, #0]
    2f4a:	5cd3      	ldrb	r3, [r2, r3]
    2f4c:	702b      	strb	r3, [r5, #0]
		rb->read_index++;
    2f4e:	68a3      	ldr	r3, [r4, #8]
    2f50:	3301      	adds	r3, #1
    2f52:	60a3      	str	r3, [r4, #8]
	}

	return ERR_NOT_FOUND;
}
    2f54:	bd70      	pop	{r4, r5, r6, pc}
	return ERR_NOT_FOUND;
    2f56:	200a      	movs	r0, #10
    2f58:	4240      	negs	r0, r0
    2f5a:	e7fb      	b.n	2f54 <ringbuffer_get+0x34>
    2f5c:	00002ed9 	.word	0x00002ed9
    2f60:	00005bd1 	.word	0x00005bd1

00002f64 <ringbuffer_put>:
/**
 * \brief Put one byte to ringbuffer
 *
 */
int32_t ringbuffer_put(struct ringbuffer *const rb, uint8_t data)
{
    2f64:	b570      	push	{r4, r5, r6, lr}
    2f66:	0004      	movs	r4, r0
	ASSERT(rb);
    2f68:	1e43      	subs	r3, r0, #1
    2f6a:	4198      	sbcs	r0, r3
{
    2f6c:	000d      	movs	r5, r1
	ASSERT(rb);
    2f6e:	2251      	movs	r2, #81	; 0x51
    2f70:	490a      	ldr	r1, [pc, #40]	; (2f9c <ringbuffer_put+0x38>)
    2f72:	4b0b      	ldr	r3, [pc, #44]	; (2fa0 <ringbuffer_put+0x3c>)
    2f74:	b2c0      	uxtb	r0, r0
    2f76:	4798      	blx	r3

	rb->buf[rb->write_index & rb->size] = data;
    2f78:	68e2      	ldr	r2, [r4, #12]
    2f7a:	6863      	ldr	r3, [r4, #4]
    2f7c:	4013      	ands	r3, r2
    2f7e:	6822      	ldr	r2, [r4, #0]
    2f80:	54d5      	strb	r5, [r2, r3]

	/*
	 * buffer full strategy: new data will overwrite the oldest data in
	 * the buffer
	 */
	if ((rb->write_index - rb->read_index) > rb->size) {
    2f82:	68e3      	ldr	r3, [r4, #12]
    2f84:	68a1      	ldr	r1, [r4, #8]
    2f86:	6862      	ldr	r2, [r4, #4]
    2f88:	1a59      	subs	r1, r3, r1
    2f8a:	4291      	cmp	r1, r2
    2f8c:	d901      	bls.n	2f92 <ringbuffer_put+0x2e>
		rb->read_index = rb->write_index - rb->size;
    2f8e:	1a9a      	subs	r2, r3, r2
    2f90:	60a2      	str	r2, [r4, #8]
	}

	rb->write_index++;
    2f92:	3301      	adds	r3, #1

	return ERR_NONE;
}
    2f94:	2000      	movs	r0, #0
	rb->write_index++;
    2f96:	60e3      	str	r3, [r4, #12]
}
    2f98:	bd70      	pop	{r4, r5, r6, pc}
    2f9a:	46c0      	nop			; (mov r8, r8)
    2f9c:	00005bd1 	.word	0x00005bd1
    2fa0:	00002ed9 	.word	0x00002ed9

00002fa4 <ringbuffer_num>:

/**
 * \brief Return the element number of ringbuffer
 */
uint32_t ringbuffer_num(const struct ringbuffer *const rb)
{
    2fa4:	b510      	push	{r4, lr}
    2fa6:	0004      	movs	r4, r0
	ASSERT(rb);
    2fa8:	1e43      	subs	r3, r0, #1
    2faa:	4198      	sbcs	r0, r3
    2fac:	2267      	movs	r2, #103	; 0x67
    2fae:	b2c0      	uxtb	r0, r0
    2fb0:	4903      	ldr	r1, [pc, #12]	; (2fc0 <ringbuffer_num+0x1c>)
    2fb2:	4b04      	ldr	r3, [pc, #16]	; (2fc4 <ringbuffer_num+0x20>)
    2fb4:	4798      	blx	r3

	return rb->write_index - rb->read_index;
    2fb6:	68e0      	ldr	r0, [r4, #12]
    2fb8:	68a3      	ldr	r3, [r4, #8]
    2fba:	1ac0      	subs	r0, r0, r3
}
    2fbc:	bd10      	pop	{r4, pc}
    2fbe:	46c0      	nop			; (mov r8, r8)
    2fc0:	00005bd1 	.word	0x00005bd1
    2fc4:	00002ed9 	.word	0x00002ed9

00002fc8 <ringbuffer_flush>:

/**
 * \brief Flush ringbuffer
 */
uint32_t ringbuffer_flush(struct ringbuffer *const rb)
{
    2fc8:	b510      	push	{r4, lr}
    2fca:	0004      	movs	r4, r0
	ASSERT(rb);
    2fcc:	1e43      	subs	r3, r0, #1
    2fce:	4198      	sbcs	r0, r3
    2fd0:	2271      	movs	r2, #113	; 0x71
    2fd2:	b2c0      	uxtb	r0, r0
    2fd4:	4903      	ldr	r1, [pc, #12]	; (2fe4 <ringbuffer_flush+0x1c>)
    2fd6:	4b04      	ldr	r3, [pc, #16]	; (2fe8 <ringbuffer_flush+0x20>)
    2fd8:	4798      	blx	r3

	rb->read_index = rb->write_index;
    2fda:	68e3      	ldr	r3, [r4, #12]

	return ERR_NONE;
}
    2fdc:	2000      	movs	r0, #0
	rb->read_index = rb->write_index;
    2fde:	60a3      	str	r3, [r4, #8]
}
    2fe0:	bd10      	pop	{r4, pc}
    2fe2:	46c0      	nop			; (mov r8, r8)
    2fe4:	00005bd1 	.word	0x00005bd1
    2fe8:	00002ed9 	.word	0x00002ed9

00002fec <_get_cycles_for_ms>:

/**
 * \brief Retrieve the amount of cycles to delay for the given amount of ms
 */
uint32_t _get_cycles_for_ms(const uint16_t ms)
{
    2fec:	0003      	movs	r3, r0
		return (ms * (freq / 100000) + 2) / 3 * 100;
    2fee:	20a0      	movs	r0, #160	; 0xa0
    2ff0:	4358      	muls	r0, r3
{
    2ff2:	b510      	push	{r4, lr}
		return (ms * (freq / 100000) + 2) / 3 * 100;
    2ff4:	4b03      	ldr	r3, [pc, #12]	; (3004 <_get_cycles_for_ms+0x18>)
    2ff6:	3002      	adds	r0, #2
    2ff8:	2103      	movs	r1, #3
    2ffa:	4798      	blx	r3
    2ffc:	2364      	movs	r3, #100	; 0x64
    2ffe:	4358      	muls	r0, r3
	return _get_cycles_for_ms_internal(ms, CONF_CPU_FREQUENCY, CPU_FREQ_POWER);
}
    3000:	bd10      	pop	{r4, pc}
    3002:	46c0      	nop			; (mov r8, r8)
    3004:	000035c1 	.word	0x000035c1

00003008 <_delay_cycles>:
{
#ifndef _UNIT_TEST_
	(void)hw;
	(void)cycles;
#if defined __GNUC__
	__asm(".syntax unified\n"
    3008:	3901      	subs	r1, #1
    300a:	d8fd      	bhi.n	3008 <_delay_cycles>
	__asm("__delay:\n"
	      "subs r1, r1, #1\n"
	      "bhi __delay\n");
#endif
#endif
}
    300c:	4770      	bx	lr
	...

00003010 <_init_chip>:

/**
 * \brief Initialize the hardware abstraction layer
 */
void _init_chip(void)
{
    3010:	b510      	push	{r4, lr}
}

static inline void hri_nvmctrl_set_CTRLB_RWS_bf(const void *const hw, hri_nvmctrl_ctrlb_reg_t mask)
{
	NVMCTRL_CRITICAL_SECTION_ENTER();
	((Nvmctrl *)hw)->CTRLB.reg |= NVMCTRL_CTRLB_RWS(mask);
    3012:	4b09      	ldr	r3, [pc, #36]	; (3038 <_init_chip+0x28>)
	hri_nvmctrl_set_CTRLB_RWS_bf(NVMCTRL, CONF_NVM_WAIT_STATE);

	_set_performance_level(2);
    3014:	2002      	movs	r0, #2
    3016:	685a      	ldr	r2, [r3, #4]
    3018:	605a      	str	r2, [r3, #4]
    301a:	4b08      	ldr	r3, [pc, #32]	; (303c <_init_chip+0x2c>)
    301c:	4798      	blx	r3

	_osc32kctrl_init_sources();
    301e:	4b08      	ldr	r3, [pc, #32]	; (3040 <_init_chip+0x30>)
    3020:	4798      	blx	r3
	_oscctrl_init_sources();
    3022:	4b08      	ldr	r3, [pc, #32]	; (3044 <_init_chip+0x34>)
    3024:	4798      	blx	r3
	_mclk_init();
    3026:	4b08      	ldr	r3, [pc, #32]	; (3048 <_init_chip+0x38>)
    3028:	4798      	blx	r3
#if _GCLK_INIT_1ST
	_gclk_init_generators_by_fref(_GCLK_INIT_1ST);
#endif
	_oscctrl_init_referenced_generators();
    302a:	4b08      	ldr	r3, [pc, #32]	; (304c <_init_chip+0x3c>)
    302c:	4798      	blx	r3
	_gclk_init_generators_by_fref(_GCLK_INIT_LAST);
    302e:	20ff      	movs	r0, #255	; 0xff
    3030:	4b07      	ldr	r3, [pc, #28]	; (3050 <_init_chip+0x40>)
    3032:	4798      	blx	r3
#endif

#if (CONF_PORT_EVCTRL_PORT_0 | CONF_PORT_EVCTRL_PORT_1 | CONF_PORT_EVCTRL_PORT_2 | CONF_PORT_EVCTRL_PORT_3)
	_port_event_init();
#endif
}
    3034:	bd10      	pop	{r4, pc}
    3036:	46c0      	nop			; (mov r8, r8)
    3038:	41004000 	.word	0x41004000
    303c:	000030db 	.word	0x000030db
    3040:	00003089 	.word	0x00003089
    3044:	000030a1 	.word	0x000030a1
    3048:	00003075 	.word	0x00003075
    304c:	000030d9 	.word	0x000030d9
    3050:	00003055 	.word	0x00003055

00003054 <_gclk_init_generators_by_fref>:

void _gclk_init_generators_by_fref(uint32_t bm)
{

#if CONF_GCLK_GENERATOR_0_CONFIG == 1
	if (bm & (1ul << 0)) {
    3054:	07c3      	lsls	r3, r0, #31
    3056:	d506      	bpl.n	3066 <_gclk_init_generators_by_fref+0x12>
	((Gclk *)hw)->GENCTRL[index].reg = data;
    3058:	4a03      	ldr	r2, [pc, #12]	; (3068 <_gclk_init_generators_by_fref+0x14>)
    305a:	4b04      	ldr	r3, [pc, #16]	; (306c <_gclk_init_generators_by_fref+0x18>)
    305c:	621a      	str	r2, [r3, #32]
	while (((Gclk *)hw)->SYNCBUSY.reg & reg) {
    305e:	4a04      	ldr	r2, [pc, #16]	; (3070 <_gclk_init_generators_by_fref+0x1c>)
    3060:	6859      	ldr	r1, [r3, #4]
    3062:	4211      	tst	r1, r2
    3064:	d1fc      	bne.n	3060 <_gclk_init_generators_by_fref+0xc>
		        | (CONF_GCLK_GEN_8_DIVSEL << GCLK_GENCTRL_DIVSEL_Pos) | (CONF_GCLK_GEN_8_OE << GCLK_GENCTRL_OE_Pos)
		        | (CONF_GCLK_GEN_8_OOV << GCLK_GENCTRL_OOV_Pos) | (CONF_GCLK_GEN_8_IDC << GCLK_GENCTRL_IDC_Pos)
		        | (CONF_GCLK_GENERATOR_8_CONFIG << GCLK_GENCTRL_GENEN_Pos) | CONF_GCLK_GEN_8_SOURCE);
	}
#endif
}
    3066:	4770      	bx	lr
    3068:	00010106 	.word	0x00010106
    306c:	40001800 	.word	0x40001800
    3070:	000007fd 	.word	0x000007fd

00003074 <_mclk_init>:
	((Mclk *)hw)->BUPDIV.reg = data;
    3074:	2208      	movs	r2, #8
    3076:	4b03      	ldr	r3, [pc, #12]	; (3084 <_mclk_init+0x10>)
    3078:	719a      	strb	r2, [r3, #6]
	((Mclk *)hw)->LPDIV.reg = data;
    307a:	3a04      	subs	r2, #4
    307c:	715a      	strb	r2, [r3, #5]
	((Mclk *)hw)->CPUDIV.reg = data;
    307e:	3a03      	subs	r2, #3
    3080:	711a      	strb	r2, [r3, #4]
{
	void *hw = (void *)MCLK;
	hri_mclk_write_BUPDIV_reg(hw, MCLK_BUPDIV_BUPDIV(CONF_MCLK_BUPDIV));
	hri_mclk_write_LPDIV_reg(hw, MCLK_LPDIV_LPDIV(CONF_MCLK_LPDIV));
	hri_mclk_write_CPUDIV_reg(hw, MCLK_CPUDIV_CPUDIV(CONF_MCLK_CPUDIV));
}
    3082:	4770      	bx	lr
    3084:	40000400 	.word	0x40000400

00003088 <_osc32kctrl_init_sources>:
	calib = hri_osc32kctrl_read_OSCULP32K_CALIB_bf(hw);
	hri_osc32kctrl_write_OSCULP32K_reg(hw,
#if CONF_OSC32K_CALIB_ENABLE == 1
	                                   OSC32KCTRL_OSCULP32K_CALIB(CONF_OSC32K_CALIB)
#else
	                                   OSC32KCTRL_OSCULP32K_CALIB(calib)
    3088:	21f8      	movs	r1, #248	; 0xf8
}

static inline hri_osc32kctrl_osculp32k_reg_t hri_osc32kctrl_read_OSCULP32K_CALIB_bf(const void *const hw)
{
	uint32_t tmp;
	tmp = ((Osc32kctrl *)hw)->OSCULP32K.reg;
    308a:	4b04      	ldr	r3, [pc, #16]	; (309c <_osc32kctrl_init_sources+0x14>)
    308c:	0149      	lsls	r1, r1, #5
    308e:	69da      	ldr	r2, [r3, #28]
    3090:	400a      	ands	r2, r1
}

static inline void hri_osc32kctrl_write_OSCULP32K_reg(const void *const hw, hri_osc32kctrl_osculp32k_reg_t data)
{
	OSC32KCTRL_CRITICAL_SECTION_ENTER();
	((Osc32kctrl *)hw)->OSCULP32K.reg = data;
    3092:	61da      	str	r2, [r3, #28]
	((Osc32kctrl *)hw)->RTCCTRL.reg = data;
    3094:	2201      	movs	r2, #1
    3096:	611a      	str	r2, [r3, #16]
		;
#endif
#endif
	hri_osc32kctrl_write_RTCCTRL_reg(hw, OSC32KCTRL_RTCCTRL_RTCSEL(CONF_RTCCTRL));
	(void)calib;
}
    3098:	4770      	bx	lr
    309a:	46c0      	nop			; (mov r8, r8)
    309c:	40001000 	.word	0x40001000

000030a0 <_oscctrl_init_sources>:
}

static inline void hri_oscctrl_write_OSC16MCTRL_reg(const void *const hw, hri_oscctrl_osc16mctrl_reg_t data)
{
	OSCCTRL_CRITICAL_SECTION_ENTER();
	((Oscctrl *)hw)->OSC16MCTRL.reg = data;
    30a0:	228e      	movs	r2, #142	; 0x8e
    30a2:	4b0b      	ldr	r3, [pc, #44]	; (30d0 <_oscctrl_init_sources+0x30>)

/**
 * \brief Initialize clock sources
 */
void _oscctrl_init_sources(void)
{
    30a4:	b510      	push	{r4, lr}
    30a6:	751a      	strb	r2, [r3, #20]
	while (((Oscctrl *)hw)->DPLLSYNCBUSY.reg & reg) {
    30a8:	4a0a      	ldr	r2, [pc, #40]	; (30d4 <_oscctrl_init_sources+0x34>)
    30aa:	2002      	movs	r0, #2
    30ac:	0011      	movs	r1, r2
    30ae:	7814      	ldrb	r4, [r2, #0]
    30b0:	4204      	tst	r4, r0
    30b2:	d1fc      	bne.n	30ae <_oscctrl_init_sources+0xe>
#endif
#endif

#if CONF_OSC16M_CONFIG == 1
#if CONF_OSC16M_ENABLE == 1
	while (!hri_oscctrl_get_STATUS_OSC16MRDY_bit(hw))
    30b4:	2210      	movs	r2, #16
	return (((Oscctrl *)hw)->STATUS.reg & OSCCTRL_STATUS_OSC16MRDY) >> OSCCTRL_STATUS_OSC16MRDY_Pos;
    30b6:	68d8      	ldr	r0, [r3, #12]
    30b8:	4210      	tst	r0, r2
    30ba:	d0fc      	beq.n	30b6 <_oscctrl_init_sources+0x16>
	((Oscctrl *)hw)->OSC16MCTRL.reg |= OSCCTRL_OSC16MCTRL_ONDEMAND;
    30bc:	2080      	movs	r0, #128	; 0x80
    30be:	7d1a      	ldrb	r2, [r3, #20]
    30c0:	4302      	orrs	r2, r0
    30c2:	751a      	strb	r2, [r3, #20]
	while (((Oscctrl *)hw)->DPLLSYNCBUSY.reg & reg) {
    30c4:	230e      	movs	r3, #14
    30c6:	780a      	ldrb	r2, [r1, #0]
    30c8:	421a      	tst	r2, r3
    30ca:	d1fc      	bne.n	30c6 <_oscctrl_init_sources+0x26>
#if CONF_OSC16M_ONDEMAND == 1
	hri_oscctrl_set_OSC16MCTRL_ONDEMAND_bit(hw);
#endif
#endif
	(void)hw;
}
    30cc:	bd10      	pop	{r4, pc}
    30ce:	46c0      	nop			; (mov r8, r8)
    30d0:	40000c00 	.word	0x40000c00
    30d4:	40000c38 	.word	0x40000c38

000030d8 <_oscctrl_init_referenced_generators>:
#if CONF_DFLL_CONFIG == 1
	while (hri_gclk_read_SYNCBUSY_reg(GCLK))
		;
#endif
	(void)hw, (void)tmp;
}
    30d8:	4770      	bx	lr

000030da <_set_performance_level>:
}

static inline hri_pm_plcfg_reg_t hri_pm_get_PLCFG_PLSEL_bf(const void *const hw, hri_pm_plcfg_reg_t mask)
{
	uint8_t tmp;
	tmp = ((Pm *)hw)->PLCFG.reg;
    30da:	2380      	movs	r3, #128	; 0x80
	tmp = (tmp & PM_PLCFG_PLSEL(mask)) >> PM_PLCFG_PLSEL_Pos;
    30dc:	2103      	movs	r1, #3
	tmp = ((Pm *)hw)->PLCFG.reg;
    30de:	05db      	lsls	r3, r3, #23
    30e0:	789a      	ldrb	r2, [r3, #2]
/**
 * \brief Set performance level
 */
void _set_performance_level(const uint8_t level)
{
	if (hri_pm_get_PLCFG_PLSEL_bf(PM, PM_PLCFG_PLSEL_Msk) != level) {
    30e2:	400a      	ands	r2, r1
    30e4:	4290      	cmp	r0, r2
    30e6:	d009      	beq.n	30fc <_set_performance_level+0x22>
	((Pm *)hw)->INTFLAG.reg = mask;
    30e8:	22ff      	movs	r2, #255	; 0xff
    30ea:	719a      	strb	r2, [r3, #6]

static inline void hri_pm_write_PLCFG_PLSEL_bf(const void *const hw, hri_pm_plcfg_reg_t data)
{
	uint8_t tmp;
	PM_CRITICAL_SECTION_ENTER();
	tmp = ((Pm *)hw)->PLCFG.reg;
    30ec:	789a      	ldrb	r2, [r3, #2]
	tmp &= ~PM_PLCFG_PLSEL_Msk;
	tmp |= PM_PLCFG_PLSEL(data);
    30ee:	4008      	ands	r0, r1
	tmp &= ~PM_PLCFG_PLSEL_Msk;
    30f0:	438a      	bics	r2, r1
	tmp |= PM_PLCFG_PLSEL(data);
    30f2:	4310      	orrs	r0, r2
	((Pm *)hw)->PLCFG.reg = tmp;
    30f4:	7098      	strb	r0, [r3, #2]
	return ((Pm *)hw)->INTFLAG.reg;
    30f6:	799a      	ldrb	r2, [r3, #6]
		hri_pm_clear_INTFLAG_reg(PM, 0xFF);
		hri_pm_write_PLCFG_PLSEL_bf(PM, level);
		while (!hri_pm_read_INTFLAG_reg(PM))
    30f8:	2a00      	cmp	r2, #0
    30fa:	d0fc      	beq.n	30f6 <_set_performance_level+0x1c>
			;
	}
}
    30fc:	4770      	bx	lr
	...

00003100 <__NVIC_EnableIRQ>:
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
  if ((int32_t)(IRQn) >= 0)
    3100:	2800      	cmp	r0, #0
    3102:	db05      	blt.n	3110 <__NVIC_EnableIRQ+0x10>
  {
    NVIC->ISER[0U] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
    3104:	231f      	movs	r3, #31
    3106:	4018      	ands	r0, r3
    3108:	3b1e      	subs	r3, #30
    310a:	4083      	lsls	r3, r0
    310c:	4a01      	ldr	r2, [pc, #4]	; (3114 <__NVIC_EnableIRQ+0x14>)
    310e:	6013      	str	r3, [r2, #0]
  }
}
    3110:	4770      	bx	lr
    3112:	46c0      	nop			; (mov r8, r8)
    3114:	e000e100 	.word	0xe000e100

00003118 <__NVIC_DisableIRQ>:
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_DisableIRQ(IRQn_Type IRQn)
{
  if ((int32_t)(IRQn) >= 0)
    3118:	2800      	cmp	r0, #0
    311a:	db09      	blt.n	3130 <__NVIC_DisableIRQ+0x18>
  {
    NVIC->ICER[0U] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
    311c:	231f      	movs	r3, #31
    311e:	4018      	ands	r0, r3
    3120:	3b1e      	subs	r3, #30
    3122:	4083      	lsls	r3, r0
    3124:	4a03      	ldr	r2, [pc, #12]	; (3134 <__NVIC_DisableIRQ+0x1c>)
    3126:	67d3      	str	r3, [r2, #124]	; 0x7c
  __ASM volatile ("dsb 0xF":::"memory");
    3128:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
    312c:	f3bf 8f6f 	isb	sy
    __DSB();
    __ISB();
  }
}
    3130:	4770      	bx	lr
    3132:	46c0      	nop			; (mov r8, r8)
    3134:	e000e104 	.word	0xe000e104

00003138 <__NVIC_ClearPendingIRQ>:
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_ClearPendingIRQ(IRQn_Type IRQn)
{
  if ((int32_t)(IRQn) >= 0)
    3138:	2800      	cmp	r0, #0
    313a:	db07      	blt.n	314c <__NVIC_ClearPendingIRQ+0x14>
  {
    NVIC->ICPR[0U] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
    313c:	231f      	movs	r3, #31
    313e:	22c0      	movs	r2, #192	; 0xc0
    3140:	4018      	ands	r0, r3
    3142:	3b1e      	subs	r3, #30
    3144:	4083      	lsls	r3, r0
    3146:	4902      	ldr	r1, [pc, #8]	; (3150 <__NVIC_ClearPendingIRQ+0x18>)
    3148:	0052      	lsls	r2, r2, #1
    314a:	508b      	str	r3, [r1, r2]
  }
}
    314c:	4770      	bx	lr
    314e:	46c0      	nop			; (mov r8, r8)
    3150:	e000e100 	.word	0xe000e100

00003154 <hri_sercomusart_wait_for_sync>:
	return ((Sercom *)hw)->SPI.SYNCBUSY.reg & reg;
}

static inline void hri_sercomusart_wait_for_sync(const void *const hw, hri_sercomusart_syncbusy_reg_t reg)
{
	while (((Sercom *)hw)->USART.SYNCBUSY.reg & reg) {
    3154:	69c3      	ldr	r3, [r0, #28]
    3156:	4219      	tst	r1, r3
    3158:	d1fc      	bne.n	3154 <hri_sercomusart_wait_for_sync>
	};
}
    315a:	4770      	bx	lr

0000315c <hri_sercomusart_get_CTRLA_ENABLE_bit>:
	hri_sercomusart_wait_for_sync(hw, SERCOM_USART_SYNCBUSY_SWRST | SERCOM_USART_SYNCBUSY_ENABLE);
	SERCOM_CRITICAL_SECTION_LEAVE();
}

static inline bool hri_sercomusart_get_CTRLA_ENABLE_bit(const void *const hw)
{
    315c:	b510      	push	{r4, lr}
    315e:	0004      	movs	r4, r0
	uint32_t tmp;
	hri_sercomusart_wait_for_sync(hw, SERCOM_USART_SYNCBUSY_SWRST | SERCOM_USART_SYNCBUSY_ENABLE);
    3160:	2103      	movs	r1, #3
    3162:	4b03      	ldr	r3, [pc, #12]	; (3170 <hri_sercomusart_get_CTRLA_ENABLE_bit+0x14>)
    3164:	4798      	blx	r3
	tmp = ((Sercom *)hw)->USART.CTRLA.reg;
    3166:	6820      	ldr	r0, [r4, #0]
	tmp = (tmp & SERCOM_USART_CTRLA_ENABLE) >> SERCOM_USART_CTRLA_ENABLE_Pos;
	return (bool)tmp;
    3168:	0780      	lsls	r0, r0, #30
    316a:	0fc0      	lsrs	r0, r0, #31
}
    316c:	bd10      	pop	{r4, pc}
    316e:	46c0      	nop			; (mov r8, r8)
    3170:	00003155 	.word	0x00003155

00003174 <hri_sercomusart_write_CTRLA_ENABLE_bit>:
static inline void hri_sercomusart_write_CTRLA_ENABLE_bit(const void *const hw, bool value)
{
	uint32_t tmp;
	SERCOM_CRITICAL_SECTION_ENTER();
	tmp = ((Sercom *)hw)->USART.CTRLA.reg;
	tmp &= ~SERCOM_USART_CTRLA_ENABLE;
    3174:	2202      	movs	r2, #2
	tmp = ((Sercom *)hw)->USART.CTRLA.reg;
    3176:	6803      	ldr	r3, [r0, #0]
{
    3178:	b510      	push	{r4, lr}
	tmp &= ~SERCOM_USART_CTRLA_ENABLE;
    317a:	4393      	bics	r3, r2
	tmp |= value << SERCOM_USART_CTRLA_ENABLE_Pos;
    317c:	0049      	lsls	r1, r1, #1
    317e:	4319      	orrs	r1, r3
	((Sercom *)hw)->USART.CTRLA.reg = tmp;
    3180:	6001      	str	r1, [r0, #0]
	hri_sercomusart_wait_for_sync(hw, SERCOM_USART_SYNCBUSY_SWRST | SERCOM_USART_SYNCBUSY_ENABLE);
    3182:	4b02      	ldr	r3, [pc, #8]	; (318c <hri_sercomusart_write_CTRLA_ENABLE_bit+0x18>)
    3184:	2103      	movs	r1, #3
    3186:	4798      	blx	r3
	SERCOM_CRITICAL_SECTION_LEAVE();
}
    3188:	bd10      	pop	{r4, pc}
    318a:	46c0      	nop			; (mov r8, r8)
    318c:	00003155 	.word	0x00003155

00003190 <hri_sercomusart_clear_CTRLA_ENABLE_bit>:

static inline void hri_sercomusart_clear_CTRLA_ENABLE_bit(const void *const hw)
{
	SERCOM_CRITICAL_SECTION_ENTER();
	((Sercom *)hw)->USART.CTRLA.reg &= ~SERCOM_USART_CTRLA_ENABLE;
    3190:	2202      	movs	r2, #2
{
    3192:	b510      	push	{r4, lr}
	((Sercom *)hw)->USART.CTRLA.reg &= ~SERCOM_USART_CTRLA_ENABLE;
    3194:	6803      	ldr	r3, [r0, #0]
	hri_sercomusart_wait_for_sync(hw, SERCOM_USART_SYNCBUSY_SWRST | SERCOM_USART_SYNCBUSY_ENABLE);
    3196:	2103      	movs	r1, #3
	((Sercom *)hw)->USART.CTRLA.reg &= ~SERCOM_USART_CTRLA_ENABLE;
    3198:	4393      	bics	r3, r2
    319a:	6003      	str	r3, [r0, #0]
	hri_sercomusart_wait_for_sync(hw, SERCOM_USART_SYNCBUSY_SWRST | SERCOM_USART_SYNCBUSY_ENABLE);
    319c:	4b01      	ldr	r3, [pc, #4]	; (31a4 <hri_sercomusart_clear_CTRLA_ENABLE_bit+0x14>)
    319e:	4798      	blx	r3
	SERCOM_CRITICAL_SECTION_LEAVE();
}
    31a0:	bd10      	pop	{r4, pc}
    31a2:	46c0      	nop			; (mov r8, r8)
    31a4:	00003155 	.word	0x00003155

000031a8 <_usart_set_baud_rate>:
 *
 * \param[in] device The pointer to USART device instance
 * \param[in] baud_rate A baud rate to set
 */
static void _usart_set_baud_rate(void *const hw, const uint32_t baud_rate)
{
    31a8:	b573      	push	{r0, r1, r4, r5, r6, lr}
	bool enabled = hri_sercomusart_get_CTRLA_ENABLE_bit(hw);
    31aa:	4b0c      	ldr	r3, [pc, #48]	; (31dc <_usart_set_baud_rate+0x34>)
{
    31ac:	0004      	movs	r4, r0
    31ae:	000d      	movs	r5, r1
	bool enabled = hri_sercomusart_get_CTRLA_ENABLE_bit(hw);
    31b0:	4798      	blx	r3
    31b2:	0006      	movs	r6, r0

	hri_sercomusart_clear_CTRLA_ENABLE_bit(hw);
    31b4:	4b0a      	ldr	r3, [pc, #40]	; (31e0 <_usart_set_baud_rate+0x38>)
    31b6:	0020      	movs	r0, r4
    31b8:	4798      	blx	r3

	CRITICAL_SECTION_ENTER()
    31ba:	a801      	add	r0, sp, #4
    31bc:	4b09      	ldr	r3, [pc, #36]	; (31e4 <_usart_set_baud_rate+0x3c>)
    31be:	4798      	blx	r3
	hri_sercomusart_wait_for_sync(hw, SERCOM_USART_SYNCBUSY_ENABLE);
	hri_sercomusart_write_BAUD_reg(hw, baud_rate);
    31c0:	b2ad      	uxth	r5, r5
	hri_sercomusart_wait_for_sync(hw, SERCOM_USART_SYNCBUSY_ENABLE);
    31c2:	2102      	movs	r1, #2
    31c4:	0020      	movs	r0, r4
    31c6:	4b08      	ldr	r3, [pc, #32]	; (31e8 <_usart_set_baud_rate+0x40>)
    31c8:	4798      	blx	r3
}

static inline void hri_sercomusart_write_BAUD_reg(const void *const hw, hri_sercomusart_baud_reg_t data)
{
	SERCOM_CRITICAL_SECTION_ENTER();
	((Sercom *)hw)->USART.BAUD.reg = data;
    31ca:	81a5      	strh	r5, [r4, #12]
	CRITICAL_SECTION_LEAVE()
    31cc:	a801      	add	r0, sp, #4
    31ce:	4b07      	ldr	r3, [pc, #28]	; (31ec <_usart_set_baud_rate+0x44>)
    31d0:	4798      	blx	r3

	hri_sercomusart_write_CTRLA_ENABLE_bit(hw, enabled);
    31d2:	0031      	movs	r1, r6
    31d4:	0020      	movs	r0, r4
    31d6:	4b06      	ldr	r3, [pc, #24]	; (31f0 <_usart_set_baud_rate+0x48>)
    31d8:	4798      	blx	r3
}
    31da:	bd73      	pop	{r0, r1, r4, r5, r6, pc}
    31dc:	0000315d 	.word	0x0000315d
    31e0:	00003191 	.word	0x00003191
    31e4:	00002a89 	.word	0x00002a89
    31e8:	00003155 	.word	0x00003155
    31ec:	00002a97 	.word	0x00002a97
    31f0:	00003175 	.word	0x00003175

000031f4 <_usart_set_stop_bits>:
 *
 * \param[in] device The pointer to USART device instance
 * \param[in] stop_bits A stop bits mode to set
 */
static void _usart_set_stop_bits(void *const hw, const enum usart_stop_bits stop_bits)
{
    31f4:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
	bool enabled = hri_sercomusart_get_CTRLA_ENABLE_bit(hw);
    31f6:	4b11      	ldr	r3, [pc, #68]	; (323c <_usart_set_stop_bits+0x48>)
{
    31f8:	0004      	movs	r4, r0
    31fa:	000d      	movs	r5, r1
	bool enabled = hri_sercomusart_get_CTRLA_ENABLE_bit(hw);
    31fc:	4798      	blx	r3

	hri_sercomusart_clear_CTRLA_ENABLE_bit(hw);
    31fe:	4b10      	ldr	r3, [pc, #64]	; (3240 <_usart_set_stop_bits+0x4c>)
	bool enabled = hri_sercomusart_get_CTRLA_ENABLE_bit(hw);
    3200:	0007      	movs	r7, r0
	hri_sercomusart_clear_CTRLA_ENABLE_bit(hw);
    3202:	0020      	movs	r0, r4
    3204:	4798      	blx	r3

	CRITICAL_SECTION_ENTER()
    3206:	a801      	add	r0, sp, #4
    3208:	4b0e      	ldr	r3, [pc, #56]	; (3244 <_usart_set_stop_bits+0x50>)
    320a:	4798      	blx	r3
	hri_sercomusart_wait_for_sync(hw, SERCOM_USART_SYNCBUSY_ENABLE);
    320c:	4e0e      	ldr	r6, [pc, #56]	; (3248 <_usart_set_stop_bits+0x54>)
    320e:	0020      	movs	r0, r4
    3210:	2102      	movs	r1, #2
    3212:	47b0      	blx	r6
	tmp &= ~SERCOM_USART_CTRLB_SBMODE;
    3214:	2240      	movs	r2, #64	; 0x40
	tmp = ((Sercom *)hw)->USART.CTRLB.reg;
    3216:	6863      	ldr	r3, [r4, #4]
	hri_sercomusart_wait_for_sync(hw, SERCOM_USART_SYNCBUSY_MASK);
    3218:	2107      	movs	r1, #7
	tmp &= ~SERCOM_USART_CTRLB_SBMODE;
    321a:	4393      	bics	r3, r2
	hri_sercomusart_write_CTRLB_SBMODE_bit(hw, stop_bits);
    321c:	1e6a      	subs	r2, r5, #1
    321e:	4195      	sbcs	r5, r2
	tmp |= value << SERCOM_USART_CTRLB_SBMODE_Pos;
    3220:	01ad      	lsls	r5, r5, #6
    3222:	431d      	orrs	r5, r3
	((Sercom *)hw)->USART.CTRLB.reg = tmp;
    3224:	6065      	str	r5, [r4, #4]
	hri_sercomusart_wait_for_sync(hw, SERCOM_USART_SYNCBUSY_MASK);
    3226:	0020      	movs	r0, r4
    3228:	47b0      	blx	r6
	CRITICAL_SECTION_LEAVE()
    322a:	a801      	add	r0, sp, #4
    322c:	4b07      	ldr	r3, [pc, #28]	; (324c <_usart_set_stop_bits+0x58>)
    322e:	4798      	blx	r3

	hri_sercomusart_write_CTRLA_ENABLE_bit(hw, enabled);
    3230:	0039      	movs	r1, r7
    3232:	0020      	movs	r0, r4
    3234:	4b06      	ldr	r3, [pc, #24]	; (3250 <_usart_set_stop_bits+0x5c>)
    3236:	4798      	blx	r3
}
    3238:	bdf7      	pop	{r0, r1, r2, r4, r5, r6, r7, pc}
    323a:	46c0      	nop			; (mov r8, r8)
    323c:	0000315d 	.word	0x0000315d
    3240:	00003191 	.word	0x00003191
    3244:	00002a89 	.word	0x00002a89
    3248:	00003155 	.word	0x00003155
    324c:	00002a97 	.word	0x00002a97
    3250:	00003175 	.word	0x00003175

00003254 <_usart_set_character_size>:
 *
 * \param[in] device The pointer to USART device instance
 * \param[in] size A character size to set
 */
static void _usart_set_character_size(void *const hw, const enum usart_character_size size)
{
    3254:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
	bool enabled = hri_sercomusart_get_CTRLA_ENABLE_bit(hw);
    3256:	4b12      	ldr	r3, [pc, #72]	; (32a0 <_usart_set_character_size+0x4c>)
{
    3258:	0004      	movs	r4, r0
    325a:	000d      	movs	r5, r1
	bool enabled = hri_sercomusart_get_CTRLA_ENABLE_bit(hw);
    325c:	4798      	blx	r3

	hri_sercomusart_clear_CTRLA_ENABLE_bit(hw);
    325e:	4b11      	ldr	r3, [pc, #68]	; (32a4 <_usart_set_character_size+0x50>)
	bool enabled = hri_sercomusart_get_CTRLA_ENABLE_bit(hw);
    3260:	0007      	movs	r7, r0
	hri_sercomusart_clear_CTRLA_ENABLE_bit(hw);
    3262:	0020      	movs	r0, r4
    3264:	4798      	blx	r3

	CRITICAL_SECTION_ENTER()
    3266:	4b10      	ldr	r3, [pc, #64]	; (32a8 <_usart_set_character_size+0x54>)
    3268:	a801      	add	r0, sp, #4
    326a:	4798      	blx	r3
	hri_sercomusart_wait_for_sync(hw, SERCOM_USART_SYNCBUSY_ENABLE);
    326c:	2102      	movs	r1, #2
    326e:	0020      	movs	r0, r4
    3270:	4e0e      	ldr	r6, [pc, #56]	; (32ac <_usart_set_character_size+0x58>)
    3272:	47b0      	blx	r6
	tmp &= ~SERCOM_USART_CTRLB_CHSIZE_Msk;
    3274:	2107      	movs	r1, #7
	tmp = ((Sercom *)hw)->USART.CTRLB.reg;
    3276:	6863      	ldr	r3, [r4, #4]
	tmp |= SERCOM_USART_CTRLB_CHSIZE(data);
    3278:	400d      	ands	r5, r1
	tmp &= ~SERCOM_USART_CTRLB_CHSIZE_Msk;
    327a:	438b      	bics	r3, r1
	tmp |= SERCOM_USART_CTRLB_CHSIZE(data);
    327c:	431d      	orrs	r5, r3
	hri_sercomusart_wait_for_sync(hw, SERCOM_USART_SYNCBUSY_MASK);
    327e:	0020      	movs	r0, r4
	((Sercom *)hw)->USART.CTRLB.reg = tmp;
    3280:	6065      	str	r5, [r4, #4]
	hri_sercomusart_wait_for_sync(hw, SERCOM_USART_SYNCBUSY_MASK);
    3282:	47b0      	blx	r6
	hri_sercomusart_write_CTRLB_CHSIZE_bf(hw, size);
	CRITICAL_SECTION_LEAVE()
    3284:	a801      	add	r0, sp, #4
    3286:	4b0a      	ldr	r3, [pc, #40]	; (32b0 <_usart_set_character_size+0x5c>)
    3288:	4798      	blx	r3

	if (enabled) {
    328a:	2f00      	cmp	r7, #0
    328c:	d006      	beq.n	329c <_usart_set_character_size+0x48>
	((Sercom *)hw)->USART.CTRLA.reg |= SERCOM_USART_CTRLA_ENABLE;
    328e:	2302      	movs	r3, #2
    3290:	6822      	ldr	r2, [r4, #0]
	hri_sercomusart_wait_for_sync(hw, SERCOM_USART_SYNCBUSY_SWRST | SERCOM_USART_SYNCBUSY_ENABLE);
    3292:	2103      	movs	r1, #3
	((Sercom *)hw)->USART.CTRLA.reg |= SERCOM_USART_CTRLA_ENABLE;
    3294:	4313      	orrs	r3, r2
    3296:	6023      	str	r3, [r4, #0]
	hri_sercomusart_wait_for_sync(hw, SERCOM_USART_SYNCBUSY_SWRST | SERCOM_USART_SYNCBUSY_ENABLE);
    3298:	0020      	movs	r0, r4
    329a:	47b0      	blx	r6
		hri_sercomusart_set_CTRLA_ENABLE_bit(hw);
	}
}
    329c:	bdf7      	pop	{r0, r1, r2, r4, r5, r6, r7, pc}
    329e:	46c0      	nop			; (mov r8, r8)
    32a0:	0000315d 	.word	0x0000315d
    32a4:	00003191 	.word	0x00003191
    32a8:	00002a89 	.word	0x00002a89
    32ac:	00003155 	.word	0x00003155
    32b0:	00002a97 	.word	0x00002a97

000032b4 <_usart_set_parity>:
{
    32b4:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
	bool enabled = hri_sercomusart_get_CTRLA_ENABLE_bit(hw);
    32b6:	4b18      	ldr	r3, [pc, #96]	; (3318 <_usart_set_parity+0x64>)
{
    32b8:	000d      	movs	r5, r1
    32ba:	0004      	movs	r4, r0
	bool enabled = hri_sercomusart_get_CTRLA_ENABLE_bit(hw);
    32bc:	4798      	blx	r3
	hri_sercomusart_clear_CTRLA_ENABLE_bit(hw);
    32be:	4b17      	ldr	r3, [pc, #92]	; (331c <_usart_set_parity+0x68>)
	bool enabled = hri_sercomusart_get_CTRLA_ENABLE_bit(hw);
    32c0:	0007      	movs	r7, r0
	hri_sercomusart_clear_CTRLA_ENABLE_bit(hw);
    32c2:	0020      	movs	r0, r4
    32c4:	4798      	blx	r3
	CRITICAL_SECTION_ENTER()
    32c6:	a801      	add	r0, sp, #4
    32c8:	4b15      	ldr	r3, [pc, #84]	; (3320 <_usart_set_parity+0x6c>)
    32ca:	4798      	blx	r3
	hri_sercomusart_wait_for_sync(hw, SERCOM_USART_SYNCBUSY_ENABLE);
    32cc:	2102      	movs	r1, #2
    32ce:	0020      	movs	r0, r4
    32d0:	4e14      	ldr	r6, [pc, #80]	; (3324 <_usart_set_parity+0x70>)
    32d2:	47b0      	blx	r6
	if (USART_PARITY_NONE != parity) {
    32d4:	2d02      	cmp	r5, #2
    32d6:	d01a      	beq.n	330e <_usart_set_parity+0x5a>
	((Sercom *)hw)->USART.CTRLA.reg |= SERCOM_USART_CTRLA_FORM(mask);
    32d8:	2380      	movs	r3, #128	; 0x80
    32da:	6822      	ldr	r2, [r4, #0]
    32dc:	045b      	lsls	r3, r3, #17
    32de:	4313      	orrs	r3, r2
	((Sercom *)hw)->USART.CTRLA.reg &= ~SERCOM_USART_CTRLA_FORM(mask);
    32e0:	6023      	str	r3, [r4, #0]
	hri_sercomusart_wait_for_sync(hw, SERCOM_USART_SYNCBUSY_MASK);
    32e2:	0020      	movs	r0, r4
    32e4:	2107      	movs	r1, #7
    32e6:	47b0      	blx	r6
	tmp &= ~SERCOM_USART_CTRLB_PMODE;
    32e8:	4a0f      	ldr	r2, [pc, #60]	; (3328 <_usart_set_parity+0x74>)
	tmp = ((Sercom *)hw)->USART.CTRLB.reg;
    32ea:	6863      	ldr	r3, [r4, #4]
	hri_sercomusart_wait_for_sync(hw, SERCOM_USART_SYNCBUSY_MASK);
    32ec:	2107      	movs	r1, #7
	tmp &= ~SERCOM_USART_CTRLB_PMODE;
    32ee:	4013      	ands	r3, r2
	hri_sercomusart_write_CTRLB_PMODE_bit(hw, parity);
    32f0:	1e6a      	subs	r2, r5, #1
    32f2:	4195      	sbcs	r5, r2
	tmp |= value << SERCOM_USART_CTRLB_PMODE_Pos;
    32f4:	036d      	lsls	r5, r5, #13
    32f6:	431d      	orrs	r5, r3
	((Sercom *)hw)->USART.CTRLB.reg = tmp;
    32f8:	6065      	str	r5, [r4, #4]
	hri_sercomusart_wait_for_sync(hw, SERCOM_USART_SYNCBUSY_MASK);
    32fa:	0020      	movs	r0, r4
    32fc:	47b0      	blx	r6
	CRITICAL_SECTION_LEAVE()
    32fe:	a801      	add	r0, sp, #4
    3300:	4b0a      	ldr	r3, [pc, #40]	; (332c <_usart_set_parity+0x78>)
    3302:	4798      	blx	r3
	hri_sercomusart_write_CTRLA_ENABLE_bit(hw, enabled);
    3304:	0039      	movs	r1, r7
    3306:	0020      	movs	r0, r4
    3308:	4b09      	ldr	r3, [pc, #36]	; (3330 <_usart_set_parity+0x7c>)
    330a:	4798      	blx	r3
}
    330c:	bdf7      	pop	{r0, r1, r2, r4, r5, r6, r7, pc}
	((Sercom *)hw)->USART.CTRLA.reg &= ~SERCOM_USART_CTRLA_FORM(mask);
    330e:	6823      	ldr	r3, [r4, #0]
    3310:	4a08      	ldr	r2, [pc, #32]	; (3334 <_usart_set_parity+0x80>)
    3312:	4013      	ands	r3, r2
    3314:	e7e4      	b.n	32e0 <_usart_set_parity+0x2c>
    3316:	46c0      	nop			; (mov r8, r8)
    3318:	0000315d 	.word	0x0000315d
    331c:	00003191 	.word	0x00003191
    3320:	00002a89 	.word	0x00002a89
    3324:	00003155 	.word	0x00003155
    3328:	ffffdfff 	.word	0xffffdfff
    332c:	00002a97 	.word	0x00002a97
    3330:	00003175 	.word	0x00003175
    3334:	feffffff 	.word	0xfeffffff

00003338 <_usart_init>:
	if ((uint32_t)SERCOM5 == (uint32_t)hw) {
    3338:	4b1c      	ldr	r3, [pc, #112]	; (33ac <_usart_init+0x74>)
{
    333a:	b570      	push	{r4, r5, r6, lr}
    333c:	0004      	movs	r4, r0
	if ((uint32_t)SERCOM5 == (uint32_t)hw) {
    333e:	4298      	cmp	r0, r3
    3340:	d003      	beq.n	334a <_usart_init+0x12>
	return ((uint32_t)hw - (uint32_t)SERCOM0) >> 10;
    3342:	0383      	lsls	r3, r0, #14
		if (_usarts[i].number == sercom_offset) {
    3344:	0e1b      	lsrs	r3, r3, #24
    3346:	2b04      	cmp	r3, #4
    3348:	d004      	beq.n	3354 <_usart_init+0x1c>
	ASSERT(false);
    334a:	4a19      	ldr	r2, [pc, #100]	; (33b0 <_usart_init+0x78>)
    334c:	4919      	ldr	r1, [pc, #100]	; (33b4 <_usart_init+0x7c>)
    334e:	2000      	movs	r0, #0
    3350:	4b19      	ldr	r3, [pc, #100]	; (33b8 <_usart_init+0x80>)
    3352:	4798      	blx	r3
	return ((Sercom *)hw)->USART.SYNCBUSY.reg & reg;
    3354:	69e3      	ldr	r3, [r4, #28]
    3356:	4d19      	ldr	r5, [pc, #100]	; (33bc <_usart_init+0x84>)
	if (!hri_sercomusart_is_syncing(hw, SERCOM_USART_SYNCBUSY_SWRST)) {
    3358:	07db      	lsls	r3, r3, #31
    335a:	d411      	bmi.n	3380 <_usart_init+0x48>
	tmp &= mask;
    335c:	2602      	movs	r6, #2
	hri_sercomusart_wait_for_sync(hw, SERCOM_USART_SYNCBUSY_SWRST | SERCOM_USART_SYNCBUSY_ENABLE);
    335e:	2103      	movs	r1, #3
    3360:	0020      	movs	r0, r4
    3362:	47a8      	blx	r5
	tmp = ((Sercom *)hw)->USART.CTRLA.reg;
    3364:	6823      	ldr	r3, [r4, #0]
		if (hri_sercomusart_get_CTRLA_reg(hw, SERCOM_USART_CTRLA_ENABLE)) {
    3366:	4233      	tst	r3, r6
    3368:	d005      	beq.n	3376 <_usart_init+0x3e>
			hri_sercomusart_clear_CTRLA_ENABLE_bit(hw);
    336a:	0020      	movs	r0, r4
    336c:	4b14      	ldr	r3, [pc, #80]	; (33c0 <_usart_init+0x88>)
    336e:	4798      	blx	r3
			hri_sercomusart_wait_for_sync(hw, SERCOM_USART_SYNCBUSY_ENABLE);
    3370:	0031      	movs	r1, r6
    3372:	0020      	movs	r0, r4
    3374:	47a8      	blx	r5
	((Sercom *)hw)->USART.CTRLA.reg = data;
    3376:	2305      	movs	r3, #5
	hri_sercomusart_wait_for_sync(hw, SERCOM_USART_SYNCBUSY_SWRST | SERCOM_USART_SYNCBUSY_ENABLE);
    3378:	2103      	movs	r1, #3
	((Sercom *)hw)->USART.CTRLA.reg = data;
    337a:	6023      	str	r3, [r4, #0]
	hri_sercomusart_wait_for_sync(hw, SERCOM_USART_SYNCBUSY_SWRST | SERCOM_USART_SYNCBUSY_ENABLE);
    337c:	0020      	movs	r0, r4
    337e:	47a8      	blx	r5
	hri_sercomusart_wait_for_sync(hw, SERCOM_USART_SYNCBUSY_SWRST);
    3380:	0020      	movs	r0, r4
    3382:	2101      	movs	r1, #1
    3384:	47a8      	blx	r5
	((Sercom *)hw)->USART.CTRLA.reg = data;
    3386:	4b0f      	ldr	r3, [pc, #60]	; (33c4 <_usart_init+0x8c>)
	hri_sercomusart_wait_for_sync(hw, SERCOM_USART_SYNCBUSY_SWRST | SERCOM_USART_SYNCBUSY_ENABLE);
    3388:	0020      	movs	r0, r4
	((Sercom *)hw)->USART.CTRLA.reg = data;
    338a:	6023      	str	r3, [r4, #0]
	hri_sercomusart_wait_for_sync(hw, SERCOM_USART_SYNCBUSY_SWRST | SERCOM_USART_SYNCBUSY_ENABLE);
    338c:	2103      	movs	r1, #3
    338e:	47a8      	blx	r5
	((Sercom *)hw)->USART.CTRLB.reg = data;
    3390:	23c0      	movs	r3, #192	; 0xc0
    3392:	029b      	lsls	r3, r3, #10
    3394:	6063      	str	r3, [r4, #4]
	hri_sercomusart_wait_for_sync(hw, SERCOM_USART_SYNCBUSY_MASK);
    3396:	0020      	movs	r0, r4
    3398:	2107      	movs	r1, #7
    339a:	47a8      	blx	r5
}

static inline void hri_sercomusart_write_RXPL_reg(const void *const hw, hri_sercomusart_rxpl_reg_t data)
{
	SERCOM_CRITICAL_SECTION_ENTER();
	((Sercom *)hw)->USART.RXPL.reg = data;
    339c:	2000      	movs	r0, #0
	((Sercom *)hw)->USART.BAUD.reg = data;
    339e:	4b0a      	ldr	r3, [pc, #40]	; (33c8 <_usart_init+0x90>)
    33a0:	81a3      	strh	r3, [r4, #12]
	((Sercom *)hw)->USART.RXPL.reg = data;
    33a2:	73a0      	strb	r0, [r4, #14]
}

static inline void hri_sercomusart_write_DBGCTRL_reg(const void *const hw, hri_sercomusart_dbgctrl_reg_t data)
{
	SERCOM_CRITICAL_SECTION_ENTER();
	((Sercom *)hw)->USART.DBGCTRL.reg = data;
    33a4:	3430      	adds	r4, #48	; 0x30
    33a6:	7020      	strb	r0, [r4, #0]
}
    33a8:	bd70      	pop	{r4, r5, r6, pc}
    33aa:	46c0      	nop			; (mov r8, r8)
    33ac:	43000400 	.word	0x43000400
    33b0:	00000261 	.word	0x00000261
    33b4:	00005bf5 	.word	0x00005bf5
    33b8:	00002ed9 	.word	0x00002ed9
    33bc:	00003155 	.word	0x00003155
    33c0:	00003191 	.word	0x00003191
    33c4:	40100004 	.word	0x40100004
    33c8:	fffffd8a 	.word	0xfffffd8a

000033cc <_sercom_get_irq_num>:
	if ((uint32_t)SERCOM5 == (uint32_t)hw) {
    33cc:	4a05      	ldr	r2, [pc, #20]	; (33e4 <_sercom_get_irq_num+0x18>)
    33ce:	2305      	movs	r3, #5
    33d0:	4290      	cmp	r0, r2
    33d2:	d003      	beq.n	33dc <_sercom_get_irq_num+0x10>
	return ((uint32_t)hw - (uint32_t)SERCOM0) >> 10;
    33d4:	23be      	movs	r3, #190	; 0xbe
    33d6:	061b      	lsls	r3, r3, #24
    33d8:	18c0      	adds	r0, r0, r3
    33da:	0a83      	lsrs	r3, r0, #10
/**
 * \brief Retrieve IRQ number for the given hardware instance
 */
static uint8_t _sercom_get_irq_num(const void *const hw)
{
	return SERCOM0_IRQn + _sercom_get_hardware_index(hw);
    33dc:	3308      	adds	r3, #8
    33de:	b2d8      	uxtb	r0, r3
}
    33e0:	4770      	bx	lr
    33e2:	46c0      	nop			; (mov r8, r8)
    33e4:	43000400 	.word	0x43000400

000033e8 <_usart_async_init>:
{
    33e8:	b570      	push	{r4, r5, r6, lr}
    33ea:	0006      	movs	r6, r0
	ASSERT(device);
    33ec:	1e43      	subs	r3, r0, #1
    33ee:	4198      	sbcs	r0, r3
{
    33f0:	000c      	movs	r4, r1
	ASSERT(device);
    33f2:	b2c0      	uxtb	r0, r0
    33f4:	22c4      	movs	r2, #196	; 0xc4
    33f6:	490e      	ldr	r1, [pc, #56]	; (3430 <_usart_async_init+0x48>)
    33f8:	4b0e      	ldr	r3, [pc, #56]	; (3434 <_usart_async_init+0x4c>)
    33fa:	4798      	blx	r3
	init_status = _usart_init(hw);
    33fc:	0020      	movs	r0, r4
    33fe:	4b0e      	ldr	r3, [pc, #56]	; (3438 <_usart_async_init+0x50>)
    3400:	4798      	blx	r3
    3402:	1e05      	subs	r5, r0, #0
	if (init_status) {
    3404:	d112      	bne.n	342c <_usart_async_init+0x44>
	if (hw == SERCOM4) {
    3406:	4b0d      	ldr	r3, [pc, #52]	; (343c <_usart_async_init+0x54>)
	device->hw = hw;
    3408:	61b4      	str	r4, [r6, #24]
	if (hw == SERCOM4) {
    340a:	429c      	cmp	r4, r3
    340c:	d101      	bne.n	3412 <_usart_async_init+0x2a>
		_sercom4_dev = (struct _usart_async_device *)dev;
    340e:	4b0c      	ldr	r3, [pc, #48]	; (3440 <_usart_async_init+0x58>)
    3410:	601e      	str	r6, [r3, #0]
	NVIC_DisableIRQ((IRQn_Type)_sercom_get_irq_num(hw));
    3412:	4b0c      	ldr	r3, [pc, #48]	; (3444 <_usart_async_init+0x5c>)
    3414:	0020      	movs	r0, r4
    3416:	4798      	blx	r3
    3418:	b244      	sxtb	r4, r0
    341a:	0020      	movs	r0, r4
    341c:	4b0a      	ldr	r3, [pc, #40]	; (3448 <_usart_async_init+0x60>)
    341e:	4798      	blx	r3
	NVIC_ClearPendingIRQ((IRQn_Type)_sercom_get_irq_num(hw));
    3420:	0020      	movs	r0, r4
    3422:	4b0a      	ldr	r3, [pc, #40]	; (344c <_usart_async_init+0x64>)
    3424:	4798      	blx	r3
	NVIC_EnableIRQ((IRQn_Type)_sercom_get_irq_num(hw));
    3426:	0020      	movs	r0, r4
    3428:	4b09      	ldr	r3, [pc, #36]	; (3450 <_usart_async_init+0x68>)
    342a:	4798      	blx	r3
}
    342c:	0028      	movs	r0, r5
    342e:	bd70      	pop	{r4, r5, r6, pc}
    3430:	00005bf5 	.word	0x00005bf5
    3434:	00002ed9 	.word	0x00002ed9
    3438:	00003339 	.word	0x00003339
    343c:	42001000 	.word	0x42001000
    3440:	20002390 	.word	0x20002390
    3444:	000033cd 	.word	0x000033cd
    3448:	00003119 	.word	0x00003119
    344c:	00003139 	.word	0x00003139
    3450:	00003101 	.word	0x00003101

00003454 <_usart_async_enable>:
	((Sercom *)hw)->USART.CTRLA.reg |= SERCOM_USART_CTRLA_ENABLE;
    3454:	2302      	movs	r3, #2
{
    3456:	b510      	push	{r4, lr}
	hri_sercomusart_set_CTRLA_ENABLE_bit(device->hw);
    3458:	6980      	ldr	r0, [r0, #24]
	hri_sercomusart_wait_for_sync(hw, SERCOM_USART_SYNCBUSY_SWRST | SERCOM_USART_SYNCBUSY_ENABLE);
    345a:	2103      	movs	r1, #3
	((Sercom *)hw)->USART.CTRLA.reg |= SERCOM_USART_CTRLA_ENABLE;
    345c:	6802      	ldr	r2, [r0, #0]
    345e:	4313      	orrs	r3, r2
    3460:	6003      	str	r3, [r0, #0]
	hri_sercomusart_wait_for_sync(hw, SERCOM_USART_SYNCBUSY_SWRST | SERCOM_USART_SYNCBUSY_ENABLE);
    3462:	4b01      	ldr	r3, [pc, #4]	; (3468 <_usart_async_enable+0x14>)
    3464:	4798      	blx	r3
}
    3466:	bd10      	pop	{r4, pc}
    3468:	00003155 	.word	0x00003155

0000346c <_usart_async_disable>:
{
    346c:	b510      	push	{r4, lr}
	hri_sercomusart_clear_CTRLA_ENABLE_bit(device->hw);
    346e:	6980      	ldr	r0, [r0, #24]
    3470:	4b01      	ldr	r3, [pc, #4]	; (3478 <_usart_async_disable+0xc>)
    3472:	4798      	blx	r3
}
    3474:	bd10      	pop	{r4, pc}
    3476:	46c0      	nop			; (mov r8, r8)
    3478:	00003191 	.word	0x00003191

0000347c <_usart_async_set_baud_rate>:
{
    347c:	b510      	push	{r4, lr}
	_usart_set_baud_rate(device->hw, baud_rate);
    347e:	6980      	ldr	r0, [r0, #24]
    3480:	4b01      	ldr	r3, [pc, #4]	; (3488 <_usart_async_set_baud_rate+0xc>)
    3482:	4798      	blx	r3
}
    3484:	bd10      	pop	{r4, pc}
    3486:	46c0      	nop			; (mov r8, r8)
    3488:	000031a9 	.word	0x000031a9

0000348c <_usart_async_set_parity>:
{
    348c:	b510      	push	{r4, lr}
	_usart_set_parity(device->hw, parity);
    348e:	6980      	ldr	r0, [r0, #24]
    3490:	4b01      	ldr	r3, [pc, #4]	; (3498 <_usart_async_set_parity+0xc>)
    3492:	4798      	blx	r3
}
    3494:	bd10      	pop	{r4, pc}
    3496:	46c0      	nop			; (mov r8, r8)
    3498:	000032b5 	.word	0x000032b5

0000349c <_usart_async_set_stop_bits>:
{
    349c:	b510      	push	{r4, lr}
	_usart_set_stop_bits(device->hw, stop_bits);
    349e:	6980      	ldr	r0, [r0, #24]
    34a0:	4b01      	ldr	r3, [pc, #4]	; (34a8 <_usart_async_set_stop_bits+0xc>)
    34a2:	4798      	blx	r3
}
    34a4:	bd10      	pop	{r4, pc}
    34a6:	46c0      	nop			; (mov r8, r8)
    34a8:	000031f5 	.word	0x000031f5

000034ac <_usart_async_set_character_size>:
{
    34ac:	b510      	push	{r4, lr}
	_usart_set_character_size(device->hw, size);
    34ae:	6980      	ldr	r0, [r0, #24]
    34b0:	4b01      	ldr	r3, [pc, #4]	; (34b8 <_usart_async_set_character_size+0xc>)
    34b2:	4798      	blx	r3
}
    34b4:	bd10      	pop	{r4, pc}
    34b6:	46c0      	nop			; (mov r8, r8)
    34b8:	00003255 	.word	0x00003255

000034bc <_usart_async_write_byte>:
	hri_sercomusart_write_DATA_reg(device->hw, data);
    34bc:	6983      	ldr	r3, [r0, #24]
    34be:	b289      	uxth	r1, r1
	((Sercom *)hw)->USART.DATA.reg = data;
    34c0:	8519      	strh	r1, [r3, #40]	; 0x28
}
    34c2:	4770      	bx	lr

000034c4 <_usart_async_enable_byte_sent_irq>:
	((Sercom *)hw)->USART.INTENSET.reg = SERCOM_USART_INTENSET_DRE;
    34c4:	2201      	movs	r2, #1
	hri_sercomusart_set_INTEN_DRE_bit(device->hw);
    34c6:	6983      	ldr	r3, [r0, #24]
    34c8:	759a      	strb	r2, [r3, #22]
}
    34ca:	4770      	bx	lr

000034cc <_usart_async_enable_tx_done_irq>:
	((Sercom *)hw)->USART.INTENSET.reg = SERCOM_USART_INTENSET_TXC;
    34cc:	2202      	movs	r2, #2
	hri_sercomusart_set_INTEN_TXC_bit(device->hw);
    34ce:	6983      	ldr	r3, [r0, #24]
    34d0:	759a      	strb	r2, [r3, #22]
}
    34d2:	4770      	bx	lr

000034d4 <_usart_async_set_irq_state>:
{
    34d4:	b570      	push	{r4, r5, r6, lr}
    34d6:	0004      	movs	r4, r0
	ASSERT(device);
    34d8:	1e43      	subs	r3, r0, #1
    34da:	4198      	sbcs	r0, r3
{
    34dc:	000e      	movs	r6, r1
	ASSERT(device);
    34de:	4b10      	ldr	r3, [pc, #64]	; (3520 <_usart_async_set_irq_state+0x4c>)
{
    34e0:	0015      	movs	r5, r2
	ASSERT(device);
    34e2:	b2c0      	uxtb	r0, r0
    34e4:	4a0f      	ldr	r2, [pc, #60]	; (3524 <_usart_async_set_irq_state+0x50>)
    34e6:	4910      	ldr	r1, [pc, #64]	; (3528 <_usart_async_set_irq_state+0x54>)
    34e8:	4798      	blx	r3
	if (USART_ASYNC_BYTE_SENT == type || USART_ASYNC_TX_DONE == type) {
    34ea:	2202      	movs	r2, #2
    34ec:	0033      	movs	r3, r6
    34ee:	4393      	bics	r3, r2
    34f0:	d109      	bne.n	3506 <_usart_async_set_irq_state+0x32>
		hri_sercomusart_write_INTEN_DRE_bit(device->hw, state);
    34f2:	69a3      	ldr	r3, [r4, #24]
    34f4:	2101      	movs	r1, #1
	if (value == 0x0) {
    34f6:	2d00      	cmp	r5, #0
    34f8:	d102      	bne.n	3500 <_usart_async_set_irq_state+0x2c>
		((Sercom *)hw)->USART.INTENCLR.reg = SERCOM_USART_INTENSET_DRE;
    34fa:	7519      	strb	r1, [r3, #20]
		((Sercom *)hw)->USART.INTENCLR.reg = SERCOM_USART_INTENSET_ERROR;
    34fc:	751a      	strb	r2, [r3, #20]
}
    34fe:	bd70      	pop	{r4, r5, r6, pc}
		((Sercom *)hw)->USART.INTENSET.reg = SERCOM_USART_INTENSET_DRE;
    3500:	7599      	strb	r1, [r3, #22]
		((Sercom *)hw)->USART.INTENSET.reg = SERCOM_USART_INTENSET_ERROR;
    3502:	759a      	strb	r2, [r3, #22]
    3504:	e7fb      	b.n	34fe <_usart_async_set_irq_state+0x2a>
	} else if (USART_ASYNC_RX_DONE == type) {
    3506:	2e01      	cmp	r6, #1
    3508:	d104      	bne.n	3514 <_usart_async_set_irq_state+0x40>
    350a:	2204      	movs	r2, #4
		hri_sercomusart_write_INTEN_RXC_bit(device->hw, state);
    350c:	69a3      	ldr	r3, [r4, #24]
	if (value == 0x0) {
    350e:	2d00      	cmp	r5, #0
    3510:	d1f7      	bne.n	3502 <_usart_async_set_irq_state+0x2e>
    3512:	e7f3      	b.n	34fc <_usart_async_set_irq_state+0x28>
	} else if (USART_ASYNC_ERROR == type) {
    3514:	2e03      	cmp	r6, #3
    3516:	d1f2      	bne.n	34fe <_usart_async_set_irq_state+0x2a>
		hri_sercomusart_write_INTEN_ERROR_bit(device->hw, state);
    3518:	69a3      	ldr	r3, [r4, #24]
    351a:	2280      	movs	r2, #128	; 0x80
    351c:	e7f7      	b.n	350e <_usart_async_set_irq_state+0x3a>
    351e:	46c0      	nop			; (mov r8, r8)
    3520:	00002ed9 	.word	0x00002ed9
    3524:	00000221 	.word	0x00000221
    3528:	00005bf5 	.word	0x00005bf5

0000352c <SERCOM4_Handler>:
	return NULL;
}

void SERCOM4_Handler(void)
{
	_sercom_usart_interrupt_handler(_sercom4_dev);
    352c:	4b19      	ldr	r3, [pc, #100]	; (3594 <SERCOM4_Handler+0x68>)
{
    352e:	b510      	push	{r4, lr}
	_sercom_usart_interrupt_handler(_sercom4_dev);
    3530:	6818      	ldr	r0, [r3, #0]
	if (hri_sercomusart_get_interrupt_DRE_bit(hw) && hri_sercomusart_get_INTEN_DRE_bit(hw)) {
    3532:	2301      	movs	r3, #1
	void *hw = device->hw;
    3534:	6984      	ldr	r4, [r0, #24]
	return (((Sercom *)hw)->USART.INTFLAG.reg & SERCOM_USART_INTFLAG_DRE) >> SERCOM_USART_INTFLAG_DRE_Pos;
    3536:	7e22      	ldrb	r2, [r4, #24]
	if (hri_sercomusart_get_interrupt_DRE_bit(hw) && hri_sercomusart_get_INTEN_DRE_bit(hw)) {
    3538:	421a      	tst	r2, r3
    353a:	d006      	beq.n	354a <SERCOM4_Handler+0x1e>
	return (((Sercom *)hw)->USART.INTENSET.reg & SERCOM_USART_INTENSET_DRE) >> SERCOM_USART_INTENSET_DRE_Pos;
    353c:	7da2      	ldrb	r2, [r4, #22]
    353e:	421a      	tst	r2, r3
    3540:	d003      	beq.n	354a <SERCOM4_Handler+0x1e>
	((Sercom *)hw)->USART.INTENCLR.reg = SERCOM_USART_INTENSET_DRE;
    3542:	7523      	strb	r3, [r4, #20]
		device->usart_cb.tx_byte_sent(device);
    3544:	6803      	ldr	r3, [r0, #0]
		device->usart_cb.tx_done_cb(device);
    3546:	4798      	blx	r3
}
    3548:	bd10      	pop	{r4, pc}
	return (((Sercom *)hw)->USART.INTFLAG.reg & SERCOM_USART_INTFLAG_TXC) >> SERCOM_USART_INTFLAG_TXC_Pos;
    354a:	7e23      	ldrb	r3, [r4, #24]
    354c:	2201      	movs	r2, #1
	} else if (hri_sercomusart_get_interrupt_TXC_bit(hw) && hri_sercomusart_get_INTEN_TXC_bit(hw)) {
    354e:	079b      	lsls	r3, r3, #30
    3550:	d507      	bpl.n	3562 <SERCOM4_Handler+0x36>
	return (((Sercom *)hw)->USART.INTENSET.reg & SERCOM_USART_INTENSET_TXC) >> SERCOM_USART_INTENSET_TXC_Pos;
    3552:	7da3      	ldrb	r3, [r4, #22]
    3554:	40d3      	lsrs	r3, r2
    3556:	4213      	tst	r3, r2
    3558:	d003      	beq.n	3562 <SERCOM4_Handler+0x36>
	((Sercom *)hw)->USART.INTENCLR.reg = SERCOM_USART_INTENSET_TXC;
    355a:	2302      	movs	r3, #2
    355c:	7523      	strb	r3, [r4, #20]
		device->usart_cb.tx_done_cb(device);
    355e:	6883      	ldr	r3, [r0, #8]
    3560:	e7f1      	b.n	3546 <SERCOM4_Handler+0x1a>
	return (((Sercom *)hw)->USART.INTFLAG.reg & SERCOM_USART_INTFLAG_RXC) >> SERCOM_USART_INTFLAG_RXC_Pos;
    3562:	7e23      	ldrb	r3, [r4, #24]
	} else if (hri_sercomusart_get_interrupt_RXC_bit(hw)) {
    3564:	075b      	lsls	r3, r3, #29
    3566:	d50b      	bpl.n	3580 <SERCOM4_Handler+0x54>
		if (hri_sercomusart_read_STATUS_reg(hw)
    3568:	2337      	movs	r3, #55	; 0x37
	SERCOM_CRITICAL_SECTION_LEAVE();
}

static inline hri_sercomusart_status_reg_t hri_sercomusart_read_STATUS_reg(const void *const hw)
{
	return ((Sercom *)hw)->USART.STATUS.reg;
    356a:	8b62      	ldrh	r2, [r4, #26]
    356c:	421a      	tst	r2, r3
    356e:	d002      	beq.n	3576 <SERCOM4_Handler+0x4a>
	((Sercom *)hw)->USART.STATUS.reg = mask;
    3570:	3308      	adds	r3, #8
    3572:	8363      	strh	r3, [r4, #26]
}
    3574:	e7e8      	b.n	3548 <SERCOM4_Handler+0x1c>
	return ((Sercom *)hw)->USART.DATA.reg;
    3576:	8d21      	ldrh	r1, [r4, #40]	; 0x28
		device->usart_cb.rx_done_cb(device, hri_sercomusart_read_DATA_reg(hw));
    3578:	6843      	ldr	r3, [r0, #4]
    357a:	b2c9      	uxtb	r1, r1
    357c:	4798      	blx	r3
    357e:	e7e3      	b.n	3548 <SERCOM4_Handler+0x1c>
	return (((Sercom *)hw)->USART.INTFLAG.reg & SERCOM_USART_INTFLAG_ERROR) >> SERCOM_USART_INTFLAG_ERROR_Pos;
    3580:	7e23      	ldrb	r3, [r4, #24]
	} else if (hri_sercomusart_get_interrupt_ERROR_bit(hw)) {
    3582:	09db      	lsrs	r3, r3, #7
    3584:	d0e0      	beq.n	3548 <SERCOM4_Handler+0x1c>
	((Sercom *)hw)->USART.INTFLAG.reg = SERCOM_USART_INTFLAG_ERROR;
    3586:	2380      	movs	r3, #128	; 0x80
    3588:	7623      	strb	r3, [r4, #24]
		device->usart_cb.error_cb(device);
    358a:	68c3      	ldr	r3, [r0, #12]
    358c:	4798      	blx	r3
	return ((Sercom *)hw)->USART.STATUS.reg;
    358e:	8b63      	ldrh	r3, [r4, #26]
    3590:	b29b      	uxth	r3, r3
    3592:	e7ee      	b.n	3572 <SERCOM4_Handler+0x46>
    3594:	20002390 	.word	0x20002390

00003598 <main>:
#include "cupdi/cupdi.h"

int main(void)
{
	/* Initializes MCU, drivers and middleware */
	atmel_start_init();
    3598:	4b02      	ldr	r3, [pc, #8]	; (35a4 <main+0xc>)
{
    359a:	b510      	push	{r4, lr}
	atmel_start_init();
    359c:	4798      	blx	r3

#ifdef CUPDI
	cupdi_operate();
    359e:	4b02      	ldr	r3, [pc, #8]	; (35a8 <main+0x10>)
    35a0:	4798      	blx	r3
    35a2:	e7fe      	b.n	35a2 <main+0xa>
    35a4:	00000115 	.word	0x00000115
    35a8:	000001fd 	.word	0x000001fd

000035ac <__gnu_thumb1_case_uqi>:
    35ac:	b402      	push	{r1}
    35ae:	4671      	mov	r1, lr
    35b0:	0849      	lsrs	r1, r1, #1
    35b2:	0049      	lsls	r1, r1, #1
    35b4:	5c09      	ldrb	r1, [r1, r0]
    35b6:	0049      	lsls	r1, r1, #1
    35b8:	448e      	add	lr, r1
    35ba:	bc02      	pop	{r1}
    35bc:	4770      	bx	lr
    35be:	46c0      	nop			; (mov r8, r8)

000035c0 <__udivsi3>:
    35c0:	2200      	movs	r2, #0
    35c2:	0843      	lsrs	r3, r0, #1
    35c4:	428b      	cmp	r3, r1
    35c6:	d374      	bcc.n	36b2 <__udivsi3+0xf2>
    35c8:	0903      	lsrs	r3, r0, #4
    35ca:	428b      	cmp	r3, r1
    35cc:	d35f      	bcc.n	368e <__udivsi3+0xce>
    35ce:	0a03      	lsrs	r3, r0, #8
    35d0:	428b      	cmp	r3, r1
    35d2:	d344      	bcc.n	365e <__udivsi3+0x9e>
    35d4:	0b03      	lsrs	r3, r0, #12
    35d6:	428b      	cmp	r3, r1
    35d8:	d328      	bcc.n	362c <__udivsi3+0x6c>
    35da:	0c03      	lsrs	r3, r0, #16
    35dc:	428b      	cmp	r3, r1
    35de:	d30d      	bcc.n	35fc <__udivsi3+0x3c>
    35e0:	22ff      	movs	r2, #255	; 0xff
    35e2:	0209      	lsls	r1, r1, #8
    35e4:	ba12      	rev	r2, r2
    35e6:	0c03      	lsrs	r3, r0, #16
    35e8:	428b      	cmp	r3, r1
    35ea:	d302      	bcc.n	35f2 <__udivsi3+0x32>
    35ec:	1212      	asrs	r2, r2, #8
    35ee:	0209      	lsls	r1, r1, #8
    35f0:	d065      	beq.n	36be <__udivsi3+0xfe>
    35f2:	0b03      	lsrs	r3, r0, #12
    35f4:	428b      	cmp	r3, r1
    35f6:	d319      	bcc.n	362c <__udivsi3+0x6c>
    35f8:	e000      	b.n	35fc <__udivsi3+0x3c>
    35fa:	0a09      	lsrs	r1, r1, #8
    35fc:	0bc3      	lsrs	r3, r0, #15
    35fe:	428b      	cmp	r3, r1
    3600:	d301      	bcc.n	3606 <__udivsi3+0x46>
    3602:	03cb      	lsls	r3, r1, #15
    3604:	1ac0      	subs	r0, r0, r3
    3606:	4152      	adcs	r2, r2
    3608:	0b83      	lsrs	r3, r0, #14
    360a:	428b      	cmp	r3, r1
    360c:	d301      	bcc.n	3612 <__udivsi3+0x52>
    360e:	038b      	lsls	r3, r1, #14
    3610:	1ac0      	subs	r0, r0, r3
    3612:	4152      	adcs	r2, r2
    3614:	0b43      	lsrs	r3, r0, #13
    3616:	428b      	cmp	r3, r1
    3618:	d301      	bcc.n	361e <__udivsi3+0x5e>
    361a:	034b      	lsls	r3, r1, #13
    361c:	1ac0      	subs	r0, r0, r3
    361e:	4152      	adcs	r2, r2
    3620:	0b03      	lsrs	r3, r0, #12
    3622:	428b      	cmp	r3, r1
    3624:	d301      	bcc.n	362a <__udivsi3+0x6a>
    3626:	030b      	lsls	r3, r1, #12
    3628:	1ac0      	subs	r0, r0, r3
    362a:	4152      	adcs	r2, r2
    362c:	0ac3      	lsrs	r3, r0, #11
    362e:	428b      	cmp	r3, r1
    3630:	d301      	bcc.n	3636 <__udivsi3+0x76>
    3632:	02cb      	lsls	r3, r1, #11
    3634:	1ac0      	subs	r0, r0, r3
    3636:	4152      	adcs	r2, r2
    3638:	0a83      	lsrs	r3, r0, #10
    363a:	428b      	cmp	r3, r1
    363c:	d301      	bcc.n	3642 <__udivsi3+0x82>
    363e:	028b      	lsls	r3, r1, #10
    3640:	1ac0      	subs	r0, r0, r3
    3642:	4152      	adcs	r2, r2
    3644:	0a43      	lsrs	r3, r0, #9
    3646:	428b      	cmp	r3, r1
    3648:	d301      	bcc.n	364e <__udivsi3+0x8e>
    364a:	024b      	lsls	r3, r1, #9
    364c:	1ac0      	subs	r0, r0, r3
    364e:	4152      	adcs	r2, r2
    3650:	0a03      	lsrs	r3, r0, #8
    3652:	428b      	cmp	r3, r1
    3654:	d301      	bcc.n	365a <__udivsi3+0x9a>
    3656:	020b      	lsls	r3, r1, #8
    3658:	1ac0      	subs	r0, r0, r3
    365a:	4152      	adcs	r2, r2
    365c:	d2cd      	bcs.n	35fa <__udivsi3+0x3a>
    365e:	09c3      	lsrs	r3, r0, #7
    3660:	428b      	cmp	r3, r1
    3662:	d301      	bcc.n	3668 <__udivsi3+0xa8>
    3664:	01cb      	lsls	r3, r1, #7
    3666:	1ac0      	subs	r0, r0, r3
    3668:	4152      	adcs	r2, r2
    366a:	0983      	lsrs	r3, r0, #6
    366c:	428b      	cmp	r3, r1
    366e:	d301      	bcc.n	3674 <__udivsi3+0xb4>
    3670:	018b      	lsls	r3, r1, #6
    3672:	1ac0      	subs	r0, r0, r3
    3674:	4152      	adcs	r2, r2
    3676:	0943      	lsrs	r3, r0, #5
    3678:	428b      	cmp	r3, r1
    367a:	d301      	bcc.n	3680 <__udivsi3+0xc0>
    367c:	014b      	lsls	r3, r1, #5
    367e:	1ac0      	subs	r0, r0, r3
    3680:	4152      	adcs	r2, r2
    3682:	0903      	lsrs	r3, r0, #4
    3684:	428b      	cmp	r3, r1
    3686:	d301      	bcc.n	368c <__udivsi3+0xcc>
    3688:	010b      	lsls	r3, r1, #4
    368a:	1ac0      	subs	r0, r0, r3
    368c:	4152      	adcs	r2, r2
    368e:	08c3      	lsrs	r3, r0, #3
    3690:	428b      	cmp	r3, r1
    3692:	d301      	bcc.n	3698 <__udivsi3+0xd8>
    3694:	00cb      	lsls	r3, r1, #3
    3696:	1ac0      	subs	r0, r0, r3
    3698:	4152      	adcs	r2, r2
    369a:	0883      	lsrs	r3, r0, #2
    369c:	428b      	cmp	r3, r1
    369e:	d301      	bcc.n	36a4 <__udivsi3+0xe4>
    36a0:	008b      	lsls	r3, r1, #2
    36a2:	1ac0      	subs	r0, r0, r3
    36a4:	4152      	adcs	r2, r2
    36a6:	0843      	lsrs	r3, r0, #1
    36a8:	428b      	cmp	r3, r1
    36aa:	d301      	bcc.n	36b0 <__udivsi3+0xf0>
    36ac:	004b      	lsls	r3, r1, #1
    36ae:	1ac0      	subs	r0, r0, r3
    36b0:	4152      	adcs	r2, r2
    36b2:	1a41      	subs	r1, r0, r1
    36b4:	d200      	bcs.n	36b8 <__udivsi3+0xf8>
    36b6:	4601      	mov	r1, r0
    36b8:	4152      	adcs	r2, r2
    36ba:	4610      	mov	r0, r2
    36bc:	4770      	bx	lr
    36be:	e7ff      	b.n	36c0 <__udivsi3+0x100>
    36c0:	b501      	push	{r0, lr}
    36c2:	2000      	movs	r0, #0
    36c4:	f000 f8f0 	bl	38a8 <__aeabi_idiv0>
    36c8:	bd02      	pop	{r1, pc}
    36ca:	46c0      	nop			; (mov r8, r8)

000036cc <__aeabi_uidivmod>:
    36cc:	2900      	cmp	r1, #0
    36ce:	d0f7      	beq.n	36c0 <__udivsi3+0x100>
    36d0:	e776      	b.n	35c0 <__udivsi3>
    36d2:	4770      	bx	lr

000036d4 <__divsi3>:
    36d4:	4603      	mov	r3, r0
    36d6:	430b      	orrs	r3, r1
    36d8:	d47f      	bmi.n	37da <__divsi3+0x106>
    36da:	2200      	movs	r2, #0
    36dc:	0843      	lsrs	r3, r0, #1
    36de:	428b      	cmp	r3, r1
    36e0:	d374      	bcc.n	37cc <__divsi3+0xf8>
    36e2:	0903      	lsrs	r3, r0, #4
    36e4:	428b      	cmp	r3, r1
    36e6:	d35f      	bcc.n	37a8 <__divsi3+0xd4>
    36e8:	0a03      	lsrs	r3, r0, #8
    36ea:	428b      	cmp	r3, r1
    36ec:	d344      	bcc.n	3778 <__divsi3+0xa4>
    36ee:	0b03      	lsrs	r3, r0, #12
    36f0:	428b      	cmp	r3, r1
    36f2:	d328      	bcc.n	3746 <__divsi3+0x72>
    36f4:	0c03      	lsrs	r3, r0, #16
    36f6:	428b      	cmp	r3, r1
    36f8:	d30d      	bcc.n	3716 <__divsi3+0x42>
    36fa:	22ff      	movs	r2, #255	; 0xff
    36fc:	0209      	lsls	r1, r1, #8
    36fe:	ba12      	rev	r2, r2
    3700:	0c03      	lsrs	r3, r0, #16
    3702:	428b      	cmp	r3, r1
    3704:	d302      	bcc.n	370c <__divsi3+0x38>
    3706:	1212      	asrs	r2, r2, #8
    3708:	0209      	lsls	r1, r1, #8
    370a:	d065      	beq.n	37d8 <__divsi3+0x104>
    370c:	0b03      	lsrs	r3, r0, #12
    370e:	428b      	cmp	r3, r1
    3710:	d319      	bcc.n	3746 <__divsi3+0x72>
    3712:	e000      	b.n	3716 <__divsi3+0x42>
    3714:	0a09      	lsrs	r1, r1, #8
    3716:	0bc3      	lsrs	r3, r0, #15
    3718:	428b      	cmp	r3, r1
    371a:	d301      	bcc.n	3720 <__divsi3+0x4c>
    371c:	03cb      	lsls	r3, r1, #15
    371e:	1ac0      	subs	r0, r0, r3
    3720:	4152      	adcs	r2, r2
    3722:	0b83      	lsrs	r3, r0, #14
    3724:	428b      	cmp	r3, r1
    3726:	d301      	bcc.n	372c <__divsi3+0x58>
    3728:	038b      	lsls	r3, r1, #14
    372a:	1ac0      	subs	r0, r0, r3
    372c:	4152      	adcs	r2, r2
    372e:	0b43      	lsrs	r3, r0, #13
    3730:	428b      	cmp	r3, r1
    3732:	d301      	bcc.n	3738 <__divsi3+0x64>
    3734:	034b      	lsls	r3, r1, #13
    3736:	1ac0      	subs	r0, r0, r3
    3738:	4152      	adcs	r2, r2
    373a:	0b03      	lsrs	r3, r0, #12
    373c:	428b      	cmp	r3, r1
    373e:	d301      	bcc.n	3744 <__divsi3+0x70>
    3740:	030b      	lsls	r3, r1, #12
    3742:	1ac0      	subs	r0, r0, r3
    3744:	4152      	adcs	r2, r2
    3746:	0ac3      	lsrs	r3, r0, #11
    3748:	428b      	cmp	r3, r1
    374a:	d301      	bcc.n	3750 <__divsi3+0x7c>
    374c:	02cb      	lsls	r3, r1, #11
    374e:	1ac0      	subs	r0, r0, r3
    3750:	4152      	adcs	r2, r2
    3752:	0a83      	lsrs	r3, r0, #10
    3754:	428b      	cmp	r3, r1
    3756:	d301      	bcc.n	375c <__divsi3+0x88>
    3758:	028b      	lsls	r3, r1, #10
    375a:	1ac0      	subs	r0, r0, r3
    375c:	4152      	adcs	r2, r2
    375e:	0a43      	lsrs	r3, r0, #9
    3760:	428b      	cmp	r3, r1
    3762:	d301      	bcc.n	3768 <__divsi3+0x94>
    3764:	024b      	lsls	r3, r1, #9
    3766:	1ac0      	subs	r0, r0, r3
    3768:	4152      	adcs	r2, r2
    376a:	0a03      	lsrs	r3, r0, #8
    376c:	428b      	cmp	r3, r1
    376e:	d301      	bcc.n	3774 <__divsi3+0xa0>
    3770:	020b      	lsls	r3, r1, #8
    3772:	1ac0      	subs	r0, r0, r3
    3774:	4152      	adcs	r2, r2
    3776:	d2cd      	bcs.n	3714 <__divsi3+0x40>
    3778:	09c3      	lsrs	r3, r0, #7
    377a:	428b      	cmp	r3, r1
    377c:	d301      	bcc.n	3782 <__divsi3+0xae>
    377e:	01cb      	lsls	r3, r1, #7
    3780:	1ac0      	subs	r0, r0, r3
    3782:	4152      	adcs	r2, r2
    3784:	0983      	lsrs	r3, r0, #6
    3786:	428b      	cmp	r3, r1
    3788:	d301      	bcc.n	378e <__divsi3+0xba>
    378a:	018b      	lsls	r3, r1, #6
    378c:	1ac0      	subs	r0, r0, r3
    378e:	4152      	adcs	r2, r2
    3790:	0943      	lsrs	r3, r0, #5
    3792:	428b      	cmp	r3, r1
    3794:	d301      	bcc.n	379a <__divsi3+0xc6>
    3796:	014b      	lsls	r3, r1, #5
    3798:	1ac0      	subs	r0, r0, r3
    379a:	4152      	adcs	r2, r2
    379c:	0903      	lsrs	r3, r0, #4
    379e:	428b      	cmp	r3, r1
    37a0:	d301      	bcc.n	37a6 <__divsi3+0xd2>
    37a2:	010b      	lsls	r3, r1, #4
    37a4:	1ac0      	subs	r0, r0, r3
    37a6:	4152      	adcs	r2, r2
    37a8:	08c3      	lsrs	r3, r0, #3
    37aa:	428b      	cmp	r3, r1
    37ac:	d301      	bcc.n	37b2 <__divsi3+0xde>
    37ae:	00cb      	lsls	r3, r1, #3
    37b0:	1ac0      	subs	r0, r0, r3
    37b2:	4152      	adcs	r2, r2
    37b4:	0883      	lsrs	r3, r0, #2
    37b6:	428b      	cmp	r3, r1
    37b8:	d301      	bcc.n	37be <__divsi3+0xea>
    37ba:	008b      	lsls	r3, r1, #2
    37bc:	1ac0      	subs	r0, r0, r3
    37be:	4152      	adcs	r2, r2
    37c0:	0843      	lsrs	r3, r0, #1
    37c2:	428b      	cmp	r3, r1
    37c4:	d301      	bcc.n	37ca <__divsi3+0xf6>
    37c6:	004b      	lsls	r3, r1, #1
    37c8:	1ac0      	subs	r0, r0, r3
    37ca:	4152      	adcs	r2, r2
    37cc:	1a41      	subs	r1, r0, r1
    37ce:	d200      	bcs.n	37d2 <__divsi3+0xfe>
    37d0:	4601      	mov	r1, r0
    37d2:	4152      	adcs	r2, r2
    37d4:	4610      	mov	r0, r2
    37d6:	4770      	bx	lr
    37d8:	e05d      	b.n	3896 <__divsi3+0x1c2>
    37da:	0fca      	lsrs	r2, r1, #31
    37dc:	d000      	beq.n	37e0 <__divsi3+0x10c>
    37de:	4249      	negs	r1, r1
    37e0:	1003      	asrs	r3, r0, #32
    37e2:	d300      	bcc.n	37e6 <__divsi3+0x112>
    37e4:	4240      	negs	r0, r0
    37e6:	4053      	eors	r3, r2
    37e8:	2200      	movs	r2, #0
    37ea:	469c      	mov	ip, r3
    37ec:	0903      	lsrs	r3, r0, #4
    37ee:	428b      	cmp	r3, r1
    37f0:	d32d      	bcc.n	384e <__divsi3+0x17a>
    37f2:	0a03      	lsrs	r3, r0, #8
    37f4:	428b      	cmp	r3, r1
    37f6:	d312      	bcc.n	381e <__divsi3+0x14a>
    37f8:	22fc      	movs	r2, #252	; 0xfc
    37fa:	0189      	lsls	r1, r1, #6
    37fc:	ba12      	rev	r2, r2
    37fe:	0a03      	lsrs	r3, r0, #8
    3800:	428b      	cmp	r3, r1
    3802:	d30c      	bcc.n	381e <__divsi3+0x14a>
    3804:	0189      	lsls	r1, r1, #6
    3806:	1192      	asrs	r2, r2, #6
    3808:	428b      	cmp	r3, r1
    380a:	d308      	bcc.n	381e <__divsi3+0x14a>
    380c:	0189      	lsls	r1, r1, #6
    380e:	1192      	asrs	r2, r2, #6
    3810:	428b      	cmp	r3, r1
    3812:	d304      	bcc.n	381e <__divsi3+0x14a>
    3814:	0189      	lsls	r1, r1, #6
    3816:	d03a      	beq.n	388e <__divsi3+0x1ba>
    3818:	1192      	asrs	r2, r2, #6
    381a:	e000      	b.n	381e <__divsi3+0x14a>
    381c:	0989      	lsrs	r1, r1, #6
    381e:	09c3      	lsrs	r3, r0, #7
    3820:	428b      	cmp	r3, r1
    3822:	d301      	bcc.n	3828 <__divsi3+0x154>
    3824:	01cb      	lsls	r3, r1, #7
    3826:	1ac0      	subs	r0, r0, r3
    3828:	4152      	adcs	r2, r2
    382a:	0983      	lsrs	r3, r0, #6
    382c:	428b      	cmp	r3, r1
    382e:	d301      	bcc.n	3834 <__divsi3+0x160>
    3830:	018b      	lsls	r3, r1, #6
    3832:	1ac0      	subs	r0, r0, r3
    3834:	4152      	adcs	r2, r2
    3836:	0943      	lsrs	r3, r0, #5
    3838:	428b      	cmp	r3, r1
    383a:	d301      	bcc.n	3840 <__divsi3+0x16c>
    383c:	014b      	lsls	r3, r1, #5
    383e:	1ac0      	subs	r0, r0, r3
    3840:	4152      	adcs	r2, r2
    3842:	0903      	lsrs	r3, r0, #4
    3844:	428b      	cmp	r3, r1
    3846:	d301      	bcc.n	384c <__divsi3+0x178>
    3848:	010b      	lsls	r3, r1, #4
    384a:	1ac0      	subs	r0, r0, r3
    384c:	4152      	adcs	r2, r2
    384e:	08c3      	lsrs	r3, r0, #3
    3850:	428b      	cmp	r3, r1
    3852:	d301      	bcc.n	3858 <__divsi3+0x184>
    3854:	00cb      	lsls	r3, r1, #3
    3856:	1ac0      	subs	r0, r0, r3
    3858:	4152      	adcs	r2, r2
    385a:	0883      	lsrs	r3, r0, #2
    385c:	428b      	cmp	r3, r1
    385e:	d301      	bcc.n	3864 <__divsi3+0x190>
    3860:	008b      	lsls	r3, r1, #2
    3862:	1ac0      	subs	r0, r0, r3
    3864:	4152      	adcs	r2, r2
    3866:	d2d9      	bcs.n	381c <__divsi3+0x148>
    3868:	0843      	lsrs	r3, r0, #1
    386a:	428b      	cmp	r3, r1
    386c:	d301      	bcc.n	3872 <__divsi3+0x19e>
    386e:	004b      	lsls	r3, r1, #1
    3870:	1ac0      	subs	r0, r0, r3
    3872:	4152      	adcs	r2, r2
    3874:	1a41      	subs	r1, r0, r1
    3876:	d200      	bcs.n	387a <__divsi3+0x1a6>
    3878:	4601      	mov	r1, r0
    387a:	4663      	mov	r3, ip
    387c:	4152      	adcs	r2, r2
    387e:	105b      	asrs	r3, r3, #1
    3880:	4610      	mov	r0, r2
    3882:	d301      	bcc.n	3888 <__divsi3+0x1b4>
    3884:	4240      	negs	r0, r0
    3886:	2b00      	cmp	r3, #0
    3888:	d500      	bpl.n	388c <__divsi3+0x1b8>
    388a:	4249      	negs	r1, r1
    388c:	4770      	bx	lr
    388e:	4663      	mov	r3, ip
    3890:	105b      	asrs	r3, r3, #1
    3892:	d300      	bcc.n	3896 <__divsi3+0x1c2>
    3894:	4240      	negs	r0, r0
    3896:	b501      	push	{r0, lr}
    3898:	2000      	movs	r0, #0
    389a:	f000 f805 	bl	38a8 <__aeabi_idiv0>
    389e:	bd02      	pop	{r1, pc}

000038a0 <__aeabi_idivmod>:
    38a0:	2900      	cmp	r1, #0
    38a2:	d0f8      	beq.n	3896 <__divsi3+0x1c2>
    38a4:	e716      	b.n	36d4 <__divsi3>
    38a6:	4770      	bx	lr

000038a8 <__aeabi_idiv0>:
    38a8:	4770      	bx	lr
    38aa:	46c0      	nop			; (mov r8, r8)

000038ac <__aeabi_f2uiz>:
    38ac:	219e      	movs	r1, #158	; 0x9e
    38ae:	b510      	push	{r4, lr}
    38b0:	05c9      	lsls	r1, r1, #23
    38b2:	1c04      	adds	r4, r0, #0
    38b4:	f000 fcac 	bl	4210 <__aeabi_fcmpge>
    38b8:	2800      	cmp	r0, #0
    38ba:	d103      	bne.n	38c4 <__aeabi_f2uiz+0x18>
    38bc:	1c20      	adds	r0, r4, #0
    38be:	f000 fc11 	bl	40e4 <__aeabi_f2iz>
    38c2:	bd10      	pop	{r4, pc}
    38c4:	219e      	movs	r1, #158	; 0x9e
    38c6:	1c20      	adds	r0, r4, #0
    38c8:	05c9      	lsls	r1, r1, #23
    38ca:	f000 fa6f 	bl	3dac <__aeabi_fsub>
    38ce:	f000 fc09 	bl	40e4 <__aeabi_f2iz>
    38d2:	2380      	movs	r3, #128	; 0x80
    38d4:	061b      	lsls	r3, r3, #24
    38d6:	469c      	mov	ip, r3
    38d8:	4460      	add	r0, ip
    38da:	e7f2      	b.n	38c2 <__aeabi_f2uiz+0x16>

000038dc <__aeabi_fdiv>:
    38dc:	b5f0      	push	{r4, r5, r6, r7, lr}
    38de:	4657      	mov	r7, sl
    38e0:	464e      	mov	r6, r9
    38e2:	46de      	mov	lr, fp
    38e4:	4645      	mov	r5, r8
    38e6:	b5e0      	push	{r5, r6, r7, lr}
    38e8:	0244      	lsls	r4, r0, #9
    38ea:	0043      	lsls	r3, r0, #1
    38ec:	0fc6      	lsrs	r6, r0, #31
    38ee:	b083      	sub	sp, #12
    38f0:	1c0f      	adds	r7, r1, #0
    38f2:	0a64      	lsrs	r4, r4, #9
    38f4:	0e1b      	lsrs	r3, r3, #24
    38f6:	46b2      	mov	sl, r6
    38f8:	d053      	beq.n	39a2 <__aeabi_fdiv+0xc6>
    38fa:	2bff      	cmp	r3, #255	; 0xff
    38fc:	d027      	beq.n	394e <__aeabi_fdiv+0x72>
    38fe:	2280      	movs	r2, #128	; 0x80
    3900:	00e4      	lsls	r4, r4, #3
    3902:	04d2      	lsls	r2, r2, #19
    3904:	4314      	orrs	r4, r2
    3906:	227f      	movs	r2, #127	; 0x7f
    3908:	4252      	negs	r2, r2
    390a:	4690      	mov	r8, r2
    390c:	4498      	add	r8, r3
    390e:	2300      	movs	r3, #0
    3910:	4699      	mov	r9, r3
    3912:	469b      	mov	fp, r3
    3914:	027d      	lsls	r5, r7, #9
    3916:	0078      	lsls	r0, r7, #1
    3918:	0ffb      	lsrs	r3, r7, #31
    391a:	0a6d      	lsrs	r5, r5, #9
    391c:	0e00      	lsrs	r0, r0, #24
    391e:	9300      	str	r3, [sp, #0]
    3920:	d024      	beq.n	396c <__aeabi_fdiv+0x90>
    3922:	28ff      	cmp	r0, #255	; 0xff
    3924:	d046      	beq.n	39b4 <__aeabi_fdiv+0xd8>
    3926:	2380      	movs	r3, #128	; 0x80
    3928:	2100      	movs	r1, #0
    392a:	00ed      	lsls	r5, r5, #3
    392c:	04db      	lsls	r3, r3, #19
    392e:	431d      	orrs	r5, r3
    3930:	387f      	subs	r0, #127	; 0x7f
    3932:	4647      	mov	r7, r8
    3934:	1a38      	subs	r0, r7, r0
    3936:	464f      	mov	r7, r9
    3938:	430f      	orrs	r7, r1
    393a:	00bf      	lsls	r7, r7, #2
    393c:	46b9      	mov	r9, r7
    393e:	0033      	movs	r3, r6
    3940:	9a00      	ldr	r2, [sp, #0]
    3942:	4f87      	ldr	r7, [pc, #540]	; (3b60 <__aeabi_fdiv+0x284>)
    3944:	4053      	eors	r3, r2
    3946:	464a      	mov	r2, r9
    3948:	58ba      	ldr	r2, [r7, r2]
    394a:	9301      	str	r3, [sp, #4]
    394c:	4697      	mov	pc, r2
    394e:	2c00      	cmp	r4, #0
    3950:	d14e      	bne.n	39f0 <__aeabi_fdiv+0x114>
    3952:	2308      	movs	r3, #8
    3954:	4699      	mov	r9, r3
    3956:	33f7      	adds	r3, #247	; 0xf7
    3958:	4698      	mov	r8, r3
    395a:	3bfd      	subs	r3, #253	; 0xfd
    395c:	469b      	mov	fp, r3
    395e:	027d      	lsls	r5, r7, #9
    3960:	0078      	lsls	r0, r7, #1
    3962:	0ffb      	lsrs	r3, r7, #31
    3964:	0a6d      	lsrs	r5, r5, #9
    3966:	0e00      	lsrs	r0, r0, #24
    3968:	9300      	str	r3, [sp, #0]
    396a:	d1da      	bne.n	3922 <__aeabi_fdiv+0x46>
    396c:	2d00      	cmp	r5, #0
    396e:	d126      	bne.n	39be <__aeabi_fdiv+0xe2>
    3970:	2000      	movs	r0, #0
    3972:	2101      	movs	r1, #1
    3974:	0033      	movs	r3, r6
    3976:	9a00      	ldr	r2, [sp, #0]
    3978:	4f7a      	ldr	r7, [pc, #488]	; (3b64 <__aeabi_fdiv+0x288>)
    397a:	4053      	eors	r3, r2
    397c:	4642      	mov	r2, r8
    397e:	1a10      	subs	r0, r2, r0
    3980:	464a      	mov	r2, r9
    3982:	430a      	orrs	r2, r1
    3984:	0092      	lsls	r2, r2, #2
    3986:	58ba      	ldr	r2, [r7, r2]
    3988:	001d      	movs	r5, r3
    398a:	4697      	mov	pc, r2
    398c:	9b00      	ldr	r3, [sp, #0]
    398e:	002c      	movs	r4, r5
    3990:	469a      	mov	sl, r3
    3992:	468b      	mov	fp, r1
    3994:	465b      	mov	r3, fp
    3996:	2b02      	cmp	r3, #2
    3998:	d131      	bne.n	39fe <__aeabi_fdiv+0x122>
    399a:	4653      	mov	r3, sl
    399c:	21ff      	movs	r1, #255	; 0xff
    399e:	2400      	movs	r4, #0
    39a0:	e038      	b.n	3a14 <__aeabi_fdiv+0x138>
    39a2:	2c00      	cmp	r4, #0
    39a4:	d117      	bne.n	39d6 <__aeabi_fdiv+0xfa>
    39a6:	2304      	movs	r3, #4
    39a8:	4699      	mov	r9, r3
    39aa:	2300      	movs	r3, #0
    39ac:	4698      	mov	r8, r3
    39ae:	3301      	adds	r3, #1
    39b0:	469b      	mov	fp, r3
    39b2:	e7af      	b.n	3914 <__aeabi_fdiv+0x38>
    39b4:	20ff      	movs	r0, #255	; 0xff
    39b6:	2d00      	cmp	r5, #0
    39b8:	d10b      	bne.n	39d2 <__aeabi_fdiv+0xf6>
    39ba:	2102      	movs	r1, #2
    39bc:	e7da      	b.n	3974 <__aeabi_fdiv+0x98>
    39be:	0028      	movs	r0, r5
    39c0:	f000 fc30 	bl	4224 <__clzsi2>
    39c4:	1f43      	subs	r3, r0, #5
    39c6:	409d      	lsls	r5, r3
    39c8:	2376      	movs	r3, #118	; 0x76
    39ca:	425b      	negs	r3, r3
    39cc:	1a18      	subs	r0, r3, r0
    39ce:	2100      	movs	r1, #0
    39d0:	e7af      	b.n	3932 <__aeabi_fdiv+0x56>
    39d2:	2103      	movs	r1, #3
    39d4:	e7ad      	b.n	3932 <__aeabi_fdiv+0x56>
    39d6:	0020      	movs	r0, r4
    39d8:	f000 fc24 	bl	4224 <__clzsi2>
    39dc:	1f43      	subs	r3, r0, #5
    39de:	409c      	lsls	r4, r3
    39e0:	2376      	movs	r3, #118	; 0x76
    39e2:	425b      	negs	r3, r3
    39e4:	1a1b      	subs	r3, r3, r0
    39e6:	4698      	mov	r8, r3
    39e8:	2300      	movs	r3, #0
    39ea:	4699      	mov	r9, r3
    39ec:	469b      	mov	fp, r3
    39ee:	e791      	b.n	3914 <__aeabi_fdiv+0x38>
    39f0:	230c      	movs	r3, #12
    39f2:	4699      	mov	r9, r3
    39f4:	33f3      	adds	r3, #243	; 0xf3
    39f6:	4698      	mov	r8, r3
    39f8:	3bfc      	subs	r3, #252	; 0xfc
    39fa:	469b      	mov	fp, r3
    39fc:	e78a      	b.n	3914 <__aeabi_fdiv+0x38>
    39fe:	2b03      	cmp	r3, #3
    3a00:	d100      	bne.n	3a04 <__aeabi_fdiv+0x128>
    3a02:	e0a5      	b.n	3b50 <__aeabi_fdiv+0x274>
    3a04:	4655      	mov	r5, sl
    3a06:	2b01      	cmp	r3, #1
    3a08:	d000      	beq.n	3a0c <__aeabi_fdiv+0x130>
    3a0a:	e081      	b.n	3b10 <__aeabi_fdiv+0x234>
    3a0c:	2301      	movs	r3, #1
    3a0e:	2100      	movs	r1, #0
    3a10:	2400      	movs	r4, #0
    3a12:	402b      	ands	r3, r5
    3a14:	0264      	lsls	r4, r4, #9
    3a16:	05c9      	lsls	r1, r1, #23
    3a18:	0a60      	lsrs	r0, r4, #9
    3a1a:	07db      	lsls	r3, r3, #31
    3a1c:	4308      	orrs	r0, r1
    3a1e:	4318      	orrs	r0, r3
    3a20:	b003      	add	sp, #12
    3a22:	bc3c      	pop	{r2, r3, r4, r5}
    3a24:	4690      	mov	r8, r2
    3a26:	4699      	mov	r9, r3
    3a28:	46a2      	mov	sl, r4
    3a2a:	46ab      	mov	fp, r5
    3a2c:	bdf0      	pop	{r4, r5, r6, r7, pc}
    3a2e:	2480      	movs	r4, #128	; 0x80
    3a30:	2300      	movs	r3, #0
    3a32:	03e4      	lsls	r4, r4, #15
    3a34:	21ff      	movs	r1, #255	; 0xff
    3a36:	e7ed      	b.n	3a14 <__aeabi_fdiv+0x138>
    3a38:	21ff      	movs	r1, #255	; 0xff
    3a3a:	2400      	movs	r4, #0
    3a3c:	e7ea      	b.n	3a14 <__aeabi_fdiv+0x138>
    3a3e:	2301      	movs	r3, #1
    3a40:	1a59      	subs	r1, r3, r1
    3a42:	291b      	cmp	r1, #27
    3a44:	dd66      	ble.n	3b14 <__aeabi_fdiv+0x238>
    3a46:	9a01      	ldr	r2, [sp, #4]
    3a48:	4013      	ands	r3, r2
    3a4a:	2100      	movs	r1, #0
    3a4c:	2400      	movs	r4, #0
    3a4e:	e7e1      	b.n	3a14 <__aeabi_fdiv+0x138>
    3a50:	2380      	movs	r3, #128	; 0x80
    3a52:	03db      	lsls	r3, r3, #15
    3a54:	421c      	tst	r4, r3
    3a56:	d038      	beq.n	3aca <__aeabi_fdiv+0x1ee>
    3a58:	421d      	tst	r5, r3
    3a5a:	d051      	beq.n	3b00 <__aeabi_fdiv+0x224>
    3a5c:	431c      	orrs	r4, r3
    3a5e:	0264      	lsls	r4, r4, #9
    3a60:	0a64      	lsrs	r4, r4, #9
    3a62:	0033      	movs	r3, r6
    3a64:	21ff      	movs	r1, #255	; 0xff
    3a66:	e7d5      	b.n	3a14 <__aeabi_fdiv+0x138>
    3a68:	0163      	lsls	r3, r4, #5
    3a6a:	016c      	lsls	r4, r5, #5
    3a6c:	42a3      	cmp	r3, r4
    3a6e:	d23b      	bcs.n	3ae8 <__aeabi_fdiv+0x20c>
    3a70:	261b      	movs	r6, #27
    3a72:	2100      	movs	r1, #0
    3a74:	3801      	subs	r0, #1
    3a76:	2501      	movs	r5, #1
    3a78:	001f      	movs	r7, r3
    3a7a:	0049      	lsls	r1, r1, #1
    3a7c:	005b      	lsls	r3, r3, #1
    3a7e:	2f00      	cmp	r7, #0
    3a80:	db01      	blt.n	3a86 <__aeabi_fdiv+0x1aa>
    3a82:	429c      	cmp	r4, r3
    3a84:	d801      	bhi.n	3a8a <__aeabi_fdiv+0x1ae>
    3a86:	1b1b      	subs	r3, r3, r4
    3a88:	4329      	orrs	r1, r5
    3a8a:	3e01      	subs	r6, #1
    3a8c:	2e00      	cmp	r6, #0
    3a8e:	d1f3      	bne.n	3a78 <__aeabi_fdiv+0x19c>
    3a90:	001c      	movs	r4, r3
    3a92:	1e63      	subs	r3, r4, #1
    3a94:	419c      	sbcs	r4, r3
    3a96:	430c      	orrs	r4, r1
    3a98:	0001      	movs	r1, r0
    3a9a:	317f      	adds	r1, #127	; 0x7f
    3a9c:	2900      	cmp	r1, #0
    3a9e:	ddce      	ble.n	3a3e <__aeabi_fdiv+0x162>
    3aa0:	0763      	lsls	r3, r4, #29
    3aa2:	d004      	beq.n	3aae <__aeabi_fdiv+0x1d2>
    3aa4:	230f      	movs	r3, #15
    3aa6:	4023      	ands	r3, r4
    3aa8:	2b04      	cmp	r3, #4
    3aaa:	d000      	beq.n	3aae <__aeabi_fdiv+0x1d2>
    3aac:	3404      	adds	r4, #4
    3aae:	0123      	lsls	r3, r4, #4
    3ab0:	d503      	bpl.n	3aba <__aeabi_fdiv+0x1de>
    3ab2:	0001      	movs	r1, r0
    3ab4:	4b2c      	ldr	r3, [pc, #176]	; (3b68 <__aeabi_fdiv+0x28c>)
    3ab6:	3180      	adds	r1, #128	; 0x80
    3ab8:	401c      	ands	r4, r3
    3aba:	29fe      	cmp	r1, #254	; 0xfe
    3abc:	dd0d      	ble.n	3ada <__aeabi_fdiv+0x1fe>
    3abe:	2301      	movs	r3, #1
    3ac0:	9a01      	ldr	r2, [sp, #4]
    3ac2:	21ff      	movs	r1, #255	; 0xff
    3ac4:	4013      	ands	r3, r2
    3ac6:	2400      	movs	r4, #0
    3ac8:	e7a4      	b.n	3a14 <__aeabi_fdiv+0x138>
    3aca:	2380      	movs	r3, #128	; 0x80
    3acc:	03db      	lsls	r3, r3, #15
    3ace:	431c      	orrs	r4, r3
    3ad0:	0264      	lsls	r4, r4, #9
    3ad2:	0a64      	lsrs	r4, r4, #9
    3ad4:	0033      	movs	r3, r6
    3ad6:	21ff      	movs	r1, #255	; 0xff
    3ad8:	e79c      	b.n	3a14 <__aeabi_fdiv+0x138>
    3ada:	2301      	movs	r3, #1
    3adc:	9a01      	ldr	r2, [sp, #4]
    3ade:	01a4      	lsls	r4, r4, #6
    3ae0:	0a64      	lsrs	r4, r4, #9
    3ae2:	b2c9      	uxtb	r1, r1
    3ae4:	4013      	ands	r3, r2
    3ae6:	e795      	b.n	3a14 <__aeabi_fdiv+0x138>
    3ae8:	1b1b      	subs	r3, r3, r4
    3aea:	261a      	movs	r6, #26
    3aec:	2101      	movs	r1, #1
    3aee:	e7c2      	b.n	3a76 <__aeabi_fdiv+0x19a>
    3af0:	9b00      	ldr	r3, [sp, #0]
    3af2:	468b      	mov	fp, r1
    3af4:	469a      	mov	sl, r3
    3af6:	2400      	movs	r4, #0
    3af8:	e74c      	b.n	3994 <__aeabi_fdiv+0xb8>
    3afa:	0263      	lsls	r3, r4, #9
    3afc:	d5e5      	bpl.n	3aca <__aeabi_fdiv+0x1ee>
    3afe:	2500      	movs	r5, #0
    3b00:	2480      	movs	r4, #128	; 0x80
    3b02:	03e4      	lsls	r4, r4, #15
    3b04:	432c      	orrs	r4, r5
    3b06:	0264      	lsls	r4, r4, #9
    3b08:	0a64      	lsrs	r4, r4, #9
    3b0a:	9b00      	ldr	r3, [sp, #0]
    3b0c:	21ff      	movs	r1, #255	; 0xff
    3b0e:	e781      	b.n	3a14 <__aeabi_fdiv+0x138>
    3b10:	9501      	str	r5, [sp, #4]
    3b12:	e7c1      	b.n	3a98 <__aeabi_fdiv+0x1bc>
    3b14:	0023      	movs	r3, r4
    3b16:	2020      	movs	r0, #32
    3b18:	40cb      	lsrs	r3, r1
    3b1a:	1a41      	subs	r1, r0, r1
    3b1c:	408c      	lsls	r4, r1
    3b1e:	1e61      	subs	r1, r4, #1
    3b20:	418c      	sbcs	r4, r1
    3b22:	431c      	orrs	r4, r3
    3b24:	0763      	lsls	r3, r4, #29
    3b26:	d004      	beq.n	3b32 <__aeabi_fdiv+0x256>
    3b28:	230f      	movs	r3, #15
    3b2a:	4023      	ands	r3, r4
    3b2c:	2b04      	cmp	r3, #4
    3b2e:	d000      	beq.n	3b32 <__aeabi_fdiv+0x256>
    3b30:	3404      	adds	r4, #4
    3b32:	0163      	lsls	r3, r4, #5
    3b34:	d505      	bpl.n	3b42 <__aeabi_fdiv+0x266>
    3b36:	2301      	movs	r3, #1
    3b38:	9a01      	ldr	r2, [sp, #4]
    3b3a:	2101      	movs	r1, #1
    3b3c:	4013      	ands	r3, r2
    3b3e:	2400      	movs	r4, #0
    3b40:	e768      	b.n	3a14 <__aeabi_fdiv+0x138>
    3b42:	2301      	movs	r3, #1
    3b44:	9a01      	ldr	r2, [sp, #4]
    3b46:	01a4      	lsls	r4, r4, #6
    3b48:	0a64      	lsrs	r4, r4, #9
    3b4a:	4013      	ands	r3, r2
    3b4c:	2100      	movs	r1, #0
    3b4e:	e761      	b.n	3a14 <__aeabi_fdiv+0x138>
    3b50:	2380      	movs	r3, #128	; 0x80
    3b52:	03db      	lsls	r3, r3, #15
    3b54:	431c      	orrs	r4, r3
    3b56:	0264      	lsls	r4, r4, #9
    3b58:	0a64      	lsrs	r4, r4, #9
    3b5a:	4653      	mov	r3, sl
    3b5c:	21ff      	movs	r1, #255	; 0xff
    3b5e:	e759      	b.n	3a14 <__aeabi_fdiv+0x138>
    3b60:	00005c10 	.word	0x00005c10
    3b64:	00005c50 	.word	0x00005c50
    3b68:	f7ffffff 	.word	0xf7ffffff

00003b6c <__aeabi_fmul>:
    3b6c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    3b6e:	4657      	mov	r7, sl
    3b70:	464e      	mov	r6, r9
    3b72:	4645      	mov	r5, r8
    3b74:	46de      	mov	lr, fp
    3b76:	b5e0      	push	{r5, r6, r7, lr}
    3b78:	0247      	lsls	r7, r0, #9
    3b7a:	0046      	lsls	r6, r0, #1
    3b7c:	4688      	mov	r8, r1
    3b7e:	0a7f      	lsrs	r7, r7, #9
    3b80:	0e36      	lsrs	r6, r6, #24
    3b82:	0fc4      	lsrs	r4, r0, #31
    3b84:	2e00      	cmp	r6, #0
    3b86:	d047      	beq.n	3c18 <__aeabi_fmul+0xac>
    3b88:	2eff      	cmp	r6, #255	; 0xff
    3b8a:	d024      	beq.n	3bd6 <__aeabi_fmul+0x6a>
    3b8c:	00fb      	lsls	r3, r7, #3
    3b8e:	2780      	movs	r7, #128	; 0x80
    3b90:	04ff      	lsls	r7, r7, #19
    3b92:	431f      	orrs	r7, r3
    3b94:	2300      	movs	r3, #0
    3b96:	4699      	mov	r9, r3
    3b98:	469a      	mov	sl, r3
    3b9a:	3e7f      	subs	r6, #127	; 0x7f
    3b9c:	4643      	mov	r3, r8
    3b9e:	025d      	lsls	r5, r3, #9
    3ba0:	0058      	lsls	r0, r3, #1
    3ba2:	0fdb      	lsrs	r3, r3, #31
    3ba4:	0a6d      	lsrs	r5, r5, #9
    3ba6:	0e00      	lsrs	r0, r0, #24
    3ba8:	4698      	mov	r8, r3
    3baa:	d043      	beq.n	3c34 <__aeabi_fmul+0xc8>
    3bac:	28ff      	cmp	r0, #255	; 0xff
    3bae:	d03b      	beq.n	3c28 <__aeabi_fmul+0xbc>
    3bb0:	00eb      	lsls	r3, r5, #3
    3bb2:	2580      	movs	r5, #128	; 0x80
    3bb4:	2200      	movs	r2, #0
    3bb6:	04ed      	lsls	r5, r5, #19
    3bb8:	431d      	orrs	r5, r3
    3bba:	387f      	subs	r0, #127	; 0x7f
    3bbc:	1836      	adds	r6, r6, r0
    3bbe:	1c73      	adds	r3, r6, #1
    3bc0:	4641      	mov	r1, r8
    3bc2:	469b      	mov	fp, r3
    3bc4:	464b      	mov	r3, r9
    3bc6:	4061      	eors	r1, r4
    3bc8:	4313      	orrs	r3, r2
    3bca:	2b0f      	cmp	r3, #15
    3bcc:	d864      	bhi.n	3c98 <__aeabi_fmul+0x12c>
    3bce:	4875      	ldr	r0, [pc, #468]	; (3da4 <__aeabi_fmul+0x238>)
    3bd0:	009b      	lsls	r3, r3, #2
    3bd2:	58c3      	ldr	r3, [r0, r3]
    3bd4:	469f      	mov	pc, r3
    3bd6:	2f00      	cmp	r7, #0
    3bd8:	d142      	bne.n	3c60 <__aeabi_fmul+0xf4>
    3bda:	2308      	movs	r3, #8
    3bdc:	4699      	mov	r9, r3
    3bde:	3b06      	subs	r3, #6
    3be0:	26ff      	movs	r6, #255	; 0xff
    3be2:	469a      	mov	sl, r3
    3be4:	e7da      	b.n	3b9c <__aeabi_fmul+0x30>
    3be6:	4641      	mov	r1, r8
    3be8:	2a02      	cmp	r2, #2
    3bea:	d028      	beq.n	3c3e <__aeabi_fmul+0xd2>
    3bec:	2a03      	cmp	r2, #3
    3bee:	d100      	bne.n	3bf2 <__aeabi_fmul+0x86>
    3bf0:	e0ce      	b.n	3d90 <__aeabi_fmul+0x224>
    3bf2:	2a01      	cmp	r2, #1
    3bf4:	d000      	beq.n	3bf8 <__aeabi_fmul+0x8c>
    3bf6:	e0ac      	b.n	3d52 <__aeabi_fmul+0x1e6>
    3bf8:	4011      	ands	r1, r2
    3bfa:	2000      	movs	r0, #0
    3bfc:	2200      	movs	r2, #0
    3bfe:	b2cc      	uxtb	r4, r1
    3c00:	0240      	lsls	r0, r0, #9
    3c02:	05d2      	lsls	r2, r2, #23
    3c04:	0a40      	lsrs	r0, r0, #9
    3c06:	07e4      	lsls	r4, r4, #31
    3c08:	4310      	orrs	r0, r2
    3c0a:	4320      	orrs	r0, r4
    3c0c:	bc3c      	pop	{r2, r3, r4, r5}
    3c0e:	4690      	mov	r8, r2
    3c10:	4699      	mov	r9, r3
    3c12:	46a2      	mov	sl, r4
    3c14:	46ab      	mov	fp, r5
    3c16:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    3c18:	2f00      	cmp	r7, #0
    3c1a:	d115      	bne.n	3c48 <__aeabi_fmul+0xdc>
    3c1c:	2304      	movs	r3, #4
    3c1e:	4699      	mov	r9, r3
    3c20:	3b03      	subs	r3, #3
    3c22:	2600      	movs	r6, #0
    3c24:	469a      	mov	sl, r3
    3c26:	e7b9      	b.n	3b9c <__aeabi_fmul+0x30>
    3c28:	20ff      	movs	r0, #255	; 0xff
    3c2a:	2202      	movs	r2, #2
    3c2c:	2d00      	cmp	r5, #0
    3c2e:	d0c5      	beq.n	3bbc <__aeabi_fmul+0x50>
    3c30:	2203      	movs	r2, #3
    3c32:	e7c3      	b.n	3bbc <__aeabi_fmul+0x50>
    3c34:	2d00      	cmp	r5, #0
    3c36:	d119      	bne.n	3c6c <__aeabi_fmul+0x100>
    3c38:	2000      	movs	r0, #0
    3c3a:	2201      	movs	r2, #1
    3c3c:	e7be      	b.n	3bbc <__aeabi_fmul+0x50>
    3c3e:	2401      	movs	r4, #1
    3c40:	22ff      	movs	r2, #255	; 0xff
    3c42:	400c      	ands	r4, r1
    3c44:	2000      	movs	r0, #0
    3c46:	e7db      	b.n	3c00 <__aeabi_fmul+0x94>
    3c48:	0038      	movs	r0, r7
    3c4a:	f000 faeb 	bl	4224 <__clzsi2>
    3c4e:	2676      	movs	r6, #118	; 0x76
    3c50:	1f43      	subs	r3, r0, #5
    3c52:	409f      	lsls	r7, r3
    3c54:	2300      	movs	r3, #0
    3c56:	4276      	negs	r6, r6
    3c58:	1a36      	subs	r6, r6, r0
    3c5a:	4699      	mov	r9, r3
    3c5c:	469a      	mov	sl, r3
    3c5e:	e79d      	b.n	3b9c <__aeabi_fmul+0x30>
    3c60:	230c      	movs	r3, #12
    3c62:	4699      	mov	r9, r3
    3c64:	3b09      	subs	r3, #9
    3c66:	26ff      	movs	r6, #255	; 0xff
    3c68:	469a      	mov	sl, r3
    3c6a:	e797      	b.n	3b9c <__aeabi_fmul+0x30>
    3c6c:	0028      	movs	r0, r5
    3c6e:	f000 fad9 	bl	4224 <__clzsi2>
    3c72:	1f43      	subs	r3, r0, #5
    3c74:	409d      	lsls	r5, r3
    3c76:	2376      	movs	r3, #118	; 0x76
    3c78:	425b      	negs	r3, r3
    3c7a:	1a18      	subs	r0, r3, r0
    3c7c:	2200      	movs	r2, #0
    3c7e:	e79d      	b.n	3bbc <__aeabi_fmul+0x50>
    3c80:	2080      	movs	r0, #128	; 0x80
    3c82:	2400      	movs	r4, #0
    3c84:	03c0      	lsls	r0, r0, #15
    3c86:	22ff      	movs	r2, #255	; 0xff
    3c88:	e7ba      	b.n	3c00 <__aeabi_fmul+0x94>
    3c8a:	003d      	movs	r5, r7
    3c8c:	4652      	mov	r2, sl
    3c8e:	e7ab      	b.n	3be8 <__aeabi_fmul+0x7c>
    3c90:	003d      	movs	r5, r7
    3c92:	0021      	movs	r1, r4
    3c94:	4652      	mov	r2, sl
    3c96:	e7a7      	b.n	3be8 <__aeabi_fmul+0x7c>
    3c98:	0c3b      	lsrs	r3, r7, #16
    3c9a:	469c      	mov	ip, r3
    3c9c:	042a      	lsls	r2, r5, #16
    3c9e:	0c12      	lsrs	r2, r2, #16
    3ca0:	0c2b      	lsrs	r3, r5, #16
    3ca2:	0014      	movs	r4, r2
    3ca4:	4660      	mov	r0, ip
    3ca6:	4665      	mov	r5, ip
    3ca8:	043f      	lsls	r7, r7, #16
    3caa:	0c3f      	lsrs	r7, r7, #16
    3cac:	437c      	muls	r4, r7
    3cae:	4342      	muls	r2, r0
    3cb0:	435d      	muls	r5, r3
    3cb2:	437b      	muls	r3, r7
    3cb4:	0c27      	lsrs	r7, r4, #16
    3cb6:	189b      	adds	r3, r3, r2
    3cb8:	18ff      	adds	r7, r7, r3
    3cba:	42ba      	cmp	r2, r7
    3cbc:	d903      	bls.n	3cc6 <__aeabi_fmul+0x15a>
    3cbe:	2380      	movs	r3, #128	; 0x80
    3cc0:	025b      	lsls	r3, r3, #9
    3cc2:	469c      	mov	ip, r3
    3cc4:	4465      	add	r5, ip
    3cc6:	0424      	lsls	r4, r4, #16
    3cc8:	043a      	lsls	r2, r7, #16
    3cca:	0c24      	lsrs	r4, r4, #16
    3ccc:	1912      	adds	r2, r2, r4
    3cce:	0193      	lsls	r3, r2, #6
    3cd0:	1e5c      	subs	r4, r3, #1
    3cd2:	41a3      	sbcs	r3, r4
    3cd4:	0c3f      	lsrs	r7, r7, #16
    3cd6:	0e92      	lsrs	r2, r2, #26
    3cd8:	197d      	adds	r5, r7, r5
    3cda:	431a      	orrs	r2, r3
    3cdc:	01ad      	lsls	r5, r5, #6
    3cde:	4315      	orrs	r5, r2
    3ce0:	012b      	lsls	r3, r5, #4
    3ce2:	d504      	bpl.n	3cee <__aeabi_fmul+0x182>
    3ce4:	2301      	movs	r3, #1
    3ce6:	465e      	mov	r6, fp
    3ce8:	086a      	lsrs	r2, r5, #1
    3cea:	401d      	ands	r5, r3
    3cec:	4315      	orrs	r5, r2
    3cee:	0032      	movs	r2, r6
    3cf0:	327f      	adds	r2, #127	; 0x7f
    3cf2:	2a00      	cmp	r2, #0
    3cf4:	dd25      	ble.n	3d42 <__aeabi_fmul+0x1d6>
    3cf6:	076b      	lsls	r3, r5, #29
    3cf8:	d004      	beq.n	3d04 <__aeabi_fmul+0x198>
    3cfa:	230f      	movs	r3, #15
    3cfc:	402b      	ands	r3, r5
    3cfe:	2b04      	cmp	r3, #4
    3d00:	d000      	beq.n	3d04 <__aeabi_fmul+0x198>
    3d02:	3504      	adds	r5, #4
    3d04:	012b      	lsls	r3, r5, #4
    3d06:	d503      	bpl.n	3d10 <__aeabi_fmul+0x1a4>
    3d08:	0032      	movs	r2, r6
    3d0a:	4b27      	ldr	r3, [pc, #156]	; (3da8 <__aeabi_fmul+0x23c>)
    3d0c:	3280      	adds	r2, #128	; 0x80
    3d0e:	401d      	ands	r5, r3
    3d10:	2afe      	cmp	r2, #254	; 0xfe
    3d12:	dc94      	bgt.n	3c3e <__aeabi_fmul+0xd2>
    3d14:	2401      	movs	r4, #1
    3d16:	01a8      	lsls	r0, r5, #6
    3d18:	0a40      	lsrs	r0, r0, #9
    3d1a:	b2d2      	uxtb	r2, r2
    3d1c:	400c      	ands	r4, r1
    3d1e:	e76f      	b.n	3c00 <__aeabi_fmul+0x94>
    3d20:	2080      	movs	r0, #128	; 0x80
    3d22:	03c0      	lsls	r0, r0, #15
    3d24:	4207      	tst	r7, r0
    3d26:	d007      	beq.n	3d38 <__aeabi_fmul+0x1cc>
    3d28:	4205      	tst	r5, r0
    3d2a:	d105      	bne.n	3d38 <__aeabi_fmul+0x1cc>
    3d2c:	4328      	orrs	r0, r5
    3d2e:	0240      	lsls	r0, r0, #9
    3d30:	0a40      	lsrs	r0, r0, #9
    3d32:	4644      	mov	r4, r8
    3d34:	22ff      	movs	r2, #255	; 0xff
    3d36:	e763      	b.n	3c00 <__aeabi_fmul+0x94>
    3d38:	4338      	orrs	r0, r7
    3d3a:	0240      	lsls	r0, r0, #9
    3d3c:	0a40      	lsrs	r0, r0, #9
    3d3e:	22ff      	movs	r2, #255	; 0xff
    3d40:	e75e      	b.n	3c00 <__aeabi_fmul+0x94>
    3d42:	2401      	movs	r4, #1
    3d44:	1aa3      	subs	r3, r4, r2
    3d46:	2b1b      	cmp	r3, #27
    3d48:	dd05      	ble.n	3d56 <__aeabi_fmul+0x1ea>
    3d4a:	400c      	ands	r4, r1
    3d4c:	2200      	movs	r2, #0
    3d4e:	2000      	movs	r0, #0
    3d50:	e756      	b.n	3c00 <__aeabi_fmul+0x94>
    3d52:	465e      	mov	r6, fp
    3d54:	e7cb      	b.n	3cee <__aeabi_fmul+0x182>
    3d56:	002a      	movs	r2, r5
    3d58:	2020      	movs	r0, #32
    3d5a:	40da      	lsrs	r2, r3
    3d5c:	1ac3      	subs	r3, r0, r3
    3d5e:	409d      	lsls	r5, r3
    3d60:	002b      	movs	r3, r5
    3d62:	1e5d      	subs	r5, r3, #1
    3d64:	41ab      	sbcs	r3, r5
    3d66:	4313      	orrs	r3, r2
    3d68:	075a      	lsls	r2, r3, #29
    3d6a:	d004      	beq.n	3d76 <__aeabi_fmul+0x20a>
    3d6c:	220f      	movs	r2, #15
    3d6e:	401a      	ands	r2, r3
    3d70:	2a04      	cmp	r2, #4
    3d72:	d000      	beq.n	3d76 <__aeabi_fmul+0x20a>
    3d74:	3304      	adds	r3, #4
    3d76:	015a      	lsls	r2, r3, #5
    3d78:	d504      	bpl.n	3d84 <__aeabi_fmul+0x218>
    3d7a:	2401      	movs	r4, #1
    3d7c:	2201      	movs	r2, #1
    3d7e:	400c      	ands	r4, r1
    3d80:	2000      	movs	r0, #0
    3d82:	e73d      	b.n	3c00 <__aeabi_fmul+0x94>
    3d84:	2401      	movs	r4, #1
    3d86:	019b      	lsls	r3, r3, #6
    3d88:	0a58      	lsrs	r0, r3, #9
    3d8a:	400c      	ands	r4, r1
    3d8c:	2200      	movs	r2, #0
    3d8e:	e737      	b.n	3c00 <__aeabi_fmul+0x94>
    3d90:	2080      	movs	r0, #128	; 0x80
    3d92:	2401      	movs	r4, #1
    3d94:	03c0      	lsls	r0, r0, #15
    3d96:	4328      	orrs	r0, r5
    3d98:	0240      	lsls	r0, r0, #9
    3d9a:	0a40      	lsrs	r0, r0, #9
    3d9c:	400c      	ands	r4, r1
    3d9e:	22ff      	movs	r2, #255	; 0xff
    3da0:	e72e      	b.n	3c00 <__aeabi_fmul+0x94>
    3da2:	46c0      	nop			; (mov r8, r8)
    3da4:	00005c90 	.word	0x00005c90
    3da8:	f7ffffff 	.word	0xf7ffffff

00003dac <__aeabi_fsub>:
    3dac:	b5f0      	push	{r4, r5, r6, r7, lr}
    3dae:	464f      	mov	r7, r9
    3db0:	46d6      	mov	lr, sl
    3db2:	4646      	mov	r6, r8
    3db4:	0044      	lsls	r4, r0, #1
    3db6:	b5c0      	push	{r6, r7, lr}
    3db8:	0fc2      	lsrs	r2, r0, #31
    3dba:	0247      	lsls	r7, r0, #9
    3dbc:	0248      	lsls	r0, r1, #9
    3dbe:	0a40      	lsrs	r0, r0, #9
    3dc0:	4684      	mov	ip, r0
    3dc2:	4666      	mov	r6, ip
    3dc4:	0a7b      	lsrs	r3, r7, #9
    3dc6:	0048      	lsls	r0, r1, #1
    3dc8:	0fc9      	lsrs	r1, r1, #31
    3dca:	469a      	mov	sl, r3
    3dcc:	0e24      	lsrs	r4, r4, #24
    3dce:	0015      	movs	r5, r2
    3dd0:	00db      	lsls	r3, r3, #3
    3dd2:	0e00      	lsrs	r0, r0, #24
    3dd4:	4689      	mov	r9, r1
    3dd6:	00f6      	lsls	r6, r6, #3
    3dd8:	28ff      	cmp	r0, #255	; 0xff
    3dda:	d100      	bne.n	3dde <__aeabi_fsub+0x32>
    3ddc:	e08f      	b.n	3efe <__aeabi_fsub+0x152>
    3dde:	2101      	movs	r1, #1
    3de0:	464f      	mov	r7, r9
    3de2:	404f      	eors	r7, r1
    3de4:	0039      	movs	r1, r7
    3de6:	4291      	cmp	r1, r2
    3de8:	d066      	beq.n	3eb8 <__aeabi_fsub+0x10c>
    3dea:	1a22      	subs	r2, r4, r0
    3dec:	2a00      	cmp	r2, #0
    3dee:	dc00      	bgt.n	3df2 <__aeabi_fsub+0x46>
    3df0:	e09d      	b.n	3f2e <__aeabi_fsub+0x182>
    3df2:	2800      	cmp	r0, #0
    3df4:	d13d      	bne.n	3e72 <__aeabi_fsub+0xc6>
    3df6:	2e00      	cmp	r6, #0
    3df8:	d100      	bne.n	3dfc <__aeabi_fsub+0x50>
    3dfa:	e08b      	b.n	3f14 <__aeabi_fsub+0x168>
    3dfc:	1e51      	subs	r1, r2, #1
    3dfe:	2900      	cmp	r1, #0
    3e00:	d000      	beq.n	3e04 <__aeabi_fsub+0x58>
    3e02:	e0b5      	b.n	3f70 <__aeabi_fsub+0x1c4>
    3e04:	2401      	movs	r4, #1
    3e06:	1b9b      	subs	r3, r3, r6
    3e08:	015a      	lsls	r2, r3, #5
    3e0a:	d544      	bpl.n	3e96 <__aeabi_fsub+0xea>
    3e0c:	019b      	lsls	r3, r3, #6
    3e0e:	099f      	lsrs	r7, r3, #6
    3e10:	0038      	movs	r0, r7
    3e12:	f000 fa07 	bl	4224 <__clzsi2>
    3e16:	3805      	subs	r0, #5
    3e18:	4087      	lsls	r7, r0
    3e1a:	4284      	cmp	r4, r0
    3e1c:	dd00      	ble.n	3e20 <__aeabi_fsub+0x74>
    3e1e:	e096      	b.n	3f4e <__aeabi_fsub+0x1a2>
    3e20:	1b04      	subs	r4, r0, r4
    3e22:	003a      	movs	r2, r7
    3e24:	2020      	movs	r0, #32
    3e26:	3401      	adds	r4, #1
    3e28:	40e2      	lsrs	r2, r4
    3e2a:	1b04      	subs	r4, r0, r4
    3e2c:	40a7      	lsls	r7, r4
    3e2e:	003b      	movs	r3, r7
    3e30:	1e5f      	subs	r7, r3, #1
    3e32:	41bb      	sbcs	r3, r7
    3e34:	2400      	movs	r4, #0
    3e36:	4313      	orrs	r3, r2
    3e38:	075a      	lsls	r2, r3, #29
    3e3a:	d004      	beq.n	3e46 <__aeabi_fsub+0x9a>
    3e3c:	220f      	movs	r2, #15
    3e3e:	401a      	ands	r2, r3
    3e40:	2a04      	cmp	r2, #4
    3e42:	d000      	beq.n	3e46 <__aeabi_fsub+0x9a>
    3e44:	3304      	adds	r3, #4
    3e46:	015a      	lsls	r2, r3, #5
    3e48:	d527      	bpl.n	3e9a <__aeabi_fsub+0xee>
    3e4a:	3401      	adds	r4, #1
    3e4c:	2cff      	cmp	r4, #255	; 0xff
    3e4e:	d100      	bne.n	3e52 <__aeabi_fsub+0xa6>
    3e50:	e079      	b.n	3f46 <__aeabi_fsub+0x19a>
    3e52:	2201      	movs	r2, #1
    3e54:	019b      	lsls	r3, r3, #6
    3e56:	0a5b      	lsrs	r3, r3, #9
    3e58:	b2e4      	uxtb	r4, r4
    3e5a:	402a      	ands	r2, r5
    3e5c:	025b      	lsls	r3, r3, #9
    3e5e:	05e4      	lsls	r4, r4, #23
    3e60:	0a58      	lsrs	r0, r3, #9
    3e62:	07d2      	lsls	r2, r2, #31
    3e64:	4320      	orrs	r0, r4
    3e66:	4310      	orrs	r0, r2
    3e68:	bc1c      	pop	{r2, r3, r4}
    3e6a:	4690      	mov	r8, r2
    3e6c:	4699      	mov	r9, r3
    3e6e:	46a2      	mov	sl, r4
    3e70:	bdf0      	pop	{r4, r5, r6, r7, pc}
    3e72:	2cff      	cmp	r4, #255	; 0xff
    3e74:	d0e0      	beq.n	3e38 <__aeabi_fsub+0x8c>
    3e76:	2180      	movs	r1, #128	; 0x80
    3e78:	04c9      	lsls	r1, r1, #19
    3e7a:	430e      	orrs	r6, r1
    3e7c:	2a1b      	cmp	r2, #27
    3e7e:	dc7b      	bgt.n	3f78 <__aeabi_fsub+0x1cc>
    3e80:	0031      	movs	r1, r6
    3e82:	2020      	movs	r0, #32
    3e84:	40d1      	lsrs	r1, r2
    3e86:	1a82      	subs	r2, r0, r2
    3e88:	4096      	lsls	r6, r2
    3e8a:	1e72      	subs	r2, r6, #1
    3e8c:	4196      	sbcs	r6, r2
    3e8e:	430e      	orrs	r6, r1
    3e90:	1b9b      	subs	r3, r3, r6
    3e92:	015a      	lsls	r2, r3, #5
    3e94:	d4ba      	bmi.n	3e0c <__aeabi_fsub+0x60>
    3e96:	075a      	lsls	r2, r3, #29
    3e98:	d1d0      	bne.n	3e3c <__aeabi_fsub+0x90>
    3e9a:	2201      	movs	r2, #1
    3e9c:	08df      	lsrs	r7, r3, #3
    3e9e:	402a      	ands	r2, r5
    3ea0:	2cff      	cmp	r4, #255	; 0xff
    3ea2:	d133      	bne.n	3f0c <__aeabi_fsub+0x160>
    3ea4:	2f00      	cmp	r7, #0
    3ea6:	d100      	bne.n	3eaa <__aeabi_fsub+0xfe>
    3ea8:	e0a8      	b.n	3ffc <__aeabi_fsub+0x250>
    3eaa:	2380      	movs	r3, #128	; 0x80
    3eac:	03db      	lsls	r3, r3, #15
    3eae:	433b      	orrs	r3, r7
    3eb0:	025b      	lsls	r3, r3, #9
    3eb2:	0a5b      	lsrs	r3, r3, #9
    3eb4:	24ff      	movs	r4, #255	; 0xff
    3eb6:	e7d1      	b.n	3e5c <__aeabi_fsub+0xb0>
    3eb8:	1a21      	subs	r1, r4, r0
    3eba:	2900      	cmp	r1, #0
    3ebc:	dd4c      	ble.n	3f58 <__aeabi_fsub+0x1ac>
    3ebe:	2800      	cmp	r0, #0
    3ec0:	d02a      	beq.n	3f18 <__aeabi_fsub+0x16c>
    3ec2:	2cff      	cmp	r4, #255	; 0xff
    3ec4:	d0b8      	beq.n	3e38 <__aeabi_fsub+0x8c>
    3ec6:	2080      	movs	r0, #128	; 0x80
    3ec8:	04c0      	lsls	r0, r0, #19
    3eca:	4306      	orrs	r6, r0
    3ecc:	291b      	cmp	r1, #27
    3ece:	dd00      	ble.n	3ed2 <__aeabi_fsub+0x126>
    3ed0:	e0af      	b.n	4032 <__aeabi_fsub+0x286>
    3ed2:	0030      	movs	r0, r6
    3ed4:	2720      	movs	r7, #32
    3ed6:	40c8      	lsrs	r0, r1
    3ed8:	1a79      	subs	r1, r7, r1
    3eda:	408e      	lsls	r6, r1
    3edc:	1e71      	subs	r1, r6, #1
    3ede:	418e      	sbcs	r6, r1
    3ee0:	4306      	orrs	r6, r0
    3ee2:	199b      	adds	r3, r3, r6
    3ee4:	0159      	lsls	r1, r3, #5
    3ee6:	d5d6      	bpl.n	3e96 <__aeabi_fsub+0xea>
    3ee8:	3401      	adds	r4, #1
    3eea:	2cff      	cmp	r4, #255	; 0xff
    3eec:	d100      	bne.n	3ef0 <__aeabi_fsub+0x144>
    3eee:	e085      	b.n	3ffc <__aeabi_fsub+0x250>
    3ef0:	2201      	movs	r2, #1
    3ef2:	497a      	ldr	r1, [pc, #488]	; (40dc <__aeabi_fsub+0x330>)
    3ef4:	401a      	ands	r2, r3
    3ef6:	085b      	lsrs	r3, r3, #1
    3ef8:	400b      	ands	r3, r1
    3efa:	4313      	orrs	r3, r2
    3efc:	e79c      	b.n	3e38 <__aeabi_fsub+0x8c>
    3efe:	2e00      	cmp	r6, #0
    3f00:	d000      	beq.n	3f04 <__aeabi_fsub+0x158>
    3f02:	e770      	b.n	3de6 <__aeabi_fsub+0x3a>
    3f04:	e76b      	b.n	3dde <__aeabi_fsub+0x32>
    3f06:	1e3b      	subs	r3, r7, #0
    3f08:	d1c5      	bne.n	3e96 <__aeabi_fsub+0xea>
    3f0a:	2200      	movs	r2, #0
    3f0c:	027b      	lsls	r3, r7, #9
    3f0e:	0a5b      	lsrs	r3, r3, #9
    3f10:	b2e4      	uxtb	r4, r4
    3f12:	e7a3      	b.n	3e5c <__aeabi_fsub+0xb0>
    3f14:	0014      	movs	r4, r2
    3f16:	e78f      	b.n	3e38 <__aeabi_fsub+0x8c>
    3f18:	2e00      	cmp	r6, #0
    3f1a:	d04d      	beq.n	3fb8 <__aeabi_fsub+0x20c>
    3f1c:	1e48      	subs	r0, r1, #1
    3f1e:	2800      	cmp	r0, #0
    3f20:	d157      	bne.n	3fd2 <__aeabi_fsub+0x226>
    3f22:	199b      	adds	r3, r3, r6
    3f24:	2401      	movs	r4, #1
    3f26:	015a      	lsls	r2, r3, #5
    3f28:	d5b5      	bpl.n	3e96 <__aeabi_fsub+0xea>
    3f2a:	2402      	movs	r4, #2
    3f2c:	e7e0      	b.n	3ef0 <__aeabi_fsub+0x144>
    3f2e:	2a00      	cmp	r2, #0
    3f30:	d125      	bne.n	3f7e <__aeabi_fsub+0x1d2>
    3f32:	1c62      	adds	r2, r4, #1
    3f34:	b2d2      	uxtb	r2, r2
    3f36:	2a01      	cmp	r2, #1
    3f38:	dd72      	ble.n	4020 <__aeabi_fsub+0x274>
    3f3a:	1b9f      	subs	r7, r3, r6
    3f3c:	017a      	lsls	r2, r7, #5
    3f3e:	d535      	bpl.n	3fac <__aeabi_fsub+0x200>
    3f40:	1af7      	subs	r7, r6, r3
    3f42:	000d      	movs	r5, r1
    3f44:	e764      	b.n	3e10 <__aeabi_fsub+0x64>
    3f46:	2201      	movs	r2, #1
    3f48:	2300      	movs	r3, #0
    3f4a:	402a      	ands	r2, r5
    3f4c:	e786      	b.n	3e5c <__aeabi_fsub+0xb0>
    3f4e:	003b      	movs	r3, r7
    3f50:	4a63      	ldr	r2, [pc, #396]	; (40e0 <__aeabi_fsub+0x334>)
    3f52:	1a24      	subs	r4, r4, r0
    3f54:	4013      	ands	r3, r2
    3f56:	e76f      	b.n	3e38 <__aeabi_fsub+0x8c>
    3f58:	2900      	cmp	r1, #0
    3f5a:	d16c      	bne.n	4036 <__aeabi_fsub+0x28a>
    3f5c:	1c61      	adds	r1, r4, #1
    3f5e:	b2c8      	uxtb	r0, r1
    3f60:	2801      	cmp	r0, #1
    3f62:	dd4e      	ble.n	4002 <__aeabi_fsub+0x256>
    3f64:	29ff      	cmp	r1, #255	; 0xff
    3f66:	d049      	beq.n	3ffc <__aeabi_fsub+0x250>
    3f68:	199b      	adds	r3, r3, r6
    3f6a:	085b      	lsrs	r3, r3, #1
    3f6c:	000c      	movs	r4, r1
    3f6e:	e763      	b.n	3e38 <__aeabi_fsub+0x8c>
    3f70:	2aff      	cmp	r2, #255	; 0xff
    3f72:	d041      	beq.n	3ff8 <__aeabi_fsub+0x24c>
    3f74:	000a      	movs	r2, r1
    3f76:	e781      	b.n	3e7c <__aeabi_fsub+0xd0>
    3f78:	2601      	movs	r6, #1
    3f7a:	1b9b      	subs	r3, r3, r6
    3f7c:	e789      	b.n	3e92 <__aeabi_fsub+0xe6>
    3f7e:	2c00      	cmp	r4, #0
    3f80:	d01c      	beq.n	3fbc <__aeabi_fsub+0x210>
    3f82:	28ff      	cmp	r0, #255	; 0xff
    3f84:	d021      	beq.n	3fca <__aeabi_fsub+0x21e>
    3f86:	2480      	movs	r4, #128	; 0x80
    3f88:	04e4      	lsls	r4, r4, #19
    3f8a:	4252      	negs	r2, r2
    3f8c:	4323      	orrs	r3, r4
    3f8e:	2a1b      	cmp	r2, #27
    3f90:	dd00      	ble.n	3f94 <__aeabi_fsub+0x1e8>
    3f92:	e096      	b.n	40c2 <__aeabi_fsub+0x316>
    3f94:	001c      	movs	r4, r3
    3f96:	2520      	movs	r5, #32
    3f98:	40d4      	lsrs	r4, r2
    3f9a:	1aaa      	subs	r2, r5, r2
    3f9c:	4093      	lsls	r3, r2
    3f9e:	1e5a      	subs	r2, r3, #1
    3fa0:	4193      	sbcs	r3, r2
    3fa2:	4323      	orrs	r3, r4
    3fa4:	1af3      	subs	r3, r6, r3
    3fa6:	0004      	movs	r4, r0
    3fa8:	000d      	movs	r5, r1
    3faa:	e72d      	b.n	3e08 <__aeabi_fsub+0x5c>
    3fac:	2f00      	cmp	r7, #0
    3fae:	d000      	beq.n	3fb2 <__aeabi_fsub+0x206>
    3fb0:	e72e      	b.n	3e10 <__aeabi_fsub+0x64>
    3fb2:	2200      	movs	r2, #0
    3fb4:	2400      	movs	r4, #0
    3fb6:	e7a9      	b.n	3f0c <__aeabi_fsub+0x160>
    3fb8:	000c      	movs	r4, r1
    3fba:	e73d      	b.n	3e38 <__aeabi_fsub+0x8c>
    3fbc:	2b00      	cmp	r3, #0
    3fbe:	d058      	beq.n	4072 <__aeabi_fsub+0x2c6>
    3fc0:	43d2      	mvns	r2, r2
    3fc2:	2a00      	cmp	r2, #0
    3fc4:	d0ee      	beq.n	3fa4 <__aeabi_fsub+0x1f8>
    3fc6:	28ff      	cmp	r0, #255	; 0xff
    3fc8:	d1e1      	bne.n	3f8e <__aeabi_fsub+0x1e2>
    3fca:	0033      	movs	r3, r6
    3fcc:	24ff      	movs	r4, #255	; 0xff
    3fce:	000d      	movs	r5, r1
    3fd0:	e732      	b.n	3e38 <__aeabi_fsub+0x8c>
    3fd2:	29ff      	cmp	r1, #255	; 0xff
    3fd4:	d010      	beq.n	3ff8 <__aeabi_fsub+0x24c>
    3fd6:	0001      	movs	r1, r0
    3fd8:	e778      	b.n	3ecc <__aeabi_fsub+0x120>
    3fda:	2b00      	cmp	r3, #0
    3fdc:	d06e      	beq.n	40bc <__aeabi_fsub+0x310>
    3fde:	24ff      	movs	r4, #255	; 0xff
    3fe0:	2e00      	cmp	r6, #0
    3fe2:	d100      	bne.n	3fe6 <__aeabi_fsub+0x23a>
    3fe4:	e728      	b.n	3e38 <__aeabi_fsub+0x8c>
    3fe6:	2280      	movs	r2, #128	; 0x80
    3fe8:	4651      	mov	r1, sl
    3fea:	03d2      	lsls	r2, r2, #15
    3fec:	4211      	tst	r1, r2
    3fee:	d003      	beq.n	3ff8 <__aeabi_fsub+0x24c>
    3ff0:	4661      	mov	r1, ip
    3ff2:	4211      	tst	r1, r2
    3ff4:	d100      	bne.n	3ff8 <__aeabi_fsub+0x24c>
    3ff6:	0033      	movs	r3, r6
    3ff8:	24ff      	movs	r4, #255	; 0xff
    3ffa:	e71d      	b.n	3e38 <__aeabi_fsub+0x8c>
    3ffc:	24ff      	movs	r4, #255	; 0xff
    3ffe:	2300      	movs	r3, #0
    4000:	e72c      	b.n	3e5c <__aeabi_fsub+0xb0>
    4002:	2c00      	cmp	r4, #0
    4004:	d1e9      	bne.n	3fda <__aeabi_fsub+0x22e>
    4006:	2b00      	cmp	r3, #0
    4008:	d063      	beq.n	40d2 <__aeabi_fsub+0x326>
    400a:	2e00      	cmp	r6, #0
    400c:	d100      	bne.n	4010 <__aeabi_fsub+0x264>
    400e:	e713      	b.n	3e38 <__aeabi_fsub+0x8c>
    4010:	199b      	adds	r3, r3, r6
    4012:	015a      	lsls	r2, r3, #5
    4014:	d400      	bmi.n	4018 <__aeabi_fsub+0x26c>
    4016:	e73e      	b.n	3e96 <__aeabi_fsub+0xea>
    4018:	4a31      	ldr	r2, [pc, #196]	; (40e0 <__aeabi_fsub+0x334>)
    401a:	000c      	movs	r4, r1
    401c:	4013      	ands	r3, r2
    401e:	e70b      	b.n	3e38 <__aeabi_fsub+0x8c>
    4020:	2c00      	cmp	r4, #0
    4022:	d11e      	bne.n	4062 <__aeabi_fsub+0x2b6>
    4024:	2b00      	cmp	r3, #0
    4026:	d12f      	bne.n	4088 <__aeabi_fsub+0x2dc>
    4028:	2e00      	cmp	r6, #0
    402a:	d04f      	beq.n	40cc <__aeabi_fsub+0x320>
    402c:	0033      	movs	r3, r6
    402e:	000d      	movs	r5, r1
    4030:	e702      	b.n	3e38 <__aeabi_fsub+0x8c>
    4032:	2601      	movs	r6, #1
    4034:	e755      	b.n	3ee2 <__aeabi_fsub+0x136>
    4036:	2c00      	cmp	r4, #0
    4038:	d11f      	bne.n	407a <__aeabi_fsub+0x2ce>
    403a:	2b00      	cmp	r3, #0
    403c:	d043      	beq.n	40c6 <__aeabi_fsub+0x31a>
    403e:	43c9      	mvns	r1, r1
    4040:	2900      	cmp	r1, #0
    4042:	d00b      	beq.n	405c <__aeabi_fsub+0x2b0>
    4044:	28ff      	cmp	r0, #255	; 0xff
    4046:	d039      	beq.n	40bc <__aeabi_fsub+0x310>
    4048:	291b      	cmp	r1, #27
    404a:	dc44      	bgt.n	40d6 <__aeabi_fsub+0x32a>
    404c:	001c      	movs	r4, r3
    404e:	2720      	movs	r7, #32
    4050:	40cc      	lsrs	r4, r1
    4052:	1a79      	subs	r1, r7, r1
    4054:	408b      	lsls	r3, r1
    4056:	1e59      	subs	r1, r3, #1
    4058:	418b      	sbcs	r3, r1
    405a:	4323      	orrs	r3, r4
    405c:	199b      	adds	r3, r3, r6
    405e:	0004      	movs	r4, r0
    4060:	e740      	b.n	3ee4 <__aeabi_fsub+0x138>
    4062:	2b00      	cmp	r3, #0
    4064:	d11a      	bne.n	409c <__aeabi_fsub+0x2f0>
    4066:	2e00      	cmp	r6, #0
    4068:	d124      	bne.n	40b4 <__aeabi_fsub+0x308>
    406a:	2780      	movs	r7, #128	; 0x80
    406c:	2200      	movs	r2, #0
    406e:	03ff      	lsls	r7, r7, #15
    4070:	e71b      	b.n	3eaa <__aeabi_fsub+0xfe>
    4072:	0033      	movs	r3, r6
    4074:	0004      	movs	r4, r0
    4076:	000d      	movs	r5, r1
    4078:	e6de      	b.n	3e38 <__aeabi_fsub+0x8c>
    407a:	28ff      	cmp	r0, #255	; 0xff
    407c:	d01e      	beq.n	40bc <__aeabi_fsub+0x310>
    407e:	2480      	movs	r4, #128	; 0x80
    4080:	04e4      	lsls	r4, r4, #19
    4082:	4249      	negs	r1, r1
    4084:	4323      	orrs	r3, r4
    4086:	e7df      	b.n	4048 <__aeabi_fsub+0x29c>
    4088:	2e00      	cmp	r6, #0
    408a:	d100      	bne.n	408e <__aeabi_fsub+0x2e2>
    408c:	e6d4      	b.n	3e38 <__aeabi_fsub+0x8c>
    408e:	1b9f      	subs	r7, r3, r6
    4090:	017a      	lsls	r2, r7, #5
    4092:	d400      	bmi.n	4096 <__aeabi_fsub+0x2ea>
    4094:	e737      	b.n	3f06 <__aeabi_fsub+0x15a>
    4096:	1af3      	subs	r3, r6, r3
    4098:	000d      	movs	r5, r1
    409a:	e6cd      	b.n	3e38 <__aeabi_fsub+0x8c>
    409c:	24ff      	movs	r4, #255	; 0xff
    409e:	2e00      	cmp	r6, #0
    40a0:	d100      	bne.n	40a4 <__aeabi_fsub+0x2f8>
    40a2:	e6c9      	b.n	3e38 <__aeabi_fsub+0x8c>
    40a4:	2280      	movs	r2, #128	; 0x80
    40a6:	4650      	mov	r0, sl
    40a8:	03d2      	lsls	r2, r2, #15
    40aa:	4210      	tst	r0, r2
    40ac:	d0a4      	beq.n	3ff8 <__aeabi_fsub+0x24c>
    40ae:	4660      	mov	r0, ip
    40b0:	4210      	tst	r0, r2
    40b2:	d1a1      	bne.n	3ff8 <__aeabi_fsub+0x24c>
    40b4:	0033      	movs	r3, r6
    40b6:	000d      	movs	r5, r1
    40b8:	24ff      	movs	r4, #255	; 0xff
    40ba:	e6bd      	b.n	3e38 <__aeabi_fsub+0x8c>
    40bc:	0033      	movs	r3, r6
    40be:	24ff      	movs	r4, #255	; 0xff
    40c0:	e6ba      	b.n	3e38 <__aeabi_fsub+0x8c>
    40c2:	2301      	movs	r3, #1
    40c4:	e76e      	b.n	3fa4 <__aeabi_fsub+0x1f8>
    40c6:	0033      	movs	r3, r6
    40c8:	0004      	movs	r4, r0
    40ca:	e6b5      	b.n	3e38 <__aeabi_fsub+0x8c>
    40cc:	2700      	movs	r7, #0
    40ce:	2200      	movs	r2, #0
    40d0:	e71c      	b.n	3f0c <__aeabi_fsub+0x160>
    40d2:	0033      	movs	r3, r6
    40d4:	e6b0      	b.n	3e38 <__aeabi_fsub+0x8c>
    40d6:	2301      	movs	r3, #1
    40d8:	e7c0      	b.n	405c <__aeabi_fsub+0x2b0>
    40da:	46c0      	nop			; (mov r8, r8)
    40dc:	7dffffff 	.word	0x7dffffff
    40e0:	fbffffff 	.word	0xfbffffff

000040e4 <__aeabi_f2iz>:
    40e4:	0241      	lsls	r1, r0, #9
    40e6:	0043      	lsls	r3, r0, #1
    40e8:	0fc2      	lsrs	r2, r0, #31
    40ea:	0a49      	lsrs	r1, r1, #9
    40ec:	0e1b      	lsrs	r3, r3, #24
    40ee:	2000      	movs	r0, #0
    40f0:	2b7e      	cmp	r3, #126	; 0x7e
    40f2:	dd0d      	ble.n	4110 <__aeabi_f2iz+0x2c>
    40f4:	2b9d      	cmp	r3, #157	; 0x9d
    40f6:	dc0c      	bgt.n	4112 <__aeabi_f2iz+0x2e>
    40f8:	2080      	movs	r0, #128	; 0x80
    40fa:	0400      	lsls	r0, r0, #16
    40fc:	4301      	orrs	r1, r0
    40fe:	2b95      	cmp	r3, #149	; 0x95
    4100:	dc0a      	bgt.n	4118 <__aeabi_f2iz+0x34>
    4102:	2096      	movs	r0, #150	; 0x96
    4104:	1ac3      	subs	r3, r0, r3
    4106:	40d9      	lsrs	r1, r3
    4108:	4248      	negs	r0, r1
    410a:	2a00      	cmp	r2, #0
    410c:	d100      	bne.n	4110 <__aeabi_f2iz+0x2c>
    410e:	0008      	movs	r0, r1
    4110:	4770      	bx	lr
    4112:	4b03      	ldr	r3, [pc, #12]	; (4120 <__aeabi_f2iz+0x3c>)
    4114:	18d0      	adds	r0, r2, r3
    4116:	e7fb      	b.n	4110 <__aeabi_f2iz+0x2c>
    4118:	3b96      	subs	r3, #150	; 0x96
    411a:	4099      	lsls	r1, r3
    411c:	e7f4      	b.n	4108 <__aeabi_f2iz+0x24>
    411e:	46c0      	nop			; (mov r8, r8)
    4120:	7fffffff 	.word	0x7fffffff

00004124 <__aeabi_ui2f>:
    4124:	b510      	push	{r4, lr}
    4126:	1e04      	subs	r4, r0, #0
    4128:	d027      	beq.n	417a <__aeabi_ui2f+0x56>
    412a:	f000 f87b 	bl	4224 <__clzsi2>
    412e:	239e      	movs	r3, #158	; 0x9e
    4130:	1a1b      	subs	r3, r3, r0
    4132:	2b96      	cmp	r3, #150	; 0x96
    4134:	dc0a      	bgt.n	414c <__aeabi_ui2f+0x28>
    4136:	2296      	movs	r2, #150	; 0x96
    4138:	1ad2      	subs	r2, r2, r3
    413a:	4094      	lsls	r4, r2
    413c:	0264      	lsls	r4, r4, #9
    413e:	0a64      	lsrs	r4, r4, #9
    4140:	b2db      	uxtb	r3, r3
    4142:	0264      	lsls	r4, r4, #9
    4144:	05db      	lsls	r3, r3, #23
    4146:	0a60      	lsrs	r0, r4, #9
    4148:	4318      	orrs	r0, r3
    414a:	bd10      	pop	{r4, pc}
    414c:	2b99      	cmp	r3, #153	; 0x99
    414e:	dc17      	bgt.n	4180 <__aeabi_ui2f+0x5c>
    4150:	2299      	movs	r2, #153	; 0x99
    4152:	1ad2      	subs	r2, r2, r3
    4154:	2a00      	cmp	r2, #0
    4156:	dd27      	ble.n	41a8 <__aeabi_ui2f+0x84>
    4158:	4094      	lsls	r4, r2
    415a:	0022      	movs	r2, r4
    415c:	4c13      	ldr	r4, [pc, #76]	; (41ac <__aeabi_ui2f+0x88>)
    415e:	4014      	ands	r4, r2
    4160:	0751      	lsls	r1, r2, #29
    4162:	d004      	beq.n	416e <__aeabi_ui2f+0x4a>
    4164:	210f      	movs	r1, #15
    4166:	400a      	ands	r2, r1
    4168:	2a04      	cmp	r2, #4
    416a:	d000      	beq.n	416e <__aeabi_ui2f+0x4a>
    416c:	3404      	adds	r4, #4
    416e:	0162      	lsls	r2, r4, #5
    4170:	d412      	bmi.n	4198 <__aeabi_ui2f+0x74>
    4172:	01a4      	lsls	r4, r4, #6
    4174:	0a64      	lsrs	r4, r4, #9
    4176:	b2db      	uxtb	r3, r3
    4178:	e7e3      	b.n	4142 <__aeabi_ui2f+0x1e>
    417a:	2300      	movs	r3, #0
    417c:	2400      	movs	r4, #0
    417e:	e7e0      	b.n	4142 <__aeabi_ui2f+0x1e>
    4180:	22b9      	movs	r2, #185	; 0xb9
    4182:	0021      	movs	r1, r4
    4184:	1ad2      	subs	r2, r2, r3
    4186:	4091      	lsls	r1, r2
    4188:	000a      	movs	r2, r1
    418a:	1e51      	subs	r1, r2, #1
    418c:	418a      	sbcs	r2, r1
    418e:	2105      	movs	r1, #5
    4190:	1a09      	subs	r1, r1, r0
    4192:	40cc      	lsrs	r4, r1
    4194:	4314      	orrs	r4, r2
    4196:	e7db      	b.n	4150 <__aeabi_ui2f+0x2c>
    4198:	4b04      	ldr	r3, [pc, #16]	; (41ac <__aeabi_ui2f+0x88>)
    419a:	401c      	ands	r4, r3
    419c:	239f      	movs	r3, #159	; 0x9f
    419e:	01a4      	lsls	r4, r4, #6
    41a0:	1a1b      	subs	r3, r3, r0
    41a2:	0a64      	lsrs	r4, r4, #9
    41a4:	b2db      	uxtb	r3, r3
    41a6:	e7cc      	b.n	4142 <__aeabi_ui2f+0x1e>
    41a8:	0022      	movs	r2, r4
    41aa:	e7d7      	b.n	415c <__aeabi_ui2f+0x38>
    41ac:	fbffffff 	.word	0xfbffffff

000041b0 <__aeabi_cfrcmple>:
    41b0:	4684      	mov	ip, r0
    41b2:	1c08      	adds	r0, r1, #0
    41b4:	4661      	mov	r1, ip
    41b6:	e7ff      	b.n	41b8 <__aeabi_cfcmpeq>

000041b8 <__aeabi_cfcmpeq>:
    41b8:	b51f      	push	{r0, r1, r2, r3, r4, lr}
    41ba:	f000 f8b7 	bl	432c <__lesf2>
    41be:	2800      	cmp	r0, #0
    41c0:	d401      	bmi.n	41c6 <__aeabi_cfcmpeq+0xe>
    41c2:	2100      	movs	r1, #0
    41c4:	42c8      	cmn	r0, r1
    41c6:	bd1f      	pop	{r0, r1, r2, r3, r4, pc}

000041c8 <__aeabi_fcmpeq>:
    41c8:	b510      	push	{r4, lr}
    41ca:	f000 f849 	bl	4260 <__eqsf2>
    41ce:	4240      	negs	r0, r0
    41d0:	3001      	adds	r0, #1
    41d2:	bd10      	pop	{r4, pc}

000041d4 <__aeabi_fcmplt>:
    41d4:	b510      	push	{r4, lr}
    41d6:	f000 f8a9 	bl	432c <__lesf2>
    41da:	2800      	cmp	r0, #0
    41dc:	db01      	blt.n	41e2 <__aeabi_fcmplt+0xe>
    41de:	2000      	movs	r0, #0
    41e0:	bd10      	pop	{r4, pc}
    41e2:	2001      	movs	r0, #1
    41e4:	bd10      	pop	{r4, pc}
    41e6:	46c0      	nop			; (mov r8, r8)

000041e8 <__aeabi_fcmple>:
    41e8:	b510      	push	{r4, lr}
    41ea:	f000 f89f 	bl	432c <__lesf2>
    41ee:	2800      	cmp	r0, #0
    41f0:	dd01      	ble.n	41f6 <__aeabi_fcmple+0xe>
    41f2:	2000      	movs	r0, #0
    41f4:	bd10      	pop	{r4, pc}
    41f6:	2001      	movs	r0, #1
    41f8:	bd10      	pop	{r4, pc}
    41fa:	46c0      	nop			; (mov r8, r8)

000041fc <__aeabi_fcmpgt>:
    41fc:	b510      	push	{r4, lr}
    41fe:	f000 f855 	bl	42ac <__gesf2>
    4202:	2800      	cmp	r0, #0
    4204:	dc01      	bgt.n	420a <__aeabi_fcmpgt+0xe>
    4206:	2000      	movs	r0, #0
    4208:	bd10      	pop	{r4, pc}
    420a:	2001      	movs	r0, #1
    420c:	bd10      	pop	{r4, pc}
    420e:	46c0      	nop			; (mov r8, r8)

00004210 <__aeabi_fcmpge>:
    4210:	b510      	push	{r4, lr}
    4212:	f000 f84b 	bl	42ac <__gesf2>
    4216:	2800      	cmp	r0, #0
    4218:	da01      	bge.n	421e <__aeabi_fcmpge+0xe>
    421a:	2000      	movs	r0, #0
    421c:	bd10      	pop	{r4, pc}
    421e:	2001      	movs	r0, #1
    4220:	bd10      	pop	{r4, pc}
    4222:	46c0      	nop			; (mov r8, r8)

00004224 <__clzsi2>:
    4224:	211c      	movs	r1, #28
    4226:	2301      	movs	r3, #1
    4228:	041b      	lsls	r3, r3, #16
    422a:	4298      	cmp	r0, r3
    422c:	d301      	bcc.n	4232 <__clzsi2+0xe>
    422e:	0c00      	lsrs	r0, r0, #16
    4230:	3910      	subs	r1, #16
    4232:	0a1b      	lsrs	r3, r3, #8
    4234:	4298      	cmp	r0, r3
    4236:	d301      	bcc.n	423c <__clzsi2+0x18>
    4238:	0a00      	lsrs	r0, r0, #8
    423a:	3908      	subs	r1, #8
    423c:	091b      	lsrs	r3, r3, #4
    423e:	4298      	cmp	r0, r3
    4240:	d301      	bcc.n	4246 <__clzsi2+0x22>
    4242:	0900      	lsrs	r0, r0, #4
    4244:	3904      	subs	r1, #4
    4246:	a202      	add	r2, pc, #8	; (adr r2, 4250 <__clzsi2+0x2c>)
    4248:	5c10      	ldrb	r0, [r2, r0]
    424a:	1840      	adds	r0, r0, r1
    424c:	4770      	bx	lr
    424e:	46c0      	nop			; (mov r8, r8)
    4250:	02020304 	.word	0x02020304
    4254:	01010101 	.word	0x01010101
	...

00004260 <__eqsf2>:
    4260:	b570      	push	{r4, r5, r6, lr}
    4262:	0042      	lsls	r2, r0, #1
    4264:	0245      	lsls	r5, r0, #9
    4266:	024e      	lsls	r6, r1, #9
    4268:	004c      	lsls	r4, r1, #1
    426a:	0fc3      	lsrs	r3, r0, #31
    426c:	0a6d      	lsrs	r5, r5, #9
    426e:	0e12      	lsrs	r2, r2, #24
    4270:	0a76      	lsrs	r6, r6, #9
    4272:	0e24      	lsrs	r4, r4, #24
    4274:	0fc9      	lsrs	r1, r1, #31
    4276:	2001      	movs	r0, #1
    4278:	2aff      	cmp	r2, #255	; 0xff
    427a:	d006      	beq.n	428a <__eqsf2+0x2a>
    427c:	2cff      	cmp	r4, #255	; 0xff
    427e:	d003      	beq.n	4288 <__eqsf2+0x28>
    4280:	42a2      	cmp	r2, r4
    4282:	d101      	bne.n	4288 <__eqsf2+0x28>
    4284:	42b5      	cmp	r5, r6
    4286:	d006      	beq.n	4296 <__eqsf2+0x36>
    4288:	bd70      	pop	{r4, r5, r6, pc}
    428a:	2d00      	cmp	r5, #0
    428c:	d1fc      	bne.n	4288 <__eqsf2+0x28>
    428e:	2cff      	cmp	r4, #255	; 0xff
    4290:	d1fa      	bne.n	4288 <__eqsf2+0x28>
    4292:	2e00      	cmp	r6, #0
    4294:	d1f8      	bne.n	4288 <__eqsf2+0x28>
    4296:	428b      	cmp	r3, r1
    4298:	d006      	beq.n	42a8 <__eqsf2+0x48>
    429a:	2001      	movs	r0, #1
    429c:	2a00      	cmp	r2, #0
    429e:	d1f3      	bne.n	4288 <__eqsf2+0x28>
    42a0:	0028      	movs	r0, r5
    42a2:	1e45      	subs	r5, r0, #1
    42a4:	41a8      	sbcs	r0, r5
    42a6:	e7ef      	b.n	4288 <__eqsf2+0x28>
    42a8:	2000      	movs	r0, #0
    42aa:	e7ed      	b.n	4288 <__eqsf2+0x28>

000042ac <__gesf2>:
    42ac:	b5f0      	push	{r4, r5, r6, r7, lr}
    42ae:	0042      	lsls	r2, r0, #1
    42b0:	0245      	lsls	r5, r0, #9
    42b2:	024c      	lsls	r4, r1, #9
    42b4:	0fc3      	lsrs	r3, r0, #31
    42b6:	0048      	lsls	r0, r1, #1
    42b8:	0a6d      	lsrs	r5, r5, #9
    42ba:	0e12      	lsrs	r2, r2, #24
    42bc:	0a64      	lsrs	r4, r4, #9
    42be:	0e00      	lsrs	r0, r0, #24
    42c0:	0fc9      	lsrs	r1, r1, #31
    42c2:	2aff      	cmp	r2, #255	; 0xff
    42c4:	d01e      	beq.n	4304 <__gesf2+0x58>
    42c6:	28ff      	cmp	r0, #255	; 0xff
    42c8:	d021      	beq.n	430e <__gesf2+0x62>
    42ca:	2a00      	cmp	r2, #0
    42cc:	d10a      	bne.n	42e4 <__gesf2+0x38>
    42ce:	426e      	negs	r6, r5
    42d0:	416e      	adcs	r6, r5
    42d2:	b2f6      	uxtb	r6, r6
    42d4:	2800      	cmp	r0, #0
    42d6:	d10f      	bne.n	42f8 <__gesf2+0x4c>
    42d8:	2c00      	cmp	r4, #0
    42da:	d10d      	bne.n	42f8 <__gesf2+0x4c>
    42dc:	2000      	movs	r0, #0
    42de:	2d00      	cmp	r5, #0
    42e0:	d009      	beq.n	42f6 <__gesf2+0x4a>
    42e2:	e005      	b.n	42f0 <__gesf2+0x44>
    42e4:	2800      	cmp	r0, #0
    42e6:	d101      	bne.n	42ec <__gesf2+0x40>
    42e8:	2c00      	cmp	r4, #0
    42ea:	d001      	beq.n	42f0 <__gesf2+0x44>
    42ec:	428b      	cmp	r3, r1
    42ee:	d011      	beq.n	4314 <__gesf2+0x68>
    42f0:	2101      	movs	r1, #1
    42f2:	4258      	negs	r0, r3
    42f4:	4308      	orrs	r0, r1
    42f6:	bdf0      	pop	{r4, r5, r6, r7, pc}
    42f8:	2e00      	cmp	r6, #0
    42fa:	d0f7      	beq.n	42ec <__gesf2+0x40>
    42fc:	2001      	movs	r0, #1
    42fe:	3901      	subs	r1, #1
    4300:	4308      	orrs	r0, r1
    4302:	e7f8      	b.n	42f6 <__gesf2+0x4a>
    4304:	2d00      	cmp	r5, #0
    4306:	d0de      	beq.n	42c6 <__gesf2+0x1a>
    4308:	2002      	movs	r0, #2
    430a:	4240      	negs	r0, r0
    430c:	e7f3      	b.n	42f6 <__gesf2+0x4a>
    430e:	2c00      	cmp	r4, #0
    4310:	d0db      	beq.n	42ca <__gesf2+0x1e>
    4312:	e7f9      	b.n	4308 <__gesf2+0x5c>
    4314:	4282      	cmp	r2, r0
    4316:	dceb      	bgt.n	42f0 <__gesf2+0x44>
    4318:	db04      	blt.n	4324 <__gesf2+0x78>
    431a:	42a5      	cmp	r5, r4
    431c:	d8e8      	bhi.n	42f0 <__gesf2+0x44>
    431e:	2000      	movs	r0, #0
    4320:	42a5      	cmp	r5, r4
    4322:	d2e8      	bcs.n	42f6 <__gesf2+0x4a>
    4324:	2101      	movs	r1, #1
    4326:	1e58      	subs	r0, r3, #1
    4328:	4308      	orrs	r0, r1
    432a:	e7e4      	b.n	42f6 <__gesf2+0x4a>

0000432c <__lesf2>:
    432c:	b5f0      	push	{r4, r5, r6, r7, lr}
    432e:	0042      	lsls	r2, r0, #1
    4330:	024d      	lsls	r5, r1, #9
    4332:	004c      	lsls	r4, r1, #1
    4334:	0246      	lsls	r6, r0, #9
    4336:	0a76      	lsrs	r6, r6, #9
    4338:	0e12      	lsrs	r2, r2, #24
    433a:	0fc3      	lsrs	r3, r0, #31
    433c:	0a6d      	lsrs	r5, r5, #9
    433e:	0e24      	lsrs	r4, r4, #24
    4340:	0fc9      	lsrs	r1, r1, #31
    4342:	2aff      	cmp	r2, #255	; 0xff
    4344:	d016      	beq.n	4374 <__lesf2+0x48>
    4346:	2cff      	cmp	r4, #255	; 0xff
    4348:	d018      	beq.n	437c <__lesf2+0x50>
    434a:	2a00      	cmp	r2, #0
    434c:	d10a      	bne.n	4364 <__lesf2+0x38>
    434e:	4270      	negs	r0, r6
    4350:	4170      	adcs	r0, r6
    4352:	b2c0      	uxtb	r0, r0
    4354:	2c00      	cmp	r4, #0
    4356:	d015      	beq.n	4384 <__lesf2+0x58>
    4358:	2800      	cmp	r0, #0
    435a:	d005      	beq.n	4368 <__lesf2+0x3c>
    435c:	2001      	movs	r0, #1
    435e:	3901      	subs	r1, #1
    4360:	4308      	orrs	r0, r1
    4362:	bdf0      	pop	{r4, r5, r6, r7, pc}
    4364:	2c00      	cmp	r4, #0
    4366:	d013      	beq.n	4390 <__lesf2+0x64>
    4368:	4299      	cmp	r1, r3
    436a:	d014      	beq.n	4396 <__lesf2+0x6a>
    436c:	2001      	movs	r0, #1
    436e:	425b      	negs	r3, r3
    4370:	4318      	orrs	r0, r3
    4372:	e7f6      	b.n	4362 <__lesf2+0x36>
    4374:	2002      	movs	r0, #2
    4376:	2e00      	cmp	r6, #0
    4378:	d1f3      	bne.n	4362 <__lesf2+0x36>
    437a:	e7e4      	b.n	4346 <__lesf2+0x1a>
    437c:	2002      	movs	r0, #2
    437e:	2d00      	cmp	r5, #0
    4380:	d1ef      	bne.n	4362 <__lesf2+0x36>
    4382:	e7e2      	b.n	434a <__lesf2+0x1e>
    4384:	2d00      	cmp	r5, #0
    4386:	d1e7      	bne.n	4358 <__lesf2+0x2c>
    4388:	2000      	movs	r0, #0
    438a:	2e00      	cmp	r6, #0
    438c:	d0e9      	beq.n	4362 <__lesf2+0x36>
    438e:	e7ed      	b.n	436c <__lesf2+0x40>
    4390:	2d00      	cmp	r5, #0
    4392:	d1e9      	bne.n	4368 <__lesf2+0x3c>
    4394:	e7ea      	b.n	436c <__lesf2+0x40>
    4396:	42a2      	cmp	r2, r4
    4398:	dc06      	bgt.n	43a8 <__lesf2+0x7c>
    439a:	dbdf      	blt.n	435c <__lesf2+0x30>
    439c:	42ae      	cmp	r6, r5
    439e:	d803      	bhi.n	43a8 <__lesf2+0x7c>
    43a0:	2000      	movs	r0, #0
    43a2:	42ae      	cmp	r6, r5
    43a4:	d3da      	bcc.n	435c <__lesf2+0x30>
    43a6:	e7dc      	b.n	4362 <__lesf2+0x36>
    43a8:	2001      	movs	r0, #1
    43aa:	4249      	negs	r1, r1
    43ac:	4308      	orrs	r0, r1
    43ae:	e7d8      	b.n	4362 <__lesf2+0x36>

000043b0 <__libc_init_array>:
    43b0:	b570      	push	{r4, r5, r6, lr}
    43b2:	2600      	movs	r6, #0
    43b4:	4d0c      	ldr	r5, [pc, #48]	; (43e8 <__libc_init_array+0x38>)
    43b6:	4c0d      	ldr	r4, [pc, #52]	; (43ec <__libc_init_array+0x3c>)
    43b8:	1b64      	subs	r4, r4, r5
    43ba:	10a4      	asrs	r4, r4, #2
    43bc:	42a6      	cmp	r6, r4
    43be:	d109      	bne.n	43d4 <__libc_init_array+0x24>
    43c0:	2600      	movs	r6, #0
    43c2:	f001 fc85 	bl	5cd0 <_init>
    43c6:	4d0a      	ldr	r5, [pc, #40]	; (43f0 <__libc_init_array+0x40>)
    43c8:	4c0a      	ldr	r4, [pc, #40]	; (43f4 <__libc_init_array+0x44>)
    43ca:	1b64      	subs	r4, r4, r5
    43cc:	10a4      	asrs	r4, r4, #2
    43ce:	42a6      	cmp	r6, r4
    43d0:	d105      	bne.n	43de <__libc_init_array+0x2e>
    43d2:	bd70      	pop	{r4, r5, r6, pc}
    43d4:	00b3      	lsls	r3, r6, #2
    43d6:	58eb      	ldr	r3, [r5, r3]
    43d8:	4798      	blx	r3
    43da:	3601      	adds	r6, #1
    43dc:	e7ee      	b.n	43bc <__libc_init_array+0xc>
    43de:	00b3      	lsls	r3, r6, #2
    43e0:	58eb      	ldr	r3, [r5, r3]
    43e2:	4798      	blx	r3
    43e4:	3601      	adds	r6, #1
    43e6:	e7f2      	b.n	43ce <__libc_init_array+0x1e>
    43e8:	00005cdc 	.word	0x00005cdc
    43ec:	00005cdc 	.word	0x00005cdc
    43f0:	00005cdc 	.word	0x00005cdc
    43f4:	00005ce0 	.word	0x00005ce0

000043f8 <memcpy>:
    43f8:	2300      	movs	r3, #0
    43fa:	b510      	push	{r4, lr}
    43fc:	429a      	cmp	r2, r3
    43fe:	d100      	bne.n	4402 <memcpy+0xa>
    4400:	bd10      	pop	{r4, pc}
    4402:	5ccc      	ldrb	r4, [r1, r3]
    4404:	54c4      	strb	r4, [r0, r3]
    4406:	3301      	adds	r3, #1
    4408:	e7f8      	b.n	43fc <memcpy+0x4>

0000440a <memset>:
    440a:	0003      	movs	r3, r0
    440c:	1882      	adds	r2, r0, r2
    440e:	4293      	cmp	r3, r2
    4410:	d100      	bne.n	4414 <memset+0xa>
    4412:	4770      	bx	lr
    4414:	7019      	strb	r1, [r3, #0]
    4416:	3301      	adds	r3, #1
    4418:	e7f9      	b.n	440e <memset+0x4>

0000441a <strcmp>:
    441a:	7802      	ldrb	r2, [r0, #0]
    441c:	780b      	ldrb	r3, [r1, #0]
    441e:	2a00      	cmp	r2, #0
    4420:	d003      	beq.n	442a <strcmp+0x10>
    4422:	3001      	adds	r0, #1
    4424:	3101      	adds	r1, #1
    4426:	429a      	cmp	r2, r3
    4428:	d0f7      	beq.n	441a <strcmp>
    442a:	1ad0      	subs	r0, r2, r3
    442c:	4770      	bx	lr
    442e:	564e      	.short	0x564e
    4430:	6863204d 	.word	0x6863204d
    4434:	65207069 	.word	0x65207069
    4438:	65736172 	.word	0x65736172
    443c:	69616620 	.word	0x69616620
    4440:	2064656c 	.word	0x2064656c
    4444:	6e006425 	.word	0x6e006425
    4448:	675f6d76 	.word	0x675f6d76
    444c:	625f7465 	.word	0x625f7465
    4450:	6b636f6c 	.word	0x6b636f6c
    4454:	666e695f 	.word	0x666e695f
    4458:	6166206f 	.word	0x6166206f
    445c:	64656c69 	.word	0x64656c69
    4460:	00642520 	.word	0x00642520
    4464:	5f6d766e 	.word	0x5f6d766e
    4468:	70696863 	.word	0x70696863
    446c:	6172655f 	.word	0x6172655f
    4470:	66206573 	.word	0x66206573
    4474:	656c6961 	.word	0x656c6961
    4478:	64252064 	.word	0x64252064
    447c:	6d766e00 	.word	0x6d766e00
    4480:	6972775f 	.word	0x6972775f
    4484:	615f6574 	.word	0x615f6574
    4488:	206f7475 	.word	0x206f7475
    448c:	66206425 	.word	0x66206425
    4490:	656c6961 	.word	0x656c6961
    4494:	64252064 	.word	0x64252064
    4498:	6f725000 	.word	0x6f725000
    449c:	6d617267 	.word	0x6d617267
    44a0:	6e696620 	.word	0x6e696620
    44a4:	65687369 	.word	0x65687369
    44a8:	69740064 	.word	0x69740064
    44ac:	3631796e 	.word	0x3631796e
    44b0:	44003731 	.word	0x44003731
    44b4:	63697665 	.word	0x63697665
    44b8:	73252065 	.word	0x73252065
    44bc:	746f6e20 	.word	0x746f6e20
    44c0:	70757320 	.word	0x70757320
    44c4:	74726f70 	.word	0x74726f70
    44c8:	6d764e00 	.word	0x6d764e00
    44cc:	696e6920 	.word	0x696e6920
    44d0:	6c616974 	.word	0x6c616974
    44d4:	20657a69 	.word	0x20657a69
    44d8:	6c696166 	.word	0x6c696166
    44dc:	6e006465 	.word	0x6e006465
    44e0:	675f6d76 	.word	0x675f6d76
    44e4:	645f7465 	.word	0x645f7465
    44e8:	63697665 	.word	0x63697665
    44ec:	6e695f65 	.word	0x6e695f65
    44f0:	66206f66 	.word	0x66206f66
    44f4:	656c6961 	.word	0x656c6961
    44f8:	65440064 	.word	0x65440064
    44fc:	65636976 	.word	0x65636976
    4500:	20736920 	.word	0x20736920
    4504:	6b636f6c 	.word	0x6b636f6c
    4508:	25286465 	.word	0x25286465
    450c:	202e2964 	.word	0x202e2964
    4510:	66726550 	.word	0x66726550
    4514:	696d726f 	.word	0x696d726f
    4518:	7520676e 	.word	0x7520676e
    451c:	636f6c6e 	.word	0x636f6c6e
    4520:	6977206b 	.word	0x6977206b
    4524:	63206874 	.word	0x63206874
    4528:	20706968 	.word	0x20706968
    452c:	73617265 	.word	0x73617265
    4530:	4e002e65 	.word	0x4e002e65
    4534:	75204d56 	.word	0x75204d56
    4538:	636f6c6e 	.word	0x636f6c6e
    453c:	6564206b 	.word	0x6564206b
    4540:	65636976 	.word	0x65636976
    4544:	69616620 	.word	0x69616620
    4548:	2064656c 	.word	0x2064656c
    454c:	75006425 	.word	0x75006425
    4550:	5f696470 	.word	0x5f696470
    4554:	676f7270 	.word	0x676f7270
    4558:	206d6172 	.word	0x206d6172
    455c:	6c696166 	.word	0x6c696166
    4560:	25206465 	.word	0x25206465
    4564:	00000064 	.word	0x00000064

00004568 <g_device_list>:
    4568:	00004638 00004614 00004641 00004614     8F...F..AF...F..
    4578:	0000464a 000045f0 000044aa 000045f0     JF...E...D...E..
    4588:	00004653 000045cc 0000465b 000045cc     SF...E..[F...E..
    4598:	00004663 000045cc 0000466b 000045a8     cF...E..kF...E..

000045a8 <device_tiny_41x>:
    45a8:	00004673 10008000 0f000040 11001000     sF......@.......
    45b8:	000b1280 13000001 00200020 00801400     ........ . .....
    45c8:	00000020                                 ...

000045cc <device_tiny_81x>:
    45cc:	0000467b 20008000 0f000040 11001000     {F..... @.......
    45dc:	000b1280 13000001 00200020 00801400     ........ . .....
    45ec:	00000020                                 ...

000045f0 <device_tiny_161x>:
    45f0:	00004683 40008000 0f000040 11001000     .F.....@@.......
    4600:	000b1280 13000001 00200020 00801400     ........ . .....
    4610:	00000020                                 ...

00004614 <device_tiny_321x>:
    4614:	0000468c 80008000 0f000040 11001000     .F......@.......
    4624:	000b1280 13000001 00200020 00801400     ........ . .....
    4634:	00000020 796e6974 36313233 6e697400      ...tiny3216.tin
    4644:	31323379 69740037 3631796e 74003631     y3217.tiny1616.t
    4654:	38796e69 74003431 38796e69 74003631     iny814.tiny816.t
    4664:	38796e69 74003731 34796e69 74003731     iny817.tiny417.t
    4674:	34796e69 74007831 38796e69 74007831     iny41x.tiny81x.t
    4684:	31796e69 00783136 796e6974 78313233     iny161x.tiny321x
    4694:	50413c00 69203e50 2074696e 6c707061     .<APP> init appl
    46a4:	74616369 006e6f69 5050413c 6564203e     ication.<APP> de
    46b4:	74696e69 70706120 6163696c 6e6f6974     init application
    46c4:	50413c00 49203e50 5250206e 6d20474f     .<APP> In PROG m
    46d4:	3a65646f 00642520 5050413c 6157203e     ode: %d.<APP> Wa
    46e4:	55207469 636f6c6e 6c5f006b 5f6b6e69     it Unlock._link_
    46f4:	7363646c 69616620 2064656c 54006425     ldcs failed %d.T
    4704:	6f656d69 77207475 69746961 6620676e     imeout waiting f
    4714:	6420726f 63697665 6f742065 6c6e7520     or device to unl
    4724:	206b636f 74617473 25207375 20783230     ock status %02x 
    4734:	75736572 2520746c 413c0064 203e5050     result %d.<APP> 
    4744:	61736944 00656c62 6b6e696c 6374735f     Disable.link_stc
    4754:	61662073 64656c69 00642520 5050413c     s failed %d.<APP
    4764:	6552203e 20746573 41006425 796c7070     > Reset %d.Apply
    4774:	73657220 52007465 61656c65 72206573      reset.Release r
    4784:	74657365 50413c00 54203e50 6c67676f     eset.<APP> Toggl
    4794:	65522065 00746573 5f707061 65736572     e Reset.app_rese
    47a4:	61662074 64656c69 00642520 5050413c     t failed %d.<APP
    47b4:	6e75203e 6b636f6c 4d564e00 73617245     > unlock.NVMEras
    47c4:	696c0065 6b5f6b6e 66207965 656c6961     e.link_key faile
    47d4:	64252064 696c5f00 6c5f6b6e 20736364     d %d._link_ldcs 
    47e4:	70696843 73617265 654b2065 6f6e2079     Chiperase Key no
    47f4:	63612074 74706563 25286465 202c2964     t accepted(%d), 
    4804:	74617473 30207375 32302578 70610078     status 0x%02x.ap
    4814:	6f745f70 656c6767 7365725f 66207465     p_toggle_reset f
    4824:	656c6961 64252064 69614600 2064656c     ailed %d.Failed 
    4834:	63206f74 20706968 73617265 73752065     to chip erase us
    4844:	20676e69 2079656b 75736572 2520746c     ing key result %
    4854:	413c0064 203e5050 65746e45 72502072     d.<APP> Enter Pr
    4864:	6f6d676f 41006564 6165726c 69207964     ogmode.Already i
    4874:	564e206e 7270204d 6172676f 6e696d6d     n NVM programmin
    4884:	6f6d2067 4e006564 72504d56 0020676f     g mode.NVMProg .
    4894:	6e696c5f 646c5f6b 4e207363 4b206d76     _link_ldcs Nvm K
    48a4:	6e207965 6120746f 70656363 28646574     ey not accepted(
    48b4:	2c296425 61747320 20737574 30257830     %d), status 0x%0
    48c4:	46007832 656c6961 6f742064 746e6520     2x.Failed to ent
    48d4:	4e207265 70204d56 72676f72 696d6d61     er NVM programmi
    48e4:	6d20676e 3a65646f 76656420 20656369     ng mode: device 
    48f4:	6c207369 656b636f 65722064 746c7573     is locked result
    4904:	00642520 6c696146 74206465 6e65206f      %d.Failed to en
    4914:	20726574 204d564e 676f7270 6d6d6172     ter NVM programm
    4924:	20676e69 65646f6d 776f4e00 206e6920     ing mode.Now in 
    4934:	204d564e 676f7270 6d6d6172 20676e69     NVM programming 
    4944:	65646f6d 50413c00 4c203e50 69766165     mode.<APP> Leavi
    4954:	7020676e 72676f72 6d206d61 0065646f     ng program mode.
    4964:	5f707061 61736964 20656c62 6c696166     app_disable fail
    4974:	25206465 413c0064 203e5050 74696157     ed %d.<APP> Wait
    4984:	616c6620 72206873 79646165 696c5f00      flash ready._li
    4994:	6c5f6b6e 61662064 64656c69 00642520     nk_ld failed %d.
    49a4:	656d6954 2074756f 74696177 20676e69     Timeout waiting 
    49b4:	20726f66 74696177 616c6620 72206873     for wait flash r
    49c4:	79646165 61747320 20737574 78323025     eady status %02x
    49d4:	73657220 20746c75 3c006425 3e505041      result %d.<APP>
    49e4:	4d564e20 20444d43 65206425 75636578      NVMCMD %d execu
    49f4:	676e6974 50413c00 70203e50 20656761     ting.<APP> page 
    4a04:	73617265 73752065 20676e69 204d564e     erase using NVM 
    4a14:	4c525443 70706100 6961775f 6c665f74     CTRL.app_wait_fl
    4a24:	5f687361 64616572 69742079 756f656d     ash_ready timeou
    4a34:	65622074 65726f66 61726520 66206573     t before erase f
    4a44:	656c6961 64252064 70706100 6578655f     ailed %d.app_exe
    4a54:	65747563 6d766e5f 6d6f635f 646e616d     cute_nvm_command
    4a64:	69616620 2064656c 61006425 775f7070      failed %d.app_w
    4a74:	5f746961 73616c66 65725f68 20796461     ait_flash_ready 
    4a84:	656d6974 2074756f 65746661 72652072     timeout after er
    4a94:	20657361 6c696166 25206465 413c0064     ase failed %d.<A
    4aa4:	203e5050 70696843 61726520 75206573     PP> Chip erase u
    4ab4:	676e6973 4d564e20 52544320 413c004c     sing NVM CTRL.<A
    4ac4:	203e5050 64616552 726f7720 64207364     PP> Read words d
    4ad4:	28617461 20296425 72646461 6825203a     ata(%d) addr: %h
    4ae4:	6c5f0058 5f6b6e69 3631646c 69616620     X._link_ld16 fai
    4af4:	2064656c 52006425 20646165 61746164     led %d.Read data
    4b04:	6e656c20 20687467 2074756f 7320666f      length out of s
    4b14:	20657a69 6c006425 5f6b6e69 705f7473     ize %d.link_st_p
    4b24:	66207274 656c6961 64252064 6e696c00     tr failed %d.lin
    4b34:	65725f6b 74616570 66203631 656c6961     k_repeat16 faile
    4b44:	64252064 6e696c00 646c5f6b 7274705f     d %d.link_ld_ptr
    4b54:	636e695f 66203631 656c6961 64252064     _inc16 failed %d
    4b64:	50413c00 52203e50 20646165 65747962     .<APP> Read byte
    4b74:	61642073 25286174 61202964 3a726464     s data(%d) addr:
    4b84:	58682520 6e696c00 65725f6b 74616570      %hX.link_repeat
    4b94:	69616620 2064656c 6c006425 5f6b6e69      failed %d.link_
    4ba4:	705f646c 695f7274 6620636e 656c6961     ld_ptr_inc faile
    4bb4:	64252064 50413c00 52203e50 20646165     d %d.<APP> Read 
    4bc4:	61746164 29642528 50413c00 44203e50     data(%d).<APP> D
    4bd4:	63697665 6e692065 6c006f66 5f6b6e69     evice info.link_
    4be4:	64616572 6269735f 69616620 2064656c     read_sib failed 
    4bf4:	5b006425 5d424953 61465b00 796c696d     %d.[SIB].[Family
    4c04:	5d444920 564e5b00 6572204d 69736976      ID].[NVM revisi
    4c14:	005d6e6f 44434f5b 76657220 6f697369     on].[OCD revisio
    4c24:	5b005d6e 20494450 5d43534f 20736920     n].[PDI OSC] is 
    4c34:	484d6325 505b007a 52204944 205d7665     %cMHz.[PDI Rev] 
    4c44:	25207369 70610064 65725f70 645f6461     is %d.app_read_d
    4c54:	20617461 72676973 6620776f 656c6961     ata sigrow faile
    4c64:	64252064 70706100 6165725f 61645f64     d %d.app_read_da
    4c74:	72206174 64697665 69616620 2064656c     ta revid failed 
    4c84:	5b006425 69766544 49206563 5b005d44     %d.[Device ID].[
    4c94:	6e726553 49206d75 5b005d44 69766544     Sernum ID].[Devi
    4ca4:	52206563 205d7665 25207369 413c0063     ce Rev] is %c.<A
    4cb4:	203e5050 70696843 61657220 766e2064     PP> Chip read nv
    4cc4:	7061006d 65725f70 645f6461 20617461     m.app_read_data 
    4cd4:	6c696166 25206465 413c0064 203e5050     failed %d.<APP> 
    4ce4:	74697257 6f772065 20736472 61746164     Write words data
    4cf4:	29642528 64646120 25203a72 6c005868     (%d) addr: %hX.l
    4d04:	5f6b6e69 36317473 69616620 2064656c     ink_st16 failed 
    4d14:	57006425 65746972 726f7720 64207364     %d.Write words d
    4d24:	20617461 676e656c 6f206874 6f207475     ata length out o
    4d34:	69732066 2520657a 696c0064 735f6b6e     f size %d.link_s
    4d44:	74705f74 6e695f72 20363163 6c696166     t_ptr_inc16 fail
    4d54:	25206465 413c0064 203e5050 74697257     ed %d.<APP> Writ
    4d64:	79622065 20736574 61746164 29642528     e bytes data(%d)
    4d74:	64646120 25203a72 57005868 65746972      addr: %hX.Write
    4d84:	74616420 656c2061 6874676e 74756f20      data length out
    4d94:	20666f20 657a6973 00642520 5050413c      of size %d.<APP
    4da4:	7257203e 20657469 61746164 29642528     > Write data(%d)
    4db4:	50413c00 43203e50 20706968 74697277     .<APP> Chip writ
    4dc4:	766e2065 7061006d 61775f70 665f7469     e nvm.app_wait_f
    4dd4:	6873616c 6165725f 74207964 6f656d69     lash_ready timeo
    4de4:	62207475 726f6665 61702065 62206567     ut before page b
    4df4:	65666675 6c632072 20726165 6c696166     uffer clear fail
    4e04:	25206465 6c430064 20726165 65676170     ed %d.Clear page
    4e14:	66756220 00726566 5f707061 74696177      buffer.app_wait
    4e24:	616c665f 725f6873 79646165 6d697420     _flash_ready tim
    4e34:	74756f65 74666120 70207265 20656761     eout after page 
    4e44:	66667562 63207265 7261656c 69616620     buffer clear fai
    4e54:	2064656c 61006425 775f7070 65746972     led %d.app_write
    4e64:	7461645f 61662061 64656c69 00642520     _data failed %d.
    4e74:	6d6d6f43 69747469 7020676e 00656761     Committing page.
    4e84:	5f707061 63657865 5f657475 5f6d766e     app_execute_nvm_
    4e94:	6d6d6f63 28646e61 20296425 6c696166     command(%d) fail
    4ea4:	25206465 70610064 61775f70 665f7469     ed %d.app_wait_f
    4eb4:	6873616c 6165725f 74207964 6f656d69     lash_ready timeo
    4ec4:	61207475 72657466 67617020 72772065     ut after page wr
    4ed4:	20657469 6c696166 25206465 24550064     ite failed %d.U$
    4ee4:	4c3c2555 3e4b4e49 69656420 2074696e     U%<LINK> deinit 
    4ef4:	6b6e696c 494c3c00 203e4b4e 5343444c     link.<LINK> LDCS
    4f04:	6f726620 7830206d 78323025 494c3c00      from 0x%02x.<LI
    4f14:	203e4b4e 6b6e696c 65686320 55006b63     NK> link check.U
    4f24:	20494450 20746f6e 64616572 50550079     PDI not ready.UP
    4f34:	73204944 75746174 72652073 20726f72     DI status error 
    4f44:	202c6425 646e6573 45524220 55004b41     %d, send BREAK.U
    4f54:	20494450 20746f6e 2d204b4f 69657220     PDI not OK - rei
    4f64:	6974696e 73696c61 6f697461 6572206e     nitialisation re
    4f74:	72697571 55006465 20494450 74696e69     quired.UPDI init
    4f84:	204b4f20 32302528 3c002978 4b4e494c      OK (%02x).<LINK
    4f94:	5453203e 74205343 7830206f 00783230     > STCS to 0x02x.
    4fa4:	5f796870 5f746573 64756162 65746172     phy_set_baudrate
    4fb4:	66656420 746c7561 69616620 2064656c      default failed 
    4fc4:	6c006425 5f6b6e69 73637473 44505520     %d.link_stcs UPD
    4fd4:	53435f49 5254435f 6620424c 656c6961     I_CS_CTRLB faile
    4fe4:	64252064 6e696c00 74735f6b 55207363     d %d.link_stcs U
    4ff4:	5f494450 435f5343 414c5254 69616620     PDI_CS_CTRLA fai
    5004:	2064656c 55006425 7075736e 74726f70     led %d.Unsupport
    5014:	62206465 72647561 20657461 20726f66     ed baudrate for 
    5024:	49445055 6b6c6320 2c642520 78616d20     UPDI clk %d, max
    5034:	392e3020 007a684d 6b6e696c 6374735f      0.9Mhz.link_stc
    5044:	50552073 415f4944 435f4953 414c5254     s UPDI_ASI_CTRLA
    5054:	69616620 2064656c 70006425 735f7968      failed %d.phy_s
    5064:	625f7465 72647561 20657461 6c696166     et_baudrate fail
    5074:	25206465 4c3c0064 3e4b4e49 696e6920     ed %d.<LINK> ini
    5084:	696c2074 6c006b6e 5f6b6e69 5f746573     t link.link_set_
    5094:	74696e69 69616620 2064656c 202c6425     init failed %d, 
    50a4:	72746572 64253d79 6e696c00 68635f6b     retry=%d.link_ch
    50b4:	206b6365 6c696166 25206465 72202c64     eck failed %d, r
    50c4:	79727465 0064253d 4e494c3c 4c203e4b     etry=%d.<LINK> L
    50d4:	72662044 25206d6f 7d583430 494c3c00     D from %04X}.<LI
    50e4:	203e4b4e 74205453 7830206f 3a583430     NK> ST to 0x04X:
    50f4:	32302520 68700078 72745f79 66736e61      %02x.phy_transf
    5104:	66207265 656c6961 64252064 6b636120     er failed %d ack
    5114:	32302520 68700078 72745f79 66736e61      %02x.phy_transf
    5124:	23207265 61662032 64656c69 20642520     er #2 failed %d 
    5134:	206b6361 78323025 494c3c00 203e4b4e     ack %02x.<LINK> 
    5144:	36315453 206f7420 34307830 25203a58     ST16 to 0x04X: %
    5154:	00783430 4e494c3c 4c203e4b 66203844     04x.<LINK> LD8 f
    5164:	206d6f72 2b727470 4c3c002b 3e4b4e49     rom ptr++.<LINK>
    5174:	31444c20 72662036 70206d6f 2b2b7274      LD16 from ptr++
    5184:	494c3c00 203e4b4e 70205453 25207274     .<LINK> ST ptr %
    5194:	68700078 72745f79 66736e61 66207265     x.phy_transfer f
    51a4:	656c6961 64252064 73657220 203d2070     ailed %d resp = 
    51b4:	30257830 3c007832 4b4e494c 5453203e     0x%02x.<LINK> ST
    51c4:	6f742038 74702a20 002b2b72 5f796870     8 to *ptr++.phy_
    51d4:	6e617274 72656673 69616620 2064656c     transfer failed 
    51e4:	72206425 20707365 30257830 70007832     %d resp 0x%02x.p
    51f4:	745f7968 736e6172 20726566 6c696166     hy_transfer fail
    5204:	25206465 20692064 72206425 20707365     ed %d i %d resp 
    5214:	30257830 3c007832 4b4e494c 5453203e     0x%02x.<LINK> ST
    5224:	74203631 702a206f 2b2b7274 494c3c00     16 to *ptr++.<LI
    5234:	203e4b4e 65706552 25207461 4c3c0064     NK> Repeat %d.<L
    5244:	3e4b4e49 70655220 31746165 64252036     INK> Repeat16 %d
    5254:	494c3c00 203e4b4e 64616552 42495320     .<LINK> Read SIB
    5264:	6e656c20 00642520 4e494c3c 4b203e4b      len %d.<LINK> K
    5274:	25207965 68700078 65735f79 6220646e     ey %x.phy_send b
    5284:	20657479 66206425 656c6961 64252064     yte %d failed %d
    5294:	00000000 00002129 00002265 000022ad     ....)!..e"..."..
    52a4:	000022f5 4d564e3c 7257203e 20657469     ."..<NVM> Write 
    52b4:	6f6d654d 4d007972 726f6d65 72772079     Memory.Memory wr
    52c4:	20657469 6c207461 656b636f 6f6d2064     ite at locked mo
    52d4:	57006564 69746972 2520676e 79622064     de.Writing %d by
    52e4:	20736574 61207461 65726464 30207373     tes at address 0
    52f4:	00782578 5f707061 74697277 61645f65     x%x.app_write_da
    5304:	625f6174 73657479 69616620 2064656c     ta_bytes failed 
    5314:	3c006425 3e4d564e 696e6920 766e2074     %d.<NVM> init nv
    5324:	4e3c006d 203e4d56 6e696564 6e207469     m.<NVM> deinit n
    5334:	3c006d76 3e4d564e 61655220 676e6964     vm.<NVM> Reading
    5344:	76656420 20656369 6f666e69 564e3c00      device info.<NV
    5354:	45203e4d 7265746e 20676e69 204d564e     M> Entering NVM 
    5364:	676f7270 6d6d6172 20676e69 65646f6d     programming mode
    5374:	70706100 746e655f 705f7265 6d676f72     .app_enter_progm
    5384:	2065646f 6c696166 25206465 4e3c0064     ode failed %d.<N
    5394:	203e4d56 7661654c 20676e69 204d564e     VM> Leaving NVM 
    53a4:	676f7270 6d6d6172 20676e69 65646f6d     programming mode
    53b4:	70706100 61656c5f 705f6576 6d676f72     .app_leave_progm
    53c4:	2065646f 6c696166 25206465 4e3c0064     ode failed %d.<N
    53d4:	203e4d56 61736944 20656c62 49445055     VM> Disable UPDI
    53e4:	746e6920 61667265 3c006563 3e4d564e      interface.<NVM>
    53f4:	6c6e5520 206b636f 20646e61 73617265      Unlock and eras
    5404:	20612065 69766564 44006563 63697665     e a device.Devic
    5414:	6e692065 6f727020 6d617267 6f6d2065     e in programe mo
    5424:	61206564 7520646e 636f6c6e 0064656b     de and unlocked.
    5434:	5f707061 6f6c6e75 66206b63 656c6961     app_unlock faile
    5444:	64252064 564e3c00 45203e4d 65736172     d %d.<NVM> Erase
    5454:	76656420 00656369 65746e45 72702072      device.Enter pr
    5464:	6f6d676f 66206564 74737269 70610021     ogmode first!.ap
    5474:	68635f70 655f7069 65736172 69616620     p_chip_erase fai
    5484:	2064656c 3c006425 3e4d564e 69725720     led %d.<NVM> Wri
    5494:	20736574 65206f74 6f727065 6565006d     tes to eeprom.ee
    54a4:	6d6f7270 64646120 73736572 65766f20     prom address ove
    54b4:	6f6c6672 61202c77 20726464 2c786825     rflow, addr %hx,
    54c4:	6e656c20 2e782520 69725700 676e6974      len %x..Writing
    54d4:	70656520 206d6f72 65676170 2f642528      eeprom page(%d/
    54e4:	20296425 30207461 00782578 5f707061     %d) at 0x%x.app_
    54f4:	74697277 766e5f65 6166206d 64656c69     write_nvm failed
    5504:	00642520 74697257 65652065 6d6f7270      %d.Write eeprom
    5514:	67617020 64252065 69616620 2064656c      page %d failed 
    5524:	3c006425 3e4d564e 69725720 20736574     %d.<NVM> Writes 
    5534:	66206f74 00657375 65737566 64646120     to fuse.fuse add
    5544:	73736572 65766f20 6f6c6672 61202c77     ress overflow, a
    5554:	20726464 2e786825 70706100 6972775f     ddr %hx..app_wri
    5564:	645f6574 5f617461 65747962 75662073     te_data_bytes fu
    5574:	61206573 65726464 25207373 20783430     se address %04x 
    5584:	6c696166 25206465 70610064 72775f70     failed %d.app_wr
    5594:	5f657469 61746164 7479625f 66207365     ite_data_bytes f
    55a4:	20657375 61746164 32302520 61662078     use data %02x fa
    55b4:	64656c69 00642520 5f707061 63657865     iled %d.app_exec
    55c4:	5f657475 5f6d766e 6d6d6f63 20646e61     ute_nvm_command 
    55d4:	65737566 6d6f6320 646e616d 69616620     fuse command fai
    55e4:	2064656c 3c006425 3e4d564e 61655220     led %d.<NVM> Rea
    55f4:	656d2064 79726f6d 6d654d00 2079726f     d memory.Memory 
    5604:	64616572 20746120 6b636f6c 6d206465     read at locked m
    5614:	0065646f 64616552 20676e69 62206425     ode.Reading %d b
    5624:	73657479 20746120 72646461 20737365     ytes at address 
    5634:	78257830 70706100 6165725f 61645f64     0x%x.app_read_da
    5644:	625f6174 73657479 69616620 2064656c     ta_bytes failed 
    5654:	3c006425 3e4d564e 61655220 72662064     %d.<NVM> Read fr
    5664:	6e206d6f 61206d76 00616572 204d564e     om nvm area.NVM 
    5674:	61657261 61657220 74612064 636f6c20     area read at loc
    5684:	2064656b 65646f6d 6d766e00 65726120     ked mode.nvm are
    5694:	64612061 73657264 766f2073 6c667265     a address overfl
    56a4:	202c776f 72646461 78682520 656c202c     ow, addr %hx, le
    56b4:	7825206e 4e3c002e 203e4d56 65736552     n %x..<NVM> Rese
    56c4:	70610074 6e655f70 5f726574 676f7270     t.app_enter_prog
    56d4:	65646f6d 6166202c 2064656c 75736572     mode, faled resu
    56e4:	2520746c 766e0064 65675f6d 6c625f74     lt %d.nvm_get_bl
    56f4:	5f6b636f 6f666e69 69616620 0064656c     ock_info failed.
    5704:	4d564e3c 7257203e 73657469 206f7420     <NVM> Writes to 
    5714:	73616c66 6c660068 20687361 72646461     flash.flash addr
    5724:	20737365 7265766f 776f6c66 6461202c     ess overflow, ad
    5734:	25207264 202c7868 206e656c 002e7825     dr %hx, len %x..
    5744:	74697257 20676e69 73616c66 61702068     Writing flash pa
    5754:	25286567 64252f64 74612029 25783020     ge(%d/%d) at 0x%
    5764:	72570078 20657469 73616c66 61702068     x.Write flash pa
    5774:	25206567 61662064 64656c69 00642520     ge %d failed %d.
    5784:	6d766e5f 6972775f 665f6574 20657375     _nvm_write_fuse 
    5794:	65737566 64252820 61662029 64656c69     fuse (%d) failed
    57a4:	00642520 4d564e3c 7257203e 20657469      %d.<NVM> Write 
    57b4:	6f747541 564e3c00 6e203e4d 675f6d76     Auto.<NVM> nvm_g
    57c4:	625f7465 6b636f6c 666e695f 6425206f     et_block_info %d
    57d4:	69616620 0064656c 503ce555 203e5948      failed.U.<PHY> 
    57e4:	6e696544 3c007469 3e594850 74655320     Deinit.<PHY> Set
    57f4:	75614220 74617264 503c0065 203e5948      Baudrate.<PHY> 
    5804:	20746573 64756142 20642520 6c696166     set Baud %d fail
    5814:	25206465 503c0064 203e5948 646e6553     ed %d.<PHY> Send
    5824:	7830003a 78323025 503c0020 203e5948     :.0x%02x .<PHY> 
    5834:	646e6553 6c46203a 50687375 2074726f     Send: FlushPort 
    5844:	6c696166 25206465 503c0064 203e5948     failed %d.<PHY> 
    5854:	646e6553 6553203a 6144646e 66206174     Send: SendData f
    5864:	656c6961 64252064 48503c00 53203e59     ailed %d.<PHY> S
    5874:	3a646e65 61655220 74614464 696d2061     end: ReadData mi
    5884:	74616d73 25206863 28783230 78323025     smatch %02x(%02x
    5894:	6f6c2029 65746163 203d2064 3c006425     ) located = %d.<
    58a4:	3e594850 6e655320 52203a64 44646165     PHY> Send: ReadD
    58b4:	20617461 6c696166 25206465 503c0064     ata failed %d.<P
    58c4:	203e5948 646e6553 6553203a 6144646e     HY> Send: SendDa
    58d4:	28206174 20296425 6c696166 25206465     ta (%d) failed %
    58e4:	503c0064 203e5948 646e6553 6552203a     d.<PHY> Send: Re
    58f4:	61446461 28206174 20296425 6c696166     adData (%d) fail
    5904:	25206465 503c0064 203e5948 61657242     ed %d.<PHY> Brea
    5914:	53203a6b 69646e65 6220676e 6b616572     k: Sending break
    5924:	48503c00 53203e59 20646e65 61657242     .<PHY> Send Brea
    5934:	70203a6b 735f7968 20646e65 6c696166     k: phy_send fail
    5944:	25206465 503c0064 203e5948 72422d44     ed %d.<PHY> D-Br
    5954:	3a6b6165 6e655320 676e6964 756f6420     eak: Sending dou
    5964:	20656c62 61657262 503c006b 203e5948     ble break.<PHY> 
    5974:	72422d44 3a6b6165 74655320 74726f50     D-Break: SetPort
    5984:	74617453 61662065 64656c69 00642520     State failed %d.
    5994:	5948503c 2d44203e 61657242 70203a6b     <PHY> D-Break: p
    59a4:	735f7968 20646e65 6c696166 25206465     hy_send failed %
    59b4:	503c0064 203e5948 72422d44 3a6b6165     d.<PHY> D-Break:
    59c4:	2d657220 50746553 5374726f 65746174      re-SetPortState
    59d4:	69616620 2064656c 3c006425 3e594850      failed %d.<PHY>
    59e4:	65704f20 676e696e 726f7020 73252074      Opening port %s
    59f4:	6162202c 61726475 25206574 68700064     , baudrate %d.ph
    5a04:	65735f79 645f646e 6c62756f 72625f65     y_send_double_br
    5a14:	206b6165 6c696166 25206465 503c0064     eak failed %d.<P
    5a24:	203e5948 74696e49 704f203a 6f506e65     HY> Init: OpenPo
    5a34:	25207472 61662073 64656c69 503c0020     rt %s failed .<P
    5a44:	203e5948 76636552 6552203a 61446461     HY> Recv: ReadDa
    5a54:	66206174 656c6961 64252064 48503c00     ta failed %d.<PH
    5a64:	52203e59 3a766365 61655220 74614464     Y> Recv: ReadDat
    5a74:	69742061 756f656d 503c0074 203e5948     a timeout.<PHY> 
    5a84:	76636552 6552203a 76696563 25286465     Recv: Received(%
    5a94:	64252f64 00203a29 5948503c 6552203e     d/%d): .<PHY> Re
    5aa4:	203a7663 65636552 64657669 2f642528     cv: Received(%d/
    5ab4:	20296425 6c696166 203a6465 48503c00     %d) failed: .<PH
    5ac4:	52203e59 20766365 3a656e6f 79687020     Y> Recv one: phy
    5ad4:	6365725f 65766965 69616620 2c64656c     _receive failed,
    5ae4:	746f4720 20642520 65747962 503c0073      Got %d bytes.<P
    5af4:	203e5948 6e617254 72656673 7257203a     HY> Transfer: Wr
    5b04:	20657469 62206425 73657479 6552202c     ite %d bytes, Re
    5b14:	25206461 79622064 00736574 5948503c     ad %d bytes.<PHY
    5b24:	7254203e 66736e61 203a7265 5f796870     > Transfer: phy_
    5b34:	646e6573 69616620 2064656c 3c006425     send failed %d.<
    5b44:	3e594850 61725420 6566736e 70203a72     PHY> Transfer: p
    5b54:	725f7968 69656365 66206576 656c6961     hy_receive faile
    5b64:	47202c64 2520746f 79622064 00736574     d, Got %d bytes.
    5b74:	5948503c 6953203e 503c0062 203e5948     <PHY> Sib.<PHY> 
    5b84:	3a626953 79687020 6172745f 6566736e     Sib: phy_transfe
    5b94:	61662072 64656c69 00642520 682f2e2e     r failed %d.../h
    5ba4:	732f6c61 682f6372 695f6c61 00632e6f     al/src/hal_io.c.
    5bb4:	682f2e2e 732f6c61 682f6372 755f6c61     ../hal/src/hal_u
    5bc4:	74726173 7973615f 632e636e 2f2e2e00     sart_async.c.../
    5bd4:	2f6c6168 6c697475 72732f73 74752f63     hal/utils/src/ut
    5be4:	5f736c69 676e6972 66667562 632e7265     ils_ringbuffer.c
    5bf4:	2f2e2e00 2f6c7068 63726573 682f6d6f     .../hpl/sercom/h
    5c04:	735f6c70 6f637265 00632e6d 00003a68     pl_sercom.c.h:..
    5c14:	00003a38 00003a4a 0000398c 00003a4a     8:..J:...9..J:..
    5c24:	00003a2e 00003a4a 0000398c 00003a38     .:..J:...9..8:..
    5c34:	00003a38 00003a2e 0000398c 00003994     8:...:...9...9..
    5c44:	00003994 00003994 00003a50 00003a38     .9...9..P:..8:..
    5c54:	00003a38 00003a0c 00003af0 00003a0c     8:...:...:...:..
    5c64:	00003a2e 00003a0c 00003af0 00003a38     .:...:...:..8:..
    5c74:	00003a38 00003a2e 00003af0 00003994     8:...:...:...9..
    5c84:	00003994 00003994 00003afa 00003c98     .9...9...:...<..
    5c94:	00003be8 00003be8 00003be6 00003c8a     .;...;...;...<..
    5ca4:	00003c8a 00003c80 00003be6 00003c8a     .<...<...;...<..
    5cb4:	00003c80 00003c8a 00003be6 00003c90     .<...<...;...<..
    5cc4:	00003c90 00003c90 00003d20              .<...<.. =..

00005cd0 <_init>:
    5cd0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    5cd2:	46c0      	nop			; (mov r8, r8)
    5cd4:	bcf8      	pop	{r3, r4, r5, r6, r7}
    5cd6:	bc08      	pop	{r3}
    5cd8:	469e      	mov	lr, r3
    5cda:	4770      	bx	lr

00005cdc <__init_array_start>:
    5cdc:	000000dd 	.word	0x000000dd

00005ce0 <_fini>:
    5ce0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    5ce2:	46c0      	nop			; (mov r8, r8)
    5ce4:	bcf8      	pop	{r3, r4, r5, r6, r7}
    5ce6:	bc08      	pop	{r3}
    5ce8:	469e      	mov	lr, r3
    5cea:	4770      	bx	lr

00005cec <__fini_array_start>:
    5cec:	000000b5 	.word	0x000000b5
