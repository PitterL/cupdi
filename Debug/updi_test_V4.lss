
updi_test_V4.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000052a0  00000000  00000000  00010000  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .relocate     00000510  20000000  000052a0  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  2 .lpram        00000000  30000000  30000000  00020510  2**0
                  CONTENTS
  3 .bss          000000e8  20000510  000057b0  00020510  2**2
                  ALLOC
  4 .stack        00002000  200005f8  00005898  00020510  2**0
                  ALLOC
  5 .ARM.attributes 00000028  00000000  00000000  00020510  2**0
                  CONTENTS, READONLY
  6 .comment      00000059  00000000  00000000  00020538  2**0
                  CONTENTS, READONLY
  7 .debug_info   0001dccc  00000000  00000000  00020591  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 00003a00  00000000  00000000  0003e25d  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_loc    0000d9d2  00000000  00000000  00041c5d  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_aranges 00000c80  00000000  00000000  0004f62f  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00001770  00000000  00000000  000502af  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_macro  0001e29e  00000000  00000000  00051a1f  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_line   00012479  00000000  00000000  0006fcbd  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_str    0009471f  00000000  00000000  00082136  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_frame  000023fc  00000000  00000000  00116858  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <exception_table>:
       0:	f8 25 00 20 15 1b 00 00 11 1b 00 00 11 1b 00 00     .%. ............
	...
      2c:	11 1b 00 00 00 00 00 00 00 00 00 00 11 1b 00 00     ................
      3c:	11 1b 00 00 11 1b 00 00 11 1b 00 00 11 1b 00 00     ................
      4c:	11 1b 00 00 11 1b 00 00 11 1b 00 00 11 1b 00 00     ................
      5c:	11 1b 00 00 11 1b 00 00 11 1b 00 00 11 1b 00 00     ................
      6c:	11 1b 00 00 d1 26 00 00 11 1b 00 00 11 1b 00 00     .....&..........
      7c:	11 1b 00 00 11 1b 00 00 11 1b 00 00 11 1b 00 00     ................
      8c:	11 1b 00 00 11 1b 00 00 11 1b 00 00 11 1b 00 00     ................
      9c:	11 1b 00 00 11 1b 00 00 11 1b 00 00 11 1b 00 00     ................
      ac:	11 1b 00 00 00 00 00 00                             ........

000000b4 <__do_global_dtors_aux>:
      b4:	b510      	push	{r4, lr}
      b6:	4c06      	ldr	r4, [pc, #24]	; (d0 <__do_global_dtors_aux+0x1c>)
      b8:	7823      	ldrb	r3, [r4, #0]
      ba:	2b00      	cmp	r3, #0
      bc:	d107      	bne.n	ce <__do_global_dtors_aux+0x1a>
      be:	4b05      	ldr	r3, [pc, #20]	; (d4 <__do_global_dtors_aux+0x20>)
      c0:	2b00      	cmp	r3, #0
      c2:	d002      	beq.n	ca <__do_global_dtors_aux+0x16>
      c4:	4804      	ldr	r0, [pc, #16]	; (d8 <__do_global_dtors_aux+0x24>)
      c6:	e000      	b.n	ca <__do_global_dtors_aux+0x16>
      c8:	bf00      	nop
      ca:	2301      	movs	r3, #1
      cc:	7023      	strb	r3, [r4, #0]
      ce:	bd10      	pop	{r4, pc}
      d0:	20000510 	.word	0x20000510
      d4:	00000000 	.word	0x00000000
      d8:	000052a0 	.word	0x000052a0

000000dc <frame_dummy>:
      dc:	4b08      	ldr	r3, [pc, #32]	; (100 <frame_dummy+0x24>)
      de:	b510      	push	{r4, lr}
      e0:	2b00      	cmp	r3, #0
      e2:	d003      	beq.n	ec <frame_dummy+0x10>
      e4:	4907      	ldr	r1, [pc, #28]	; (104 <frame_dummy+0x28>)
      e6:	4808      	ldr	r0, [pc, #32]	; (108 <frame_dummy+0x2c>)
      e8:	e000      	b.n	ec <frame_dummy+0x10>
      ea:	bf00      	nop
      ec:	4807      	ldr	r0, [pc, #28]	; (10c <frame_dummy+0x30>)
      ee:	6803      	ldr	r3, [r0, #0]
      f0:	2b00      	cmp	r3, #0
      f2:	d100      	bne.n	f6 <frame_dummy+0x1a>
      f4:	bd10      	pop	{r4, pc}
      f6:	4b06      	ldr	r3, [pc, #24]	; (110 <frame_dummy+0x34>)
      f8:	2b00      	cmp	r3, #0
      fa:	d0fb      	beq.n	f4 <frame_dummy+0x18>
      fc:	4798      	blx	r3
      fe:	e7f9      	b.n	f4 <frame_dummy+0x18>
     100:	00000000 	.word	0x00000000
     104:	20000514 	.word	0x20000514
     108:	000052a0 	.word	0x000052a0
     10c:	000052a0 	.word	0x000052a0
     110:	00000000 	.word	0x00000000

00000114 <atmel_start_init>:

/**
 * Initializes MCU, drivers and middleware in the project
 **/
void atmel_start_init(void)
{
     114:	b510      	push	{r4, lr}
	system_init();
     116:	4b01      	ldr	r3, [pc, #4]	; (11c <atmel_start_init+0x8>)
     118:	4798      	blx	r3
}
     11a:	bd10      	pop	{r4, pc}
     11c:	00001c19 	.word	0x00001c19

00000120 <updi_write_fuse>:
UPDI Fuse Write
    @nvm_ptr: updi_nvm_init() device handle
    @returns 0 - success, other value failed code
*/
int updi_write_fuse(void *nvm_ptr)
{
     120:	b5f0      	push	{r4, r5, r6, r7, lr}
     122:	b087      	sub	sp, #28
	int result;
	int index;
	nvm_info_t info;
	u8 data[16];
	
	result = nvm_get_block_info(nvm_ptr, NVM_FUSES, &info);
     124:	2103      	movs	r1, #3
     126:	466a      	mov	r2, sp
     128:	4b15      	ldr	r3, [pc, #84]	; (180 <updi_write_fuse+0x60>)
{
     12a:	0006      	movs	r6, r0
	result = nvm_get_block_info(nvm_ptr, NVM_FUSES, &info);
     12c:	4798      	blx	r3
     12e:	1e01      	subs	r1, r0, #0
	if (result) {
     130:	d122      	bne.n	178 <updi_write_fuse+0x58>
		DBG_INFO(NVM_DEBUG, "nvm_get_block_info failed");
		return -1;
	}
	
	result = nvm_read_fuse(nvm_ptr, 0, data, info.nvm_size);
     132:	466b      	mov	r3, sp
     134:	4c13      	ldr	r4, [pc, #76]	; (184 <updi_write_fuse+0x64>)
     136:	885b      	ldrh	r3, [r3, #2]
     138:	aa02      	add	r2, sp, #8
     13a:	0030      	movs	r0, r6
     13c:	47a0      	blx	r4
     13e:	0005      	movs	r5, r0
     140:	1e04      	subs	r4, r0, #0
	if (result) {
     142:	d008      	beq.n	156 <updi_write_fuse+0x36>
		DBG_INFO(NVM_DEBUG, "nvm_read_fuse failed");
		return -2;
     144:	2502      	movs	r5, #2
     146:	e018      	b.n	17a <updi_write_fuse+0x5a>
	}
	
	for (index = 0; index < info.nvm_size; index++) {
		if (data[index] != fuse_data[index]) {
     148:	4a0f      	ldr	r2, [pc, #60]	; (188 <updi_write_fuse+0x68>)
     14a:	ab02      	add	r3, sp, #8
     14c:	5ce1      	ldrb	r1, [r4, r3]
     14e:	5ca3      	ldrb	r3, [r4, r2]
     150:	4299      	cmp	r1, r3
     152:	d107      	bne.n	164 <updi_write_fuse+0x44>
	for (index = 0; index < info.nvm_size; index++) {
     154:	3401      	adds	r4, #1
     156:	466b      	mov	r3, sp
     158:	885b      	ldrh	r3, [r3, #2]
     15a:	429c      	cmp	r4, r3
     15c:	dbf4      	blt.n	148 <updi_write_fuse+0x28>
			}
		}
	}
	
	return 0;
}
     15e:	0028      	movs	r0, r5
     160:	b007      	add	sp, #28
     162:	bdf0      	pop	{r4, r5, r6, r7, pc}
			result = nvm_write_fuse(nvm_ptr, index, (const u8 *)&fuse_data[index], 1);
     164:	1912      	adds	r2, r2, r4
     166:	b2a1      	uxth	r1, r4
     168:	2301      	movs	r3, #1
     16a:	0030      	movs	r0, r6
     16c:	4f07      	ldr	r7, [pc, #28]	; (18c <updi_write_fuse+0x6c>)
     16e:	47b8      	blx	r7
			if (result) {
     170:	2800      	cmp	r0, #0
     172:	d0ef      	beq.n	154 <updi_write_fuse+0x34>
				return -3;
     174:	2503      	movs	r5, #3
     176:	e000      	b.n	17a <updi_write_fuse+0x5a>
		return -1;
     178:	2501      	movs	r5, #1
				return -3;
     17a:	426d      	negs	r5, r5
     17c:	e7ef      	b.n	15e <updi_write_fuse+0x3e>
     17e:	46c0      	nop			; (mov r8, r8)
     180:	00001615 	.word	0x00001615
     184:	0000170d 	.word	0x0000170d
     188:	20000000 	.word	0x20000000
     18c:	00001745 	.word	0x00001745

00000190 <set_default_segment_id>:

int set_default_segment_id(hex_data_t *dhex, ihex_segment_t segmentid)
{
     190:	22a0      	movs	r2, #160	; 0xa0
     192:	00d2      	lsls	r2, r2, #3
     194:	0003      	movs	r3, r0
     196:	1882      	adds	r2, r0, r2
	segment_buffer_t *seg;
	int result = 0;
     198:	2000      	movs	r0, #0
{
     19a:	b510      	push	{r4, lr}

	for (int i = 0; i < MAX_SEGMENT_COUNT_IN_RECORDS; i++) {
		seg = &dhex->segment[i];
		if (!seg->sid && seg->addr_to && seg->data) {
     19c:	881c      	ldrh	r4, [r3, #0]
     19e:	2c00      	cmp	r4, #0
     1a0:	d107      	bne.n	1b2 <set_default_segment_id+0x22>
     1a2:	689c      	ldr	r4, [r3, #8]
     1a4:	2c00      	cmp	r4, #0
     1a6:	d004      	beq.n	1b2 <set_default_segment_id+0x22>
     1a8:	68dc      	ldr	r4, [r3, #12]
     1aa:	2c00      	cmp	r4, #0
     1ac:	d001      	beq.n	1b2 <set_default_segment_id+0x22>
			seg->sid = segmentid;
     1ae:	8019      	strh	r1, [r3, #0]
			result++;
     1b0:	3001      	adds	r0, #1
     1b2:	3314      	adds	r3, #20
	for (int i = 0; i < MAX_SEGMENT_COUNT_IN_RECORDS; i++) {
     1b4:	4293      	cmp	r3, r2
     1b6:	d1f1      	bne.n	19c <set_default_segment_id+0xc>
		}
	}

	return result;
}
     1b8:	bd10      	pop	{r4, pc}
	...

000001bc <updi_program>:
    @nvm_ptr: updi_nvm_init() device handle
    @file: hex/ihex file path
    @returns 0 - success, other value failed code
*/
int updi_program(void *nvm_ptr)
{
     1bc:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
    segment_buffer_t *seg;
    ihex_segment_t sid;
    nvm_info_t iflash;
    int i, result = 0;

    result = nvm_get_block_info(nvm_ptr, NVM_FLASH, &iflash);
     1be:	4b17      	ldr	r3, [pc, #92]	; (21c <updi_program+0x60>)
     1c0:	466a      	mov	r2, sp
     1c2:	2100      	movs	r1, #0
{
     1c4:	0006      	movs	r6, r0
    result = nvm_get_block_info(nvm_ptr, NVM_FLASH, &iflash);
     1c6:	4798      	blx	r3
    if (result) {
     1c8:	2800      	cmp	r0, #0
     1ca:	d122      	bne.n	212 <updi_program+0x56>
        DBG_INFO(UPDI_DEBUG, "nvm_get_block_info failed %d", result);
        return -2;
    }
        
    sid = ADDR_TO_SEGMENTID(iflash.nvm_start);
     1cc:	466b      	mov	r3, sp
    set_default_segment_id(dhex, sid);
     1ce:	4c14      	ldr	r4, [pc, #80]	; (220 <updi_program+0x64>)
    sid = ADDR_TO_SEGMENTID(iflash.nvm_start);
     1d0:	8819      	ldrh	r1, [r3, #0]
    set_default_segment_id(dhex, sid);
     1d2:	0020      	movs	r0, r4
     1d4:	0909      	lsrs	r1, r1, #4
     1d6:	4b13      	ldr	r3, [pc, #76]	; (224 <updi_program+0x68>)
     1d8:	4798      	blx	r3

    result = nvm_chip_erase(nvm_ptr);
     1da:	0030      	movs	r0, r6
     1dc:	4b12      	ldr	r3, [pc, #72]	; (228 <updi_program+0x6c>)
     1de:	4798      	blx	r3
     1e0:	1e05      	subs	r5, r0, #0
    if (result) {
     1e2:	d119      	bne.n	218 <updi_program+0x5c>
        DBG_INFO(UPDI_DEBUG, "nvm_chip_erase failed %d", result);
        result = -4;
        goto out;
    }

    for (i = 0; i < ARRAY_SIZE(dhex->segment); i++) {
     1e4:	4b11      	ldr	r3, [pc, #68]	; (22c <updi_program+0x70>)
     1e6:	429c      	cmp	r4, r3
     1e8:	d101      	bne.n	1ee <updi_program+0x32>

    DBG_INFO(UPDI_DEBUG, "Program finished");

out:
    return result;
}
     1ea:	0028      	movs	r0, r5
     1ec:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
        if (seg->data) {
     1ee:	68e2      	ldr	r2, [r4, #12]
     1f0:	2a00      	cmp	r2, #0
     1f2:	d101      	bne.n	1f8 <updi_program+0x3c>
     1f4:	3414      	adds	r4, #20
     1f6:	e7f5      	b.n	1e4 <updi_program+0x28>
            result = nvm_write_flash/*nvm_write_auto*/(nvm_ptr, SEGMENTID_TO_ADDR(seg->sid) + seg->addr_from, (u8 *)seg->data, seg->len);
     1f8:	8821      	ldrh	r1, [r4, #0]
     1fa:	6863      	ldr	r3, [r4, #4]
     1fc:	0109      	lsls	r1, r1, #4
     1fe:	1859      	adds	r1, r3, r1
     200:	b289      	uxth	r1, r1
     202:	6923      	ldr	r3, [r4, #16]
     204:	0030      	movs	r0, r6
     206:	4f0a      	ldr	r7, [pc, #40]	; (230 <updi_program+0x74>)
     208:	47b8      	blx	r7
            if (result) {
     20a:	2800      	cmp	r0, #0
     20c:	d0f2      	beq.n	1f4 <updi_program+0x38>
                result = -5;
     20e:	2505      	movs	r5, #5
     210:	e000      	b.n	214 <updi_program+0x58>
        return -2;
     212:	2502      	movs	r5, #2
                result = -5;
     214:	426d      	negs	r5, r5
     216:	e7e8      	b.n	1ea <updi_program+0x2e>
        result = -4;
     218:	2504      	movs	r5, #4
     21a:	e7fb      	b.n	214 <updi_program+0x58>
     21c:	00001615 	.word	0x00001615
     220:	2000000c 	.word	0x2000000c
     224:	00000191 	.word	0x00000191
     228:	0000148d 	.word	0x0000148d
     22c:	2000050c 	.word	0x2000050c
     230:	0000163d 	.word	0x0000163d

00000234 <cupdi_operate>:
{
     234:	b570      	push	{r4, r5, r6, lr}
    dev = get_chip_info(dev_name);
     236:	481c      	ldr	r0, [pc, #112]	; (2a8 <cupdi_operate+0x74>)
     238:	4b1c      	ldr	r3, [pc, #112]	; (2ac <cupdi_operate+0x78>)
     23a:	4798      	blx	r3
     23c:	1e02      	subs	r2, r0, #0
    if (!dev) {
     23e:	d02f      	beq.n	2a0 <cupdi_operate+0x6c>
    nvm_ptr = updi_nvm_init(comport, baudrate, (void *)dev);
     240:	21e1      	movs	r1, #225	; 0xe1
     242:	2000      	movs	r0, #0
     244:	0249      	lsls	r1, r1, #9
     246:	4b1a      	ldr	r3, [pc, #104]	; (2b0 <cupdi_operate+0x7c>)
     248:	4798      	blx	r3
     24a:	1e05      	subs	r5, r0, #0
    if (!nvm_ptr) {
     24c:	d023      	beq.n	296 <cupdi_operate+0x62>
    result = nvm_get_device_info(nvm_ptr);
     24e:	4b19      	ldr	r3, [pc, #100]	; (2b4 <cupdi_operate+0x80>)
     250:	4798      	blx	r3
        result = -4;
     252:	2404      	movs	r4, #4
    if (result) {
     254:	2800      	cmp	r0, #0
     256:	d11f      	bne.n	298 <cupdi_operate+0x64>
    result = nvm_enter_progmode(nvm_ptr);
     258:	0028      	movs	r0, r5
     25a:	4b17      	ldr	r3, [pc, #92]	; (2b8 <cupdi_operate+0x84>)
     25c:	4798      	blx	r3
    if (result) {
     25e:	2800      	cmp	r0, #0
     260:	d112      	bne.n	288 <cupdi_operate+0x54>
    result = updi_write_fuse(nvm_ptr);
     262:	0028      	movs	r0, r5
     264:	4b15      	ldr	r3, [pc, #84]	; (2bc <cupdi_operate+0x88>)
     266:	4798      	blx	r3
		result = -6;
     268:	2406      	movs	r4, #6
	if (result) {
     26a:	2800      	cmp	r0, #0
     26c:	d114      	bne.n	298 <cupdi_operate+0x64>
    result = updi_program(nvm_ptr);//file);
     26e:	0028      	movs	r0, r5
     270:	4b13      	ldr	r3, [pc, #76]	; (2c0 <cupdi_operate+0x8c>)
     272:	4798      	blx	r3
     274:	1e04      	subs	r4, r0, #0
    if (result) {
     276:	d111      	bne.n	29c <cupdi_operate+0x68>
    nvm_leave_progmode(nvm_ptr);
     278:	4b12      	ldr	r3, [pc, #72]	; (2c4 <cupdi_operate+0x90>)
     27a:	0028      	movs	r0, r5
     27c:	4798      	blx	r3
    updi_nvm_deinit(nvm_ptr);
     27e:	0028      	movs	r0, r5
     280:	4b11      	ldr	r3, [pc, #68]	; (2c8 <cupdi_operate+0x94>)
     282:	4798      	blx	r3
}
     284:	0020      	movs	r0, r4
     286:	bd70      	pop	{r4, r5, r6, pc}
        result = nvm_unlock_device(nvm_ptr);
     288:	0028      	movs	r0, r5
     28a:	4b10      	ldr	r3, [pc, #64]	; (2cc <cupdi_operate+0x98>)
     28c:	4798      	blx	r3
        if (result) {
     28e:	2800      	cmp	r0, #0
     290:	d0e7      	beq.n	262 <cupdi_operate+0x2e>
            result = -5;
     292:	2405      	movs	r4, #5
     294:	e000      	b.n	298 <cupdi_operate+0x64>
        result = -3;
     296:	2403      	movs	r4, #3
        result = -9;
     298:	4264      	negs	r4, r4
     29a:	e7ed      	b.n	278 <cupdi_operate+0x44>
     29c:	2409      	movs	r4, #9
     29e:	e7fb      	b.n	298 <cupdi_operate+0x64>
        return -2;
     2a0:	2402      	movs	r4, #2
     2a2:	4264      	negs	r4, r4
     2a4:	e7ee      	b.n	284 <cupdi_operate+0x50>
     2a6:	46c0      	nop			; (mov r8, r8)
     2a8:	0000332e 	.word	0x0000332e
     2ac:	000002d1 	.word	0x000002d1
     2b0:	00001381 	.word	0x00001381
     2b4:	000013cd 	.word	0x000013cd
     2b8:	000013f1 	.word	0x000013f1
     2bc:	00000121 	.word	0x00000121
     2c0:	000001bd 	.word	0x000001bd
     2c4:	00001421 	.word	0x00001421
     2c8:	000013ad 	.word	0x000013ad
     2cc:	00001459 	.word	0x00001459

000002d0 <get_chip_info>:
};

inline const device_info_t * get_chip_info(const char *dev_name) 
{
    return (&device_1617);
}
     2d0:	4800      	ldr	r0, [pc, #0]	; (2d4 <get_chip_info+0x4>)
     2d2:	4770      	bx	lr
     2d4:	00003338 	.word	0x00003338

000002d8 <dev_get_nvm_info>:
    @type: NVM type
    @info: chip flash information
    @return 0 successful, other value failed
*/
int dev_get_nvm_info(const void *dev_ptr, NVM_TYPE_T type, nvm_info_t * info)
{
     2d8:	b510      	push	{r4, lr}
     2da:	0013      	movs	r3, r2
     2dc:	0004      	movs	r4, r0
    get NVM information
    */
    const device_info_t *dev = (const device_info_t *)dev_ptr;
    const nvm_info_t *iblock;

    switch (type) {
     2de:	2903      	cmp	r1, #3
     2e0:	d812      	bhi.n	308 <dev_get_nvm_info+0x30>
     2e2:	0008      	movs	r0, r1
     2e4:	6861      	ldr	r1, [r4, #4]
     2e6:	f002 fa33 	bl	2750 <__gnu_thumb1_case_uqi>
     2ea:	0902      	.short	0x0902
     2ec:	0d0b      	.short	0x0d0b
    case NVM_FLASH:
        iblock = &dev->mmap->flash;
     2ee:	3104      	adds	r1, #4
        break;
    default:
        return -2;
    }

    memcpy(info, iblock, sizeof(*info));
     2f0:	0018      	movs	r0, r3
     2f2:	2206      	movs	r2, #6
     2f4:	4b06      	ldr	r3, [pc, #24]	; (310 <dev_get_nvm_info+0x38>)
     2f6:	4798      	blx	r3

    return 0;
     2f8:	2000      	movs	r0, #0
}
     2fa:	bd10      	pop	{r4, pc}
        iblock = &dev->mmap->eeprom;
     2fc:	311c      	adds	r1, #28
        break;
     2fe:	e7f7      	b.n	2f0 <dev_get_nvm_info+0x18>
        iblock = &dev->mmap->userrow;
     300:	3116      	adds	r1, #22
        break;
     302:	e7f5      	b.n	2f0 <dev_get_nvm_info+0x18>
        iblock = &dev->mmap->fuse;
     304:	3110      	adds	r1, #16
        break;
     306:	e7f3      	b.n	2f0 <dev_get_nvm_info+0x18>
        return -2;
     308:	2002      	movs	r0, #2
     30a:	4240      	negs	r0, r0
     30c:	e7f5      	b.n	2fa <dev_get_nvm_info+0x22>
     30e:	46c0      	nop			; (mov r8, r8)
     310:	0000330d 	.word	0x0000330d

00000314 <msleep>:

#include "hal_delay.h"

//delay millisecond here
void msleep(int ms)
{
     314:	b510      	push	{r4, lr}
    /*usleep(ms * 1000);*/
	delay_ms(ms);
     316:	b280      	uxth	r0, r0
     318:	4b01      	ldr	r3, [pc, #4]	; (320 <msleep+0xc>)
     31a:	4798      	blx	r3
}
     31c:	bd10      	pop	{r4, pc}
     31e:	46c0      	nop			; (mov r8, r8)
     320:	00001c49 	.word	0x00001c49

00000324 <err_cb_USART_0>:
	/* Transfer completed */
}
static void err_cb_USART_0(const struct usart_async_descriptor *const io_descr)
{
	/* Transfer completed */
}
     324:	4770      	bx	lr

00000326 <rx_cb_USART_0>:
     326:	4770      	bx	lr

00000328 <tx_cb_USART_0>:
     328:	4770      	bx	lr
	...

0000032c <SetPortState>:
* @param BYTE byteSize The data size
* @param BYTE stopBits The number of stop bits ONESTOPBIT|ONE5STOPBITS|TWOSTOPBITS
* @param BYTE parity The partity checksum  NOPARITY|ODDPARITY|EVENPARITY
* @returns 0 - success, other value failed code
*/
int SetPortState(void *ptr_ser, const SER_PORT_STATE_T *st) {
     32c:	b570      	push	{r4, r5, r6, lr}

    //if (!VALID_SER(ser))
    //    return ERROR_PTR;
			
	// Set baund rate
	usart_async_set_baud_rate(&USART_0, USART_BAUD_RATE(st->baudRate));
     32e:	6808      	ldr	r0, [r1, #0]
     330:	4b21      	ldr	r3, [pc, #132]	; (3b8 <SetPortState+0x8c>)
int SetPortState(void *ptr_ser, const SER_PORT_STATE_T *st) {
     332:	000d      	movs	r5, r1
	usart_async_set_baud_rate(&USART_0, USART_BAUD_RATE(st->baudRate));
     334:	4798      	blx	r3
     336:	4b21      	ldr	r3, [pc, #132]	; (3bc <SetPortState+0x90>)
     338:	4921      	ldr	r1, [pc, #132]	; (3c0 <SetPortState+0x94>)
     33a:	4798      	blx	r3
     33c:	1c01      	adds	r1, r0, #0
     33e:	208f      	movs	r0, #143	; 0x8f
     340:	4b20      	ldr	r3, [pc, #128]	; (3c4 <SetPortState+0x98>)
     342:	05c0      	lsls	r0, r0, #23
     344:	4798      	blx	r3
     346:	4b20      	ldr	r3, [pc, #128]	; (3c8 <SetPortState+0x9c>)
     348:	4798      	blx	r3
     34a:	4c20      	ldr	r4, [pc, #128]	; (3cc <SetPortState+0xa0>)
     34c:	0001      	movs	r1, r0
     34e:	4b20      	ldr	r3, [pc, #128]	; (3d0 <SetPortState+0xa4>)
     350:	0020      	movs	r0, r4
     352:	4798      	blx	r3

    /* Set databits */
	enum usart_character_size charSize;
    switch (st->byteSize) {
     354:	7928      	ldrb	r0, [r5, #4]
     356:	3805      	subs	r0, #5
     358:	2803      	cmp	r0, #3
     35a:	d825      	bhi.n	3a8 <SetPortState+0x7c>
     35c:	f002 f9f8 	bl	2750 <__gnu_thumb1_case_uqi>
     360:	1e1c0220 	.word	0x1e1c0220
        case 5:
            charSize = USART_CHARACTER_SIZE_5BITS;
            break;
        case 6:
            charSize = USART_CHARACTER_SIZE_6BITS;
     364:	2106      	movs	r1, #6
            break;
        default:
            charSize = USART_CHARACTER_SIZE_9BITS;
            return -6;
    }
	usart_async_set_character_size(&USART_0, charSize);
     366:	0020      	movs	r0, r4
     368:	4b1a      	ldr	r3, [pc, #104]	; (3d4 <SetPortState+0xa8>)
     36a:	4798      	blx	r3

    /* Set stopbits */
	enum usart_stop_bits stopBits;
    switch (st->stopBits) {
     36c:	7969      	ldrb	r1, [r5, #5]
     36e:	2900      	cmp	r1, #0
     370:	d002      	beq.n	378 <SetPortState+0x4c>
     372:	2902      	cmp	r1, #2
     374:	d11b      	bne.n	3ae <SetPortState+0x82>
        case ONESTOPBIT:
            stopBits = USART_STOP_BITS_ONE;
            break;
        case TWOSTOPBITS:
            stopBits = USART_STOP_BITS_TWO;
     376:	3901      	subs	r1, #1
            break;
        default:
            stopBits = USART_STOP_BITS_ONE;
            return -7;
    }
	usart_async_set_stopbits(&USART_0, stopBits);
     378:	0020      	movs	r0, r4
     37a:	4b17      	ldr	r3, [pc, #92]	; (3d8 <SetPortState+0xac>)
     37c:	4798      	blx	r3

    /* Set parity */
	enum usart_parity parity;
    switch (st->parity) {
     37e:	79a9      	ldrb	r1, [r5, #6]
     380:	2901      	cmp	r1, #1
     382:	d004      	beq.n	38e <SetPortState+0x62>
     384:	2900      	cmp	r1, #0
     386:	d00d      	beq.n	3a4 <SetPortState+0x78>
     388:	2902      	cmp	r1, #2
     38a:	d112      	bne.n	3b2 <SetPortState+0x86>
            break;
        case ODDPARITY:
            parity = USART_PARITY_ODD;
            break;
        case EVENPARITY:
            parity = USART_PARITY_EVEN;
     38c:	2100      	movs	r1, #0
            break;
        default:
            parity = USART_PARITY_NONE;
            return -8;
    }
	usart_async_set_parity(&USART_0, parity);
     38e:	0020      	movs	r0, r4
     390:	4b12      	ldr	r3, [pc, #72]	; (3dc <SetPortState+0xb0>)
     392:	4798      	blx	r3

    return 0;
     394:	2000      	movs	r0, #0
}
     396:	bd70      	pop	{r4, r5, r6, pc}
            charSize = USART_CHARACTER_SIZE_7BITS;
     398:	2107      	movs	r1, #7
            break;
     39a:	e7e4      	b.n	366 <SetPortState+0x3a>
            charSize = USART_CHARACTER_SIZE_8BITS;
     39c:	2100      	movs	r1, #0
            break;
     39e:	e7e2      	b.n	366 <SetPortState+0x3a>
            charSize = USART_CHARACTER_SIZE_5BITS;
     3a0:	2105      	movs	r1, #5
     3a2:	e7e0      	b.n	366 <SetPortState+0x3a>
            parity = USART_PARITY_NONE;
     3a4:	2102      	movs	r1, #2
     3a6:	e7f2      	b.n	38e <SetPortState+0x62>
            return -6;
     3a8:	2006      	movs	r0, #6
            return -8;
     3aa:	4240      	negs	r0, r0
     3ac:	e7f3      	b.n	396 <SetPortState+0x6a>
            return -7;
     3ae:	2007      	movs	r0, #7
     3b0:	e7fb      	b.n	3aa <SetPortState+0x7e>
            return -8;
     3b2:	2008      	movs	r0, #8
     3b4:	e7f9      	b.n	3aa <SetPortState+0x7e>
     3b6:	46c0      	nop			; (mov r8, r8)
     3b8:	00003039 	.word	0x00003039
     3bc:	00002a81 	.word	0x00002a81
     3c0:	3d8637bd 	.word	0x3d8637bd
     3c4:	00002cc1 	.word	0x00002cc1
     3c8:	00002a51 	.word	0x00002a51
     3cc:	200005a8 	.word	0x200005a8
     3d0:	00001f91 	.word	0x00001f91
     3d4:	00002021 	.word	0x00002021
     3d8:	00001ff1 	.word	0x00001ff1
     3dc:	00001fc1 	.word	0x00001fc1

000003e0 <OpenPort>:
HANDLE OpenPort(const void *port, const SER_PORT_STATE_T *st) {
     3e0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
     3e2:	000e      	movs	r6, r1
	usart_async_register_callback(&USART_0, USART_ASYNC_TXC_CB, tx_cb_USART_0);
     3e4:	4c12      	ldr	r4, [pc, #72]	; (430 <OpenPort+0x50>)
     3e6:	4d13      	ldr	r5, [pc, #76]	; (434 <OpenPort+0x54>)
     3e8:	4a13      	ldr	r2, [pc, #76]	; (438 <OpenPort+0x58>)
     3ea:	2101      	movs	r1, #1
     3ec:	0020      	movs	r0, r4
     3ee:	47a8      	blx	r5
	usart_async_register_callback(&USART_0, USART_ASYNC_RXC_CB, rx_cb_USART_0);
     3f0:	4a12      	ldr	r2, [pc, #72]	; (43c <OpenPort+0x5c>)
     3f2:	2100      	movs	r1, #0
     3f4:	0020      	movs	r0, r4
     3f6:	47a8      	blx	r5
	usart_async_register_callback(&USART_0, USART_ASYNC_ERROR_CB, err_cb_USART_0);
     3f8:	4a11      	ldr	r2, [pc, #68]	; (440 <OpenPort+0x60>)
     3fa:	2102      	movs	r1, #2
     3fc:	0020      	movs	r0, r4
     3fe:	47a8      	blx	r5
	usart_async_get_io_descriptor(&USART_0, &iodes);
     400:	4f10      	ldr	r7, [pc, #64]	; (444 <OpenPort+0x64>)
     402:	4b11      	ldr	r3, [pc, #68]	; (448 <OpenPort+0x68>)
     404:	0039      	movs	r1, r7
     406:	0020      	movs	r0, r4
     408:	4798      	blx	r3
	usart_async_enable(&USART_0);
     40a:	4b10      	ldr	r3, [pc, #64]	; (44c <OpenPort+0x6c>)
     40c:	0020      	movs	r0, r4
     40e:	4798      	blx	r3
    ser->mgwd = UPD_SERCOM_MAGIC_WORD;
     410:	4d0f      	ldr	r5, [pc, #60]	; (450 <OpenPort+0x70>)
     412:	4b10      	ldr	r3, [pc, #64]	; (454 <OpenPort+0x74>)
    if (SetPortState(ser, st) != 0) {
     414:	0031      	movs	r1, r6
    ser->mgwd = UPD_SERCOM_MAGIC_WORD;
     416:	602b      	str	r3, [r5, #0]
    ser->io = iodes;
     418:	683b      	ldr	r3, [r7, #0]
    if (SetPortState(ser, st) != 0) {
     41a:	0028      	movs	r0, r5
    ser->io = iodes;
     41c:	606b      	str	r3, [r5, #4]
    if (SetPortState(ser, st) != 0) {
     41e:	4b0e      	ldr	r3, [pc, #56]	; (458 <OpenPort+0x78>)
     420:	4798      	blx	r3
     422:	2800      	cmp	r0, #0
     424:	d002      	beq.n	42c <OpenPort+0x4c>
    upd_sercom_t *ser = (upd_sercom_t *)ptr_ser;

    if (!ser)
        return;

    usart_async_disable(&USART_0);
     426:	0020      	movs	r0, r4
     428:	4b0c      	ldr	r3, [pc, #48]	; (45c <OpenPort+0x7c>)
     42a:	4798      	blx	r3
}
     42c:	0028      	movs	r0, r5
     42e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
     430:	200005a8 	.word	0x200005a8
     434:	00001f25 	.word	0x00001f25
     438:	00000329 	.word	0x00000329
     43c:	00000327 	.word	0x00000327
     440:	00000325 	.word	0x00000325
     444:	20000554 	.word	0x20000554
     448:	00001efd 	.word	0x00001efd
     44c:	00001ea5 	.word	0x00001ea5
     450:	20000558 	.word	0x20000558
     454:	0000a5a5 	.word	0x0000a5a5
     458:	0000032d 	.word	0x0000032d
     45c:	00001ed1 	.word	0x00001ed1

00000460 <FlushPort>:
{
     460:	b510      	push	{r4, lr}
    if (!VALID_SER(ser))
     462:	2800      	cmp	r0, #0
     464:	d008      	beq.n	478 <FlushPort+0x18>
     466:	4b06      	ldr	r3, [pc, #24]	; (480 <FlushPort+0x20>)
     468:	6802      	ldr	r2, [r0, #0]
     46a:	429a      	cmp	r2, r3
     46c:	d104      	bne.n	478 <FlushPort+0x18>
    usart_async_flush_rx_buffer(&USART_0);
     46e:	4805      	ldr	r0, [pc, #20]	; (484 <FlushPort+0x24>)
     470:	4b05      	ldr	r3, [pc, #20]	; (488 <FlushPort+0x28>)
     472:	4798      	blx	r3
    return 0;
     474:	2000      	movs	r0, #0
}
     476:	bd10      	pop	{r4, pc}
        return ERROR_PTR;
     478:	2001      	movs	r0, #1
     47a:	4240      	negs	r0, r0
     47c:	e7fb      	b.n	476 <FlushPort+0x16>
     47e:	46c0      	nop			; (mov r8, r8)
     480:	0000a5a5 	.word	0x0000a5a5
     484:	200005a8 	.word	0x200005a8
     488:	00002051 	.word	0x00002051

0000048c <SendData>:
int SendData(void *ptr_ser, const /*LPVOID*/u8 *tx, DWORD len) {
     48c:	b510      	push	{r4, lr}
    if (!VALID_SER(ser))
     48e:	2800      	cmp	r0, #0
     490:	d009      	beq.n	4a6 <SendData+0x1a>
     492:	4b06      	ldr	r3, [pc, #24]	; (4ac <SendData+0x20>)
     494:	6804      	ldr	r4, [r0, #0]
     496:	429c      	cmp	r4, r3
     498:	d105      	bne.n	4a6 <SendData+0x1a>
	written = io_write(ser->io, tx, len);
     49a:	b292      	uxth	r2, r2
     49c:	6840      	ldr	r0, [r0, #4]
     49e:	4b04      	ldr	r3, [pc, #16]	; (4b0 <SendData+0x24>)
     4a0:	4798      	blx	r3
    return 0;
     4a2:	2000      	movs	r0, #0
}
     4a4:	bd10      	pop	{r4, pc}
        return ERROR_PTR;
     4a6:	2001      	movs	r0, #1
     4a8:	4240      	negs	r0, r0
     4aa:	e7fb      	b.n	4a4 <SendData+0x18>
     4ac:	0000a5a5 	.word	0x0000a5a5
     4b0:	00001c69 	.word	0x00001c69

000004b4 <ReadData>:
int ReadData(void *ptr_ser, LPVOID rx, DWORD len) {
     4b4:	b510      	push	{r4, lr}
    reading = io_read(ser->io, rx, len);
     4b6:	b292      	uxth	r2, r2
     4b8:	6840      	ldr	r0, [r0, #4]
     4ba:	4b01      	ldr	r3, [pc, #4]	; (4c0 <ReadData+0xc>)
     4bc:	4798      	blx	r3
}
     4be:	bd10      	pop	{r4, pc}
     4c0:	00001c99 	.word	0x00001c99

000004c4 <ClosePort>:
void ClosePort(void *ptr_ser) {
     4c4:	b510      	push	{r4, lr}
    if (!ser)
     4c6:	2800      	cmp	r0, #0
     4c8:	d002      	beq.n	4d0 <ClosePort+0xc>
    usart_async_disable(&USART_0);
     4ca:	4802      	ldr	r0, [pc, #8]	; (4d4 <ClosePort+0x10>)
     4cc:	4b02      	ldr	r3, [pc, #8]	; (4d8 <ClosePort+0x14>)
     4ce:	4798      	blx	r3
}
     4d0:	bd10      	pop	{r4, pc}
     4d2:	46c0      	nop			; (mov r8, r8)
     4d4:	200005a8 	.word	0x200005a8
     4d8:	00001ed1 	.word	0x00001ed1

000004dc <updi_application_init>:
    @dev: point chip dev object
    @return APP ptr, NULL if failed
*/
upd_application_t application;
void *updi_application_init(const char *port, int baud, void *dev)
{
     4dc:	b510      	push	{r4, lr}
    upd_application_t *app = NULL;
    void *link;

    DBG_INFO(APP_DEBUG, "<APP> init application");

    link = updi_datalink_init(port, baud);
     4de:	4b06      	ldr	r3, [pc, #24]	; (4f8 <updi_application_init+0x1c>)
{
     4e0:	0014      	movs	r4, r2
    link = updi_datalink_init(port, baud);
     4e2:	4798      	blx	r3
    upd_application_t *app = NULL;
     4e4:	1e03      	subs	r3, r0, #0
    if (link) {
     4e6:	d004      	beq.n	4f2 <updi_application_init+0x16>
        app = &application;//(upd_application_t *)malloc(sizeof(*app));
        app->mgwd = UPD_APPLICATION_MAGIC_WORD;
     4e8:	4b04      	ldr	r3, [pc, #16]	; (4fc <updi_application_init+0x20>)
     4ea:	4a05      	ldr	r2, [pc, #20]	; (500 <updi_application_init+0x24>)
        app->link = (void *)link;
     4ec:	6058      	str	r0, [r3, #4]
        app->mgwd = UPD_APPLICATION_MAGIC_WORD;
     4ee:	601a      	str	r2, [r3, #0]
        app->dev = (device_info_t *)dev;
     4f0:	609c      	str	r4, [r3, #8]
    }

    return app;
}
     4f2:	0018      	movs	r0, r3
     4f4:	bd10      	pop	{r4, pc}
     4f6:	46c0      	nop			; (mov r8, r8)
     4f8:	00000e3d 	.word	0x00000e3d
     4fc:	20000560 	.word	0x20000560
     500:	0000b4b4 	.word	0x0000b4b4

00000504 <updi_application_deinit>:
    APP object destroy
    @app_ptr: APP object pointer, acquired from updi_application_init()
    @no return
*/
void updi_application_deinit(void *app_ptr)
{
     504:	b510      	push	{r4, lr}
    upd_application_t *app = (upd_application_t *)app_ptr;
    if (VALID_APP(app)) {
     506:	2800      	cmp	r0, #0
     508:	d006      	beq.n	518 <updi_application_deinit+0x14>
     50a:	4b04      	ldr	r3, [pc, #16]	; (51c <updi_application_deinit+0x18>)
     50c:	6802      	ldr	r2, [r0, #0]
     50e:	429a      	cmp	r2, r3
     510:	d102      	bne.n	518 <updi_application_deinit+0x14>
        DBG_INFO(APP_DEBUG, "<APP> deinit application");

        updi_datalink_deinit(LINK(app));
     512:	6840      	ldr	r0, [r0, #4]
     514:	4b02      	ldr	r3, [pc, #8]	; (520 <updi_application_deinit+0x1c>)
     516:	4798      	blx	r3
        //free(app);
    }
}
     518:	bd10      	pop	{r4, pc}
     51a:	46c0      	nop			; (mov r8, r8)
     51c:	0000b4b4 	.word	0x0000b4b4
     520:	00000c75 	.word	0x00000c75

00000524 <app_in_prog_mode>:
    APP check whether device in Unlocked Mode
    @app_ptr: APP object pointer, acquired from updi_application_init()
    @return true if Unlocked, other value if Locked
*/
bool app_in_prog_mode(void *app_ptr)
{
     524:	b537      	push	{r0, r1, r2, r4, r5, lr}
    u8 status;
    int result;
    bool ret = false;

    if (!VALID_APP(app))
        return ret;
     526:	1e04      	subs	r4, r0, #0
    if (!VALID_APP(app))
     528:	d010      	beq.n	54c <app_in_prog_mode+0x28>
     52a:	4b09      	ldr	r3, [pc, #36]	; (550 <app_in_prog_mode+0x2c>)
     52c:	6802      	ldr	r2, [r0, #0]
        return ret;
     52e:	2400      	movs	r4, #0
    if (!VALID_APP(app))
     530:	429a      	cmp	r2, r3
     532:	d10b      	bne.n	54c <app_in_prog_mode+0x28>

    result = _link_ldcs(LINK(app), UPDI_ASI_SYS_STATUS, &status);
     534:	466b      	mov	r3, sp
     536:	1ddd      	adds	r5, r3, #7
     538:	002a      	movs	r2, r5
     53a:	210b      	movs	r1, #11
     53c:	6840      	ldr	r0, [r0, #4]
     53e:	4b05      	ldr	r3, [pc, #20]	; (554 <app_in_prog_mode+0x30>)
     540:	4798      	blx	r3
    if (!result && status & (1 << UPDI_ASI_SYS_STATUS_NVMPROG))
     542:	42a0      	cmp	r0, r4
     544:	d102      	bne.n	54c <app_in_prog_mode+0x28>
     546:	782c      	ldrb	r4, [r5, #0]
     548:	0724      	lsls	r4, r4, #28
     54a:	0fe4      	lsrs	r4, r4, #31
        ret = true;

    DBG_INFO(APP_DEBUG, "<APP> In PROG mode: %d", ret);

    return ret;
}
     54c:	0020      	movs	r0, r4
     54e:	bd3e      	pop	{r1, r2, r3, r4, r5, pc}
     550:	0000b4b4 	.word	0x0000b4b4
     554:	00000c95 	.word	0x00000c95

00000558 <app_wait_unlocked>:
    @app_ptr: APP object pointer, acquired from updi_application_init()
    @timeout: max waiting time
    @return 0 successful, other value if failed
*/
int app_wait_unlocked(void *app_ptr, int timeout)
{
     558:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
     55a:	0005      	movs	r5, r0
     55c:	000c      	movs	r4, r1
    */
    upd_application_t *app = (upd_application_t *)app_ptr;
    u8 status;
    int result;

    if (!VALID_APP(app))
     55e:	2800      	cmp	r0, #0
     560:	d01c      	beq.n	59c <app_wait_unlocked+0x44>
     562:	4b0f      	ldr	r3, [pc, #60]	; (5a0 <app_wait_unlocked+0x48>)
     564:	6802      	ldr	r2, [r0, #0]
     566:	429a      	cmp	r2, r3
     568:	d118      	bne.n	59c <app_wait_unlocked+0x44>
        result = _link_ldcs(LINK(app), UPDI_ASI_SYS_STATUS, &status);
        if (result) {
            DBG_INFO(APP_DEBUG, "_link_ldcs failed %d", result);
        }
        else {
            if (!(status & (1 << UPDI_ASI_SYS_STATUS_LOCKSTATUS)))
     56a:	2601      	movs	r6, #1
        result = _link_ldcs(LINK(app), UPDI_ASI_SYS_STATUS, &status);
     56c:	466b      	mov	r3, sp
     56e:	1ddf      	adds	r7, r3, #7
     570:	003a      	movs	r2, r7
     572:	210b      	movs	r1, #11
     574:	6868      	ldr	r0, [r5, #4]
     576:	4b0b      	ldr	r3, [pc, #44]	; (5a4 <app_wait_unlocked+0x4c>)
     578:	4798      	blx	r3
        if (result) {
     57a:	2800      	cmp	r0, #0
     57c:	d102      	bne.n	584 <app_wait_unlocked+0x2c>
            if (!(status & (1 << UPDI_ASI_SYS_STATUS_LOCKSTATUS)))
     57e:	783b      	ldrb	r3, [r7, #0]
     580:	4233      	tst	r3, r6
     582:	d008      	beq.n	596 <app_wait_unlocked+0x3e>
                break;
        }

        msleep(1);
     584:	0030      	movs	r0, r6
     586:	4b08      	ldr	r3, [pc, #32]	; (5a8 <app_wait_unlocked+0x50>)
    } while (--timeout > 0);
     588:	3c01      	subs	r4, #1
        msleep(1);
     58a:	4798      	blx	r3
    } while (--timeout > 0);
     58c:	2c00      	cmp	r4, #0
     58e:	dced      	bgt.n	56c <app_wait_unlocked+0x14>

    if (timeout <= 0 || result) {
        DBG_INFO(APP_DEBUG, "Timeout waiting for device to unlock status %02x result %d", status, result);
        return -2;
     590:	2002      	movs	r0, #2
        return ERROR_PTR;
     592:	4240      	negs	r0, r0
     594:	e001      	b.n	59a <app_wait_unlocked+0x42>
    if (timeout <= 0 || result) {
     596:	2c00      	cmp	r4, #0
     598:	ddfa      	ble.n	590 <app_wait_unlocked+0x38>
    }

    return 0;
}
     59a:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
        return ERROR_PTR;
     59c:	2001      	movs	r0, #1
     59e:	e7f8      	b.n	592 <app_wait_unlocked+0x3a>
     5a0:	0000b4b4 	.word	0x0000b4b4
     5a4:	00000c95 	.word	0x00000c95
     5a8:	00000315 	.word	0x00000315

000005ac <app_disable>:
APP disable updi interface
@app_ptr: APP object pointer, acquired from updi_application_init()
@return 0 successful, other value if failed
*/
int app_disable(void *app_ptr)
{
     5ac:	b510      	push	{r4, lr}
    Disable UPDI interface temperarily
    */
    upd_application_t *app = (upd_application_t *)app_ptr;
    int result;

    if (!VALID_APP(app))
     5ae:	2800      	cmp	r0, #0
     5b0:	d00c      	beq.n	5cc <app_disable+0x20>
     5b2:	4b08      	ldr	r3, [pc, #32]	; (5d4 <app_disable+0x28>)
     5b4:	6802      	ldr	r2, [r0, #0]
     5b6:	429a      	cmp	r2, r3
     5b8:	d108      	bne.n	5cc <app_disable+0x20>
        return ERROR_PTR;

    DBG_INFO(APP_DEBUG, "<APP> Disable");

    result = link_stcs(LINK(app), UPDI_CS_CTRLB, (1 << UPDI_CTRLB_UPDIDIS_BIT) | (1 << UPDI_CTRLB_CCDETDIS_BIT));
     5ba:	220c      	movs	r2, #12
     5bc:	2103      	movs	r1, #3
     5be:	6840      	ldr	r0, [r0, #4]
     5c0:	4b05      	ldr	r3, [pc, #20]	; (5d8 <app_disable+0x2c>)
     5c2:	4798      	blx	r3
    if (result) {
     5c4:	2800      	cmp	r0, #0
     5c6:	d003      	beq.n	5d0 <app_disable+0x24>
        DBG_INFO(APP_DEBUG, "link_stcs failed %d", result);
        return -2;
     5c8:	2002      	movs	r0, #2
     5ca:	e000      	b.n	5ce <app_disable+0x22>
        return ERROR_PTR;
     5cc:	2001      	movs	r0, #1
        return -2;
     5ce:	4240      	negs	r0, r0
    }

    return 0;
}
     5d0:	bd10      	pop	{r4, pc}
     5d2:	46c0      	nop			; (mov r8, r8)
     5d4:	0000b4b4 	.word	0x0000b4b4
     5d8:	00000d35 	.word	0x00000d35

000005dc <app_reset>:
    @app_ptr: APP object pointer, acquired from updi_application_init()
    @apply_reset: true - set, false - clear
    @return 0 successful, other value if failed
*/
int app_reset(void *app_ptr, bool apply_reset)
{
     5dc:	b510      	push	{r4, lr}
     5de:	000a      	movs	r2, r1
    Applies or releases an UPDI reset condition
    */
    upd_application_t *app = (upd_application_t *)app_ptr;
    int result;

    if (!VALID_APP(app))
     5e0:	2800      	cmp	r0, #0
     5e2:	d00e      	beq.n	602 <app_reset+0x26>
     5e4:	4b08      	ldr	r3, [pc, #32]	; (608 <app_reset+0x2c>)
     5e6:	6801      	ldr	r1, [r0, #0]
     5e8:	4299      	cmp	r1, r3
     5ea:	d10a      	bne.n	602 <app_reset+0x26>
     5ec:	4b07      	ldr	r3, [pc, #28]	; (60c <app_reset+0x30>)
        return ERROR_PTR;

    DBG_INFO(APP_DEBUG, "<APP> Reset %d", apply_reset);

    if (apply_reset) {
     5ee:	2a00      	cmp	r2, #0
     5f0:	d000      	beq.n	5f4 <app_reset+0x18>
        DBG_INFO(APP_DEBUG, "Apply reset");
        result = link_stcs(LINK(app), UPDI_ASI_RESET_REQ, UPDI_RESET_REQ_VALUE);
     5f2:	2259      	movs	r2, #89	; 0x59
    }
    else {
        DBG_INFO(APP_DEBUG, "Release reset");
        result = link_stcs(LINK(app), UPDI_ASI_RESET_REQ, 0);
     5f4:	2108      	movs	r1, #8
     5f6:	6840      	ldr	r0, [r0, #4]
     5f8:	4798      	blx	r3
    }

    if (result) {
     5fa:	2800      	cmp	r0, #0
     5fc:	d003      	beq.n	606 <app_reset+0x2a>
        DBG_INFO(APP_DEBUG, "link_stcs failed %d", result);
        return -2;
     5fe:	2002      	movs	r0, #2
     600:	e000      	b.n	604 <app_reset+0x28>
        return ERROR_PTR;
     602:	2001      	movs	r0, #1
        return -2;
     604:	4240      	negs	r0, r0
    }

    return 0;
}
     606:	bd10      	pop	{r4, pc}
     608:	0000b4b4 	.word	0x0000b4b4
     60c:	00000d35 	.word	0x00000d35

00000610 <app_toggle_reset>:
    @app_ptr: APP object pointer, acquired from updi_application_init()
    @delay: Reset keep time before clear
    @return 0 successful, other value if failed
*/
int app_toggle_reset(void *app_ptr, int delay)
{
     610:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
     612:	0004      	movs	r4, r0
     614:	000f      	movs	r7, r1
    Toggle an UPDI reset condition
    */
    upd_application_t *app = (upd_application_t *)app_ptr;
    int result;

    if (!VALID_APP(app))
     616:	2800      	cmp	r0, #0
     618:	d012      	beq.n	640 <app_toggle_reset+0x30>
     61a:	4b0c      	ldr	r3, [pc, #48]	; (64c <app_toggle_reset+0x3c>)
     61c:	6802      	ldr	r2, [r0, #0]
     61e:	429a      	cmp	r2, r3
     620:	d10e      	bne.n	640 <app_toggle_reset+0x30>
        return ERROR_PTR;

    DBG_INFO(APP_DEBUG, "<APP> Toggle Reset");

    //Toggle reset
    result = app_reset(app, true);
     622:	2101      	movs	r1, #1
     624:	4d0a      	ldr	r5, [pc, #40]	; (650 <app_toggle_reset+0x40>)
     626:	47a8      	blx	r5
     628:	1e06      	subs	r6, r0, #0
    if (result) {
     62a:	d10c      	bne.n	646 <app_toggle_reset+0x36>
        DBG_INFO(APP_DEBUG, "app_reset failed %d", result);
        return -2;
    }

    msleep(delay);
     62c:	0038      	movs	r0, r7
     62e:	4b09      	ldr	r3, [pc, #36]	; (654 <app_toggle_reset+0x44>)
     630:	4798      	blx	r3

    result = app_reset(app, false);
     632:	0031      	movs	r1, r6
     634:	0020      	movs	r0, r4
     636:	47a8      	blx	r5
    if (result) {
     638:	2800      	cmp	r0, #0
     63a:	d003      	beq.n	644 <app_toggle_reset+0x34>
        DBG_INFO(APP_DEBUG, "app_reset failed %d", result);
        return -3;
     63c:	2003      	movs	r0, #3
     63e:	e000      	b.n	642 <app_toggle_reset+0x32>
        return ERROR_PTR;
     640:	2001      	movs	r0, #1
        return -3;
     642:	4240      	negs	r0, r0
    }

    return 0;
}
     644:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
        return -2;
     646:	2002      	movs	r0, #2
     648:	e7fb      	b.n	642 <app_toggle_reset+0x32>
     64a:	46c0      	nop			; (mov r8, r8)
     64c:	0000b4b4 	.word	0x0000b4b4
     650:	000005dd 	.word	0x000005dd
     654:	00000315 	.word	0x00000315

00000658 <app_unlock>:
{
     658:	b537      	push	{r0, r1, r2, r4, r5, lr}
     65a:	1e04      	subs	r4, r0, #0
    if (!VALID_APP(app))
     65c:	d024      	beq.n	6a8 <app_unlock+0x50>
     65e:	4b17      	ldr	r3, [pc, #92]	; (6bc <app_unlock+0x64>)
     660:	6802      	ldr	r2, [r0, #0]
     662:	429a      	cmp	r2, r3
     664:	d120      	bne.n	6a8 <app_unlock+0x50>
    result = link_key(LINK(app), UPDI_KEY_64, UPDI_KEY_CHIPERASE);
     666:	4a16      	ldr	r2, [pc, #88]	; (6c0 <app_unlock+0x68>)
     668:	2100      	movs	r1, #0
     66a:	6840      	ldr	r0, [r0, #4]
     66c:	4b15      	ldr	r3, [pc, #84]	; (6c4 <app_unlock+0x6c>)
     66e:	4798      	blx	r3
    if (result) {
     670:	2800      	cmp	r0, #0
     672:	d11c      	bne.n	6ae <app_unlock+0x56>
    result = _link_ldcs(LINK(app), UPDI_ASI_KEY_STATUS, &status);
     674:	466b      	mov	r3, sp
     676:	1ddd      	adds	r5, r3, #7
     678:	002a      	movs	r2, r5
     67a:	2107      	movs	r1, #7
     67c:	6860      	ldr	r0, [r4, #4]
     67e:	4b12      	ldr	r3, [pc, #72]	; (6c8 <app_unlock+0x70>)
     680:	4798      	blx	r3
    if (result || !(status & (1 << UPDI_ASI_KEY_STATUS_CHIPERASE))) {
     682:	2800      	cmp	r0, #0
     684:	d115      	bne.n	6b2 <app_unlock+0x5a>
     686:	782b      	ldrb	r3, [r5, #0]
     688:	071b      	lsls	r3, r3, #28
     68a:	d512      	bpl.n	6b2 <app_unlock+0x5a>
    result = app_toggle_reset(app_ptr, 1);
     68c:	2101      	movs	r1, #1
     68e:	0020      	movs	r0, r4
     690:	4b0e      	ldr	r3, [pc, #56]	; (6cc <app_unlock+0x74>)
     692:	4798      	blx	r3
    if (result) {
     694:	2800      	cmp	r0, #0
     696:	d10e      	bne.n	6b6 <app_unlock+0x5e>
    result = app_wait_unlocked(app, 100);
     698:	2164      	movs	r1, #100	; 0x64
     69a:	0020      	movs	r0, r4
     69c:	4b0c      	ldr	r3, [pc, #48]	; (6d0 <app_unlock+0x78>)
     69e:	4798      	blx	r3
    if (result) {
     6a0:	2800      	cmp	r0, #0
     6a2:	d003      	beq.n	6ac <app_unlock+0x54>
        return -5;
     6a4:	2005      	movs	r0, #5
     6a6:	e000      	b.n	6aa <app_unlock+0x52>
        return ERROR_PTR;
     6a8:	2001      	movs	r0, #1
        return -5;
     6aa:	4240      	negs	r0, r0
}
     6ac:	bd3e      	pop	{r1, r2, r3, r4, r5, pc}
        return -2;
     6ae:	2002      	movs	r0, #2
     6b0:	e7fb      	b.n	6aa <app_unlock+0x52>
        return -3;
     6b2:	2003      	movs	r0, #3
     6b4:	e7f9      	b.n	6aa <app_unlock+0x52>
        return -4;
     6b6:	2004      	movs	r0, #4
     6b8:	e7f7      	b.n	6aa <app_unlock+0x52>
     6ba:	46c0      	nop			; (mov r8, r8)
     6bc:	0000b4b4 	.word	0x0000b4b4
     6c0:	000051b7 	.word	0x000051b7
     6c4:	00001311 	.word	0x00001311
     6c8:	00000c95 	.word	0x00000c95
     6cc:	00000611 	.word	0x00000611
     6d0:	00000559 	.word	0x00000559

000006d4 <app_enter_progmode>:
{
     6d4:	b573      	push	{r0, r1, r4, r5, r6, lr}
     6d6:	1e04      	subs	r4, r0, #0
    if (!VALID_APP(app))
     6d8:	d02b      	beq.n	732 <app_enter_progmode+0x5e>
     6da:	4b1c      	ldr	r3, [pc, #112]	; (74c <app_enter_progmode+0x78>)
     6dc:	6802      	ldr	r2, [r0, #0]
     6de:	429a      	cmp	r2, r3
     6e0:	d127      	bne.n	732 <app_enter_progmode+0x5e>
    if (app_in_prog_mode(app_ptr)) {
     6e2:	4d1b      	ldr	r5, [pc, #108]	; (750 <app_enter_progmode+0x7c>)
     6e4:	47a8      	blx	r5
     6e6:	1e01      	subs	r1, r0, #0
     6e8:	d121      	bne.n	72e <app_enter_progmode+0x5a>
    result = link_key(LINK(app), UPDI_KEY_64, UPDI_KEY_NVM);
     6ea:	4a1a      	ldr	r2, [pc, #104]	; (754 <app_enter_progmode+0x80>)
     6ec:	6860      	ldr	r0, [r4, #4]
     6ee:	4b1a      	ldr	r3, [pc, #104]	; (758 <app_enter_progmode+0x84>)
     6f0:	4798      	blx	r3
    if (result) {
     6f2:	2800      	cmp	r0, #0
     6f4:	d120      	bne.n	738 <app_enter_progmode+0x64>
    result = _link_ldcs(LINK(app), UPDI_ASI_KEY_STATUS, &status);
     6f6:	466b      	mov	r3, sp
     6f8:	1dde      	adds	r6, r3, #7
     6fa:	0032      	movs	r2, r6
     6fc:	2107      	movs	r1, #7
     6fe:	6860      	ldr	r0, [r4, #4]
     700:	4b16      	ldr	r3, [pc, #88]	; (75c <app_enter_progmode+0x88>)
     702:	4798      	blx	r3
    if (result || !(status & (1 << UPDI_ASI_KEY_STATUS_NVMPROG))) {
     704:	2800      	cmp	r0, #0
     706:	d119      	bne.n	73c <app_enter_progmode+0x68>
     708:	7833      	ldrb	r3, [r6, #0]
     70a:	06db      	lsls	r3, r3, #27
     70c:	d516      	bpl.n	73c <app_enter_progmode+0x68>
    result = app_toggle_reset(app_ptr, 1);
     70e:	2101      	movs	r1, #1
     710:	0020      	movs	r0, r4
     712:	4b13      	ldr	r3, [pc, #76]	; (760 <app_enter_progmode+0x8c>)
     714:	4798      	blx	r3
    if (result) {
     716:	2800      	cmp	r0, #0
     718:	d112      	bne.n	740 <app_enter_progmode+0x6c>
    result = app_wait_unlocked(app_ptr, 100);
     71a:	2164      	movs	r1, #100	; 0x64
     71c:	0020      	movs	r0, r4
     71e:	4b11      	ldr	r3, [pc, #68]	; (764 <app_enter_progmode+0x90>)
     720:	4798      	blx	r3
    if (result) {
     722:	2800      	cmp	r0, #0
     724:	d10e      	bne.n	744 <app_enter_progmode+0x70>
    if (!app_in_prog_mode(app_ptr)) {
     726:	0020      	movs	r0, r4
     728:	47a8      	blx	r5
     72a:	2800      	cmp	r0, #0
     72c:	d00c      	beq.n	748 <app_enter_progmode+0x74>
        return 0;
     72e:	2000      	movs	r0, #0
}
     730:	bd76      	pop	{r1, r2, r4, r5, r6, pc}
        return ERROR_PTR;
     732:	2001      	movs	r0, #1
        return -6;
     734:	4240      	negs	r0, r0
     736:	e7fb      	b.n	730 <app_enter_progmode+0x5c>
        return -2;
     738:	2002      	movs	r0, #2
     73a:	e7fb      	b.n	734 <app_enter_progmode+0x60>
        return -3;
     73c:	2003      	movs	r0, #3
     73e:	e7f9      	b.n	734 <app_enter_progmode+0x60>
        return -4;
     740:	2004      	movs	r0, #4
     742:	e7f7      	b.n	734 <app_enter_progmode+0x60>
        return -5;
     744:	2005      	movs	r0, #5
     746:	e7f5      	b.n	734 <app_enter_progmode+0x60>
        return -6;
     748:	2006      	movs	r0, #6
     74a:	e7f3      	b.n	734 <app_enter_progmode+0x60>
     74c:	0000b4b4 	.word	0x0000b4b4
     750:	00000525 	.word	0x00000525
     754:	000051c0 	.word	0x000051c0
     758:	00001311 	.word	0x00001311
     75c:	00000c95 	.word	0x00000c95
     760:	00000611 	.word	0x00000611
     764:	00000559 	.word	0x00000559

00000768 <app_leave_progmode>:
{
     768:	b510      	push	{r4, lr}
     76a:	1e04      	subs	r4, r0, #0
    if (!VALID_APP(app))
     76c:	d00f      	beq.n	78e <app_leave_progmode+0x26>
     76e:	4b0a      	ldr	r3, [pc, #40]	; (798 <app_leave_progmode+0x30>)
     770:	6802      	ldr	r2, [r0, #0]
     772:	429a      	cmp	r2, r3
     774:	d10b      	bne.n	78e <app_leave_progmode+0x26>
    result = app_toggle_reset(app_ptr, 1);
     776:	2101      	movs	r1, #1
     778:	4b08      	ldr	r3, [pc, #32]	; (79c <app_leave_progmode+0x34>)
     77a:	4798      	blx	r3
    if (result) {
     77c:	2800      	cmp	r0, #0
     77e:	d109      	bne.n	794 <app_leave_progmode+0x2c>
    result = app_disable(app_ptr);
     780:	0020      	movs	r0, r4
     782:	4b07      	ldr	r3, [pc, #28]	; (7a0 <app_leave_progmode+0x38>)
     784:	4798      	blx	r3
    if (result) {
     786:	2800      	cmp	r0, #0
     788:	d003      	beq.n	792 <app_leave_progmode+0x2a>
        return -3;
     78a:	2003      	movs	r0, #3
     78c:	e000      	b.n	790 <app_leave_progmode+0x28>
        return ERROR_PTR;
     78e:	2001      	movs	r0, #1
        return -3;
     790:	4240      	negs	r0, r0
}
     792:	bd10      	pop	{r4, pc}
        return -2;
     794:	2002      	movs	r0, #2
     796:	e7fb      	b.n	790 <app_leave_progmode+0x28>
     798:	0000b4b4 	.word	0x0000b4b4
     79c:	00000611 	.word	0x00000611
     7a0:	000005ad 	.word	0x000005ad

000007a4 <app_wait_flash_ready>:
    @app_ptr: APP object pointer, acquired from updi_application_init()
    @timeout: max flash programing time
    @return 0 successful, other value if failed
*/
int app_wait_flash_ready(void *app_ptr, int timeout)
{
     7a4:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
     7a6:	0005      	movs	r5, r0
     7a8:	000c      	movs	r4, r1
    */
    upd_application_t *app = (upd_application_t *)app_ptr;
    u8 status;
    int result;

    if (!VALID_APP(app))
     7aa:	2800      	cmp	r0, #0
     7ac:	d024      	beq.n	7f8 <app_wait_flash_ready+0x54>
     7ae:	4b13      	ldr	r3, [pc, #76]	; (7fc <app_wait_flash_ready+0x58>)
     7b0:	6802      	ldr	r2, [r0, #0]
     7b2:	429a      	cmp	r2, r3
     7b4:	d120      	bne.n	7f8 <app_wait_flash_ready+0x54>
            if (status & (1 << UPDI_NVM_STATUS_WRITE_ERROR)) {
                result = -3;
                break;
            }

            if (!(status & ((1 << UPDI_NVM_STATUS_EEPROM_BUSY) | (1 << UPDI_NVM_STATUS_FLASH_BUSY))))
     7b6:	2703      	movs	r7, #3
        result = _link_ld(LINK(app), APP_REG(app, nvmctrl_address) + UPDI_NVMCTRL_STATUS, &status);
     7b8:	466b      	mov	r3, sp
     7ba:	1dde      	adds	r6, r3, #7
     7bc:	68ab      	ldr	r3, [r5, #8]
     7be:	0032      	movs	r2, r6
     7c0:	685b      	ldr	r3, [r3, #4]
     7c2:	6868      	ldr	r0, [r5, #4]
     7c4:	8999      	ldrh	r1, [r3, #12]
     7c6:	4b0e      	ldr	r3, [pc, #56]	; (800 <app_wait_flash_ready+0x5c>)
     7c8:	3102      	adds	r1, #2
     7ca:	b289      	uxth	r1, r1
     7cc:	4798      	blx	r3
        if (result) {
     7ce:	2800      	cmp	r0, #0
     7d0:	d002      	beq.n	7d8 <app_wait_flash_ready+0x34>
        msleep(1);
    } while (--timeout > 0);

    if (timeout <= 0 || result) {
        DBG_INFO(APP_DEBUG, "Timeout waiting for wait flash ready status %02x result %d", status, result);
        return -3;
     7d2:	2003      	movs	r0, #3
        return ERROR_PTR;
     7d4:	4240      	negs	r0, r0
     7d6:	e00e      	b.n	7f6 <app_wait_flash_ready+0x52>
            if (status & (1 << UPDI_NVM_STATUS_WRITE_ERROR)) {
     7d8:	2204      	movs	r2, #4
     7da:	7833      	ldrb	r3, [r6, #0]
     7dc:	4213      	tst	r3, r2
     7de:	d1f8      	bne.n	7d2 <app_wait_flash_ready+0x2e>
            if (!(status & ((1 << UPDI_NVM_STATUS_EEPROM_BUSY) | (1 << UPDI_NVM_STATUS_FLASH_BUSY))))
     7e0:	423b      	tst	r3, r7
     7e2:	d006      	beq.n	7f2 <app_wait_flash_ready+0x4e>
        msleep(1);
     7e4:	2001      	movs	r0, #1
     7e6:	4b07      	ldr	r3, [pc, #28]	; (804 <app_wait_flash_ready+0x60>)
    } while (--timeout > 0);
     7e8:	3c01      	subs	r4, #1
        msleep(1);
     7ea:	4798      	blx	r3
    } while (--timeout > 0);
     7ec:	2c00      	cmp	r4, #0
     7ee:	dce3      	bgt.n	7b8 <app_wait_flash_ready+0x14>
     7f0:	e7ef      	b.n	7d2 <app_wait_flash_ready+0x2e>
    if (timeout <= 0 || result) {
     7f2:	2c00      	cmp	r4, #0
     7f4:	dded      	ble.n	7d2 <app_wait_flash_ready+0x2e>
    }

    return 0;
}
     7f6:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
        return ERROR_PTR;
     7f8:	2001      	movs	r0, #1
     7fa:	e7eb      	b.n	7d4 <app_wait_flash_ready+0x30>
     7fc:	0000b4b4 	.word	0x0000b4b4
     800:	00000ead 	.word	0x00000ead
     804:	00000315 	.word	0x00000315

00000808 <app_execute_nvm_command>:
    @app_ptr: APP object pointer, acquired from updi_application_init()
    @command: command content
    @return 0 successful, other value if failed
*/
int app_execute_nvm_command(void *app_ptr, u8 command)
{
     808:	b510      	push	{r4, lr}
     80a:	000a      	movs	r2, r1
    /*
        Executes an NVM COMMAND on the NVM CTRL
    */
    upd_application_t *app = (upd_application_t *)app_ptr;

    if (!VALID_APP(app))
     80c:	2800      	cmp	r0, #0
     80e:	d00a      	beq.n	826 <app_execute_nvm_command+0x1e>
     810:	4b06      	ldr	r3, [pc, #24]	; (82c <app_execute_nvm_command+0x24>)
     812:	6801      	ldr	r1, [r0, #0]
     814:	4299      	cmp	r1, r3
     816:	d106      	bne.n	826 <app_execute_nvm_command+0x1e>
        return ERROR_PTR;

    DBG_INFO(APP_DEBUG, "<APP> NVMCMD %d executing", command);

    return link_st(LINK(app), APP_REG(app, nvmctrl_address) + UPDI_NVMCTRL_CTRLA, command);
     818:	6883      	ldr	r3, [r0, #8]
     81a:	6840      	ldr	r0, [r0, #4]
     81c:	685b      	ldr	r3, [r3, #4]
     81e:	8999      	ldrh	r1, [r3, #12]
     820:	4b03      	ldr	r3, [pc, #12]	; (830 <app_execute_nvm_command+0x28>)
     822:	4798      	blx	r3
}
     824:	bd10      	pop	{r4, pc}
        return ERROR_PTR;
     826:	2001      	movs	r0, #1
     828:	4240      	negs	r0, r0
     82a:	e7fb      	b.n	824 <app_execute_nvm_command+0x1c>
     82c:	0000b4b4 	.word	0x0000b4b4
     830:	00000f5d 	.word	0x00000f5d

00000834 <app_chip_erase>:
    APP erase chip
    @app_ptr: APP object pointer, acquired from updi_application_init()
    @return 0 successful, other value if failed
*/
int app_chip_erase(void *app_ptr)
{
     834:	b570      	push	{r4, r5, r6, lr}
     836:	1e04      	subs	r4, r0, #0
    */

    upd_application_t *app = (upd_application_t *)app_ptr;
    int result;

    if (!VALID_APP(app))
     838:	d019      	beq.n	86e <app_chip_erase+0x3a>
     83a:	4b0f      	ldr	r3, [pc, #60]	; (878 <app_chip_erase+0x44>)
     83c:	6802      	ldr	r2, [r0, #0]
     83e:	429a      	cmp	r2, r3
     840:	d115      	bne.n	86e <app_chip_erase+0x3a>
        return ERROR_PTR;

    DBG_INFO(APP_DEBUG, "<APP> Chip erase using NVM CTRL");

    //Wait until NVM CTRL is ready to erase
    result = app_wait_flash_ready(app, TIMEOUT_WAIT_FLASH_READY);
     842:	21fa      	movs	r1, #250	; 0xfa
     844:	4d0d      	ldr	r5, [pc, #52]	; (87c <app_chip_erase+0x48>)
     846:	0089      	lsls	r1, r1, #2
     848:	47a8      	blx	r5
    if (result) {
     84a:	2800      	cmp	r0, #0
     84c:	d002      	beq.n	854 <app_chip_erase+0x20>
        DBG_INFO(APP_DEBUG, "app_wait_flash_ready timeout before erase failed %d", result);
        return -2;
     84e:	2002      	movs	r0, #2

    //Erase
    result = app_execute_nvm_command(app, UPDI_NVMCTRL_CTRLA_CHIP_ERASE);
    if (result) {
        DBG_INFO(APP_DEBUG, "app_execute_nvm_command failed %d", result);
        return -3;
     850:	4240      	negs	r0, r0
     852:	e00b      	b.n	86c <app_chip_erase+0x38>
    result = app_execute_nvm_command(app, UPDI_NVMCTRL_CTRLA_CHIP_ERASE);
     854:	2105      	movs	r1, #5
     856:	0020      	movs	r0, r4
     858:	4b09      	ldr	r3, [pc, #36]	; (880 <app_chip_erase+0x4c>)
     85a:	4798      	blx	r3
    if (result) {
     85c:	2800      	cmp	r0, #0
     85e:	d108      	bne.n	872 <app_chip_erase+0x3e>
    }

    // And wait for it
    result = app_wait_flash_ready(app, TIMEOUT_WAIT_FLASH_READY);
     860:	21fa      	movs	r1, #250	; 0xfa
     862:	0020      	movs	r0, r4
     864:	0089      	lsls	r1, r1, #2
     866:	47a8      	blx	r5
    if (result) {
     868:	2800      	cmp	r0, #0
     86a:	d1f0      	bne.n	84e <app_chip_erase+0x1a>
        DBG_INFO(APP_DEBUG, "app_wait_flash_ready timeout after erase failed %d", result);
        return -2;
    }

    return 0;
}
     86c:	bd70      	pop	{r4, r5, r6, pc}
        return ERROR_PTR;
     86e:	2001      	movs	r0, #1
     870:	e7ee      	b.n	850 <app_chip_erase+0x1c>
        return -3;
     872:	2003      	movs	r0, #3
     874:	e7ec      	b.n	850 <app_chip_erase+0x1c>
     876:	46c0      	nop			; (mov r8, r8)
     878:	0000b4b4 	.word	0x0000b4b4
     87c:	000007a5 	.word	0x000007a5
     880:	00000809 	.word	0x00000809

00000884 <app_read_data_words>:
    @data: data output buffer
    @len: data len
    @return 0 successful, other value if failed
*/
int app_read_data_words(void *app_ptr, u16 address, u8 *data, int len)
{
     884:	b570      	push	{r4, r5, r6, lr}
     886:	0004      	movs	r4, r0
     888:	0015      	movs	r5, r2
     88a:	001e      	movs	r6, r3
    Reads a number of words of data from UPDI
    */
    upd_application_t *app = (upd_application_t *)app_ptr;
    int result;

    if (!VALID_APP(app) || !VALID_PTR(data) || len < 2)
     88c:	2800      	cmp	r0, #0
     88e:	d02d      	beq.n	8ec <app_read_data_words+0x68>
     890:	4b1b      	ldr	r3, [pc, #108]	; (900 <app_read_data_words+0x7c>)
     892:	6802      	ldr	r2, [r0, #0]
     894:	429a      	cmp	r2, r3
     896:	d129      	bne.n	8ec <app_read_data_words+0x68>
     898:	2d00      	cmp	r5, #0
     89a:	d027      	beq.n	8ec <app_read_data_words+0x68>
        return ERROR_PTR;
     89c:	0028      	movs	r0, r5
    if (!VALID_APP(app) || !VALID_PTR(data) || len < 2)
     89e:	1c6b      	adds	r3, r5, #1
     8a0:	d00a      	beq.n	8b8 <app_read_data_words+0x34>
     8a2:	2e01      	cmp	r6, #1
     8a4:	dd22      	ble.n	8ec <app_read_data_words+0x68>

    DBG_INFO(APP_DEBUG, "<APP> Read words data(%d) addr: %hX", len, address);

    // Special-case of 1 word
    if (len == 2) {
     8a6:	2e02      	cmp	r6, #2
     8a8:	d107      	bne.n	8ba <app_read_data_words+0x36>
        result = _link_ld16(LINK(app), address, (u16 *)data);
     8aa:	002a      	movs	r2, r5
     8ac:	6860      	ldr	r0, [r4, #4]
     8ae:	4b15      	ldr	r3, [pc, #84]	; (904 <app_read_data_words+0x80>)
     8b0:	4798      	blx	r3
        if (result) {
     8b2:	2800      	cmp	r0, #0
     8b4:	d11c      	bne.n	8f0 <app_read_data_words+0x6c>
            DBG_INFO(APP_DEBUG, "_link_ld16 failed %d", result);
            return -2;
        }

        return 0;
     8b6:	2000      	movs	r0, #0
        DBG_INFO(APP_DEBUG, "link_ld_ptr_inc16 failed %d", result);
        return -6;
    }

    return 0;
}
     8b8:	bd70      	pop	{r4, r5, r6, pc}
    if (len > (UPDI_MAX_REPEAT_SIZE >> 1) + 1) {
     8ba:	2e80      	cmp	r6, #128	; 0x80
     8bc:	dc1a      	bgt.n	8f4 <app_read_data_words+0x70>
    result = link_st_ptr(LINK(app), address);
     8be:	6860      	ldr	r0, [r4, #4]
     8c0:	4b11      	ldr	r3, [pc, #68]	; (908 <app_read_data_words+0x84>)
     8c2:	4798      	blx	r3
    if (result) {
     8c4:	2800      	cmp	r0, #0
     8c6:	d117      	bne.n	8f8 <app_read_data_words+0x74>
    result = link_repeat16(LINK(app), (len >> 1) - 1);
     8c8:	1071      	asrs	r1, r6, #1
     8ca:	3901      	subs	r1, #1
     8cc:	b289      	uxth	r1, r1
     8ce:	6860      	ldr	r0, [r4, #4]
     8d0:	4b0e      	ldr	r3, [pc, #56]	; (90c <app_read_data_words+0x88>)
     8d2:	4798      	blx	r3
    if (result) {
     8d4:	2800      	cmp	r0, #0
     8d6:	d111      	bne.n	8fc <app_read_data_words+0x78>
    result = link_ld_ptr_inc16(LINK(app), data, len);
     8d8:	0032      	movs	r2, r6
     8da:	0029      	movs	r1, r5
     8dc:	6860      	ldr	r0, [r4, #4]
     8de:	4b0c      	ldr	r3, [pc, #48]	; (910 <app_read_data_words+0x8c>)
     8e0:	4798      	blx	r3
    if (result) {
     8e2:	2800      	cmp	r0, #0
     8e4:	d0e7      	beq.n	8b6 <app_read_data_words+0x32>
        return -6;
     8e6:	2006      	movs	r0, #6
        return -5;
     8e8:	4240      	negs	r0, r0
     8ea:	e7e5      	b.n	8b8 <app_read_data_words+0x34>
        return ERROR_PTR;
     8ec:	2001      	movs	r0, #1
     8ee:	e7fb      	b.n	8e8 <app_read_data_words+0x64>
            return -2;
     8f0:	2002      	movs	r0, #2
     8f2:	e7f9      	b.n	8e8 <app_read_data_words+0x64>
        return -3;
     8f4:	2003      	movs	r0, #3
     8f6:	e7f7      	b.n	8e8 <app_read_data_words+0x64>
        return -4;
     8f8:	2004      	movs	r0, #4
     8fa:	e7f5      	b.n	8e8 <app_read_data_words+0x64>
        return -5;
     8fc:	2005      	movs	r0, #5
     8fe:	e7f3      	b.n	8e8 <app_read_data_words+0x64>
     900:	0000b4b4 	.word	0x0000b4b4
     904:	00000f05 	.word	0x00000f05
     908:	000010f5 	.word	0x000010f5
     90c:	000012ad 	.word	0x000012ad
     910:	000010a1 	.word	0x000010a1

00000914 <app_read_data_bytes>:
    @data: data output buffer
    @len: data len
    @return 0 successful, other value if failed
*/
int app_read_data_bytes(void *app_ptr, u16 address, u8 *data, int len)
{
     914:	b570      	push	{r4, r5, r6, lr}
     916:	0004      	movs	r4, r0
     918:	0015      	movs	r5, r2
     91a:	001e      	movs	r6, r3
    Reads a number of bytes of data from UPDI
    */
    upd_application_t *app = (upd_application_t *)app_ptr;
    int result;

    if (!VALID_APP(app) || !VALID_PTR(data) || len < 1)
     91c:	2800      	cmp	r0, #0
     91e:	d02e      	beq.n	97e <app_read_data_bytes+0x6a>
     920:	4b1c      	ldr	r3, [pc, #112]	; (994 <app_read_data_bytes+0x80>)
     922:	6802      	ldr	r2, [r0, #0]
     924:	429a      	cmp	r2, r3
     926:	d12a      	bne.n	97e <app_read_data_bytes+0x6a>
     928:	2d00      	cmp	r5, #0
     92a:	d028      	beq.n	97e <app_read_data_bytes+0x6a>
        return ERROR_PTR;
     92c:	0028      	movs	r0, r5
    if (!VALID_APP(app) || !VALID_PTR(data) || len < 1)
     92e:	1c6b      	adds	r3, r5, #1
     930:	d00a      	beq.n	948 <app_read_data_bytes+0x34>
     932:	2e00      	cmp	r6, #0
     934:	dd23      	ble.n	97e <app_read_data_bytes+0x6a>

    DBG_INFO(APP_DEBUG, "<APP> Read bytes data(%d) addr: %hX", len, address);

    // Special-case of 1 byte
    if (len == 1) {
     936:	2e01      	cmp	r6, #1
     938:	d107      	bne.n	94a <app_read_data_bytes+0x36>
        result = _link_ld(LINK(app), address, data);
     93a:	002a      	movs	r2, r5
     93c:	6860      	ldr	r0, [r4, #4]
     93e:	4b16      	ldr	r3, [pc, #88]	; (998 <app_read_data_bytes+0x84>)
     940:	4798      	blx	r3
        if (result) {
     942:	2800      	cmp	r0, #0
     944:	d11d      	bne.n	982 <app_read_data_bytes+0x6e>
            DBG_INFO(APP_DEBUG, "_link_ld failed %d", result);
            return -2;
        }

        return 0;
     946:	2000      	movs	r0, #0
        DBG_INFO(APP_DEBUG, "link_ld_ptr_inc failed %d", result);
        return -6;
    }

    return 0;
}
     948:	bd70      	pop	{r4, r5, r6, pc}
    if (len > UPDI_MAX_REPEAT_SIZE + 1) {
     94a:	2380      	movs	r3, #128	; 0x80
     94c:	005b      	lsls	r3, r3, #1
     94e:	429e      	cmp	r6, r3
     950:	dc19      	bgt.n	986 <app_read_data_bytes+0x72>
    result = link_st_ptr(LINK(app), address);
     952:	6860      	ldr	r0, [r4, #4]
     954:	4b11      	ldr	r3, [pc, #68]	; (99c <app_read_data_bytes+0x88>)
     956:	4798      	blx	r3
    if (result) {
     958:	2800      	cmp	r0, #0
     95a:	d116      	bne.n	98a <app_read_data_bytes+0x76>
    result = link_repeat(LINK(app), len - 1);
     95c:	1e71      	subs	r1, r6, #1
     95e:	b2c9      	uxtb	r1, r1
     960:	6860      	ldr	r0, [r4, #4]
     962:	4b0f      	ldr	r3, [pc, #60]	; (9a0 <app_read_data_bytes+0x8c>)
     964:	4798      	blx	r3
    if (result) {
     966:	2800      	cmp	r0, #0
     968:	d111      	bne.n	98e <app_read_data_bytes+0x7a>
    result = link_ld_ptr_inc(LINK(app), data, len);
     96a:	0032      	movs	r2, r6
     96c:	0029      	movs	r1, r5
     96e:	6860      	ldr	r0, [r4, #4]
     970:	4b0c      	ldr	r3, [pc, #48]	; (9a4 <app_read_data_bytes+0x90>)
     972:	4798      	blx	r3
    if (result) {
     974:	2800      	cmp	r0, #0
     976:	d0e6      	beq.n	946 <app_read_data_bytes+0x32>
        return -6;
     978:	2006      	movs	r0, #6
        return -5;
     97a:	4240      	negs	r0, r0
     97c:	e7e4      	b.n	948 <app_read_data_bytes+0x34>
        return ERROR_PTR;
     97e:	2001      	movs	r0, #1
     980:	e7fb      	b.n	97a <app_read_data_bytes+0x66>
            return -2;
     982:	2002      	movs	r0, #2
     984:	e7f9      	b.n	97a <app_read_data_bytes+0x66>
        return -3;
     986:	2003      	movs	r0, #3
     988:	e7f7      	b.n	97a <app_read_data_bytes+0x66>
        return -4;
     98a:	2004      	movs	r0, #4
     98c:	e7f5      	b.n	97a <app_read_data_bytes+0x66>
        return -5;
     98e:	2005      	movs	r0, #5
     990:	e7f3      	b.n	97a <app_read_data_bytes+0x66>
     992:	46c0      	nop			; (mov r8, r8)
     994:	0000b4b4 	.word	0x0000b4b4
     998:	00000ead 	.word	0x00000ead
     99c:	000010f5 	.word	0x000010f5
     9a0:	00001271 	.word	0x00001271
     9a4:	00001051 	.word	0x00001051

000009a8 <app_read_data>:
    @data: data output buffer
    @len: data len
    @return 0 successful, other value if failed
*/
int app_read_data(void *app_ptr, u16 address, u8 *data, int len)
{
     9a8:	b570      	push	{r4, r5, r6, lr}
    /*
    Reads a number of bytes of data from UPDI
    */
    bool use_word_access = !(len & 0x1);
     9aa:	2401      	movs	r4, #1
{
     9ac:	0005      	movs	r5, r0
    bool use_word_access = !(len & 0x1);
     9ae:	401c      	ands	r4, r3
    int result;

    DBG_INFO(APP_DEBUG, "<APP> Read data(%d)", len);

    if (!VALID_PTR(data) || len <= 0)
     9b0:	2a00      	cmp	r2, #0
     9b2:	d00c      	beq.n	9ce <app_read_data+0x26>
        return ERROR_PTR;
     9b4:	0010      	movs	r0, r2
    if (!VALID_PTR(data) || len <= 0)
     9b6:	1c56      	adds	r6, r2, #1
     9b8:	d006      	beq.n	9c8 <app_read_data+0x20>
     9ba:	2b00      	cmp	r3, #0
     9bc:	dd07      	ble.n	9ce <app_read_data+0x26>

    if (use_word_access)
        result = app_read_data_words(app_ptr, address, data, len);
     9be:	0028      	movs	r0, r5
    if (use_word_access)
     9c0:	2c00      	cmp	r4, #0
     9c2:	d102      	bne.n	9ca <app_read_data+0x22>
        result = app_read_data_words(app_ptr, address, data, len);
     9c4:	4c03      	ldr	r4, [pc, #12]	; (9d4 <app_read_data+0x2c>)
    else
        result = app_read_data_bytes(app_ptr, address, data, len);
     9c6:	47a0      	blx	r4

    return result;
}
     9c8:	bd70      	pop	{r4, r5, r6, pc}
        result = app_read_data_bytes(app_ptr, address, data, len);
     9ca:	4c03      	ldr	r4, [pc, #12]	; (9d8 <app_read_data+0x30>)
     9cc:	e7fb      	b.n	9c6 <app_read_data+0x1e>
        return ERROR_PTR;
     9ce:	2001      	movs	r0, #1
     9d0:	4240      	negs	r0, r0
     9d2:	e7f9      	b.n	9c8 <app_read_data+0x20>
     9d4:	00000885 	.word	0x00000885
     9d8:	00000915 	.word	0x00000915

000009dc <app_device_info>:
{
     9dc:	b570      	push	{r4, r5, r6, lr}
     9de:	0004      	movs	r4, r0
     9e0:	b08a      	sub	sp, #40	; 0x28
    if (!VALID_APP(app))
     9e2:	2800      	cmp	r0, #0
     9e4:	d026      	beq.n	a34 <app_device_info+0x58>
     9e6:	4b18      	ldr	r3, [pc, #96]	; (a48 <app_device_info+0x6c>)
     9e8:	6802      	ldr	r2, [r0, #0]
     9ea:	429a      	cmp	r2, r3
     9ec:	d122      	bne.n	a34 <app_device_info+0x58>
    result = link_read_sib(LINK(app), sib, sizeof(sib));
     9ee:	2210      	movs	r2, #16
     9f0:	a906      	add	r1, sp, #24
     9f2:	6840      	ldr	r0, [r0, #4]
     9f4:	4b15      	ldr	r3, [pc, #84]	; (a4c <app_device_info+0x70>)
     9f6:	4798      	blx	r3
     9f8:	1e05      	subs	r5, r0, #0
    if (result) {
     9fa:	d120      	bne.n	a3e <app_device_info+0x62>
    if (app_in_prog_mode(app)) {
     9fc:	0020      	movs	r0, r4
     9fe:	4b14      	ldr	r3, [pc, #80]	; (a50 <app_device_info+0x74>)
     a00:	4798      	blx	r3
     a02:	2800      	cmp	r0, #0
     a04:	d018      	beq.n	a38 <app_device_info+0x5c>
        result = app_read_data(app, APP_REG(app, sigrow_address), sigrow, sizeof(sigrow));
     a06:	68a3      	ldr	r3, [r4, #8]
     a08:	aa02      	add	r2, sp, #8
     a0a:	685b      	ldr	r3, [r3, #4]
     a0c:	0020      	movs	r0, r4
     a0e:	89d9      	ldrh	r1, [r3, #14]
     a10:	4e10      	ldr	r6, [pc, #64]	; (a54 <app_device_info+0x78>)
     a12:	230e      	movs	r3, #14
     a14:	47b0      	blx	r6
        if (result) {
     a16:	2800      	cmp	r0, #0
     a18:	d113      	bne.n	a42 <app_device_info+0x66>
        result = app_read_data(app, APP_REG(app, syscfg_address) + 1, revid, sizeof(revid));
     a1a:	68a3      	ldr	r3, [r4, #8]
     a1c:	aa01      	add	r2, sp, #4
     a1e:	685b      	ldr	r3, [r3, #4]
     a20:	0020      	movs	r0, r4
     a22:	8959      	ldrh	r1, [r3, #10]
     a24:	2301      	movs	r3, #1
     a26:	3101      	adds	r1, #1
     a28:	b289      	uxth	r1, r1
     a2a:	47b0      	blx	r6
        if (result) {
     a2c:	2800      	cmp	r0, #0
     a2e:	d003      	beq.n	a38 <app_device_info+0x5c>
            return -4;
     a30:	2504      	movs	r5, #4
     a32:	e000      	b.n	a36 <app_device_info+0x5a>
        return ERROR_PTR;
     a34:	2501      	movs	r5, #1
            return -4;
     a36:	426d      	negs	r5, r5
}
     a38:	0028      	movs	r0, r5
     a3a:	b00a      	add	sp, #40	; 0x28
     a3c:	bd70      	pop	{r4, r5, r6, pc}
        return -2;
     a3e:	2502      	movs	r5, #2
     a40:	e7f9      	b.n	a36 <app_device_info+0x5a>
            return -3;
     a42:	2503      	movs	r5, #3
     a44:	e7f7      	b.n	a36 <app_device_info+0x5a>
     a46:	46c0      	nop			; (mov r8, r8)
     a48:	0000b4b4 	.word	0x0000b4b4
     a4c:	000012ed 	.word	0x000012ed
     a50:	00000525 	.word	0x00000525
     a54:	000009a9 	.word	0x000009a9

00000a58 <app_write_data_words>:
    @data: data buffer
    @len: data len
    @return 0 successful, other value if failed
*/
int app_write_data_words(void *app_ptr, u16 address, const u8 *data, int len)
{
     a58:	b570      	push	{r4, r5, r6, lr}
     a5a:	0004      	movs	r4, r0
     a5c:	0015      	movs	r5, r2
     a5e:	001e      	movs	r6, r3
        Writes a number of words to memory
    */
    upd_application_t *app = (upd_application_t *)app_ptr;
    int result;

    if (!VALID_APP(app) || !VALID_PTR(data) || len < 2)
     a60:	2800      	cmp	r0, #0
     a62:	d035      	beq.n	ad0 <app_write_data_words+0x78>
     a64:	4b1d      	ldr	r3, [pc, #116]	; (adc <app_write_data_words+0x84>)
     a66:	6802      	ldr	r2, [r0, #0]
     a68:	429a      	cmp	r2, r3
     a6a:	d131      	bne.n	ad0 <app_write_data_words+0x78>
     a6c:	2d00      	cmp	r5, #0
     a6e:	d02f      	beq.n	ad0 <app_write_data_words+0x78>
        return ERROR_PTR;
     a70:	0028      	movs	r0, r5
    if (!VALID_APP(app) || !VALID_PTR(data) || len < 2)
     a72:	1c6b      	adds	r3, r5, #1
     a74:	d011      	beq.n	a9a <app_write_data_words+0x42>
     a76:	2e01      	cmp	r6, #1
     a78:	dd2a      	ble.n	ad0 <app_write_data_words+0x78>

    DBG_INFO(APP_DEBUG, "<APP> Write words data(%d) addr: %hX", len, address);
    
    // Special-case of 1 word
    if (len == 2) {
     a7a:	2e02      	cmp	r6, #2
     a7c:	d10e      	bne.n	a9c <app_write_data_words+0x44>
        result = link_st16(LINK(app), address, data[0] + (data[1] << 8));
     a7e:	786b      	ldrb	r3, [r5, #1]
     a80:	782a      	ldrb	r2, [r5, #0]
     a82:	021b      	lsls	r3, r3, #8
     a84:	18d2      	adds	r2, r2, r3
     a86:	b292      	uxth	r2, r2
     a88:	6860      	ldr	r0, [r4, #4]
     a8a:	4b15      	ldr	r3, [pc, #84]	; (ae0 <app_write_data_words+0x88>)
     a8c:	4798      	blx	r3
        if (result) {
     a8e:	2800      	cmp	r0, #0
     a90:	d002      	beq.n	a98 <app_write_data_words+0x40>
            DBG_INFO(APP_DEBUG, "link_st16 failed %d", result);
            return -3;
     a92:	2003      	movs	r0, #3

    //Fire up the repeat
    result = link_repeat16(LINK(app), (len >> 1) - 1);
    if (result) {
        DBG_INFO(APP_DEBUG, "link_repeat16 failed %d", result);
        return -5;
     a94:	4240      	negs	r0, r0
     a96:	e000      	b.n	a9a <app_write_data_words+0x42>
        return 0;
     a98:	2000      	movs	r0, #0
        DBG_INFO(APP_DEBUG, "link_st_ptr_inc16 failed %d", result);
        return -6;
    }

    return 0;
}
     a9a:	bd70      	pop	{r4, r5, r6, pc}
    if (len > ((UPDI_MAX_REPEAT_SIZE + 1) << 1)) {
     a9c:	2380      	movs	r3, #128	; 0x80
     a9e:	009b      	lsls	r3, r3, #2
     aa0:	429e      	cmp	r6, r3
     aa2:	dcf6      	bgt.n	a92 <app_write_data_words+0x3a>
    result = link_st_ptr(LINK(app), address);
     aa4:	6860      	ldr	r0, [r4, #4]
     aa6:	4b0f      	ldr	r3, [pc, #60]	; (ae4 <app_write_data_words+0x8c>)
     aa8:	4798      	blx	r3
    if (result) {
     aaa:	2800      	cmp	r0, #0
     aac:	d112      	bne.n	ad4 <app_write_data_words+0x7c>
    result = link_repeat16(LINK(app), (len >> 1) - 1);
     aae:	1071      	asrs	r1, r6, #1
     ab0:	3901      	subs	r1, #1
     ab2:	b289      	uxth	r1, r1
     ab4:	6860      	ldr	r0, [r4, #4]
     ab6:	4b0c      	ldr	r3, [pc, #48]	; (ae8 <app_write_data_words+0x90>)
     ab8:	4798      	blx	r3
    if (result) {
     aba:	2800      	cmp	r0, #0
     abc:	d10c      	bne.n	ad8 <app_write_data_words+0x80>
    result = link_st_ptr_inc16(LINK(app), data, len);
     abe:	0032      	movs	r2, r6
     ac0:	0029      	movs	r1, r5
     ac2:	6860      	ldr	r0, [r4, #4]
     ac4:	4b09      	ldr	r3, [pc, #36]	; (aec <app_write_data_words+0x94>)
     ac6:	4798      	blx	r3
    if (result) {
     ac8:	2800      	cmp	r0, #0
     aca:	d0e5      	beq.n	a98 <app_write_data_words+0x40>
        return -6;
     acc:	2006      	movs	r0, #6
     ace:	e7e1      	b.n	a94 <app_write_data_words+0x3c>
        return ERROR_PTR;
     ad0:	2001      	movs	r0, #1
     ad2:	e7df      	b.n	a94 <app_write_data_words+0x3c>
        return -4;
     ad4:	2004      	movs	r0, #4
     ad6:	e7dd      	b.n	a94 <app_write_data_words+0x3c>
        return -5;
     ad8:	2005      	movs	r0, #5
     ada:	e7db      	b.n	a94 <app_write_data_words+0x3c>
     adc:	0000b4b4 	.word	0x0000b4b4
     ae0:	00000fd5 	.word	0x00000fd5
     ae4:	000010f5 	.word	0x000010f5
     ae8:	000012ad 	.word	0x000012ad
     aec:	000011d9 	.word	0x000011d9

00000af0 <app_write_data_bytes>:
    @data: data buffer
    @len: data len
    @return 0 successful, other value if failed
*/
int app_write_data_bytes(void *app_ptr, u16 address, const u8 *data, int len)
{
     af0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
     af2:	0004      	movs	r4, r0
     af4:	000f      	movs	r7, r1
     af6:	0015      	movs	r5, r2
     af8:	001e      	movs	r6, r3
    Writes a number of bytes to memory
    */
    upd_application_t *app = (upd_application_t *)app_ptr;
    int result;

    if (!VALID_APP(app) || !VALID_PTR(data) || len < 1)
     afa:	2800      	cmp	r0, #0
     afc:	d030      	beq.n	b60 <app_write_data_bytes+0x70>
     afe:	4b1c      	ldr	r3, [pc, #112]	; (b70 <app_write_data_bytes+0x80>)
     b00:	6802      	ldr	r2, [r0, #0]
     b02:	429a      	cmp	r2, r3
     b04:	d12c      	bne.n	b60 <app_write_data_bytes+0x70>
     b06:	2d00      	cmp	r5, #0
     b08:	d02a      	beq.n	b60 <app_write_data_bytes+0x70>
        return ERROR_PTR;
     b0a:	0028      	movs	r0, r5
    if (!VALID_APP(app) || !VALID_PTR(data) || len < 1)
     b0c:	1c6b      	adds	r3, r5, #1
     b0e:	d029      	beq.n	b64 <app_write_data_bytes+0x74>
     b10:	2e00      	cmp	r6, #0
     b12:	dd25      	ble.n	b60 <app_write_data_bytes+0x70>

    DBG_INFO(APP_DEBUG, "<APP> Write bytes data(%d) addr: %hX", len, address);

    // Special-case of 1 byte
    if (len == 1) {
     b14:	2e01      	cmp	r6, #1
     b16:	d10d      	bne.n	b34 <app_write_data_bytes+0x44>
        result = link_st(LINK(app), address, data[0]);
     b18:	782a      	ldrb	r2, [r5, #0]
     b1a:	6860      	ldr	r0, [r4, #4]
     b1c:	4b15      	ldr	r3, [pc, #84]	; (b74 <app_write_data_bytes+0x84>)
     b1e:	4798      	blx	r3
        if (result) {
     b20:	2800      	cmp	r0, #0
     b22:	d120      	bne.n	b66 <app_write_data_bytes+0x76>
        DBG_INFO(APP_DEBUG, "Write data length out of size %d", len);
        return -3;
    }

    // Store the address
    result = link_st_ptr(LINK(app), address);
     b24:	0039      	movs	r1, r7
     b26:	6860      	ldr	r0, [r4, #4]
     b28:	4b13      	ldr	r3, [pc, #76]	; (b78 <app_write_data_bytes+0x88>)
     b2a:	4798      	blx	r3
    if (result) {
     b2c:	2800      	cmp	r0, #0
     b2e:	d007      	beq.n	b40 <app_write_data_bytes+0x50>
        DBG_INFO(APP_DEBUG, "link_st_ptr failed %d", result);
        return -4;
     b30:	2004      	movs	r0, #4
     b32:	e016      	b.n	b62 <app_write_data_bytes+0x72>
    if (len > UPDI_MAX_REPEAT_SIZE + 1) {
     b34:	2380      	movs	r3, #128	; 0x80
     b36:	005b      	lsls	r3, r3, #1
     b38:	429e      	cmp	r6, r3
     b3a:	ddf3      	ble.n	b24 <app_write_data_bytes+0x34>
        return -3;
     b3c:	2003      	movs	r0, #3
     b3e:	e010      	b.n	b62 <app_write_data_bytes+0x72>
    }

    //Fire up the repeat
    result = link_repeat(LINK(app), len - 1);
     b40:	1e71      	subs	r1, r6, #1
     b42:	b2c9      	uxtb	r1, r1
     b44:	6860      	ldr	r0, [r4, #4]
     b46:	4b0d      	ldr	r3, [pc, #52]	; (b7c <app_write_data_bytes+0x8c>)
     b48:	4798      	blx	r3
    if (result) {
     b4a:	2800      	cmp	r0, #0
     b4c:	d10d      	bne.n	b6a <app_write_data_bytes+0x7a>
        DBG_INFO(APP_DEBUG, "link_repeat failed %d", result);
        return -5;
    }
 
    result = link_st_ptr_inc(LINK(app), data, len);
     b4e:	0032      	movs	r2, r6
     b50:	0029      	movs	r1, r5
     b52:	6860      	ldr	r0, [r4, #4]
     b54:	4b0a      	ldr	r3, [pc, #40]	; (b80 <app_write_data_bytes+0x90>)
     b56:	4798      	blx	r3
    if (result) {
     b58:	2800      	cmp	r0, #0
     b5a:	d003      	beq.n	b64 <app_write_data_bytes+0x74>
        DBG_INFO(APP_DEBUG, "link_st_ptr_inc16 failed %d", result);
        return -6;
     b5c:	2006      	movs	r0, #6
     b5e:	e000      	b.n	b62 <app_write_data_bytes+0x72>
        return ERROR_PTR;
     b60:	2001      	movs	r0, #1
        return -6;
     b62:	4240      	negs	r0, r0
    }

    return 0;
}
     b64:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
            return -2;
     b66:	2002      	movs	r0, #2
     b68:	e7fb      	b.n	b62 <app_write_data_bytes+0x72>
        return -5;
     b6a:	2005      	movs	r0, #5
     b6c:	e7f9      	b.n	b62 <app_write_data_bytes+0x72>
     b6e:	46c0      	nop			; (mov r8, r8)
     b70:	0000b4b4 	.word	0x0000b4b4
     b74:	00000f5d 	.word	0x00000f5d
     b78:	000010f5 	.word	0x000010f5
     b7c:	00001271 	.word	0x00001271
     b80:	0000114d 	.word	0x0000114d

00000b84 <app_write_data>:
    @len: data len
    @use_word_access: whether use 2 bytes mode for writing
    @return 0 successful, other value if failed
*/
int app_write_data(void *app_ptr, u16 address, const u8 *data, int len, bool use_word_access)
{
     b84:	b570      	push	{r4, r5, r6, lr}
     b86:	0004      	movs	r4, r0
     b88:	a804      	add	r0, sp, #16
     b8a:	7805      	ldrb	r5, [r0, #0]
    */
    int result;

    DBG_INFO(APP_DEBUG, "<APP> Write data(%d)", len);

    if (!VALID_PTR(data) || len <= 0)
     b8c:	2a00      	cmp	r2, #0
     b8e:	d00b      	beq.n	ba8 <app_write_data+0x24>
        return ERROR_PTR;
     b90:	0010      	movs	r0, r2
    if (!VALID_PTR(data) || len <= 0)
     b92:	1c56      	adds	r6, r2, #1
     b94:	d007      	beq.n	ba6 <app_write_data+0x22>
     b96:	2b00      	cmp	r3, #0
     b98:	dd06      	ble.n	ba8 <app_write_data+0x24>

    if (use_word_access)
        result = app_write_data_words(app_ptr, address, data, len);
     b9a:	0020      	movs	r0, r4
     b9c:	4c04      	ldr	r4, [pc, #16]	; (bb0 <app_write_data+0x2c>)
    if (use_word_access)
     b9e:	2d00      	cmp	r5, #0
     ba0:	d100      	bne.n	ba4 <app_write_data+0x20>
    else
        result = app_write_data_bytes(app_ptr, address, data, len);
     ba2:	4c04      	ldr	r4, [pc, #16]	; (bb4 <app_write_data+0x30>)
     ba4:	47a0      	blx	r4
    
    return result;
}
     ba6:	bd70      	pop	{r4, r5, r6, pc}
        return ERROR_PTR;
     ba8:	2001      	movs	r0, #1
     baa:	4240      	negs	r0, r0
     bac:	e7fb      	b.n	ba6 <app_write_data+0x22>
     bae:	46c0      	nop			; (mov r8, r8)
     bb0:	00000a59 	.word	0x00000a59
     bb4:	00000af1 	.word	0x00000af1

00000bb8 <_app_write_nvm>:
    @len: data len
    @nvm_command: programming command
    @return 0 successful, other value if failed
*/
int _app_write_nvm(void *app_ptr, u16 address, const u8 *data, int len, u8 nvm_command, bool use_word_access)
{
     bb8:	b5f0      	push	{r4, r5, r6, r7, lr}
     bba:	b087      	sub	sp, #28
     bbc:	9303      	str	r3, [sp, #12]
     bbe:	ab0c      	add	r3, sp, #48	; 0x30
     bc0:	781b      	ldrb	r3, [r3, #0]
     bc2:	0004      	movs	r4, r0
     bc4:	9304      	str	r3, [sp, #16]
     bc6:	ab0d      	add	r3, sp, #52	; 0x34
     bc8:	781b      	ldrb	r3, [r3, #0]
     bca:	000f      	movs	r7, r1
     bcc:	9202      	str	r2, [sp, #8]
     bce:	9305      	str	r3, [sp, #20]
        By default the PAGE_WRITE command is used, which requires that the page is already erased.
    */
    upd_application_t *app = (upd_application_t *)app_ptr;
    int result;

    if (!VALID_APP(app))
     bd0:	2800      	cmp	r0, #0
     bd2:	d02c      	beq.n	c2e <_app_write_nvm+0x76>
     bd4:	4b1d      	ldr	r3, [pc, #116]	; (c4c <_app_write_nvm+0x94>)
     bd6:	6802      	ldr	r2, [r0, #0]
     bd8:	429a      	cmp	r2, r3
     bda:	d128      	bne.n	c2e <_app_write_nvm+0x76>
        return ERROR_PTR;

    DBG_INFO(APP_DEBUG, "<APP> Chip write nvm");

    // Check that NVM controller is ready
    result = app_wait_flash_ready(app, TIMEOUT_WAIT_FLASH_READY);
     bdc:	21fa      	movs	r1, #250	; 0xfa
     bde:	4d1c      	ldr	r5, [pc, #112]	; (c50 <_app_write_nvm+0x98>)
     be0:	0089      	lsls	r1, r1, #2
     be2:	47a8      	blx	r5
    if (result) {
     be4:	2800      	cmp	r0, #0
     be6:	d126      	bne.n	c36 <_app_write_nvm+0x7e>

    // Erase write command will clear the buffer automantic
    
    //Clear the page buffer
    DBG_INFO(APP_DEBUG, "Clear page buffer");
    result = app_execute_nvm_command(app, UPDI_NVMCTRL_CTRLA_PAGE_BUFFER_CLR);
     be8:	2104      	movs	r1, #4
     bea:	0020      	movs	r0, r4
     bec:	4e19      	ldr	r6, [pc, #100]	; (c54 <_app_write_nvm+0x9c>)
     bee:	47b0      	blx	r6
    if (result) {
     bf0:	2800      	cmp	r0, #0
     bf2:	d122      	bne.n	c3a <_app_write_nvm+0x82>
        DBG_INFO(APP_DEBUG, "app_execute_nvm_command failed %d", UPDI_NVMCTRL_CTRLA_PAGE_BUFFER_CLR, result);
        return -3;
    }

    // Waif for NVM controller to be ready
    result = app_wait_flash_ready(app, TIMEOUT_WAIT_FLASH_READY);
     bf4:	21fa      	movs	r1, #250	; 0xfa
     bf6:	0020      	movs	r0, r4
     bf8:	0089      	lsls	r1, r1, #2
     bfa:	47a8      	blx	r5
    if (result) {
     bfc:	2800      	cmp	r0, #0
     bfe:	d11e      	bne.n	c3e <_app_write_nvm+0x86>
        DBG_INFO(APP_DEBUG, "app_wait_flash_ready timeout after page buffer clear failed %d", result);
        return -4;
    }
    
    // Load the page buffer by writing directly to location
    result = app_write_data(app, address, data, len, use_word_access);
     c00:	9b05      	ldr	r3, [sp, #20]
     c02:	0039      	movs	r1, r7
     c04:	9300      	str	r3, [sp, #0]
     c06:	9a02      	ldr	r2, [sp, #8]
     c08:	9b03      	ldr	r3, [sp, #12]
     c0a:	0020      	movs	r0, r4
     c0c:	4f12      	ldr	r7, [pc, #72]	; (c58 <_app_write_nvm+0xa0>)
     c0e:	47b8      	blx	r7
    if (result) {
     c10:	2800      	cmp	r0, #0
     c12:	d116      	bne.n	c42 <_app_write_nvm+0x8a>
        return -5;
    }

    // Write the page to NVM, maybe erase first
    DBG_INFO(APP_DEBUG, "Committing page");
    result = app_execute_nvm_command(app, nvm_command);
     c14:	9904      	ldr	r1, [sp, #16]
     c16:	0020      	movs	r0, r4
     c18:	47b0      	blx	r6
    if (result) {
     c1a:	2800      	cmp	r0, #0
     c1c:	d113      	bne.n	c46 <_app_write_nvm+0x8e>
        DBG_INFO(APP_DEBUG, "app_execute_nvm_command(%d) failed %d", nvm_command, result);
        return -6;
    }

    // Waif for NVM controller to be ready again
    result = app_wait_flash_ready(app, TIMEOUT_WAIT_FLASH_READY);
     c1e:	21fa      	movs	r1, #250	; 0xfa
     c20:	0020      	movs	r0, r4
     c22:	0089      	lsls	r1, r1, #2
     c24:	47a8      	blx	r5
    if (result) {
     c26:	2800      	cmp	r0, #0
     c28:	d003      	beq.n	c32 <_app_write_nvm+0x7a>
        DBG_INFO(APP_DEBUG, "app_wait_flash_ready timeout after page write failed %d", result);
        return -7;
     c2a:	2007      	movs	r0, #7
     c2c:	e000      	b.n	c30 <_app_write_nvm+0x78>
        return ERROR_PTR;
     c2e:	2001      	movs	r0, #1
        return -7;
     c30:	4240      	negs	r0, r0
    }

    return 0;
}
     c32:	b007      	add	sp, #28
     c34:	bdf0      	pop	{r4, r5, r6, r7, pc}
        return -2;
     c36:	2002      	movs	r0, #2
     c38:	e7fa      	b.n	c30 <_app_write_nvm+0x78>
        return -3;
     c3a:	2003      	movs	r0, #3
     c3c:	e7f8      	b.n	c30 <_app_write_nvm+0x78>
        return -4;
     c3e:	2004      	movs	r0, #4
     c40:	e7f6      	b.n	c30 <_app_write_nvm+0x78>
        return -5;
     c42:	2005      	movs	r0, #5
     c44:	e7f4      	b.n	c30 <_app_write_nvm+0x78>
        return -6;
     c46:	2006      	movs	r0, #6
     c48:	e7f2      	b.n	c30 <_app_write_nvm+0x78>
     c4a:	46c0      	nop			; (mov r8, r8)
     c4c:	0000b4b4 	.word	0x0000b4b4
     c50:	000007a5 	.word	0x000007a5
     c54:	00000809 	.word	0x00000809
     c58:	00000b85 	.word	0x00000b85

00000c5c <app_write_nvm>:
    @data: data buffer
    @len: data len
    @return 0 successful, other value if failed
*/
int app_write_nvm(void *app_ptr, u16 address, const u8 *data, int len)
{
     c5c:	b537      	push	{r0, r1, r2, r4, r5, lr}
    bool use_word_access = !(len & 0x1);
     c5e:	2401      	movs	r4, #1

    return _app_write_nvm(app_ptr, address, data, len, UPDI_NVMCTRL_CTRLA_WRITE_PAGE, use_word_access);
     c60:	0025      	movs	r5, r4
     c62:	439d      	bics	r5, r3
     c64:	9501      	str	r5, [sp, #4]
     c66:	9400      	str	r4, [sp, #0]
     c68:	4c01      	ldr	r4, [pc, #4]	; (c70 <app_write_nvm+0x14>)
     c6a:	47a0      	blx	r4
}
     c6c:	bd3e      	pop	{r1, r2, r3, r4, r5, pc}
     c6e:	46c0      	nop			; (mov r8, r8)
     c70:	00000bb9 	.word	0x00000bb9

00000c74 <updi_datalink_deinit>:
    LINK object destroy
    @link_ptr: APP object pointer, acquired from updi_datalink_init()
    @no return
*/
void updi_datalink_deinit(void *link_ptr)
{
     c74:	b510      	push	{r4, lr}
    upd_datalink_t *link = (upd_datalink_t *)link_ptr;
    if (VALID_LINK(link)) {
     c76:	2800      	cmp	r0, #0
     c78:	d006      	beq.n	c88 <updi_datalink_deinit+0x14>
     c7a:	4b04      	ldr	r3, [pc, #16]	; (c8c <updi_datalink_deinit+0x18>)
     c7c:	6802      	ldr	r2, [r0, #0]
     c7e:	429a      	cmp	r2, r3
     c80:	d102      	bne.n	c88 <updi_datalink_deinit+0x14>
        DBG_INFO(LINK_DEBUG, "<LINK> deinit link");

        updi_physical_deinit(PHY(link));
     c82:	6840      	ldr	r0, [r0, #4]
     c84:	4b02      	ldr	r3, [pc, #8]	; (c90 <updi_datalink_deinit+0x1c>)
     c86:	4798      	blx	r3
        //free(link);
    }
}
     c88:	bd10      	pop	{r4, pc}
     c8a:	46c0      	nop			; (mov r8, r8)
     c8c:	0000c3c3 	.word	0x0000c3c3
     c90:	00001795 	.word	0x00001795

00000c94 <_link_ldcs>:
    @address: reg address
    @data: output 8bit buffer
    @return 0 successful, other value if failed
*/
int _link_ldcs(void *link_ptr, u8 address, u8 *data)
{
     c94:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
    /*
        Load data from Control / Status space
        default return 0 if error
    */
    upd_datalink_t *link = (upd_datalink_t *)link_ptr;
    u8 cmd[] = { UPDI_PHY_SYNC, UPDI_LDCS | (address & 0x0F) };
     c96:	2355      	movs	r3, #85	; 0x55
     c98:	ac03      	add	r4, sp, #12
     c9a:	7023      	strb	r3, [r4, #0]
     c9c:	3b46      	subs	r3, #70	; 0x46
     c9e:	400b      	ands	r3, r1
     ca0:	2180      	movs	r1, #128	; 0x80
     ca2:	4249      	negs	r1, r1
     ca4:	4319      	orrs	r1, r3
{
     ca6:	0015      	movs	r5, r2
    u8 cmd[] = { UPDI_PHY_SYNC, UPDI_LDCS | (address & 0x0F) };
     ca8:	7061      	strb	r1, [r4, #1]
    u8 resp;
    int result;

    if (!VALID_LINK(link) || !data)
     caa:	2800      	cmp	r0, #0
     cac:	d016      	beq.n	cdc <_link_ldcs+0x48>
     cae:	4b0e      	ldr	r3, [pc, #56]	; (ce8 <_link_ldcs+0x54>)
     cb0:	6802      	ldr	r2, [r0, #0]
     cb2:	429a      	cmp	r2, r3
     cb4:	d112      	bne.n	cdc <_link_ldcs+0x48>
     cb6:	2d00      	cmp	r5, #0
     cb8:	d010      	beq.n	cdc <_link_ldcs+0x48>
        return ERROR_PTR;

    DBG_INFO(LINK_DEBUG, "<LINK> LDCS from 0x%02x", address);
    result = phy_transfer(PHY(link), cmd, sizeof(cmd), &resp, sizeof(resp));
     cba:	2301      	movs	r3, #1
     cbc:	260b      	movs	r6, #11
     cbe:	9300      	str	r3, [sp, #0]
     cc0:	446e      	add	r6, sp
     cc2:	0021      	movs	r1, r4
     cc4:	0033      	movs	r3, r6
     cc6:	2202      	movs	r2, #2
     cc8:	6840      	ldr	r0, [r0, #4]
     cca:	4c08      	ldr	r4, [pc, #32]	; (cec <_link_ldcs+0x58>)
     ccc:	47a0      	blx	r4
     if (result != sizeof(resp)) {
     cce:	2801      	cmp	r0, #1
     cd0:	d107      	bne.n	ce2 <_link_ldcs+0x4e>
    }

    
    *data = resp;

    return 0;
     cd2:	2000      	movs	r0, #0
    *data = resp;
     cd4:	7833      	ldrb	r3, [r6, #0]
     cd6:	702b      	strb	r3, [r5, #0]
}
     cd8:	b004      	add	sp, #16
     cda:	bd70      	pop	{r4, r5, r6, pc}
        return ERROR_PTR;
     cdc:	2001      	movs	r0, #1
        return -2;
     cde:	4240      	negs	r0, r0
     ce0:	e7fa      	b.n	cd8 <_link_ldcs+0x44>
     ce2:	2002      	movs	r0, #2
     ce4:	e7fb      	b.n	cde <_link_ldcs+0x4a>
     ce6:	46c0      	nop			; (mov r8, r8)
     ce8:	0000c3c3 	.word	0x0000c3c3
     cec:	00001a89 	.word	0x00001a89

00000cf0 <link_check>:
{
     cf0:	b573      	push	{r0, r1, r4, r5, r6, lr}
     cf2:	1e04      	subs	r4, r0, #0
    if (!VALID_LINK(link))
     cf4:	d018      	beq.n	d28 <link_check+0x38>
     cf6:	4b0d      	ldr	r3, [pc, #52]	; (d2c <link_check+0x3c>)
     cf8:	6802      	ldr	r2, [r0, #0]
     cfa:	429a      	cmp	r2, r3
     cfc:	d114      	bne.n	d28 <link_check+0x38>
    result = _link_ldcs(link_ptr, UPDI_CS_STATUSB, &resp);
     cfe:	466b      	mov	r3, sp
     d00:	1ddd      	adds	r5, r3, #7
     d02:	2101      	movs	r1, #1
     d04:	002a      	movs	r2, r5
     d06:	4e0a      	ldr	r6, [pc, #40]	; (d30 <link_check+0x40>)
     d08:	47b0      	blx	r6
     d0a:	1e01      	subs	r1, r0, #0
    if (result) {
     d0c:	d002      	beq.n	d14 <link_check+0x24>
        return -2;
     d0e:	2002      	movs	r0, #2
        return -3;
     d10:	4240      	negs	r0, r0
}
     d12:	bd76      	pop	{r1, r2, r4, r5, r6, pc}
    result = _link_ldcs(link_ptr, UPDI_CS_STATUSA, &resp);
     d14:	002a      	movs	r2, r5
     d16:	0020      	movs	r0, r4
     d18:	47b0      	blx	r6
    if (result) {
     d1a:	2800      	cmp	r0, #0
     d1c:	d1f7      	bne.n	d0e <link_check+0x1e>
    if (resp == 0) {
     d1e:	782b      	ldrb	r3, [r5, #0]
     d20:	2b00      	cmp	r3, #0
     d22:	d1f6      	bne.n	d12 <link_check+0x22>
        return -3;
     d24:	2003      	movs	r0, #3
     d26:	e7f3      	b.n	d10 <link_check+0x20>
        return ERROR_PTR;
     d28:	2001      	movs	r0, #1
     d2a:	e7f1      	b.n	d10 <link_check+0x20>
     d2c:	0000c3c3 	.word	0x0000c3c3
     d30:	00000c95 	.word	0x00000c95

00000d34 <link_stcs>:
    @address: reg address
    @value: reg value
    @return 0 successful, other value if failed
*/
int link_stcs(void *link_ptr, u8 address, u8 value)
{
     d34:	b513      	push	{r0, r1, r4, lr}
    /*
        Store a value to Control / Status space
    */
    upd_datalink_t *link = (upd_datalink_t *)link_ptr;
    u8 cmd[] = { UPDI_PHY_SYNC, UPDI_STCS | (address & 0x0F), value };
     d36:	2455      	movs	r4, #85	; 0x55
     d38:	ab01      	add	r3, sp, #4
     d3a:	701c      	strb	r4, [r3, #0]
     d3c:	3c46      	subs	r4, #70	; 0x46
     d3e:	400c      	ands	r4, r1
     d40:	2140      	movs	r1, #64	; 0x40
     d42:	4249      	negs	r1, r1
     d44:	4321      	orrs	r1, r4
     d46:	7059      	strb	r1, [r3, #1]
     d48:	709a      	strb	r2, [r3, #2]
    int result;

    if (!VALID_LINK(link))
     d4a:	2800      	cmp	r0, #0
     d4c:	d00c      	beq.n	d68 <link_stcs+0x34>
     d4e:	4a08      	ldr	r2, [pc, #32]	; (d70 <link_stcs+0x3c>)
     d50:	6801      	ldr	r1, [r0, #0]
     d52:	4291      	cmp	r1, r2
     d54:	d108      	bne.n	d68 <link_stcs+0x34>
        return ERROR_PTR;

    DBG_INFO(LINK_DEBUG, "<LINK> STCS to 0x02x", address);

    result = phy_send(PHY(link), cmd, sizeof(cmd));
     d56:	0019      	movs	r1, r3
     d58:	2203      	movs	r2, #3
     d5a:	6840      	ldr	r0, [r0, #4]
     d5c:	4b05      	ldr	r3, [pc, #20]	; (d74 <link_stcs+0x40>)
     d5e:	4798      	blx	r3
    if (result) {
     d60:	2800      	cmp	r0, #0
     d62:	d003      	beq.n	d6c <link_stcs+0x38>
        DBG_INFO(LINK_DEBUG, "phy_send failed %d", result);
        return -2;
     d64:	2002      	movs	r0, #2
     d66:	e000      	b.n	d6a <link_stcs+0x36>
        return ERROR_PTR;
     d68:	2001      	movs	r0, #1
        return -2;
     d6a:	4240      	negs	r0, r0
    }

    return 0;
}
     d6c:	bd16      	pop	{r1, r2, r4, pc}
     d6e:	46c0      	nop			; (mov r8, r8)
     d70:	0000c3c3 	.word	0x0000c3c3
     d74:	000018a5 	.word	0x000018a5

00000d78 <link_set_init>:
{
     d78:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
    u8 clksel, resp = 0;
     d7a:	466b      	mov	r3, sp
     d7c:	1ddf      	adds	r7, r3, #7
     d7e:	2300      	movs	r3, #0
{
     d80:	0004      	movs	r4, r0
     d82:	000e      	movs	r6, r1
    u8 clksel, resp = 0;
     d84:	703b      	strb	r3, [r7, #0]
    if (!VALID_LINK(link))
     d86:	4298      	cmp	r0, r3
     d88:	d043      	beq.n	e12 <link_set_init+0x9a>
     d8a:	4b25      	ldr	r3, [pc, #148]	; (e20 <link_set_init+0xa8>)
     d8c:	6802      	ldr	r2, [r0, #0]
     d8e:	429a      	cmp	r2, r3
     d90:	d13f      	bne.n	e12 <link_set_init+0x9a>
    result = phy_set_baudrate(PHY(link), 115200);
     d92:	21e1      	movs	r1, #225	; 0xe1
     d94:	6840      	ldr	r0, [r0, #4]
     d96:	0249      	lsls	r1, r1, #9
     d98:	4b22      	ldr	r3, [pc, #136]	; (e24 <link_set_init+0xac>)
     d9a:	4798      	blx	r3
    if (result) {
     d9c:	2800      	cmp	r0, #0
     d9e:	d002      	beq.n	da6 <link_set_init+0x2e>
        return -4;
     da0:	2004      	movs	r0, #4
        return -2;
     da2:	4240      	negs	r0, r0
     da4:	e029      	b.n	dfa <link_set_init+0x82>
    result = link_stcs(link, UPDI_CS_CTRLB, 1 << UPDI_CTRLB_CCDETDIS_BIT);
     da6:	2208      	movs	r2, #8
     da8:	2103      	movs	r1, #3
     daa:	0020      	movs	r0, r4
     dac:	4d1e      	ldr	r5, [pc, #120]	; (e28 <link_set_init+0xb0>)
     dae:	47a8      	blx	r5
    if (result) {
     db0:	2800      	cmp	r0, #0
     db2:	d130      	bne.n	e16 <link_set_init+0x9e>
    result = link_stcs(link, UPDI_CS_CTRLA, 1 << UPDI_CTRLA_IBDLY_BIT);
     db4:	2280      	movs	r2, #128	; 0x80
     db6:	2102      	movs	r1, #2
     db8:	0020      	movs	r0, r4
     dba:	47a8      	blx	r5
    if (result) {
     dbc:	2800      	cmp	r0, #0
     dbe:	d12c      	bne.n	e1a <link_set_init+0xa2>
    if (baud <= 225000) {
     dc0:	4b1a      	ldr	r3, [pc, #104]	; (e2c <link_set_init+0xb4>)
     dc2:	429e      	cmp	r6, r3
     dc4:	dd08      	ble.n	dd8 <link_set_init+0x60>
    else if (baud <= 450000) {
     dc6:	4b1a      	ldr	r3, [pc, #104]	; (e30 <link_set_init+0xb8>)
     dc8:	429e      	cmp	r6, r3
     dca:	dd17      	ble.n	dfc <link_set_init+0x84>
    else if (baud <= 900000) {
     dcc:	4b19      	ldr	r3, [pc, #100]	; (e34 <link_set_init+0xbc>)
        clksel = UPDI_ASI_CTRLA_CLKSEL_16M;
     dce:	2501      	movs	r5, #1
    else if (baud <= 900000) {
     dd0:	429e      	cmp	r6, r3
     dd2:	dd02      	ble.n	dda <link_set_init+0x62>
        return -2;
     dd4:	2002      	movs	r0, #2
     dd6:	e7e4      	b.n	da2 <link_set_init+0x2a>
        clksel = UPDI_ASI_CTRLA_CLKSEL_4M;
     dd8:	2503      	movs	r5, #3
    result = _link_ldcs(link_ptr, UPDI_ASI_CTRLA, &resp);
     dda:	003a      	movs	r2, r7
     ddc:	2109      	movs	r1, #9
     dde:	0020      	movs	r0, r4
     de0:	4b15      	ldr	r3, [pc, #84]	; (e38 <link_set_init+0xc0>)
     de2:	4798      	blx	r3
    if (result || resp != clksel) {
     de4:	2800      	cmp	r0, #0
     de6:	d10b      	bne.n	e00 <link_set_init+0x88>
     de8:	783b      	ldrb	r3, [r7, #0]
     dea:	42ab      	cmp	r3, r5
     dec:	d108      	bne.n	e00 <link_set_init+0x88>
    result = phy_set_baudrate(PHY(link), baud);
     dee:	0031      	movs	r1, r6
     df0:	6860      	ldr	r0, [r4, #4]
     df2:	4b0c      	ldr	r3, [pc, #48]	; (e24 <link_set_init+0xac>)
     df4:	4798      	blx	r3
    if (result) {
     df6:	2800      	cmp	r0, #0
     df8:	d1d2      	bne.n	da0 <link_set_init+0x28>
}
     dfa:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
        clksel = UPDI_ASI_CTRLA_CLKSEL_8M;
     dfc:	2502      	movs	r5, #2
     dfe:	e7ec      	b.n	dda <link_set_init+0x62>
        result = link_stcs(link, UPDI_ASI_CTRLA, clksel);
     e00:	002a      	movs	r2, r5
     e02:	2109      	movs	r1, #9
     e04:	0020      	movs	r0, r4
     e06:	4b08      	ldr	r3, [pc, #32]	; (e28 <link_set_init+0xb0>)
     e08:	4798      	blx	r3
        if (result) {
     e0a:	2800      	cmp	r0, #0
     e0c:	d0ef      	beq.n	dee <link_set_init+0x76>
            return -3;
     e0e:	2003      	movs	r0, #3
     e10:	e7c7      	b.n	da2 <link_set_init+0x2a>
        return ERROR_PTR;
     e12:	2001      	movs	r0, #1
     e14:	e7c5      	b.n	da2 <link_set_init+0x2a>
        return -5;
     e16:	2005      	movs	r0, #5
     e18:	e7c3      	b.n	da2 <link_set_init+0x2a>
        return -6;
     e1a:	2006      	movs	r0, #6
     e1c:	e7c1      	b.n	da2 <link_set_init+0x2a>
     e1e:	46c0      	nop			; (mov r8, r8)
     e20:	0000c3c3 	.word	0x0000c3c3
     e24:	000017b9 	.word	0x000017b9
     e28:	00000d35 	.word	0x00000d35
     e2c:	00036ee8 	.word	0x00036ee8
     e30:	0006ddd0 	.word	0x0006ddd0
     e34:	000dbba0 	.word	0x000dbba0
     e38:	00000c95 	.word	0x00000c95

00000e3c <updi_datalink_init>:
{
     e3c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
     e3e:	9101      	str	r1, [sp, #4]
    phy = updi_physical_init(port, 115200);  //default baudrate first
     e40:	21e1      	movs	r1, #225	; 0xe1
     e42:	4b13      	ldr	r3, [pc, #76]	; (e90 <updi_datalink_init+0x54>)
     e44:	0249      	lsls	r1, r1, #9
     e46:	4798      	blx	r3
     e48:	1e06      	subs	r6, r0, #0
    if (phy) {
     e4a:	d019      	beq.n	e80 <updi_datalink_init+0x44>
        link->phy = (void *)phy;
     e4c:	2704      	movs	r7, #4
        link->mgwd = UPD_DATALINK_MAGIC_WORD;
     e4e:	4c11      	ldr	r4, [pc, #68]	; (e94 <updi_datalink_init+0x58>)
     e50:	4b11      	ldr	r3, [pc, #68]	; (e98 <updi_datalink_init+0x5c>)
        link->phy = (void *)phy;
     e52:	6060      	str	r0, [r4, #4]
        link->mgwd = UPD_DATALINK_MAGIC_WORD;
     e54:	6023      	str	r3, [r4, #0]
          result = link_set_init(link, baud);
     e56:	9901      	ldr	r1, [sp, #4]
     e58:	0020      	movs	r0, r4
     e5a:	4b10      	ldr	r3, [pc, #64]	; (e9c <updi_datalink_init+0x60>)
     e5c:	4798      	blx	r3
     e5e:	1e05      	subs	r5, r0, #0
          if (result) {
     e60:	d003      	beq.n	e6a <updi_datalink_init+0x2e>
              phy_send_double_break(phy);
     e62:	0030      	movs	r0, r6
     e64:	4b0e      	ldr	r3, [pc, #56]	; (ea0 <updi_datalink_init+0x64>)
     e66:	4798      	blx	r3
              continue;
     e68:	e004      	b.n	e74 <updi_datalink_init+0x38>
          result = link_check(link);
     e6a:	0020      	movs	r0, r4
     e6c:	4b0d      	ldr	r3, [pc, #52]	; (ea4 <updi_datalink_init+0x68>)
     e6e:	4798      	blx	r3
     e70:	1e05      	subs	r5, r0, #0
          if (result) {
     e72:	d1f6      	bne.n	e62 <updi_datalink_init+0x26>
     e74:	3f01      	subs	r7, #1
        }while(retry-- && result);
     e76:	2f00      	cmp	r7, #0
     e78:	d003      	beq.n	e82 <updi_datalink_init+0x46>
     e7a:	2d00      	cmp	r5, #0
     e7c:	d1eb      	bne.n	e56 <updi_datalink_init+0x1a>
        link = &datalink;//(upd_datalink_t *)malloc(sizeof(*link));
     e7e:	0020      	movs	r0, r4
}
     e80:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
        link = &datalink;//(upd_datalink_t *)malloc(sizeof(*link));
     e82:	0020      	movs	r0, r4
        if (result) {
     e84:	2d00      	cmp	r5, #0
     e86:	d0fb      	beq.n	e80 <updi_datalink_init+0x44>
          updi_datalink_deinit(link);
     e88:	4b07      	ldr	r3, [pc, #28]	; (ea8 <updi_datalink_init+0x6c>)
     e8a:	4798      	blx	r3
          return NULL;
     e8c:	0038      	movs	r0, r7
     e8e:	e7f7      	b.n	e80 <updi_datalink_init+0x44>
     e90:	000019c9 	.word	0x000019c9
     e94:	2000056c 	.word	0x2000056c
     e98:	0000c3c3 	.word	0x0000c3c3
     e9c:	00000d79 	.word	0x00000d79
     ea0:	00001955 	.word	0x00001955
     ea4:	00000cf1 	.word	0x00000cf1
     ea8:	00000c75 	.word	0x00000c75

00000eac <_link_ld>:
    @address: target address
    @val: output buffer
    @return 0 successful, other value if failed
*/
int _link_ld(void *link_ptr, u16 address, u8 *val)
{
     eac:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
     eae:	0015      	movs	r5, r2
    /*
        Load a single byte direct from a 16 - bit address
        return 0 if error
    */
    upd_datalink_t *link = (upd_datalink_t *)link_ptr;
    const u8 cmd[] = { UPDI_PHY_SYNC, UPDI_LDS | UPDI_ADDRESS_16 | UPDI_DATA_8, address & 0xFF, (address >> 8) & 0xFF};
     eb0:	2355      	movs	r3, #85	; 0x55
     eb2:	2204      	movs	r2, #4
     eb4:	ac03      	add	r4, sp, #12
     eb6:	70a1      	strb	r1, [r4, #2]
     eb8:	0a09      	lsrs	r1, r1, #8
     eba:	7023      	strb	r3, [r4, #0]
     ebc:	7062      	strb	r2, [r4, #1]
     ebe:	70e1      	strb	r1, [r4, #3]
    u8 resp;
    int result;

    if (!VALID_LINK(link) || !val)
     ec0:	2800      	cmp	r0, #0
     ec2:	d015      	beq.n	ef0 <_link_ld+0x44>
     ec4:	4b0d      	ldr	r3, [pc, #52]	; (efc <_link_ld+0x50>)
     ec6:	6801      	ldr	r1, [r0, #0]
     ec8:	4299      	cmp	r1, r3
     eca:	d111      	bne.n	ef0 <_link_ld+0x44>
     ecc:	2d00      	cmp	r5, #0
     ece:	d00f      	beq.n	ef0 <_link_ld+0x44>
        return ERROR_PTR;

    DBG_INFO(LINK_DEBUG, "<LINK> LD from %04X}", address);
  
    result = phy_transfer(PHY(link), cmd, sizeof(cmd), &resp, sizeof(resp));
     ed0:	2301      	movs	r3, #1
     ed2:	260b      	movs	r6, #11
     ed4:	9300      	str	r3, [sp, #0]
     ed6:	446e      	add	r6, sp
     ed8:	0021      	movs	r1, r4
     eda:	0033      	movs	r3, r6
     edc:	6840      	ldr	r0, [r0, #4]
     ede:	4c08      	ldr	r4, [pc, #32]	; (f00 <_link_ld+0x54>)
     ee0:	47a0      	blx	r4
    if (result != sizeof(resp)) {
     ee2:	2801      	cmp	r0, #1
     ee4:	d107      	bne.n	ef6 <_link_ld+0x4a>
        return -2;
    }

    *val = resp;

    return 0;
     ee6:	2000      	movs	r0, #0
    *val = resp;
     ee8:	7833      	ldrb	r3, [r6, #0]
     eea:	702b      	strb	r3, [r5, #0]
}
     eec:	b004      	add	sp, #16
     eee:	bd70      	pop	{r4, r5, r6, pc}
        return ERROR_PTR;
     ef0:	2001      	movs	r0, #1
        return -2;
     ef2:	4240      	negs	r0, r0
     ef4:	e7fa      	b.n	eec <_link_ld+0x40>
     ef6:	2002      	movs	r0, #2
     ef8:	e7fb      	b.n	ef2 <_link_ld+0x46>
     efa:	46c0      	nop			; (mov r8, r8)
     efc:	0000c3c3 	.word	0x0000c3c3
     f00:	00001a89 	.word	0x00001a89

00000f04 <_link_ld16>:
    @address: target address
    @val: output buffer
    @return 0 successful, other value if failed
*/
int _link_ld16(void *link_ptr, u16 address, u16 *val)
{
     f04:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
    /*
    Load a 2 byte direct from a 16 - bit address
    */
    upd_datalink_t *link = (upd_datalink_t *)link_ptr;
    const u8 cmd[] = { UPDI_PHY_SYNC , UPDI_LDS | UPDI_ADDRESS_16 | UPDI_DATA_16, address & 0xFF, (address >> 8) & 0xFF};
     f06:	2355      	movs	r3, #85	; 0x55
     f08:	ac03      	add	r4, sp, #12
     f0a:	7023      	strb	r3, [r4, #0]
     f0c:	70a1      	strb	r1, [r4, #2]
     f0e:	3b50      	subs	r3, #80	; 0x50
     f10:	0a09      	lsrs	r1, r1, #8
{
     f12:	0015      	movs	r5, r2
    const u8 cmd[] = { UPDI_PHY_SYNC , UPDI_LDS | UPDI_ADDRESS_16 | UPDI_DATA_16, address & 0xFF, (address >> 8) & 0xFF};
     f14:	7063      	strb	r3, [r4, #1]
     f16:	70e1      	strb	r1, [r4, #3]
    u8 resp[2];
    int result;

    if (!VALID_LINK(link))
     f18:	2800      	cmp	r0, #0
     f1a:	d016      	beq.n	f4a <_link_ld16+0x46>
     f1c:	4b0d      	ldr	r3, [pc, #52]	; (f54 <_link_ld16+0x50>)
     f1e:	6802      	ldr	r2, [r0, #0]
     f20:	429a      	cmp	r2, r3
     f22:	d112      	bne.n	f4a <_link_ld16+0x46>
        return ERROR_PTR;

    DBG_INFO(LINK_DEBUG, "<LINK> LD from %04X}", address);

    result = phy_transfer(PHY(link), cmd, sizeof(cmd), resp, sizeof(resp));
     f24:	2302      	movs	r3, #2
     f26:	ae02      	add	r6, sp, #8
     f28:	9300      	str	r3, [sp, #0]
     f2a:	0021      	movs	r1, r4
     f2c:	0033      	movs	r3, r6
     f2e:	2204      	movs	r2, #4
     f30:	6840      	ldr	r0, [r0, #4]
     f32:	4c09      	ldr	r4, [pc, #36]	; (f58 <_link_ld16+0x54>)
     f34:	47a0      	blx	r4
    if (result != sizeof(resp)) {
     f36:	2802      	cmp	r0, #2
     f38:	d10a      	bne.n	f50 <_link_ld16+0x4c>
        DBG_INFO(LINK_DEBUG, "phy_transfer failed %d", result);
        return -2;
    }

    *val = resp[0] | (resp[1] << 8);
    return 0;
     f3a:	2000      	movs	r0, #0
    *val = resp[0] | (resp[1] << 8);
     f3c:	7872      	ldrb	r2, [r6, #1]
     f3e:	7833      	ldrb	r3, [r6, #0]
     f40:	0212      	lsls	r2, r2, #8
     f42:	4313      	orrs	r3, r2
     f44:	802b      	strh	r3, [r5, #0]
}
     f46:	b004      	add	sp, #16
     f48:	bd70      	pop	{r4, r5, r6, pc}
        return ERROR_PTR;
     f4a:	2001      	movs	r0, #1
        return -2;
     f4c:	4240      	negs	r0, r0
     f4e:	e7fa      	b.n	f46 <_link_ld16+0x42>
     f50:	2002      	movs	r0, #2
     f52:	e7fb      	b.n	f4c <_link_ld16+0x48>
     f54:	0000c3c3 	.word	0x0000c3c3
     f58:	00001a89 	.word	0x00001a89

00000f5c <link_st>:
{
    /*
        Store a single byte value directly to a 16 - bit address
    */
    upd_datalink_t *link = (upd_datalink_t *)link_ptr;
    const u8 cmd[] = { UPDI_PHY_SYNC, UPDI_STS | UPDI_ADDRESS_16 | UPDI_DATA_8, address & 0xFF, (address >> 8) & 0xFF};
     f5c:	2355      	movs	r3, #85	; 0x55
{
     f5e:	b5f0      	push	{r4, r5, r6, r7, lr}
    const u8 val[] = { value };
    u8 resp = 0xff;
     f60:	240b      	movs	r4, #11
{
     f62:	b085      	sub	sp, #20
     f64:	0005      	movs	r5, r0
    const u8 cmd[] = { UPDI_PHY_SYNC, UPDI_STS | UPDI_ADDRESS_16 | UPDI_DATA_8, address & 0xFF, (address >> 8) & 0xFF};
     f66:	a803      	add	r0, sp, #12
     f68:	7003      	strb	r3, [r0, #0]
     f6a:	3b11      	subs	r3, #17
     f6c:	7043      	strb	r3, [r0, #1]
     f6e:	7081      	strb	r1, [r0, #2]
    const u8 val[] = { value };
     f70:	ae02      	add	r6, sp, #8
    const u8 cmd[] = { UPDI_PHY_SYNC, UPDI_STS | UPDI_ADDRESS_16 | UPDI_DATA_8, address & 0xFF, (address >> 8) & 0xFF};
     f72:	0a09      	lsrs	r1, r1, #8
    u8 resp = 0xff;
     f74:	446c      	add	r4, sp
     f76:	33bb      	adds	r3, #187	; 0xbb
    const u8 cmd[] = { UPDI_PHY_SYNC, UPDI_STS | UPDI_ADDRESS_16 | UPDI_DATA_8, address & 0xFF, (address >> 8) & 0xFF};
     f78:	70c1      	strb	r1, [r0, #3]
    const u8 val[] = { value };
     f7a:	7032      	strb	r2, [r6, #0]
    u8 resp = 0xff;
     f7c:	7023      	strb	r3, [r4, #0]
    int result;

    if (!VALID_LINK(link))
     f7e:	2d00      	cmp	r5, #0
     f80:	d021      	beq.n	fc6 <link_st+0x6a>
     f82:	4b12      	ldr	r3, [pc, #72]	; (fcc <link_st+0x70>)
     f84:	682a      	ldr	r2, [r5, #0]
     f86:	429a      	cmp	r2, r3
     f88:	d11d      	bne.n	fc6 <link_st+0x6a>
        return ERROR_PTR;

    DBG_INFO(LINK_DEBUG, "<LINK> ST to 0x04X: %02x", address, value);

    result = phy_transfer(PHY(link), cmd, sizeof(cmd), &resp, sizeof(resp));
     f8a:	2301      	movs	r3, #1
     f8c:	2204      	movs	r2, #4
     f8e:	9300      	str	r3, [sp, #0]
     f90:	0001      	movs	r1, r0
     f92:	0023      	movs	r3, r4
     f94:	6868      	ldr	r0, [r5, #4]
     f96:	4f0e      	ldr	r7, [pc, #56]	; (fd0 <link_st+0x74>)
     f98:	47b8      	blx	r7
     f9a:	0002      	movs	r2, r0
    if (result != sizeof(resp) || resp != UPDI_PHY_ACK) {
     f9c:	2801      	cmp	r0, #1
     f9e:	d002      	beq.n	fa6 <link_st+0x4a>
        DBG_INFO(LINK_DEBUG, "phy_transfer failed %d ack %02x", result, resp);
        return -2;
     fa0:	2002      	movs	r0, #2
        return ERROR_PTR;
     fa2:	4240      	negs	r0, r0
     fa4:	e00d      	b.n	fc2 <link_st+0x66>
    if (result != sizeof(resp) || resp != UPDI_PHY_ACK) {
     fa6:	7823      	ldrb	r3, [r4, #0]
     fa8:	2b40      	cmp	r3, #64	; 0x40
     faa:	d1f9      	bne.n	fa0 <link_st+0x44>
    }

    result = phy_transfer(PHY(link), val, sizeof(val), &resp, sizeof(resp));
     fac:	9000      	str	r0, [sp, #0]
     fae:	0023      	movs	r3, r4
     fb0:	0031      	movs	r1, r6
     fb2:	6868      	ldr	r0, [r5, #4]
     fb4:	47b8      	blx	r7
    if (result != sizeof(resp) || resp != UPDI_PHY_ACK) {
     fb6:	2801      	cmp	r0, #1
     fb8:	d1f2      	bne.n	fa0 <link_st+0x44>
     fba:	7823      	ldrb	r3, [r4, #0]
        DBG_INFO(LINK_DEBUG, "phy_transfer #2 failed %d ack %02x", result, resp);
        return -2;
    }

    return 0;
     fbc:	2000      	movs	r0, #0
    if (result != sizeof(resp) || resp != UPDI_PHY_ACK) {
     fbe:	2b40      	cmp	r3, #64	; 0x40
     fc0:	d1ee      	bne.n	fa0 <link_st+0x44>
}
     fc2:	b005      	add	sp, #20
     fc4:	bdf0      	pop	{r4, r5, r6, r7, pc}
        return ERROR_PTR;
     fc6:	2001      	movs	r0, #1
     fc8:	e7eb      	b.n	fa2 <link_st+0x46>
     fca:	46c0      	nop			; (mov r8, r8)
     fcc:	0000c3c3 	.word	0x0000c3c3
     fd0:	00001a89 	.word	0x00001a89

00000fd4 <link_st16>:
{
    /*
        Store a 16 - bit word value directly to a 16 - bit address
    */
    upd_datalink_t *link = (upd_datalink_t *)link_ptr;
    const u8 cmd[] = { UPDI_PHY_SYNC, UPDI_STS | UPDI_ADDRESS_16 | UPDI_DATA_16, address & 0xFF, (address >> 8) & 0xFF };
     fd4:	2355      	movs	r3, #85	; 0x55
{
     fd6:	b5f0      	push	{r4, r5, r6, r7, lr}
    const u8 val[] = { value & 0xFF, (value >> 8) & 0xFF };
    u8 resp = 0xff;
     fd8:	240f      	movs	r4, #15
{
     fda:	b087      	sub	sp, #28
     fdc:	0005      	movs	r5, r0
    const u8 cmd[] = { UPDI_PHY_SYNC, UPDI_STS | UPDI_ADDRESS_16 | UPDI_DATA_16, address & 0xFF, (address >> 8) & 0xFF };
     fde:	a805      	add	r0, sp, #20
    const u8 val[] = { value & 0xFF, (value >> 8) & 0xFF };
     fe0:	ae04      	add	r6, sp, #16
    const u8 cmd[] = { UPDI_PHY_SYNC, UPDI_STS | UPDI_ADDRESS_16 | UPDI_DATA_16, address & 0xFF, (address >> 8) & 0xFF };
     fe2:	7003      	strb	r3, [r0, #0]
     fe4:	3b10      	subs	r3, #16
     fe6:	7043      	strb	r3, [r0, #1]
     fe8:	7081      	strb	r1, [r0, #2]
    const u8 val[] = { value & 0xFF, (value >> 8) & 0xFF };
     fea:	7032      	strb	r2, [r6, #0]
    const u8 cmd[] = { UPDI_PHY_SYNC, UPDI_STS | UPDI_ADDRESS_16 | UPDI_DATA_16, address & 0xFF, (address >> 8) & 0xFF };
     fec:	0a09      	lsrs	r1, r1, #8
    const u8 val[] = { value & 0xFF, (value >> 8) & 0xFF };
     fee:	0a12      	lsrs	r2, r2, #8
    u8 resp = 0xff;
     ff0:	446c      	add	r4, sp
     ff2:	33ba      	adds	r3, #186	; 0xba
    const u8 cmd[] = { UPDI_PHY_SYNC, UPDI_STS | UPDI_ADDRESS_16 | UPDI_DATA_16, address & 0xFF, (address >> 8) & 0xFF };
     ff4:	70c1      	strb	r1, [r0, #3]
    const u8 val[] = { value & 0xFF, (value >> 8) & 0xFF };
     ff6:	7072      	strb	r2, [r6, #1]
    u8 resp = 0xff;
     ff8:	7023      	strb	r3, [r4, #0]
    int result;

    if (!VALID_LINK(link))
     ffa:	2d00      	cmp	r5, #0
     ffc:	d021      	beq.n	1042 <link_st16+0x6e>
     ffe:	4b12      	ldr	r3, [pc, #72]	; (1048 <link_st16+0x74>)
    1000:	682a      	ldr	r2, [r5, #0]
    1002:	429a      	cmp	r2, r3
    1004:	d11d      	bne.n	1042 <link_st16+0x6e>
        return ERROR_PTR;

    DBG_INFO(LINK_DEBUG, "<LINK> ST16 to 0x04X: %04x", address, value);

    result = phy_transfer(PHY(link), cmd, sizeof(cmd), &resp, sizeof(resp));
    1006:	2301      	movs	r3, #1
    1008:	0001      	movs	r1, r0
    100a:	9300      	str	r3, [sp, #0]
    100c:	2204      	movs	r2, #4
    100e:	0023      	movs	r3, r4
    1010:	6868      	ldr	r0, [r5, #4]
    1012:	4f0e      	ldr	r7, [pc, #56]	; (104c <link_st16+0x78>)
    1014:	47b8      	blx	r7
    if (result != sizeof(resp) || resp != UPDI_PHY_ACK) {
    1016:	2801      	cmp	r0, #1
    1018:	d002      	beq.n	1020 <link_st16+0x4c>
        DBG_INFO(LINK_DEBUG, "phy_transfer failed %d ack %02x", result, resp);
        return -2;
    101a:	2002      	movs	r0, #2
        return ERROR_PTR;
    101c:	4240      	negs	r0, r0
    101e:	e00e      	b.n	103e <link_st16+0x6a>
    if (result != sizeof(resp) || resp != UPDI_PHY_ACK) {
    1020:	7823      	ldrb	r3, [r4, #0]
    1022:	2b40      	cmp	r3, #64	; 0x40
    1024:	d1f9      	bne.n	101a <link_st16+0x46>
    }

    result = phy_transfer(PHY(link), val, sizeof(val), &resp, sizeof(resp));
    1026:	9000      	str	r0, [sp, #0]
    1028:	0023      	movs	r3, r4
    102a:	2202      	movs	r2, #2
    102c:	0031      	movs	r1, r6
    102e:	6868      	ldr	r0, [r5, #4]
    1030:	47b8      	blx	r7
    if (result != sizeof(resp) || resp != UPDI_PHY_ACK) {
    1032:	2801      	cmp	r0, #1
    1034:	d1f1      	bne.n	101a <link_st16+0x46>
    1036:	7823      	ldrb	r3, [r4, #0]
        DBG_INFO(LINK_DEBUG, "phy_transfer #2 failed %d ack %02x", result, resp);
        return -2;
    }

    return 0;
    1038:	2000      	movs	r0, #0
    if (result != sizeof(resp) || resp != UPDI_PHY_ACK) {
    103a:	2b40      	cmp	r3, #64	; 0x40
    103c:	d1ed      	bne.n	101a <link_st16+0x46>
}
    103e:	b007      	add	sp, #28
    1040:	bdf0      	pop	{r4, r5, r6, r7, pc}
        return ERROR_PTR;
    1042:	2001      	movs	r0, #1
    1044:	e7ea      	b.n	101c <link_st16+0x48>
    1046:	46c0      	nop			; (mov r8, r8)
    1048:	0000c3c3 	.word	0x0000c3c3
    104c:	00001a89 	.word	0x00001a89

00001050 <link_ld_ptr_inc>:
    @data: data output buffer
    @len: data length to be read
    @return 0 successful, other value if failed
*/
int link_ld_ptr_inc(void *link_ptr, u8 *data, int len)
{
    1050:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
    1052:	0004      	movs	r4, r0
    1054:	000e      	movs	r6, r1
    1056:	0015      	movs	r5, r2
    /*
        Loads a number of bytes from the pointer location with pointer post - increment
    */
    upd_datalink_t *link = (upd_datalink_t *)link_ptr;
    const u8 cmd[] = { UPDI_PHY_SYNC, UPDI_LD | UPDI_PTR_INC | UPDI_DATA_8 };
    1058:	490d      	ldr	r1, [pc, #52]	; (1090 <link_ld_ptr_inc+0x40>)
    105a:	2202      	movs	r2, #2
    105c:	a803      	add	r0, sp, #12
    105e:	4b0d      	ldr	r3, [pc, #52]	; (1094 <link_ld_ptr_inc+0x44>)
    1060:	4798      	blx	r3
    int result;

    if (!VALID_LINK(link))
    1062:	2c00      	cmp	r4, #0
    1064:	d00f      	beq.n	1086 <link_ld_ptr_inc+0x36>
    1066:	4b0c      	ldr	r3, [pc, #48]	; (1098 <link_ld_ptr_inc+0x48>)
    1068:	6822      	ldr	r2, [r4, #0]
    106a:	429a      	cmp	r2, r3
    106c:	d10b      	bne.n	1086 <link_ld_ptr_inc+0x36>
        return ERROR_PTR;

    DBG_INFO(LINK_DEBUG, "<LINK> LD8 from ptr++");
 
    result = phy_transfer(PHY(link), cmd, sizeof(cmd), data, len);
    106e:	9500      	str	r5, [sp, #0]
    1070:	6860      	ldr	r0, [r4, #4]
    1072:	0033      	movs	r3, r6
    1074:	2202      	movs	r2, #2
    1076:	a903      	add	r1, sp, #12
    1078:	4c08      	ldr	r4, [pc, #32]	; (109c <link_ld_ptr_inc+0x4c>)
    107a:	47a0      	blx	r4
    if (result != len) {
    107c:	4285      	cmp	r5, r0
    107e:	d105      	bne.n	108c <link_ld_ptr_inc+0x3c>
        DBG_INFO(LINK_DEBUG, "phy_transfer failed %d", result);
        return -2;
    }

    return 0;
    1080:	2000      	movs	r0, #0
}
    1082:	b004      	add	sp, #16
    1084:	bd70      	pop	{r4, r5, r6, pc}
        return ERROR_PTR;
    1086:	2001      	movs	r0, #1
        return -2;
    1088:	4240      	negs	r0, r0
    108a:	e7fa      	b.n	1082 <link_ld_ptr_inc+0x32>
    108c:	2002      	movs	r0, #2
    108e:	e7fb      	b.n	1088 <link_ld_ptr_inc+0x38>
    1090:	000051c9 	.word	0x000051c9
    1094:	0000330d 	.word	0x0000330d
    1098:	0000c3c3 	.word	0x0000c3c3
    109c:	00001a89 	.word	0x00001a89

000010a0 <link_ld_ptr_inc16>:
    @data: data output buffer
    @len: data length to be read
    @return 0 successful, other value if failed
*/
int link_ld_ptr_inc16(void *link_ptr, u8 *data, int len)
{
    10a0:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
    10a2:	0015      	movs	r5, r2
    /*
        Load a 16-bit word value from the pointer location with pointer post-increment
    */
    upd_datalink_t *link = (upd_datalink_t *)link_ptr;
    const u8 cmd[] = { UPDI_PHY_SYNC, UPDI_LD | UPDI_PTR_INC | UPDI_DATA_16 };
    10a4:	2202      	movs	r2, #2
{
    10a6:	000e      	movs	r6, r1
    const u8 cmd[] = { UPDI_PHY_SYNC, UPDI_LD | UPDI_PTR_INC | UPDI_DATA_16 };
    10a8:	490e      	ldr	r1, [pc, #56]	; (10e4 <link_ld_ptr_inc16+0x44>)
{
    10aa:	0004      	movs	r4, r0
    const u8 cmd[] = { UPDI_PHY_SYNC, UPDI_LD | UPDI_PTR_INC | UPDI_DATA_16 };
    10ac:	1889      	adds	r1, r1, r2
    10ae:	a803      	add	r0, sp, #12
    10b0:	4b0d      	ldr	r3, [pc, #52]	; (10e8 <link_ld_ptr_inc16+0x48>)
    10b2:	4798      	blx	r3
    int result;

    if (!VALID_LINK(link))
    10b4:	2c00      	cmp	r4, #0
    10b6:	d00f      	beq.n	10d8 <link_ld_ptr_inc16+0x38>
    10b8:	4b0c      	ldr	r3, [pc, #48]	; (10ec <link_ld_ptr_inc16+0x4c>)
    10ba:	6822      	ldr	r2, [r4, #0]
    10bc:	429a      	cmp	r2, r3
    10be:	d10b      	bne.n	10d8 <link_ld_ptr_inc16+0x38>
        return ERROR_PTR;

    DBG_INFO(LINK_DEBUG, "<LINK> LD16 from ptr++");

    result = phy_transfer(PHY(link), cmd, sizeof(cmd), data, len);
    10c0:	9500      	str	r5, [sp, #0]
    10c2:	6860      	ldr	r0, [r4, #4]
    10c4:	0033      	movs	r3, r6
    10c6:	2202      	movs	r2, #2
    10c8:	a903      	add	r1, sp, #12
    10ca:	4c09      	ldr	r4, [pc, #36]	; (10f0 <link_ld_ptr_inc16+0x50>)
    10cc:	47a0      	blx	r4
    if (result != len) {
    10ce:	4285      	cmp	r5, r0
    10d0:	d105      	bne.n	10de <link_ld_ptr_inc16+0x3e>
        DBG_INFO(LINK_DEBUG, "phy_transfer failed %d", result);
        return -2;
    }

    return 0;
    10d2:	2000      	movs	r0, #0
}
    10d4:	b004      	add	sp, #16
    10d6:	bd70      	pop	{r4, r5, r6, pc}
        return ERROR_PTR;
    10d8:	2001      	movs	r0, #1
        return -2;
    10da:	4240      	negs	r0, r0
    10dc:	e7fa      	b.n	10d4 <link_ld_ptr_inc16+0x34>
    10de:	2002      	movs	r0, #2
    10e0:	e7fb      	b.n	10da <link_ld_ptr_inc16+0x3a>
    10e2:	46c0      	nop			; (mov r8, r8)
    10e4:	000051c9 	.word	0x000051c9
    10e8:	0000330d 	.word	0x0000330d
    10ec:	0000c3c3 	.word	0x0000c3c3
    10f0:	00001a89 	.word	0x00001a89

000010f4 <link_st_ptr>:
{
    /*
        Set the pointer location
    */
    upd_datalink_t *link = (upd_datalink_t *)link_ptr;
    const u8 cmd[] = { UPDI_PHY_SYNC, UPDI_ST | UPDI_PTR_ADDRESS | UPDI_DATA_16, address & 0xFF, (address >> 8) & 0xFF };
    10f4:	2355      	movs	r3, #85	; 0x55
{
    10f6:	b530      	push	{r4, r5, lr}
    u8 resp = 0xFF;
    10f8:	250b      	movs	r5, #11
{
    10fa:	b085      	sub	sp, #20
    const u8 cmd[] = { UPDI_PHY_SYNC, UPDI_ST | UPDI_PTR_ADDRESS | UPDI_DATA_16, address & 0xFF, (address >> 8) & 0xFF };
    10fc:	ac03      	add	r4, sp, #12
    10fe:	7023      	strb	r3, [r4, #0]
    1100:	3314      	adds	r3, #20
    1102:	7063      	strb	r3, [r4, #1]
    1104:	70a1      	strb	r1, [r4, #2]
    u8 resp = 0xFF;
    1106:	446d      	add	r5, sp
    const u8 cmd[] = { UPDI_PHY_SYNC, UPDI_ST | UPDI_PTR_ADDRESS | UPDI_DATA_16, address & 0xFF, (address >> 8) & 0xFF };
    1108:	0a09      	lsrs	r1, r1, #8
    u8 resp = 0xFF;
    110a:	3396      	adds	r3, #150	; 0x96
    const u8 cmd[] = { UPDI_PHY_SYNC, UPDI_ST | UPDI_PTR_ADDRESS | UPDI_DATA_16, address & 0xFF, (address >> 8) & 0xFF };
    110c:	70e1      	strb	r1, [r4, #3]
    u8 resp = 0xFF;
    110e:	702b      	strb	r3, [r5, #0]
    int result;

    if (!VALID_LINK(link))
    1110:	2800      	cmp	r0, #0
    1112:	d013      	beq.n	113c <link_st_ptr+0x48>
    1114:	4b0b      	ldr	r3, [pc, #44]	; (1144 <link_st_ptr+0x50>)
    1116:	6802      	ldr	r2, [r0, #0]
    1118:	429a      	cmp	r2, r3
    111a:	d10f      	bne.n	113c <link_st_ptr+0x48>
        return ERROR_PTR;

    DBG_INFO(LINK_DEBUG, "<LINK> ST ptr %x", address);

    result = phy_transfer(PHY(link), cmd, sizeof(cmd), &resp, sizeof(resp));
    111c:	2301      	movs	r3, #1
    111e:	9300      	str	r3, [sp, #0]
    1120:	0021      	movs	r1, r4
    1122:	002b      	movs	r3, r5
    1124:	2204      	movs	r2, #4
    1126:	6840      	ldr	r0, [r0, #4]
    1128:	4c07      	ldr	r4, [pc, #28]	; (1148 <link_st_ptr+0x54>)
    112a:	47a0      	blx	r4
    if (result != sizeof(resp) || resp != UPDI_PHY_ACK) {
    112c:	2801      	cmp	r0, #1
    112e:	d103      	bne.n	1138 <link_st_ptr+0x44>
    1130:	782b      	ldrb	r3, [r5, #0]
        DBG_INFO(LINK_DEBUG, "phy_transfer failed %d resp = 0x%02x", result, resp);
        return -2;
    }

    return 0;
    1132:	2000      	movs	r0, #0
    if (result != sizeof(resp) || resp != UPDI_PHY_ACK) {
    1134:	2b40      	cmp	r3, #64	; 0x40
    1136:	d003      	beq.n	1140 <link_st_ptr+0x4c>
        return -2;
    1138:	2002      	movs	r0, #2
    113a:	e000      	b.n	113e <link_st_ptr+0x4a>
        return ERROR_PTR;
    113c:	2001      	movs	r0, #1
        return -2;
    113e:	4240      	negs	r0, r0
}
    1140:	b005      	add	sp, #20
    1142:	bd30      	pop	{r4, r5, pc}
    1144:	0000c3c3 	.word	0x0000c3c3
    1148:	00001a89 	.word	0x00001a89

0000114c <link_st_ptr_inc>:
{
    /*
        Store data to the pointer location with pointer post - increment
    */
    upd_datalink_t *link = (upd_datalink_t *)link_ptr;
    const u8 cmd[] = { UPDI_PHY_SYNC, UPDI_ST | UPDI_PTR_INC | UPDI_DATA_8, data[0] };
    114c:	2355      	movs	r3, #85	; 0x55
{
    114e:	b5f0      	push	{r4, r5, r6, r7, lr}
    1150:	000e      	movs	r6, r1
    1152:	b089      	sub	sp, #36	; 0x24
    const u8 cmd[] = { UPDI_PHY_SYNC, UPDI_ST | UPDI_PTR_INC | UPDI_DATA_8, data[0] };
    1154:	a907      	add	r1, sp, #28
    1156:	700b      	strb	r3, [r1, #0]
    1158:	330f      	adds	r3, #15
    115a:	704b      	strb	r3, [r1, #1]
    115c:	7833      	ldrb	r3, [r6, #0]
{
    115e:	1e05      	subs	r5, r0, #0
    1160:	9204      	str	r2, [sp, #16]
    const u8 cmd[] = { UPDI_PHY_SYNC, UPDI_ST | UPDI_PTR_INC | UPDI_DATA_8, data[0] };
    1162:	708b      	strb	r3, [r1, #2]
    u8 resp;
    int i;
    int result;

    if (!VALID_LINK(link))
    1164:	d032      	beq.n	11cc <link_st_ptr_inc+0x80>
    1166:	4b1a      	ldr	r3, [pc, #104]	; (11d0 <link_st_ptr_inc+0x84>)
    1168:	6802      	ldr	r2, [r0, #0]
    116a:	429a      	cmp	r2, r3
    116c:	d12e      	bne.n	11cc <link_st_ptr_inc+0x80>
        return ERROR_PTR;

    DBG_INFO(LINK_DEBUG, "<LINK> ST8 to *ptr++");

    result = phy_transfer(PHY(link), cmd, sizeof(cmd), &resp, sizeof(resp));
    116e:	240b      	movs	r4, #11
    1170:	ab04      	add	r3, sp, #16
    1172:	18e4      	adds	r4, r4, r3
    1174:	2301      	movs	r3, #1
    1176:	9300      	str	r3, [sp, #0]
    1178:	2203      	movs	r2, #3
    117a:	0023      	movs	r3, r4
    117c:	6840      	ldr	r0, [r0, #4]
    117e:	4f15      	ldr	r7, [pc, #84]	; (11d4 <link_st_ptr_inc+0x88>)
    1180:	47b8      	blx	r7
    if (result != sizeof(resp) || resp != UPDI_PHY_ACK) {
    1182:	2801      	cmp	r0, #1
    1184:	d002      	beq.n	118c <link_st_ptr_inc+0x40>
        DBG_INFO(LINK_DEBUG, "phy_transfer failed %d resp 0x%02x", result, resp);
        return -2;
    1186:	2002      	movs	r0, #2
        return ERROR_PTR;
    1188:	4240      	negs	r0, r0
    118a:	e009      	b.n	11a0 <link_st_ptr_inc+0x54>
    if (result != sizeof(resp) || resp != UPDI_PHY_ACK) {
    118c:	7823      	ldrb	r3, [r4, #0]
    118e:	2b40      	cmp	r3, #64	; 0x40
    1190:	d1f9      	bne.n	1186 <link_st_ptr_inc+0x3a>
    1192:	1c74      	adds	r4, r6, #1
    }

    for (i = 1; i < len; i++) {
        result = phy_transfer(PHY(link), &data[i], 1, &resp, sizeof(resp));
    1194:	9005      	str	r0, [sp, #20]
    for (i = 1; i < len; i++) {
    1196:	9a04      	ldr	r2, [sp, #16]
    1198:	1ba3      	subs	r3, r4, r6
    119a:	429a      	cmp	r2, r3
    119c:	dc02      	bgt.n	11a4 <link_st_ptr_inc+0x58>
            DBG_INFO(LINK_DEBUG, "phy_transfer failed %d i %d resp 0x%02x", result, i, resp);
            return -2;
        }
    }

    return 0;
    119e:	2000      	movs	r0, #0
}
    11a0:	b009      	add	sp, #36	; 0x24
    11a2:	bdf0      	pop	{r4, r5, r6, r7, pc}
        result = phy_transfer(PHY(link), &data[i], 1, &resp, sizeof(resp));
    11a4:	270b      	movs	r7, #11
    11a6:	ab04      	add	r3, sp, #16
    11a8:	18ff      	adds	r7, r7, r3
    11aa:	9b05      	ldr	r3, [sp, #20]
    11ac:	9703      	str	r7, [sp, #12]
    11ae:	9300      	str	r3, [sp, #0]
    11b0:	2201      	movs	r2, #1
    11b2:	003b      	movs	r3, r7
    11b4:	0021      	movs	r1, r4
    11b6:	6868      	ldr	r0, [r5, #4]
    11b8:	4f06      	ldr	r7, [pc, #24]	; (11d4 <link_st_ptr_inc+0x88>)
    11ba:	47b8      	blx	r7
        if (result != sizeof(resp) || resp != UPDI_PHY_ACK) {
    11bc:	2801      	cmp	r0, #1
    11be:	d1e2      	bne.n	1186 <link_st_ptr_inc+0x3a>
    11c0:	9b03      	ldr	r3, [sp, #12]
    11c2:	3401      	adds	r4, #1
    11c4:	781b      	ldrb	r3, [r3, #0]
    11c6:	2b40      	cmp	r3, #64	; 0x40
    11c8:	d0e5      	beq.n	1196 <link_st_ptr_inc+0x4a>
    11ca:	e7dc      	b.n	1186 <link_st_ptr_inc+0x3a>
        return ERROR_PTR;
    11cc:	2001      	movs	r0, #1
    11ce:	e7db      	b.n	1188 <link_st_ptr_inc+0x3c>
    11d0:	0000c3c3 	.word	0x0000c3c3
    11d4:	00001a89 	.word	0x00001a89

000011d8 <link_st_ptr_inc16>:
{
    /*
        Store a 16 - bit word value to the pointer location with pointer post - increment
    */
    upd_datalink_t *link = (upd_datalink_t *)link_ptr;
    const u8 cmd[] = { UPDI_PHY_SYNC, UPDI_ST | UPDI_PTR_INC | UPDI_DATA_16, data[0], data[1] };
    11d8:	2355      	movs	r3, #85	; 0x55
{
    11da:	b5f0      	push	{r4, r5, r6, r7, lr}
    11dc:	000c      	movs	r4, r1
    u8 resp = 0xFF;
    11de:	250b      	movs	r5, #11
{
    11e0:	b089      	sub	sp, #36	; 0x24
    const u8 cmd[] = { UPDI_PHY_SYNC, UPDI_ST | UPDI_PTR_INC | UPDI_DATA_16, data[0], data[1] };
    11e2:	a907      	add	r1, sp, #28
    11e4:	700b      	strb	r3, [r1, #0]
    11e6:	3310      	adds	r3, #16
    11e8:	704b      	strb	r3, [r1, #1]
    11ea:	7823      	ldrb	r3, [r4, #0]
{
    11ec:	0006      	movs	r6, r0
    const u8 cmd[] = { UPDI_PHY_SYNC, UPDI_ST | UPDI_PTR_INC | UPDI_DATA_16, data[0], data[1] };
    11ee:	708b      	strb	r3, [r1, #2]
    11f0:	7863      	ldrb	r3, [r4, #1]
{
    11f2:	9204      	str	r2, [sp, #16]
    const u8 cmd[] = { UPDI_PHY_SYNC, UPDI_ST | UPDI_PTR_INC | UPDI_DATA_16, data[0], data[1] };
    11f4:	70cb      	strb	r3, [r1, #3]
    u8 resp = 0xFF;
    11f6:	ab04      	add	r3, sp, #16
    11f8:	18ed      	adds	r5, r5, r3
    11fa:	23ff      	movs	r3, #255	; 0xff
    11fc:	702b      	strb	r3, [r5, #0]
    int i;
    int result;

    if (!VALID_LINK(link))
    11fe:	2800      	cmp	r0, #0
    1200:	d02d      	beq.n	125e <link_st_ptr_inc16+0x86>
    1202:	4b19      	ldr	r3, [pc, #100]	; (1268 <link_st_ptr_inc16+0x90>)
    1204:	6802      	ldr	r2, [r0, #0]
    1206:	429a      	cmp	r2, r3
    1208:	d129      	bne.n	125e <link_st_ptr_inc16+0x86>
        return ERROR_PTR;

    DBG_INFO(LINK_DEBUG, "<LINK> ST16 to *ptr++");

    result = phy_transfer(PHY(link), cmd, sizeof(cmd), &resp, sizeof(resp));
    120a:	2301      	movs	r3, #1
    120c:	9300      	str	r3, [sp, #0]
    120e:	2204      	movs	r2, #4
    1210:	002b      	movs	r3, r5
    1212:	6840      	ldr	r0, [r0, #4]
    1214:	4f15      	ldr	r7, [pc, #84]	; (126c <link_st_ptr_inc16+0x94>)
    1216:	47b8      	blx	r7
    if (result != sizeof(resp) || resp != UPDI_PHY_ACK) {
    1218:	2801      	cmp	r0, #1
    121a:	d123      	bne.n	1264 <link_st_ptr_inc16+0x8c>
    121c:	782b      	ldrb	r3, [r5, #0]
    121e:	2b40      	cmp	r3, #64	; 0x40
    1220:	d120      	bne.n	1264 <link_st_ptr_inc16+0x8c>
    1222:	1ca5      	adds	r5, r4, #2
        DBG_INFO(LINK_DEBUG, "phy_transfer failed %d resp 0x%02x", result, resp);
        return -2;
    }

    for (i = 2; i < len; i += 2) {
        result = phy_transfer(PHY(link), &data[i], 2, &resp, sizeof(resp));
    1224:	9005      	str	r0, [sp, #20]
    for (i = 2; i < len; i += 2) {
    1226:	9a04      	ldr	r2, [sp, #16]
    1228:	1b2b      	subs	r3, r5, r4
    122a:	429a      	cmp	r2, r3
    122c:	dc02      	bgt.n	1234 <link_st_ptr_inc16+0x5c>
            DBG_INFO(LINK_DEBUG, "phy_transfer failed %d i %d resp 0x%02x", result, i, resp);
            return -3;
        }
    }

    return 0;
    122e:	2000      	movs	r0, #0
}
    1230:	b009      	add	sp, #36	; 0x24
    1232:	bdf0      	pop	{r4, r5, r6, r7, pc}
        result = phy_transfer(PHY(link), &data[i], 2, &resp, sizeof(resp));
    1234:	270b      	movs	r7, #11
    1236:	ab04      	add	r3, sp, #16
    1238:	18ff      	adds	r7, r7, r3
    123a:	9b05      	ldr	r3, [sp, #20]
    123c:	9703      	str	r7, [sp, #12]
    123e:	9300      	str	r3, [sp, #0]
    1240:	2202      	movs	r2, #2
    1242:	003b      	movs	r3, r7
    1244:	0029      	movs	r1, r5
    1246:	6870      	ldr	r0, [r6, #4]
    1248:	4f08      	ldr	r7, [pc, #32]	; (126c <link_st_ptr_inc16+0x94>)
    124a:	47b8      	blx	r7
        if (result != sizeof(resp) || resp != UPDI_PHY_ACK) {
    124c:	2801      	cmp	r0, #1
    124e:	d104      	bne.n	125a <link_st_ptr_inc16+0x82>
    1250:	9b03      	ldr	r3, [sp, #12]
    1252:	3502      	adds	r5, #2
    1254:	781b      	ldrb	r3, [r3, #0]
    1256:	2b40      	cmp	r3, #64	; 0x40
    1258:	d0e5      	beq.n	1226 <link_st_ptr_inc16+0x4e>
            return -3;
    125a:	2003      	movs	r0, #3
    125c:	e000      	b.n	1260 <link_st_ptr_inc16+0x88>
        return ERROR_PTR;
    125e:	2001      	movs	r0, #1
            return -3;
    1260:	4240      	negs	r0, r0
    1262:	e7e5      	b.n	1230 <link_st_ptr_inc16+0x58>
        return -2;
    1264:	2002      	movs	r0, #2
    1266:	e7fb      	b.n	1260 <link_st_ptr_inc16+0x88>
    1268:	0000c3c3 	.word	0x0000c3c3
    126c:	00001a89 	.word	0x00001a89

00001270 <link_repeat>:
    @link_ptr: APP object pointer, acquired from updi_datalink_init()
    @repeats: repeats count
    @return 0 successful, other value if failed
*/
int link_repeat(void *link_ptr, u8 repeats)
{
    1270:	b507      	push	{r0, r1, r2, lr}
    /*
        Store a value to the 8bit repeat counter
    */
    upd_datalink_t *link = (upd_datalink_t *)link_ptr;
    u8 cmd[] = { UPDI_PHY_SYNC, UPDI_REPEAT | UPDI_REPEAT_BYTE, repeats};
    1272:	2255      	movs	r2, #85	; 0x55
    1274:	ab01      	add	r3, sp, #4
    1276:	701a      	strb	r2, [r3, #0]
    1278:	324b      	adds	r2, #75	; 0x4b
    127a:	705a      	strb	r2, [r3, #1]
    127c:	7099      	strb	r1, [r3, #2]
    int result;
    
    if (!VALID_LINK(link))
    127e:	2800      	cmp	r0, #0
    1280:	d00c      	beq.n	129c <link_repeat+0x2c>
    1282:	4a08      	ldr	r2, [pc, #32]	; (12a4 <link_repeat+0x34>)
    1284:	6801      	ldr	r1, [r0, #0]
    1286:	4291      	cmp	r1, r2
    1288:	d108      	bne.n	129c <link_repeat+0x2c>
        return ERROR_PTR;

    DBG_INFO(LINK_DEBUG, "<LINK> Repeat %d", repeats);

    result = phy_send(PHY(link), cmd, sizeof(cmd));
    128a:	0019      	movs	r1, r3
    128c:	2203      	movs	r2, #3
    128e:	6840      	ldr	r0, [r0, #4]
    1290:	4b05      	ldr	r3, [pc, #20]	; (12a8 <link_repeat+0x38>)
    1292:	4798      	blx	r3
    if (result) {
    1294:	2800      	cmp	r0, #0
    1296:	d003      	beq.n	12a0 <link_repeat+0x30>
        DBG_INFO(LINK_DEBUG, "phy_send failed %d", result);
        return -2;
    1298:	2002      	movs	r0, #2
    129a:	e000      	b.n	129e <link_repeat+0x2e>
        return ERROR_PTR;
    129c:	2001      	movs	r0, #1
        return -2;
    129e:	4240      	negs	r0, r0
    }

    return 0;
}
    12a0:	bd0e      	pop	{r1, r2, r3, pc}
    12a2:	46c0      	nop			; (mov r8, r8)
    12a4:	0000c3c3 	.word	0x0000c3c3
    12a8:	000018a5 	.word	0x000018a5

000012ac <link_repeat16>:
    @link_ptr: APP object pointer, acquired from updi_datalink_init()
    @repeats: repeats count(16bit width)
    @return 0 successful, other value if failed
*/
int link_repeat16(void *link_ptr, u16 repeats)
{
    12ac:	b507      	push	{r0, r1, r2, lr}
    /*
    Store a value to the 16bit repeat counter
    */
    upd_datalink_t *link = (upd_datalink_t *)link_ptr;
    u8 cmd[] = { UPDI_PHY_SYNC, UPDI_REPEAT | UPDI_REPEAT_WORD, repeats & 0xFF, (repeats >> 8) & 0xFF };
    12ae:	2255      	movs	r2, #85	; 0x55
    12b0:	ab01      	add	r3, sp, #4
    12b2:	701a      	strb	r2, [r3, #0]
    12b4:	7099      	strb	r1, [r3, #2]
    12b6:	324c      	adds	r2, #76	; 0x4c
    12b8:	0a09      	lsrs	r1, r1, #8
    12ba:	705a      	strb	r2, [r3, #1]
    12bc:	70d9      	strb	r1, [r3, #3]
    int result;

    if (!VALID_LINK(link))
    12be:	2800      	cmp	r0, #0
    12c0:	d00c      	beq.n	12dc <link_repeat16+0x30>
    12c2:	4a08      	ldr	r2, [pc, #32]	; (12e4 <link_repeat16+0x38>)
    12c4:	6801      	ldr	r1, [r0, #0]
    12c6:	4291      	cmp	r1, r2
    12c8:	d108      	bne.n	12dc <link_repeat16+0x30>
        return ERROR_PTR;

    DBG_INFO(LINK_DEBUG, "<LINK> Repeat16 %d", repeats);

    result = phy_send(PHY(link), cmd, sizeof(cmd));
    12ca:	0019      	movs	r1, r3
    12cc:	2204      	movs	r2, #4
    12ce:	6840      	ldr	r0, [r0, #4]
    12d0:	4b05      	ldr	r3, [pc, #20]	; (12e8 <link_repeat16+0x3c>)
    12d2:	4798      	blx	r3
    if (result) {
    12d4:	2800      	cmp	r0, #0
    12d6:	d003      	beq.n	12e0 <link_repeat16+0x34>
        DBG_INFO(LINK_DEBUG, "phy_send failed %d", result);
        return -2;
    12d8:	2002      	movs	r0, #2
    12da:	e000      	b.n	12de <link_repeat16+0x32>
        return ERROR_PTR;
    12dc:	2001      	movs	r0, #1
        return -2;
    12de:	4240      	negs	r0, r0
    }

    return 0;
}
    12e0:	bd0e      	pop	{r1, r2, r3, pc}
    12e2:	46c0      	nop			; (mov r8, r8)
    12e4:	0000c3c3 	.word	0x0000c3c3
    12e8:	000018a5 	.word	0x000018a5

000012ec <link_read_sib>:
    @link_ptr: APP object pointer, acquired from updi_datalink_init()
    @data: output data
    @return 0 successful, other value if failed
*/
int link_read_sib(void *link_ptr, u8 *data, int len)
{
    12ec:	b510      	push	{r4, lr}
    /*
        Read the SIB
    */
    upd_datalink_t *link = (upd_datalink_t *)link_ptr;

    if (!VALID_LINK(link))
    12ee:	2800      	cmp	r0, #0
    12f0:	d007      	beq.n	1302 <link_read_sib+0x16>
    12f2:	4b05      	ldr	r3, [pc, #20]	; (1308 <link_read_sib+0x1c>)
    12f4:	6804      	ldr	r4, [r0, #0]
    12f6:	429c      	cmp	r4, r3
    12f8:	d103      	bne.n	1302 <link_read_sib+0x16>
        return ERROR_PTR;

    DBG_INFO(LINK_DEBUG, "<LINK> Read SIB len %d", len);

    return phy_sib(PHY(link), data, len);
    12fa:	6840      	ldr	r0, [r0, #4]
    12fc:	4b03      	ldr	r3, [pc, #12]	; (130c <link_read_sib+0x20>)
    12fe:	4798      	blx	r3
}
    1300:	bd10      	pop	{r4, pc}
        return ERROR_PTR;
    1302:	2001      	movs	r0, #1
    1304:	4240      	negs	r0, r0
    1306:	e7fb      	b.n	1300 <link_read_sib+0x14>
    1308:	0000c3c3 	.word	0x0000c3c3
    130c:	00001ab9 	.word	0x00001ab9

00001310 <link_key>:
    @size_k: key size in 8-bit unit mode, (2 ^ size_k) * 8
    @key: key data
    @return 0 successful, other value if failed
*/
int link_key(void *link_ptr, u8 size_k, const char *key)
{
    1310:	b5f0      	push	{r4, r5, r6, r7, lr}
    1312:	b085      	sub	sp, #20
    1314:	9201      	str	r2, [sp, #4]
    /*
        Write a key
    */
    upd_datalink_t *link = (upd_datalink_t *)link_ptr;
    const u8 cmd[] = { UPDI_PHY_SYNC, UPDI_KEY | UPDI_KEY_KEY | size_k };
    1316:	2255      	movs	r2, #85	; 0x55
    u8 len = 8 << size_k;
    1318:	2708      	movs	r7, #8
    const u8 cmd[] = { UPDI_PHY_SYNC, UPDI_KEY | UPDI_KEY_KEY | size_k };
    131a:	ab03      	add	r3, sp, #12
    131c:	701a      	strb	r2, [r3, #0]
    131e:	3a75      	subs	r2, #117	; 0x75
    1320:	430a      	orrs	r2, r1
{
    1322:	0006      	movs	r6, r0
    const u8 cmd[] = { UPDI_PHY_SYNC, UPDI_KEY | UPDI_KEY_KEY | size_k };
    1324:	705a      	strb	r2, [r3, #1]
    u8 len = 8 << size_k;
    1326:	408f      	lsls	r7, r1
    int i;
    int result;

    if (!VALID_LINK(link))
    1328:	2800      	cmp	r0, #0
    132a:	d01e      	beq.n	136a <link_key+0x5a>
    132c:	4a11      	ldr	r2, [pc, #68]	; (1374 <link_key+0x64>)
    132e:	6801      	ldr	r1, [r0, #0]
    1330:	4291      	cmp	r1, r2
    1332:	d11a      	bne.n	136a <link_key+0x5a>
        return ERROR_PTR;

    DBG_INFO(LINK_DEBUG, "<LINK> Key %x", size_k);

    result = phy_send(PHY(link), cmd, sizeof(cmd));
    1334:	0019      	movs	r1, r3
    1336:	2202      	movs	r2, #2
    1338:	6840      	ldr	r0, [r0, #4]
    133a:	4b0f      	ldr	r3, [pc, #60]	; (1378 <link_key+0x68>)
    133c:	4798      	blx	r3
    133e:	b2ff      	uxtb	r7, r7
    1340:	0004      	movs	r4, r0
    1342:	1e05      	subs	r5, r0, #0
    if (result) {
    1344:	d00c      	beq.n	1360 <link_key+0x50>
        DBG_INFO(LINK_DEBUG, "phy_send failed %d", result);
        return -2;
    1346:	2402      	movs	r4, #2
    1348:	e010      	b.n	136c <link_key+0x5c>
    }

    for (i = 0; i < len; i++) {
        result = phy_send_byte(PHY(link), (u8)key[len - i - 1]); //Reserse the string
    134a:	9a01      	ldr	r2, [sp, #4]
    134c:	1b7b      	subs	r3, r7, r5
    134e:	18d3      	adds	r3, r2, r3
    1350:	3b01      	subs	r3, #1
    1352:	7819      	ldrb	r1, [r3, #0]
    1354:	6870      	ldr	r0, [r6, #4]
    1356:	4b09      	ldr	r3, [pc, #36]	; (137c <link_key+0x6c>)
    1358:	4798      	blx	r3
        if (result) {
    135a:	2800      	cmp	r0, #0
    135c:	d108      	bne.n	1370 <link_key+0x60>
    for (i = 0; i < len; i++) {
    135e:	3501      	adds	r5, #1
    1360:	42bd      	cmp	r5, r7
    1362:	dbf2      	blt.n	134a <link_key+0x3a>
            return -3;
        }
    }

    return 0;
}
    1364:	0020      	movs	r0, r4
    1366:	b005      	add	sp, #20
    1368:	bdf0      	pop	{r4, r5, r6, r7, pc}
        return ERROR_PTR;
    136a:	2401      	movs	r4, #1
            return -3;
    136c:	4264      	negs	r4, r4
    136e:	e7f9      	b.n	1364 <link_key+0x54>
    1370:	2403      	movs	r4, #3
    1372:	e7fb      	b.n	136c <link_key+0x5c>
    1374:	0000c3c3 	.word	0x0000c3c3
    1378:	000018a5 	.word	0x000018a5
    137c:	00001a25 	.word	0x00001a25

00001380 <updi_nvm_init>:
    @dev: point chip dev object
    @return NVM ptr, NULL if failed
*/
upd_nvm_t nvmmem;
void *updi_nvm_init(const char *port, int baud, void *dev)
{
    1380:	b510      	push	{r4, lr}
    upd_nvm_t *nvm = NULL;
    void *app;

    DBG_INFO(NVM_DEBUG, "<NVM> init nvm");

    app = updi_application_init(port, baud, dev);
    1382:	4b07      	ldr	r3, [pc, #28]	; (13a0 <updi_nvm_init+0x20>)
{
    1384:	0014      	movs	r4, r2
    app = updi_application_init(port, baud, dev);
    1386:	4798      	blx	r3
    upd_nvm_t *nvm = NULL;
    1388:	1e03      	subs	r3, r0, #0
    if (app) {
    138a:	d006      	beq.n	139a <updi_nvm_init+0x1a>
        nvm = &nvmmem;//(upd_nvm_t *)malloc(sizeof(*nvm));
        nvm->mgwd = UPD_NVM_MAGIC_WORD;
    138c:	4b05      	ldr	r3, [pc, #20]	; (13a4 <updi_nvm_init+0x24>)
    138e:	4a06      	ldr	r2, [pc, #24]	; (13a8 <updi_nvm_init+0x28>)
        nvm->progmode = false;
        nvm->dev = (device_info_t *)dev;
    1390:	60dc      	str	r4, [r3, #12]
        nvm->mgwd = UPD_NVM_MAGIC_WORD;
    1392:	601a      	str	r2, [r3, #0]
        nvm->progmode = false;
    1394:	2200      	movs	r2, #0
        nvm->app = (void *)app;
    1396:	6098      	str	r0, [r3, #8]
        nvm->progmode = false;
    1398:	711a      	strb	r2, [r3, #4]
    }

    return nvm;
}
    139a:	0018      	movs	r0, r3
    139c:	bd10      	pop	{r4, pc}
    139e:	46c0      	nop			; (mov r8, r8)
    13a0:	000004dd 	.word	0x000004dd
    13a4:	20000574 	.word	0x20000574
    13a8:	0000d2d2 	.word	0x0000d2d2

000013ac <updi_nvm_deinit>:
/*
    NVM object destroy
    @nvm_ptr: NVM object pointer, acquired from updi_nvm_init()
*/
void updi_nvm_deinit(void *nvm_ptr)
{
    13ac:	b510      	push	{r4, lr}
    upd_nvm_t *nvm = (upd_nvm_t *)nvm_ptr;
    if (VALID_NVM(nvm)) {
    13ae:	2800      	cmp	r0, #0
    13b0:	d006      	beq.n	13c0 <updi_nvm_deinit+0x14>
    13b2:	4b04      	ldr	r3, [pc, #16]	; (13c4 <updi_nvm_deinit+0x18>)
    13b4:	6802      	ldr	r2, [r0, #0]
    13b6:	429a      	cmp	r2, r3
    13b8:	d102      	bne.n	13c0 <updi_nvm_deinit+0x14>
        DBG_INFO(NVM_DEBUG, "<NVM> deinit nvm");

        updi_application_deinit(APP(nvm));
    13ba:	6880      	ldr	r0, [r0, #8]
    13bc:	4b02      	ldr	r3, [pc, #8]	; (13c8 <updi_nvm_deinit+0x1c>)
    13be:	4798      	blx	r3
        //free(nvm);
    }
}
    13c0:	bd10      	pop	{r4, pc}
    13c2:	46c0      	nop			; (mov r8, r8)
    13c4:	0000d2d2 	.word	0x0000d2d2
    13c8:	00000505 	.word	0x00000505

000013cc <nvm_get_device_info>:
    NVM get device ID information
    @nvm_ptr: NVM object pointer, acquired from updi_nvm_init()
    @return 0 successful, other value failed
*/
int nvm_get_device_info(void *nvm_ptr)
{
    13cc:	b510      	push	{r4, lr}
    /*
        Reads device info
    */
    upd_nvm_t *nvm = (upd_nvm_t *)nvm_ptr;
    
    if (!VALID_NVM(nvm))
    13ce:	2800      	cmp	r0, #0
    13d0:	d007      	beq.n	13e2 <nvm_get_device_info+0x16>
    13d2:	4b05      	ldr	r3, [pc, #20]	; (13e8 <nvm_get_device_info+0x1c>)
    13d4:	6802      	ldr	r2, [r0, #0]
    13d6:	429a      	cmp	r2, r3
    13d8:	d103      	bne.n	13e2 <nvm_get_device_info+0x16>
        return ERROR_PTR;

    DBG_INFO(NVM_DEBUG, "<NVM> Reading device info");

    return app_device_info(APP(nvm));
    13da:	6880      	ldr	r0, [r0, #8]
    13dc:	4b03      	ldr	r3, [pc, #12]	; (13ec <nvm_get_device_info+0x20>)
    13de:	4798      	blx	r3
}
    13e0:	bd10      	pop	{r4, pc}
        return ERROR_PTR;
    13e2:	2001      	movs	r0, #1
    13e4:	4240      	negs	r0, r0
    13e6:	e7fb      	b.n	13e0 <nvm_get_device_info+0x14>
    13e8:	0000d2d2 	.word	0x0000d2d2
    13ec:	000009dd 	.word	0x000009dd

000013f0 <nvm_enter_progmode>:
    NVM set chip into Unlocked Mode with UPDI_KEY_NVM command
    @nvm_ptr: NVM object pointer, acquired from updi_nvm_init()
    @return 0 successful, other value failed
*/
int nvm_enter_progmode(void *nvm_ptr)
{
    13f0:	b510      	push	{r4, lr}
    13f2:	1e04      	subs	r4, r0, #0
    Enter programming mode
    */
    upd_nvm_t *nvm = (upd_nvm_t *)nvm_ptr;
    int result;

    if (!VALID_NVM(nvm))
    13f4:	d00b      	beq.n	140e <nvm_enter_progmode+0x1e>
    13f6:	4b08      	ldr	r3, [pc, #32]	; (1418 <nvm_enter_progmode+0x28>)
    13f8:	6802      	ldr	r2, [r0, #0]
    13fa:	429a      	cmp	r2, r3
    13fc:	d107      	bne.n	140e <nvm_enter_progmode+0x1e>
        return ERROR_PTR;

    DBG_INFO(NVM_DEBUG, "<NVM> Entering NVM programming mode");
    
    result = app_enter_progmode(APP(nvm));
    13fe:	6880      	ldr	r0, [r0, #8]
    1400:	4b06      	ldr	r3, [pc, #24]	; (141c <nvm_enter_progmode+0x2c>)
    1402:	4798      	blx	r3
    if (result) {
    1404:	2800      	cmp	r0, #0
    1406:	d105      	bne.n	1414 <nvm_enter_progmode+0x24>
        DBG_INFO(NVM_DEBUG, "app_enter_progmode failed %d", result);
        return -2;
    }

    nvm->progmode = true;
    1408:	2301      	movs	r3, #1
    140a:	7123      	strb	r3, [r4, #4]

    return 0;
}
    140c:	bd10      	pop	{r4, pc}
        return ERROR_PTR;
    140e:	2001      	movs	r0, #1
        return -2;
    1410:	4240      	negs	r0, r0
    1412:	e7fb      	b.n	140c <nvm_enter_progmode+0x1c>
    1414:	2002      	movs	r0, #2
    1416:	e7fb      	b.n	1410 <nvm_enter_progmode+0x20>
    1418:	0000d2d2 	.word	0x0000d2d2
    141c:	000006d5 	.word	0x000006d5

00001420 <nvm_leave_progmode>:
    NVM chip leave Locked Mode
    @nvm_ptr: NVM object pointer, acquired from updi_nvm_init()
    @return 0 successful, other value failed
*/
int nvm_leave_progmode(void *nvm_ptr)
{
    1420:	b510      	push	{r4, lr}
    1422:	1e04      	subs	r4, r0, #0
        Leave programming mode
    */
    upd_nvm_t *nvm = (upd_nvm_t *)nvm_ptr;
    int result;

    if (!VALID_NVM(nvm))
    1424:	d00e      	beq.n	1444 <nvm_leave_progmode+0x24>
    1426:	4b0a      	ldr	r3, [pc, #40]	; (1450 <nvm_leave_progmode+0x30>)
    1428:	6802      	ldr	r2, [r0, #0]
    142a:	429a      	cmp	r2, r3
    142c:	d10a      	bne.n	1444 <nvm_leave_progmode+0x24>
        return ERROR_PTR;

    if (!nvm->progmode)
    142e:	7903      	ldrb	r3, [r0, #4]
        return 0;
    1430:	2000      	movs	r0, #0
    if (!nvm->progmode)
    1432:	4283      	cmp	r3, r0
    1434:	d005      	beq.n	1442 <nvm_leave_progmode+0x22>

    DBG_INFO(NVM_DEBUG, "<NVM> Leaving NVM programming mode");

    result = app_leave_progmode(APP(nvm));
    1436:	68a0      	ldr	r0, [r4, #8]
    1438:	4b06      	ldr	r3, [pc, #24]	; (1454 <nvm_leave_progmode+0x34>)
    143a:	4798      	blx	r3
    if (result) {
    143c:	2800      	cmp	r0, #0
    143e:	d104      	bne.n	144a <nvm_leave_progmode+0x2a>
        DBG_INFO(NVM_DEBUG, "app_leave_progmode failed %d", result);
        return -2;
    }

    nvm->progmode = false;
    1440:	7120      	strb	r0, [r4, #4]

    return 0;
}
    1442:	bd10      	pop	{r4, pc}
        return ERROR_PTR;
    1444:	2001      	movs	r0, #1
        return -2;
    1446:	4240      	negs	r0, r0
    1448:	e7fb      	b.n	1442 <nvm_leave_progmode+0x22>
    144a:	2002      	movs	r0, #2
    144c:	e7fb      	b.n	1446 <nvm_leave_progmode+0x26>
    144e:	46c0      	nop			; (mov r8, r8)
    1450:	0000d2d2 	.word	0x0000d2d2
    1454:	00000769 	.word	0x00000769

00001458 <nvm_unlock_device>:
    NVM set chip into Locked Mode with UPDI_KEY_CHIPERASE command
    @nvm_ptr: NVM object pointer, acquired from updi_nvm_init()
    @return 0 successful, other value failed
*/
int nvm_unlock_device(void *nvm_ptr)
{
    1458:	b510      	push	{r4, lr}
    145a:	1e04      	subs	r4, r0, #0
    Unlock and erase a device
    */
    upd_nvm_t *nvm = (upd_nvm_t *)nvm_ptr;
    int result = 0;

    if (!VALID_NVM(nvm))
    145c:	d00c      	beq.n	1478 <nvm_unlock_device+0x20>
    145e:	4b09      	ldr	r3, [pc, #36]	; (1484 <nvm_unlock_device+0x2c>)
    1460:	6802      	ldr	r2, [r0, #0]
    1462:	429a      	cmp	r2, r3
    1464:	d108      	bne.n	1478 <nvm_unlock_device+0x20>

    if (nvm->progmode)
        DBG_INFO(NVM_DEBUG, "Device in programe mode and unlocked");

    // Unlock
    result = app_unlock(APP(nvm));
    1466:	6880      	ldr	r0, [r0, #8]
    1468:	4b07      	ldr	r3, [pc, #28]	; (1488 <nvm_unlock_device+0x30>)
    146a:	4798      	blx	r3
    if (!result) {
    146c:	2800      	cmp	r0, #0
    146e:	d006      	beq.n	147e <nvm_unlock_device+0x26>
        DBG_INFO(NVM_DEBUG, "app_unlock failed %d", result);
        return -2;
    }

    // Unlock after using the NVM key results in prog mode.
    nvm->progmode = true;
    1470:	2301      	movs	r3, #1

    return 0;
    1472:	2000      	movs	r0, #0
    nvm->progmode = true;
    1474:	7123      	strb	r3, [r4, #4]
}
    1476:	bd10      	pop	{r4, pc}
        return ERROR_PTR;
    1478:	2001      	movs	r0, #1
        return -2;
    147a:	4240      	negs	r0, r0
    147c:	e7fb      	b.n	1476 <nvm_unlock_device+0x1e>
    147e:	2002      	movs	r0, #2
    1480:	e7fb      	b.n	147a <nvm_unlock_device+0x22>
    1482:	46c0      	nop			; (mov r8, r8)
    1484:	0000d2d2 	.word	0x0000d2d2
    1488:	00000659 	.word	0x00000659

0000148c <nvm_chip_erase>:
    NVM erase flash with UPDI_NVMCTRL_CTRLA_CHIP_ERASE command
    @nvm_ptr: NVM object pointer, acquired from updi_nvm_init()
    @return 0 successful, other value failed
*/
int nvm_chip_erase(void *nvm_ptr)
{
    148c:	b510      	push	{r4, lr}
    Erase (unlocked) device
    */
    upd_nvm_t *nvm = (upd_nvm_t *)nvm_ptr;
    int result;

    if (!VALID_NVM(nvm))
    148e:	2800      	cmp	r0, #0
    1490:	d00d      	beq.n	14ae <nvm_chip_erase+0x22>
    1492:	4b09      	ldr	r3, [pc, #36]	; (14b8 <nvm_chip_erase+0x2c>)
    1494:	6802      	ldr	r2, [r0, #0]
    1496:	429a      	cmp	r2, r3
    1498:	d109      	bne.n	14ae <nvm_chip_erase+0x22>
        return ERROR_PTR;

    DBG_INFO(NVM_DEBUG, "<NVM> Erase device");

    if (!nvm->progmode) {
    149a:	7903      	ldrb	r3, [r0, #4]
    149c:	2b00      	cmp	r3, #0
    149e:	d009      	beq.n	14b4 <nvm_chip_erase+0x28>
        DBG_INFO(NVM_DEBUG, "Enter progmode first!");
        return -2;
    }

    result = app_chip_erase(APP(nvm));
    14a0:	6880      	ldr	r0, [r0, #8]
    14a2:	4b06      	ldr	r3, [pc, #24]	; (14bc <nvm_chip_erase+0x30>)
    14a4:	4798      	blx	r3
    if (result) {
    14a6:	2800      	cmp	r0, #0
    14a8:	d003      	beq.n	14b2 <nvm_chip_erase+0x26>
        DBG_INFO(NVM_DEBUG, "app_chip_erase failed %d", result);
        return -3;
    14aa:	2003      	movs	r0, #3
    14ac:	e000      	b.n	14b0 <nvm_chip_erase+0x24>
        return ERROR_PTR;
    14ae:	2001      	movs	r0, #1
        return -3;
    14b0:	4240      	negs	r0, r0
    }

    return 0;
}
    14b2:	bd10      	pop	{r4, pc}
        return -2;
    14b4:	2002      	movs	r0, #2
    14b6:	e7fb      	b.n	14b0 <nvm_chip_erase+0x24>
    14b8:	0000d2d2 	.word	0x0000d2d2
    14bc:	00000835 	.word	0x00000835

000014c0 <_nvm_write_fuse>:
    @address: target address
    @value: fuse value
    @return 0 successful, other value failed
*/
int _nvm_write_fuse(void *nvm_ptr, const nvm_info_t *info, u16 address, const u8 value)
{
    14c0:	b5f0      	push	{r4, r5, r6, r7, lr}
    14c2:	b085      	sub	sp, #20
    14c4:	001f      	movs	r7, r3
    14c6:	466b      	mov	r3, sp
    14c8:	1d9e      	adds	r6, r3, #6
    /*
    Writes to fuse
    */
    upd_nvm_t *nvm = (upd_nvm_t *)nvm_ptr;
    u16 nvmctrl_address = NVM_REG(nvm, nvmctrl_address);
    14ca:	68c3      	ldr	r3, [r0, #12]
{
    14cc:	8032      	strh	r2, [r6, #0]
    u16 nvmctrl_address = NVM_REG(nvm, nvmctrl_address);
    14ce:	685b      	ldr	r3, [r3, #4]
    u16 data;
    int result;

    if (!VALID_NVM(nvm))
    14d0:	6802      	ldr	r2, [r0, #0]
    u16 nvmctrl_address = NVM_REG(nvm, nvmctrl_address);
    14d2:	899d      	ldrh	r5, [r3, #12]
    if (!VALID_NVM(nvm))
    14d4:	4b20      	ldr	r3, [pc, #128]	; (1558 <_nvm_write_fuse+0x98>)
{
    14d6:	0004      	movs	r4, r0
    if (!VALID_NVM(nvm))
    14d8:	429a      	cmp	r2, r3
    14da:	d134      	bne.n	1546 <_nvm_write_fuse+0x86>
        return ERROR_PTR;

    DBG_INFO(NVM_DEBUG, "<NVM> Writes to fuse");

    if (!nvm->progmode) {
    14dc:	7903      	ldrb	r3, [r0, #4]
    14de:	2b00      	cmp	r3, #0
    14e0:	d103      	bne.n	14ea <_nvm_write_fuse+0x2a>
        DBG_INFO(NVM_DEBUG, "Enter progmode first!");
        return -2;
    14e2:	2002      	movs	r0, #2
    }

    result = app_execute_nvm_command(APP(nvm), UPDI_NVMCTRL_CTRLA_WRITE_FUSE);
    if (result) {
        DBG_INFO(NVM_DEBUG, "app_execute_nvm_command fuse command failed %d", result);
        return -6;
    14e4:	4240      	negs	r0, r0
    }

    return 0;
}
    14e6:	b005      	add	sp, #20
    14e8:	bdf0      	pop	{r4, r5, r6, r7, pc}
    if (address < info->nvm_start)
    14ea:	880a      	ldrh	r2, [r1, #0]
    14ec:	8833      	ldrh	r3, [r6, #0]
    14ee:	429a      	cmp	r2, r3
    14f0:	d901      	bls.n	14f6 <_nvm_write_fuse+0x36>
        address += info->nvm_start;
    14f2:	18d3      	adds	r3, r2, r3
    14f4:	8033      	strh	r3, [r6, #0]
    if (address >= info->nvm_start + info->nvm_size) {
    14f6:	884b      	ldrh	r3, [r1, #2]
    14f8:	8830      	ldrh	r0, [r6, #0]
    14fa:	189b      	adds	r3, r3, r2
    14fc:	4298      	cmp	r0, r3
    14fe:	da24      	bge.n	154a <_nvm_write_fuse+0x8a>
    result = app_wait_flash_ready(APP(nvm), TIMEOUT_WAIT_FLASH_READY);
    1500:	21fa      	movs	r1, #250	; 0xfa
    1502:	68a0      	ldr	r0, [r4, #8]
    1504:	0089      	lsls	r1, r1, #2
    1506:	4b15      	ldr	r3, [pc, #84]	; (155c <_nvm_write_fuse+0x9c>)
    1508:	4798      	blx	r3
    if (result) {
    150a:	2800      	cmp	r0, #0
    150c:	d1e9      	bne.n	14e2 <_nvm_write_fuse+0x22>
    result = app_write_data_bytes(APP(nvm), nvmctrl_address + UPDI_NVMCTRL_ADDRL, (u8 *)&address, 2);
    150e:	0029      	movs	r1, r5
    1510:	3108      	adds	r1, #8
    1512:	0032      	movs	r2, r6
    1514:	b289      	uxth	r1, r1
    1516:	2302      	movs	r3, #2
    1518:	68a0      	ldr	r0, [r4, #8]
    151a:	4e11      	ldr	r6, [pc, #68]	; (1560 <_nvm_write_fuse+0xa0>)
    151c:	47b0      	blx	r6
    if (result) {
    151e:	2800      	cmp	r0, #0
    1520:	d115      	bne.n	154e <_nvm_write_fuse+0x8e>
    data = value;
    1522:	220e      	movs	r2, #14
    result = app_write_data_bytes(APP(nvm), nvmctrl_address + UPDI_NVMCTRL_DATAL, (u8 *)&data, 2);
    1524:	3506      	adds	r5, #6
    data = value;
    1526:	446a      	add	r2, sp
    result = app_write_data_bytes(APP(nvm), nvmctrl_address + UPDI_NVMCTRL_DATAL, (u8 *)&data, 2);
    1528:	b2a9      	uxth	r1, r5
    152a:	2302      	movs	r3, #2
    152c:	68a0      	ldr	r0, [r4, #8]
    data = value;
    152e:	8017      	strh	r7, [r2, #0]
    result = app_write_data_bytes(APP(nvm), nvmctrl_address + UPDI_NVMCTRL_DATAL, (u8 *)&data, 2);
    1530:	47b0      	blx	r6
    if (result) {
    1532:	2800      	cmp	r0, #0
    1534:	d10d      	bne.n	1552 <_nvm_write_fuse+0x92>
    result = app_execute_nvm_command(APP(nvm), UPDI_NVMCTRL_CTRLA_WRITE_FUSE);
    1536:	2107      	movs	r1, #7
    1538:	68a0      	ldr	r0, [r4, #8]
    153a:	4b0a      	ldr	r3, [pc, #40]	; (1564 <_nvm_write_fuse+0xa4>)
    153c:	4798      	blx	r3
    if (result) {
    153e:	2800      	cmp	r0, #0
    1540:	d0d1      	beq.n	14e6 <_nvm_write_fuse+0x26>
        return -6;
    1542:	2006      	movs	r0, #6
    1544:	e7ce      	b.n	14e4 <_nvm_write_fuse+0x24>
        return ERROR_PTR;
    1546:	2001      	movs	r0, #1
    1548:	e7cc      	b.n	14e4 <_nvm_write_fuse+0x24>
        return -3;
    154a:	2003      	movs	r0, #3
    154c:	e7ca      	b.n	14e4 <_nvm_write_fuse+0x24>
        return -4;
    154e:	2004      	movs	r0, #4
    1550:	e7c8      	b.n	14e4 <_nvm_write_fuse+0x24>
        return -5;
    1552:	2005      	movs	r0, #5
    1554:	e7c6      	b.n	14e4 <_nvm_write_fuse+0x24>
    1556:	46c0      	nop			; (mov r8, r8)
    1558:	0000d2d2 	.word	0x0000d2d2
    155c:	000007a5 	.word	0x000007a5
    1560:	00000af1 	.word	0x00000af1
    1564:	00000809 	.word	0x00000809

00001568 <nvm_read_mem>:
    @data: data output buffer
    @len: data len
    @return 0 successful, other value failed
*/
int nvm_read_mem(void *nvm_ptr, u16 address, u8 *data, int len)
{
    1568:	b5f0      	push	{r4, r5, r6, r7, lr}
    156a:	b085      	sub	sp, #20
    156c:	1e06      	subs	r6, r0, #0
    156e:	9102      	str	r1, [sp, #8]
    1570:	9203      	str	r2, [sp, #12]
    1572:	9301      	str	r3, [sp, #4]
    */
    upd_nvm_t *nvm = (upd_nvm_t *)nvm_ptr;
    int size, off;
    int result;

    if (!VALID_NVM(nvm))
    1574:	d01c      	beq.n	15b0 <nvm_read_mem+0x48>
    1576:	4b10      	ldr	r3, [pc, #64]	; (15b8 <nvm_read_mem+0x50>)
    1578:	6802      	ldr	r2, [r0, #0]
    157a:	429a      	cmp	r2, r3
    157c:	d118      	bne.n	15b0 <nvm_read_mem+0x48>
    157e:	2400      	movs	r4, #0
    if (!nvm->progmode)
        DBG_INFO(NVM_DEBUG, "Memory read at locked mode");

    off = 0;
    do {
        size = len - off;
    1580:	9b01      	ldr	r3, [sp, #4]
    1582:	1b1d      	subs	r5, r3, r4
    1584:	2380      	movs	r3, #128	; 0x80
    1586:	005b      	lsls	r3, r3, #1
    1588:	429d      	cmp	r5, r3
    158a:	dd00      	ble.n	158e <nvm_read_mem+0x26>
    158c:	001d      	movs	r5, r3
        if (size > UPDI_MAX_TRANSFER_SIZE)
            size = UPDI_MAX_TRANSFER_SIZE;
    
        DBG_INFO(NVM_DEBUG, "Reading %d bytes at address 0x%x", size, address + off);

        result = app_read_data_bytes(APP(nvm), address + off, data + off, size);
    158e:	9b03      	ldr	r3, [sp, #12]
    1590:	68b0      	ldr	r0, [r6, #8]
    1592:	191a      	adds	r2, r3, r4
    1594:	9b02      	ldr	r3, [sp, #8]
    1596:	4f09      	ldr	r7, [pc, #36]	; (15bc <nvm_read_mem+0x54>)
    1598:	1919      	adds	r1, r3, r4
    159a:	b289      	uxth	r1, r1
    159c:	002b      	movs	r3, r5
    159e:	47b8      	blx	r7
        if (result) {
    15a0:	2800      	cmp	r0, #0
    15a2:	d103      	bne.n	15ac <nvm_read_mem+0x44>
            DBG_INFO(NVM_DEBUG, "app_read_data_bytes failed %d", result);
            break;
        }

        off += size;
    } while (off < len);
    15a4:	9b01      	ldr	r3, [sp, #4]
        off += size;
    15a6:	1964      	adds	r4, r4, r5
    } while (off < len);
    15a8:	42a3      	cmp	r3, r4
    15aa:	dce9      	bgt.n	1580 <nvm_read_mem+0x18>

    return result;
}
    15ac:	b005      	add	sp, #20
    15ae:	bdf0      	pop	{r4, r5, r6, r7, pc}
        return ERROR_PTR;
    15b0:	2001      	movs	r0, #1
    15b2:	4240      	negs	r0, r0
    15b4:	e7fa      	b.n	15ac <nvm_read_mem+0x44>
    15b6:	46c0      	nop			; (mov r8, r8)
    15b8:	0000d2d2 	.word	0x0000d2d2
    15bc:	00000915 	.word	0x00000915

000015c0 <_nvm_read_common>:
{
    15c0:	b570      	push	{r4, r5, r6, lr}
    15c2:	000d      	movs	r5, r1
    15c4:	0011      	movs	r1, r2
    15c6:	001a      	movs	r2, r3
    if (!VALID_NVM(nvm) || !data)
    15c8:	2800      	cmp	r0, #0
    15ca:	d017      	beq.n	15fc <_nvm_read_common+0x3c>
    15cc:	4b0f      	ldr	r3, [pc, #60]	; (160c <_nvm_read_common+0x4c>)
    15ce:	6804      	ldr	r4, [r0, #0]
    15d0:	429c      	cmp	r4, r3
    15d2:	d113      	bne.n	15fc <_nvm_read_common+0x3c>
    15d4:	2a00      	cmp	r2, #0
    15d6:	d011      	beq.n	15fc <_nvm_read_common+0x3c>
    if (!nvm->progmode) {
    15d8:	7903      	ldrb	r3, [r0, #4]
    15da:	2b00      	cmp	r3, #0
    15dc:	d011      	beq.n	1602 <_nvm_read_common+0x42>
    if (address < info->nvm_start)
    15de:	882c      	ldrh	r4, [r5, #0]
    15e0:	428c      	cmp	r4, r1
    15e2:	d901      	bls.n	15e8 <_nvm_read_common+0x28>
        address += info->nvm_start;
    15e4:	1861      	adds	r1, r4, r1
    15e6:	b289      	uxth	r1, r1
    if (address + len > info->nvm_start + info->nvm_size) {
    15e8:	9b04      	ldr	r3, [sp, #16]
    15ea:	18ce      	adds	r6, r1, r3
    15ec:	886b      	ldrh	r3, [r5, #2]
    15ee:	191b      	adds	r3, r3, r4
    15f0:	429e      	cmp	r6, r3
    15f2:	dc08      	bgt.n	1606 <_nvm_read_common+0x46>
    return nvm_read_mem(nvm_ptr, address, data, len);
    15f4:	9b04      	ldr	r3, [sp, #16]
    15f6:	4c06      	ldr	r4, [pc, #24]	; (1610 <_nvm_read_common+0x50>)
    15f8:	47a0      	blx	r4
}
    15fa:	bd70      	pop	{r4, r5, r6, pc}
        return ERROR_PTR;
    15fc:	2001      	movs	r0, #1
        return -3;
    15fe:	4240      	negs	r0, r0
    1600:	e7fb      	b.n	15fa <_nvm_read_common+0x3a>
        return -2;
    1602:	2002      	movs	r0, #2
    1604:	e7fb      	b.n	15fe <_nvm_read_common+0x3e>
        return -3;
    1606:	2003      	movs	r0, #3
    1608:	e7f9      	b.n	15fe <_nvm_read_common+0x3e>
    160a:	46c0      	nop			; (mov r8, r8)
    160c:	0000d2d2 	.word	0x0000d2d2
    1610:	00001569 	.word	0x00001569

00001614 <nvm_get_block_info>:
    @type: NVM type
    @info: chip flash information
    @return 0 successful, other value failed
*/
int nvm_get_block_info(void *nvm_ptr, int type, nvm_info_t *info)
{
    1614:	b510      	push	{r4, lr}
    /*
        get block info
    */
    upd_nvm_t *nvm = (upd_nvm_t *)nvm_ptr;
    
    if (!VALID_NVM(nvm))
    1616:	2800      	cmp	r0, #0
    1618:	d008      	beq.n	162c <nvm_get_block_info+0x18>
    161a:	4b06      	ldr	r3, [pc, #24]	; (1634 <nvm_get_block_info+0x20>)
    161c:	6804      	ldr	r4, [r0, #0]
    161e:	429c      	cmp	r4, r3
    1620:	d104      	bne.n	162c <nvm_get_block_info+0x18>
        return ERROR_PTR;

    DBG_INFO(NVM_DEBUG, "<NVM> Get chip nvm type %d info", type);

    return dev_get_nvm_info(nvm->dev, type, info);
    1622:	b2c9      	uxtb	r1, r1
    1624:	68c0      	ldr	r0, [r0, #12]
    1626:	4b04      	ldr	r3, [pc, #16]	; (1638 <nvm_get_block_info+0x24>)
    1628:	4798      	blx	r3
}
    162a:	bd10      	pop	{r4, pc}
        return ERROR_PTR;
    162c:	2001      	movs	r0, #1
    162e:	4240      	negs	r0, r0
    1630:	e7fb      	b.n	162a <nvm_get_block_info+0x16>
    1632:	46c0      	nop			; (mov r8, r8)
    1634:	0000d2d2 	.word	0x0000d2d2
    1638:	000002d9 	.word	0x000002d9

0000163c <nvm_write_flash>:
{
    163c:	b5f0      	push	{r4, r5, r6, r7, lr}
    163e:	b089      	sub	sp, #36	; 0x24
    1640:	0005      	movs	r5, r0
    1642:	9101      	str	r1, [sp, #4]
    1644:	9203      	str	r2, [sp, #12]
    1646:	001e      	movs	r6, r3
    if (!VALID_NVM(nvm) || !data)
    1648:	2800      	cmp	r0, #0
    164a:	d04b      	beq.n	16e4 <nvm_write_flash+0xa8>
    164c:	4b2b      	ldr	r3, [pc, #172]	; (16fc <nvm_write_flash+0xc0>)
    164e:	6802      	ldr	r2, [r0, #0]
    1650:	429a      	cmp	r2, r3
    1652:	d147      	bne.n	16e4 <nvm_write_flash+0xa8>
    1654:	9b03      	ldr	r3, [sp, #12]
    1656:	2b00      	cmp	r3, #0
    1658:	d044      	beq.n	16e4 <nvm_write_flash+0xa8>
    if (!nvm->progmode) {
    165a:	7903      	ldrb	r3, [r0, #4]
    165c:	2b00      	cmp	r3, #0
    165e:	d044      	beq.n	16ea <nvm_write_flash+0xae>
    result = nvm_get_block_info(nvm, NVM_FLASH, &info);
    1660:	aa06      	add	r2, sp, #24
    1662:	2100      	movs	r1, #0
    1664:	4b26      	ldr	r3, [pc, #152]	; (1700 <nvm_write_flash+0xc4>)
    1666:	4798      	blx	r3
    1668:	1e04      	subs	r4, r0, #0
    if (result) {
    166a:	d140      	bne.n	16ee <nvm_write_flash+0xb2>
    flash_size = info.nvm_size;
    166c:	aa06      	add	r2, sp, #24
    flash_address = info.nvm_start;
    166e:	ab06      	add	r3, sp, #24
    flash_size = info.nvm_size;
    1670:	8851      	ldrh	r1, [r2, #2]
    flash_address = info.nvm_start;
    1672:	881b      	ldrh	r3, [r3, #0]
    if (address < flash_address)
    1674:	9a01      	ldr	r2, [sp, #4]
    1676:	4293      	cmp	r3, r2
    1678:	dd02      	ble.n	1680 <nvm_write_flash+0x44>
        address += flash_address;
    167a:	189a      	adds	r2, r3, r2
    167c:	b292      	uxth	r2, r2
    167e:	9201      	str	r2, [sp, #4]
    if (address + len > flash_address + flash_size) {
    1680:	9a01      	ldr	r2, [sp, #4]
    1682:	185b      	adds	r3, r3, r1
    1684:	1992      	adds	r2, r2, r6
    1686:	429a      	cmp	r2, r3
    1688:	dc33      	bgt.n	16f2 <nvm_write_flash+0xb6>
    page_size = info.nvm_pagesize;
    168a:	ab06      	add	r3, sp, #24
    168c:	889f      	ldrh	r7, [r3, #4]
    pages = (len + page_size - 1) / page_size;
    168e:	4b1d      	ldr	r3, [pc, #116]	; (1704 <nvm_write_flash+0xc8>)
    1690:	19f0      	adds	r0, r6, r7
    1692:	3801      	subs	r0, #1
    1694:	0039      	movs	r1, r7
    1696:	4798      	blx	r3
    1698:	9b03      	ldr	r3, [sp, #12]
    169a:	9005      	str	r0, [sp, #20]
    169c:	9304      	str	r3, [sp, #16]
    for (i = 0, off = 0; i < pages; i++) {
    169e:	2300      	movs	r3, #0
    16a0:	9602      	str	r6, [sp, #8]
    16a2:	9303      	str	r3, [sp, #12]
    16a4:	9b03      	ldr	r3, [sp, #12]
    16a6:	9a05      	ldr	r2, [sp, #20]
    16a8:	4293      	cmp	r3, r2
    16aa:	db02      	blt.n	16b2 <nvm_write_flash+0x76>
}
    16ac:	0020      	movs	r0, r4
    16ae:	b009      	add	sp, #36	; 0x24
    16b0:	bdf0      	pop	{r4, r5, r6, r7, pc}
        result = app_write_nvm(APP(nvm), address + off, data + off, size);
    16b2:	9a02      	ldr	r2, [sp, #8]
    16b4:	003b      	movs	r3, r7
    16b6:	4297      	cmp	r7, r2
    16b8:	dd00      	ble.n	16bc <nvm_write_flash+0x80>
    16ba:	0013      	movs	r3, r2
    16bc:	9a04      	ldr	r2, [sp, #16]
    16be:	9901      	ldr	r1, [sp, #4]
    16c0:	68a8      	ldr	r0, [r5, #8]
    16c2:	4e11      	ldr	r6, [pc, #68]	; (1708 <nvm_write_flash+0xcc>)
    16c4:	47b0      	blx	r6
    16c6:	9b02      	ldr	r3, [sp, #8]
    16c8:	1bdb      	subs	r3, r3, r7
    16ca:	9302      	str	r3, [sp, #8]
    16cc:	9b01      	ldr	r3, [sp, #4]
    16ce:	18fb      	adds	r3, r7, r3
    16d0:	b29b      	uxth	r3, r3
    16d2:	9301      	str	r3, [sp, #4]
    16d4:	9b04      	ldr	r3, [sp, #16]
    16d6:	19db      	adds	r3, r3, r7
    16d8:	9304      	str	r3, [sp, #16]
        if (result) {
    16da:	2800      	cmp	r0, #0
    16dc:	d10b      	bne.n	16f6 <nvm_write_flash+0xba>
    for (i = 0, off = 0; i < pages; i++) {
    16de:	9b03      	ldr	r3, [sp, #12]
    16e0:	3301      	adds	r3, #1
    16e2:	e7de      	b.n	16a2 <nvm_write_flash+0x66>
        return ERROR_PTR;
    16e4:	2401      	movs	r4, #1
        return -6;
    16e6:	4264      	negs	r4, r4
    16e8:	e7e0      	b.n	16ac <nvm_write_flash+0x70>
        return -2;
    16ea:	2402      	movs	r4, #2
    16ec:	e7fb      	b.n	16e6 <nvm_write_flash+0xaa>
        return -3;
    16ee:	2403      	movs	r4, #3
    16f0:	e7f9      	b.n	16e6 <nvm_write_flash+0xaa>
        return -4;
    16f2:	2404      	movs	r4, #4
    16f4:	e7f7      	b.n	16e6 <nvm_write_flash+0xaa>
        return -6;
    16f6:	2406      	movs	r4, #6
    16f8:	e7f5      	b.n	16e6 <nvm_write_flash+0xaa>
    16fa:	46c0      	nop			; (mov r8, r8)
    16fc:	0000d2d2 	.word	0x0000d2d2
    1700:	00001615 	.word	0x00001615
    1704:	00002879 	.word	0x00002879
    1708:	00000c5d 	.word	0x00000c5d

0000170c <nvm_read_fuse>:
{
    170c:	b5f0      	push	{r4, r5, r6, r7, lr}
    170e:	b085      	sub	sp, #20
    1710:	000d      	movs	r5, r1
    1712:	0016      	movs	r6, r2
    1714:	001f      	movs	r7, r3
    result = nvm_get_block_info(nvm, NVM_FUSES, &info);
    1716:	aa02      	add	r2, sp, #8
    1718:	2103      	movs	r1, #3
    171a:	4b08      	ldr	r3, [pc, #32]	; (173c <nvm_read_fuse+0x30>)
{
    171c:	0004      	movs	r4, r0
    result = nvm_get_block_info(nvm, NVM_FUSES, &info);
    171e:	4798      	blx	r3
    if (result) {
    1720:	2800      	cmp	r0, #0
    1722:	d108      	bne.n	1736 <nvm_read_fuse+0x2a>
    return _nvm_read_common(nvm_ptr, &info, address, data, len);
    1724:	0020      	movs	r0, r4
    1726:	9700      	str	r7, [sp, #0]
    1728:	0033      	movs	r3, r6
    172a:	002a      	movs	r2, r5
    172c:	a902      	add	r1, sp, #8
    172e:	4c04      	ldr	r4, [pc, #16]	; (1740 <nvm_read_fuse+0x34>)
    1730:	47a0      	blx	r4
}
    1732:	b005      	add	sp, #20
    1734:	bdf0      	pop	{r4, r5, r6, r7, pc}
        return -3;
    1736:	2003      	movs	r0, #3
    1738:	4240      	negs	r0, r0
    173a:	e7fa      	b.n	1732 <nvm_read_fuse+0x26>
    173c:	00001615 	.word	0x00001615
    1740:	000015c1 	.word	0x000015c1

00001744 <nvm_write_fuse>:
{
    1744:	b5f0      	push	{r4, r5, r6, r7, lr}
    1746:	b087      	sub	sp, #28
    1748:	9101      	str	r1, [sp, #4]
    174a:	9202      	str	r2, [sp, #8]
    174c:	9303      	str	r3, [sp, #12]
    result = nvm_get_block_info(nvm, NVM_FUSES, &info);
    174e:	aa04      	add	r2, sp, #16
    1750:	2103      	movs	r1, #3
    1752:	4b0e      	ldr	r3, [pc, #56]	; (178c <nvm_write_fuse+0x48>)
{
    1754:	0006      	movs	r6, r0
    result = nvm_get_block_info(nvm, NVM_FUSES, &info);
    1756:	4798      	blx	r3
    1758:	0004      	movs	r4, r0
    175a:	1e05      	subs	r5, r0, #0
    if (result) {
    175c:	d00e      	beq.n	177c <nvm_write_fuse+0x38>
        return -3;
    175e:	2403      	movs	r4, #3
            return -2;
    1760:	4264      	negs	r4, r4
    1762:	e00e      	b.n	1782 <nvm_write_fuse+0x3e>
        result = _nvm_write_fuse(nvm_ptr, &info, address + i, data[i]);
    1764:	9a01      	ldr	r2, [sp, #4]
    1766:	9b02      	ldr	r3, [sp, #8]
    1768:	1952      	adds	r2, r2, r5
    176a:	5d5b      	ldrb	r3, [r3, r5]
    176c:	b292      	uxth	r2, r2
    176e:	a904      	add	r1, sp, #16
    1770:	0030      	movs	r0, r6
    1772:	4f07      	ldr	r7, [pc, #28]	; (1790 <nvm_write_fuse+0x4c>)
    1774:	47b8      	blx	r7
        if (result) {
    1776:	2800      	cmp	r0, #0
    1778:	d106      	bne.n	1788 <nvm_write_fuse+0x44>
    for (i = 0; i < len; i++) {
    177a:	3501      	adds	r5, #1
    177c:	9b03      	ldr	r3, [sp, #12]
    177e:	429d      	cmp	r5, r3
    1780:	dbf0      	blt.n	1764 <nvm_write_fuse+0x20>
}
    1782:	0020      	movs	r0, r4
    1784:	b007      	add	sp, #28
    1786:	bdf0      	pop	{r4, r5, r6, r7, pc}
            return -2;
    1788:	2402      	movs	r4, #2
    178a:	e7e9      	b.n	1760 <nvm_write_fuse+0x1c>
    178c:	00001615 	.word	0x00001615
    1790:	000014c1 	.word	0x000014c1

00001794 <updi_physical_deinit>:
    PHY object destroy
    @ptr_phy: APP object pointer, acquired from updi_physical_init()
    @no return
*/
void updi_physical_deinit(void *ptr_phy)
{
    1794:	b510      	push	{r4, lr}
    upd_physical_t *phy = (upd_physical_t *)ptr_phy;
    if (!VALID_PHY(phy))
    1796:	2800      	cmp	r0, #0
    1798:	d008      	beq.n	17ac <updi_physical_deinit+0x18>
    179a:	4b05      	ldr	r3, [pc, #20]	; (17b0 <updi_physical_deinit+0x1c>)
    179c:	6802      	ldr	r2, [r0, #0]
    179e:	429a      	cmp	r2, r3
    17a0:	d104      	bne.n	17ac <updi_physical_deinit+0x18>
        return;

    DBG_INFO(PHY_DEBUG, "<PHY> Deinit");

    if (phy->ser) {
    17a2:	6840      	ldr	r0, [r0, #4]
    17a4:	2800      	cmp	r0, #0
    17a6:	d001      	beq.n	17ac <updi_physical_deinit+0x18>
        ClosePort(SER(phy));
    17a8:	4b02      	ldr	r3, [pc, #8]	; (17b4 <updi_physical_deinit+0x20>)
    17aa:	4798      	blx	r3
    }
    //free(phy);
}
    17ac:	bd10      	pop	{r4, pc}
    17ae:	46c0      	nop			; (mov r8, r8)
    17b0:	0000e1e1 	.word	0x0000e1e1
    17b4:	000004c5 	.word	0x000004c5

000017b8 <phy_set_baudrate>:
PHY set Sercom baudrate
@ptr_phy: APP object pointer, acquired from updi_physical_init()
@return 0 successful, other value if failed
*/
int phy_set_baudrate(void *ptr_phy, int baud)
{
    17b8:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
    17ba:	0004      	movs	r4, r0
    17bc:	000f      	movs	r7, r1
    upd_physical_t *phy = (upd_physical_t *)ptr_phy;
    SER_PORT_STATE_T stat;
    int result;

    if (!VALID_PHY(phy))
    17be:	2800      	cmp	r0, #0
    17c0:	d017      	beq.n	17f2 <phy_set_baudrate+0x3a>
    17c2:	4b0e      	ldr	r3, [pc, #56]	; (17fc <phy_set_baudrate+0x44>)
    17c4:	6802      	ldr	r2, [r0, #0]
    17c6:	429a      	cmp	r2, r3
    17c8:	d113      	bne.n	17f2 <phy_set_baudrate+0x3a>
        return ERROR_PTR;

    DBG_INFO(PHY_DEBUG, "<PHY> Set Baudrate");

    memcpy(&stat, &phy->stat, sizeof(stat));
    17ca:	0006      	movs	r6, r0
    17cc:	3608      	adds	r6, #8
    17ce:	2208      	movs	r2, #8
    17d0:	0031      	movs	r1, r6
    17d2:	4668      	mov	r0, sp
    17d4:	4d0a      	ldr	r5, [pc, #40]	; (1800 <phy_set_baudrate+0x48>)
    17d6:	47a8      	blx	r5

    stat.baudRate = baud;
    result = SetPortState(SER(phy), &stat);
    17d8:	6860      	ldr	r0, [r4, #4]
    17da:	4669      	mov	r1, sp
    17dc:	4b09      	ldr	r3, [pc, #36]	; (1804 <phy_set_baudrate+0x4c>)
    stat.baudRate = baud;
    17de:	9700      	str	r7, [sp, #0]
    result = SetPortState(SER(phy), &stat);
    17e0:	4798      	blx	r3
    17e2:	1e04      	subs	r4, r0, #0
    if (result) {
    17e4:	d108      	bne.n	17f8 <phy_set_baudrate+0x40>
        DBG_INFO(PHY_DEBUG, "<PHY> set Baud %d failed %d", baud, result);
        return -2;
    }

    memcpy(&phy->stat, &stat, sizeof(stat));
    17e6:	2208      	movs	r2, #8
    17e8:	4669      	mov	r1, sp
    17ea:	0030      	movs	r0, r6
    17ec:	47a8      	blx	r5
    
    return 0;
}
    17ee:	0020      	movs	r0, r4
    17f0:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
        return ERROR_PTR;
    17f2:	2401      	movs	r4, #1
        return -2;
    17f4:	4264      	negs	r4, r4
    17f6:	e7fa      	b.n	17ee <phy_set_baudrate+0x36>
    17f8:	2402      	movs	r4, #2
    17fa:	e7fb      	b.n	17f4 <phy_set_baudrate+0x3c>
    17fc:	0000e1e1 	.word	0x0000e1e1
    1800:	0000330d 	.word	0x0000330d
    1804:	0000032d 	.word	0x0000032d

00001808 <phy_send_each>:
    @data: data to be sent
    @len: data lenght
    @return 0 successful, other value if failed
*/
int phy_send_each(void *ptr_phy, const u8 *data, int len)
{
    1808:	b5f0      	push	{r4, r5, r6, r7, lr}
    180a:	b085      	sub	sp, #20
    180c:	0005      	movs	r5, r0
    180e:	000f      	movs	r7, r1
    1810:	9201      	str	r2, [sp, #4]
     */
    upd_physical_t * phy = (upd_physical_t *)ptr_phy;
    u8 val;
    int result;

    if (!VALID_PHY(phy))
    1812:	2800      	cmp	r0, #0
    1814:	d033      	beq.n	187e <phy_send_each+0x76>
    1816:	4b1e      	ldr	r3, [pc, #120]	; (1890 <phy_send_each+0x88>)
    1818:	6802      	ldr	r2, [r0, #0]
    181a:	429a      	cmp	r2, r3
    181c:	d12f      	bne.n	187e <phy_send_each+0x76>
        return ERROR_PTR;

    DBG(PHY_DEBUG, "<PHY> Send:", data, len, (unsigned char *)"0x%02x ");

    result = FlushPort(SER(phy));
    181e:	6840      	ldr	r0, [r0, #4]
    1820:	4b1c      	ldr	r3, [pc, #112]	; (1894 <phy_send_each+0x8c>)
    1822:	4798      	blx	r3
    if (result) {
        DBG_INFO(PHY_DEBUG, "<PHY> Send: FlushPort failed %d", result);
    }

    for (int i = 0; i < len; i++) {
    1824:	2400      	movs	r4, #0
    1826:	9b01      	ldr	r3, [sp, #4]
    1828:	42a3      	cmp	r3, r4
    182a:	dc02      	bgt.n	1832 <phy_send_each+0x2a>

        if (phy->ibdly)
            msleep(phy->ibdly);
    }

    return 0;
    182c:	2000      	movs	r0, #0
}
    182e:	b005      	add	sp, #20
    1830:	bdf0      	pop	{r4, r5, r6, r7, pc}
        val = data[i];
    1832:	ab02      	add	r3, sp, #8
    1834:	1dd9      	adds	r1, r3, #7
    1836:	5d3b      	ldrb	r3, [r7, r4]
        result = SendData(SER(phy), &val, 1);   //Todo: should check whether we could send all data once
    1838:	2201      	movs	r2, #1
        val = data[i];
    183a:	700b      	strb	r3, [r1, #0]
        result = SendData(SER(phy), &val, 1);   //Todo: should check whether we could send all data once
    183c:	6868      	ldr	r0, [r5, #4]
    183e:	4b16      	ldr	r3, [pc, #88]	; (1898 <phy_send_each+0x90>)
    1840:	4798      	blx	r3
    1842:	1e06      	subs	r6, r0, #0
        if (result) {
    1844:	d119      	bne.n	187a <phy_send_each+0x72>
    1846:	0004      	movs	r4, r0
			msleep(1);
    1848:	2001      	movs	r0, #1
    184a:	4b14      	ldr	r3, [pc, #80]	; (189c <phy_send_each+0x94>)
    184c:	4798      	blx	r3
			result += ReadData(SER(phy), &val, 1);
    184e:	ab02      	add	r3, sp, #8
    1850:	1dd9      	adds	r1, r3, #7
    1852:	2201      	movs	r2, #1
    1854:	6868      	ldr	r0, [r5, #4]
    1856:	4b12      	ldr	r3, [pc, #72]	; (18a0 <phy_send_each+0x98>)
    1858:	4798      	blx	r3
    185a:	1836      	adds	r6, r6, r0
		} while (result != 1 && (i++) < 100);
    185c:	2e01      	cmp	r6, #1
    185e:	d010      	beq.n	1882 <phy_send_each+0x7a>
    1860:	3401      	adds	r4, #1
    1862:	2c65      	cmp	r4, #101	; 0x65
    1864:	d1f0      	bne.n	1848 <phy_send_each+0x40>
            return -3;
    1866:	2003      	movs	r0, #3
        return ERROR_PTR;
    1868:	4240      	negs	r0, r0
    186a:	e7e0      	b.n	182e <phy_send_each+0x26>
        if (phy->ibdly)
    186c:	6928      	ldr	r0, [r5, #16]
    186e:	2800      	cmp	r0, #0
    1870:	d001      	beq.n	1876 <phy_send_each+0x6e>
            msleep(phy->ibdly);
    1872:	4b0a      	ldr	r3, [pc, #40]	; (189c <phy_send_each+0x94>)
    1874:	4798      	blx	r3
    for (int i = 0; i < len; i++) {
    1876:	3401      	adds	r4, #1
    1878:	e7d5      	b.n	1826 <phy_send_each+0x1e>
            return -2;
    187a:	2002      	movs	r0, #2
    187c:	e7f4      	b.n	1868 <phy_send_each+0x60>
        return ERROR_PTR;
    187e:	2001      	movs	r0, #1
    1880:	e7f2      	b.n	1868 <phy_send_each+0x60>
        if (data[i] != val) {
    1882:	ab02      	add	r3, sp, #8
    1884:	5d3a      	ldrb	r2, [r7, r4]
    1886:	79db      	ldrb	r3, [r3, #7]
    1888:	429a      	cmp	r2, r3
    188a:	d0ef      	beq.n	186c <phy_send_each+0x64>
            return -4;
    188c:	2004      	movs	r0, #4
    188e:	e7eb      	b.n	1868 <phy_send_each+0x60>
    1890:	0000e1e1 	.word	0x0000e1e1
    1894:	00000461 	.word	0x00000461
    1898:	0000048d 	.word	0x0000048d
    189c:	00000315 	.word	0x00000315
    18a0:	000004b5 	.word	0x000004b5

000018a4 <phy_send>:
@return 0 successful, other value if failed
*/
#define MAX_LEN 16
u8 buffer[MAX_LEN];
int phy_send(void *ptr_phy, const u8 *data, int len)
{
    18a4:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
    18a6:	0005      	movs	r5, r0
    18a8:	9101      	str	r1, [sp, #4]
    18aa:	0014      	movs	r4, r2
    */
    upd_physical_t * phy = (upd_physical_t *)ptr_phy;
    int i, result;
    u8 *rbuf;

    if (!VALID_PHY(phy))
    18ac:	2800      	cmp	r0, #0
    18ae:	d03f      	beq.n	1930 <phy_send+0x8c>
    18b0:	4b21      	ldr	r3, [pc, #132]	; (1938 <phy_send+0x94>)
    18b2:	6802      	ldr	r2, [r0, #0]
    18b4:	429a      	cmp	r2, r3
    18b6:	d13b      	bne.n	1930 <phy_send+0x8c>
        return ERROR_PTR;

    DBG(PHY_DEBUG, "<PHY> Send:", data, len, (unsigned char *)"0x%02x ");

    memset(buffer, 0, sizeof(buffer));
    18b8:	2210      	movs	r2, #16
    18ba:	2100      	movs	r1, #0
    18bc:	4b1f      	ldr	r3, [pc, #124]	; (193c <phy_send+0x98>)
    18be:	4820      	ldr	r0, [pc, #128]	; (1940 <phy_send+0x9c>)
    18c0:	4798      	blx	r3
    if (!rbuf) {
        DBG_INFO(PHY_DEBUG, "<PHY> Send: malloc rbuf(%d) failed", len);
        return -2;
    }*/

    result = FlushPort(SER(phy));
    18c2:	4b20      	ldr	r3, [pc, #128]	; (1944 <phy_send+0xa0>)
    18c4:	6868      	ldr	r0, [r5, #4]
    18c6:	4798      	blx	r3
    if (result) {
        DBG_INFO(PHY_DEBUG, "<PHY> Send: FlushPort failed %d", result);
    }
    
    /* Send */
    result = SendData(SER(phy), data, len); 
    18c8:	0022      	movs	r2, r4
    18ca:	9901      	ldr	r1, [sp, #4]
    18cc:	6868      	ldr	r0, [r5, #4]
    18ce:	4b1e      	ldr	r3, [pc, #120]	; (1948 <phy_send+0xa4>)
    18d0:	4798      	blx	r3
    18d2:	1e06      	subs	r6, r0, #0
    if (result) {
    18d4:	d120      	bne.n	1918 <phy_send+0x74>
    18d6:	2765      	movs	r7, #101	; 0x65
	
    /* Echo */
    if (result == 0) {
		i = 0;
		do {
			msleep(1);
    18d8:	2001      	movs	r0, #1
    18da:	4b1c      	ldr	r3, [pc, #112]	; (194c <phy_send+0xa8>)
    18dc:	4798      	blx	r3
            result += ReadData(SER(phy), rbuf, len);
    18de:	0022      	movs	r2, r4
    18e0:	4917      	ldr	r1, [pc, #92]	; (1940 <phy_send+0x9c>)
    18e2:	6868      	ldr	r0, [r5, #4]
    18e4:	4b1a      	ldr	r3, [pc, #104]	; (1950 <phy_send+0xac>)
    18e6:	4798      	blx	r3
    18e8:	1836      	adds	r6, r6, r0
		} while (result != len && (i++) < 100);
    18ea:	42b4      	cmp	r4, r6
    18ec:	d006      	beq.n	18fc <phy_send+0x58>
    18ee:	3f01      	subs	r7, #1
    18f0:	2f00      	cmp	r7, #0
    18f2:	d1f1      	bne.n	18d8 <phy_send+0x34>
						
        if (result != len) {
            DBG_INFO(PHY_DEBUG, "<PHY> Send: ReadData (%d) failed %d", len, result);
            result = -4;
    18f4:	2604      	movs	r6, #4
        result = -3;
    18f6:	4276      	negs	r6, r6
        }
    }

    if (result == len) {
    18f8:	42a6      	cmp	r6, r4
    18fa:	d104      	bne.n	1906 <phy_send+0x62>
            result = -4;
    18fc:	2300      	movs	r3, #0
        for (i = 0; i < len; i++) {
            if (data[i] != rbuf[i]) {
    18fe:	4a10      	ldr	r2, [pc, #64]	; (1940 <phy_send+0x9c>)
        for (i = 0; i < len; i++) {
    1900:	42a3      	cmp	r3, r4
    1902:	db0b      	blt.n	191c <phy_send+0x78>
    1904:	0026      	movs	r6, r4
                break;
            }
        }
    }

    if (phy->ibdly)
    1906:	6928      	ldr	r0, [r5, #16]
    1908:	2800      	cmp	r0, #0
    190a:	d001      	beq.n	1910 <phy_send+0x6c>
        msleep(phy->ibdly);
    190c:	4b0f      	ldr	r3, [pc, #60]	; (194c <phy_send+0xa8>)
    190e:	4798      	blx	r3

    //free(rbuf);

    if (result == len)	
    1910:	42a6      	cmp	r6, r4
    1912:	d10f      	bne.n	1934 <phy_send+0x90>
        return 0;
    1914:	2600      	movs	r6, #0
    1916:	e00d      	b.n	1934 <phy_send+0x90>
        result = -3;
    1918:	2603      	movs	r6, #3
    191a:	e7ec      	b.n	18f6 <phy_send+0x52>
            if (data[i] != rbuf[i]) {
    191c:	9901      	ldr	r1, [sp, #4]
    191e:	5cc8      	ldrb	r0, [r1, r3]
    1920:	5cd1      	ldrb	r1, [r2, r3]
    1922:	4288      	cmp	r0, r1
    1924:	d101      	bne.n	192a <phy_send+0x86>
        for (i = 0; i < len; i++) {
    1926:	3301      	adds	r3, #1
    1928:	e7ea      	b.n	1900 <phy_send+0x5c>
                result = -5;
    192a:	2605      	movs	r6, #5
    192c:	4276      	negs	r6, r6
    192e:	e7ea      	b.n	1906 <phy_send+0x62>
        return ERROR_PTR;
    1930:	2601      	movs	r6, #1
    1932:	4276      	negs	r6, r6
    else
        return result;
}
    1934:	0030      	movs	r0, r6
    1936:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
    1938:	0000e1e1 	.word	0x0000e1e1
    193c:	0000331f 	.word	0x0000331f
    1940:	20000584 	.word	0x20000584
    1944:	00000461 	.word	0x00000461
    1948:	0000048d 	.word	0x0000048d
    194c:	00000315 	.word	0x00000315
    1950:	000004b5 	.word	0x000004b5

00001954 <phy_send_double_break>:
    u8 data[] = { UPDI_BREAK, UPDI_BREAK };
    1954:	2300      	movs	r3, #0
{
    1956:	b5f0      	push	{r4, r5, r6, r7, lr}
    1958:	b085      	sub	sp, #20
    u8 data[] = { UPDI_BREAK, UPDI_BREAK };
    195a:	ad01      	add	r5, sp, #4
{
    195c:	0004      	movs	r4, r0
    u8 data[] = { UPDI_BREAK, UPDI_BREAK };
    195e:	702b      	strb	r3, [r5, #0]
    1960:	706b      	strb	r3, [r5, #1]
    if (!VALID_PHY(phy))
    1962:	4298      	cmp	r0, r3
    1964:	d021      	beq.n	19aa <phy_send_double_break+0x56>
    1966:	4a15      	ldr	r2, [pc, #84]	; (19bc <phy_send_double_break+0x68>)
    1968:	6801      	ldr	r1, [r0, #0]
    196a:	4291      	cmp	r1, r2
    196c:	d11d      	bne.n	19aa <phy_send_double_break+0x56>
    stat.baudRate = 300;
    196e:	2296      	movs	r2, #150	; 0x96
    stat.parity = EVENPARITY;
    1970:	2602      	movs	r6, #2
    stat.baudRate = 300;
    1972:	0052      	lsls	r2, r2, #1
    1974:	9202      	str	r2, [sp, #8]
    stat.byteSize = 8;
    1976:	3a25      	subs	r2, #37	; 0x25
    stat.baudRate = 300;
    1978:	a902      	add	r1, sp, #8
    stat.byteSize = 8;
    197a:	3aff      	subs	r2, #255	; 0xff
    result = SetPortState(SER(phy), &stat);
    197c:	6840      	ldr	r0, [r0, #4]
    197e:	4f10      	ldr	r7, [pc, #64]	; (19c0 <phy_send_double_break+0x6c>)
    stat.byteSize = 8;
    1980:	710a      	strb	r2, [r1, #4]
    stat.stopBits = ONESTOPBIT;
    1982:	714b      	strb	r3, [r1, #5]
    stat.parity = EVENPARITY;
    1984:	718e      	strb	r6, [r1, #6]
    result = SetPortState(SER(phy), &stat);
    1986:	47b8      	blx	r7
    if (result) {
    1988:	2800      	cmp	r0, #0
    198a:	d112      	bne.n	19b2 <phy_send_double_break+0x5e>
    result = phy_send(phy, data, 2);
    198c:	0032      	movs	r2, r6
    198e:	0029      	movs	r1, r5
    1990:	0020      	movs	r0, r4
    1992:	4b0c      	ldr	r3, [pc, #48]	; (19c4 <phy_send_double_break+0x70>)
    1994:	4798      	blx	r3
    if (result) {
    1996:	2800      	cmp	r0, #0
    1998:	d10d      	bne.n	19b6 <phy_send_double_break+0x62>
    result = SetPortState(SER(phy), &phy->stat);
    199a:	0021      	movs	r1, r4
    199c:	6860      	ldr	r0, [r4, #4]
    199e:	3108      	adds	r1, #8
    19a0:	47b8      	blx	r7
    if (result) {
    19a2:	2800      	cmp	r0, #0
    19a4:	d003      	beq.n	19ae <phy_send_double_break+0x5a>
        return -5;
    19a6:	2005      	movs	r0, #5
    19a8:	e000      	b.n	19ac <phy_send_double_break+0x58>
        return ERROR_PTR;
    19aa:	2001      	movs	r0, #1
        return -5;
    19ac:	4240      	negs	r0, r0
}
    19ae:	b005      	add	sp, #20
    19b0:	bdf0      	pop	{r4, r5, r6, r7, pc}
        return -2;
    19b2:	2002      	movs	r0, #2
    19b4:	e7fa      	b.n	19ac <phy_send_double_break+0x58>
        return -3;
    19b6:	2003      	movs	r0, #3
    19b8:	e7f8      	b.n	19ac <phy_send_double_break+0x58>
    19ba:	46c0      	nop			; (mov r8, r8)
    19bc:	0000e1e1 	.word	0x0000e1e1
    19c0:	0000032d 	.word	0x0000032d
    19c4:	000018a5 	.word	0x000018a5

000019c8 <updi_physical_init>:
{
    19c8:	b573      	push	{r0, r1, r4, r5, r6, lr}
    stat.byteSize = 8;
    19ca:	2308      	movs	r3, #8
    stat.baudRate = baud;
    19cc:	466d      	mov	r5, sp
    stat.byteSize = 8;
    19ce:	712b      	strb	r3, [r5, #4]
    stat.stopBits = TWOSTOPBITS;
    19d0:	3b06      	subs	r3, #6
    stat.baudRate = baud;
    19d2:	9100      	str	r1, [sp, #0]
    stat.stopBits = TWOSTOPBITS;
    19d4:	716b      	strb	r3, [r5, #5]
    stat.parity = EVENPARITY;
    19d6:	71ab      	strb	r3, [r5, #6]
{
    19d8:	000e      	movs	r6, r1
    ser = (void *)OpenPort(port, &stat);
    19da:	4b0d      	ldr	r3, [pc, #52]	; (1a10 <updi_physical_init+0x48>)
    19dc:	4669      	mov	r1, sp
    19de:	4798      	blx	r3
    upd_physical_t *phy = NULL;
    19e0:	1e04      	subs	r4, r0, #0
    if (ser) {
    19e2:	d013      	beq.n	1a0c <updi_physical_init+0x44>
        phy->mgwd = UPD_PHYSICAL_MAGIC_WORD;
    19e4:	4c0b      	ldr	r4, [pc, #44]	; (1a14 <updi_physical_init+0x4c>)
    19e6:	4b0c      	ldr	r3, [pc, #48]	; (1a18 <updi_physical_init+0x50>)
        phy->ser = ser;
    19e8:	6060      	str	r0, [r4, #4]
        phy->mgwd = UPD_PHYSICAL_MAGIC_WORD;
    19ea:	6023      	str	r3, [r4, #0]
        phy->ibdly = 1;
    19ec:	2301      	movs	r3, #1
    19ee:	6123      	str	r3, [r4, #16]
        memcpy(&phy->stat, &stat, sizeof(stat));
    19f0:	0023      	movs	r3, r4
        stat.baudRate = baud;
    19f2:	9600      	str	r6, [sp, #0]
        memcpy(&phy->stat, &stat, sizeof(stat));
    19f4:	3308      	adds	r3, #8
    19f6:	cd06      	ldmia	r5!, {r1, r2}
    19f8:	c306      	stmia	r3!, {r1, r2}
        result = phy_send_double_break(phy);
    19fa:	0020      	movs	r0, r4
    19fc:	4b07      	ldr	r3, [pc, #28]	; (1a1c <updi_physical_init+0x54>)
    19fe:	4798      	blx	r3
        if (result) {
    1a00:	2800      	cmp	r0, #0
    1a02:	d003      	beq.n	1a0c <updi_physical_init+0x44>
            updi_physical_deinit(phy);
    1a04:	0020      	movs	r0, r4
    1a06:	4b06      	ldr	r3, [pc, #24]	; (1a20 <updi_physical_init+0x58>)
    1a08:	4798      	blx	r3
            return NULL;
    1a0a:	2400      	movs	r4, #0
}
    1a0c:	0020      	movs	r0, r4
    1a0e:	bd76      	pop	{r1, r2, r4, r5, r6, pc}
    1a10:	000003e1 	.word	0x000003e1
    1a14:	20000594 	.word	0x20000594
    1a18:	0000e1e1 	.word	0x0000e1e1
    1a1c:	00001955 	.word	0x00001955
    1a20:	00001795 	.word	0x00001795

00001a24 <phy_send_byte>:
    @data: data to be sent
    @len: data lenght
    @return 0 successful, other value if failed
*/
int phy_send_byte(void *ptr_phy, u8 val)
{
    1a24:	b507      	push	{r0, r1, r2, lr}
    1a26:	466b      	mov	r3, sp
    1a28:	71d9      	strb	r1, [r3, #7]
    1a2a:	3307      	adds	r3, #7
    return phy_send_each(ptr_phy, &val, 1);
    1a2c:	0019      	movs	r1, r3
    1a2e:	2201      	movs	r2, #1
    1a30:	4b01      	ldr	r3, [pc, #4]	; (1a38 <phy_send_byte+0x14>)
    1a32:	4798      	blx	r3
}
    1a34:	bd0e      	pop	{r1, r2, r3, pc}
    1a36:	46c0      	nop			; (mov r8, r8)
    1a38:	00001809 	.word	0x00001809

00001a3c <phy_receive>:
@data: data buffer to receive
@len: data lenght
@return 0 successful, other value if failed
*/
int phy_receive(void *ptr_phy, u8 *data, int len)
{
    1a3c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
    1a3e:	0006      	movs	r6, r0
    1a40:	9101      	str	r1, [sp, #4]
    1a42:	0017      	movs	r7, r2
    Receives a frame of a known number of chars from UPDI
    */
    upd_physical_t * phy = (upd_physical_t *)ptr_phy;
    int result = 0;

    if (!VALID_PHY(phy))
    1a44:	2800      	cmp	r0, #0
    1a46:	d015      	beq.n	1a74 <phy_receive+0x38>
    1a48:	4b0c      	ldr	r3, [pc, #48]	; (1a7c <phy_receive+0x40>)
    1a4a:	6802      	ldr	r2, [r0, #0]
    1a4c:	429a      	cmp	r2, r3
    1a4e:	d111      	bne.n	1a74 <phy_receive+0x38>
    1a50:	250b      	movs	r5, #11
    1a52:	2400      	movs	r4, #0
        return ERROR_PTR;

    /* Read */
	int i = 0;
	do {
		result += ReadData(SER(phy), data, len);
    1a54:	4b0a      	ldr	r3, [pc, #40]	; (1a80 <phy_receive+0x44>)
    1a56:	003a      	movs	r2, r7
    1a58:	9901      	ldr	r1, [sp, #4]
    1a5a:	6870      	ldr	r0, [r6, #4]
    1a5c:	4798      	blx	r3
		msleep(1);
    1a5e:	4b09      	ldr	r3, [pc, #36]	; (1a84 <phy_receive+0x48>)
		result += ReadData(SER(phy), data, len);
    1a60:	1824      	adds	r4, r4, r0
		msleep(1);
    1a62:	2001      	movs	r0, #1
    1a64:	4798      	blx	r3
	} while (result != len && i++ < 10);
    1a66:	42a7      	cmp	r7, r4
    1a68:	d002      	beq.n	1a70 <phy_receive+0x34>
    1a6a:	3d01      	subs	r5, #1
    1a6c:	2d00      	cmp	r5, #0
    1a6e:	d1f1      	bne.n	1a54 <phy_receive+0x18>
    }

    DBG(PHY_DEBUG, "<PHY> Recv: Received(%d/%d): ", data, result, (unsigned char *)"0x%02x ", result, len);

    return result;
}
    1a70:	0020      	movs	r0, r4
    1a72:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
        return ERROR_PTR;
    1a74:	2401      	movs	r4, #1
    1a76:	4264      	negs	r4, r4
    1a78:	e7fa      	b.n	1a70 <phy_receive+0x34>
    1a7a:	46c0      	nop			; (mov r8, r8)
    1a7c:	0000e1e1 	.word	0x0000e1e1
    1a80:	000004b5 	.word	0x000004b5
    1a84:	00000315 	.word	0x00000315

00001a88 <phy_transfer>:
    @rdata: data buffer to receive
    @len: receiving lenght
    @return 0 successful, other value if failed
*/
int phy_transfer(void *ptr_phy, const u8 *wdata, int wlen, u8 *rdata, int rlen)
{
    1a88:	b570      	push	{r4, r5, r6, lr}
    1a8a:	001d      	movs	r5, r3
    int retry = 0;  //determine retries in higher level by protocol used

    DBG_INFO(PHY_DEBUG, "<PHY> Transfer: Write %d bytes, Read %d bytes", wlen, rlen);

    do {
        result = phy_send(ptr_phy, wdata, wlen);
    1a8c:	4b08      	ldr	r3, [pc, #32]	; (1ab0 <phy_transfer+0x28>)
{
    1a8e:	0004      	movs	r4, r0
        result = phy_send(ptr_phy, wdata, wlen);
    1a90:	4798      	blx	r3
        if (result) {
    1a92:	2800      	cmp	r0, #0
    1a94:	d10a      	bne.n	1aac <phy_transfer+0x24>
            DBG_INFO(PHY_DEBUG, "<PHY> Transfer: phy_send failed %d", result);
            result = -2;
        }
        else {
            result = phy_receive(ptr_phy, rdata, rlen);
    1a96:	4b07      	ldr	r3, [pc, #28]	; (1ab4 <phy_transfer+0x2c>)
    1a98:	9a04      	ldr	r2, [sp, #16]
    1a9a:	0029      	movs	r1, r5
    1a9c:	0020      	movs	r0, r4
    1a9e:	4798      	blx	r3
            if (result != rlen) {
    1aa0:	9b04      	ldr	r3, [sp, #16]
    1aa2:	4283      	cmp	r3, r0
    1aa4:	d001      	beq.n	1aaa <phy_transfer+0x22>
                DBG_INFO(PHY_DEBUG, "<PHY> Transfer: phy_receive failed, Got %d bytes", result);
                result = -3;
    1aa6:	2003      	movs	r0, #3
            result = -2;
    1aa8:	4240      	negs	r0, r0
            retry--;

    } while (retry >= 0);

    return result;
}
    1aaa:	bd70      	pop	{r4, r5, r6, pc}
            result = -2;
    1aac:	2002      	movs	r0, #2
    1aae:	e7fb      	b.n	1aa8 <phy_transfer+0x20>
    1ab0:	000018a5 	.word	0x000018a5
    1ab4:	00001a3d 	.word	0x00001a3d

00001ab8 <phy_sib>:
    @data: data buffer to store SIB
    @len: SIB lenght
    @return 0 successful, other value if failed
*/
int phy_sib(void *ptr_phy, u8 *data, int len) 
{
    1ab8:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
    1aba:	0005      	movs	r5, r0
    1abc:	000e      	movs	r6, r1
    1abe:	0014      	movs	r4, r2
    /*
        System information block is just a string coming back from a SIB command
    */

    upd_physical_t * phy = (upd_physical_t *)ptr_phy;
    const u8 val[] = { UPDI_PHY_SYNC, UPDI_KEY | UPDI_KEY_SIB | UPDI_SIB_16BYTES};
    1ac0:	490f      	ldr	r1, [pc, #60]	; (1b00 <phy_sib+0x48>)
    1ac2:	2202      	movs	r2, #2
    1ac4:	a803      	add	r0, sp, #12
    1ac6:	4b0f      	ldr	r3, [pc, #60]	; (1b04 <phy_sib+0x4c>)
    1ac8:	4798      	blx	r3
    const int sib_size = 16;
    int result;

    if (!VALID_PHY(phy))
    1aca:	2d00      	cmp	r5, #0
    1acc:	d012      	beq.n	1af4 <phy_sib+0x3c>
    1ace:	4b0e      	ldr	r3, [pc, #56]	; (1b08 <phy_sib+0x50>)
    1ad0:	682a      	ldr	r2, [r5, #0]
    1ad2:	429a      	cmp	r2, r3
    1ad4:	d10e      	bne.n	1af4 <phy_sib+0x3c>
    1ad6:	2c10      	cmp	r4, #16
    1ad8:	dd00      	ble.n	1adc <phy_sib+0x24>
    1ada:	2410      	movs	r4, #16
    DBG_INFO(PHY_DEBUG, "<PHY> Sib");

    if (len > sib_size)
        len = sib_size;

    result = phy_transfer(phy, val, sizeof(val), data, len);
    1adc:	0028      	movs	r0, r5
    1ade:	9400      	str	r4, [sp, #0]
    1ae0:	0033      	movs	r3, r6
    1ae2:	2202      	movs	r2, #2
    1ae4:	a903      	add	r1, sp, #12
    1ae6:	4d09      	ldr	r5, [pc, #36]	; (1b0c <phy_sib+0x54>)
    1ae8:	47a8      	blx	r5
    if (result != len) {
    1aea:	42a0      	cmp	r0, r4
    1aec:	d105      	bne.n	1afa <phy_sib+0x42>
        DBG_INFO(PHY_DEBUG, "<PHY> Sib: phy_transfer failed %d", result);
        return -3;
    }

    return 0;
    1aee:	2000      	movs	r0, #0
}
    1af0:	b004      	add	sp, #16
    1af2:	bd70      	pop	{r4, r5, r6, pc}
        return ERROR_PTR;
    1af4:	2001      	movs	r0, #1
        return -3;
    1af6:	4240      	negs	r0, r0
    1af8:	e7fa      	b.n	1af0 <phy_sib+0x38>
    1afa:	2003      	movs	r0, #3
    1afc:	e7fb      	b.n	1af6 <phy_sib+0x3e>
    1afe:	46c0      	nop			; (mov r8, r8)
    1b00:	000051cd 	.word	0x000051cd
    1b04:	0000330d 	.word	0x0000330d
    1b08:	0000e1e1 	.word	0x0000e1e1
    1b0c:	00001a89 	.word	0x00001a89

00001b10 <Dummy_Handler>:

/**
 * \brief Default interrupt handler for unused IRQs.
 */
void Dummy_Handler(void)
{
    1b10:	e7fe      	b.n	1b10 <Dummy_Handler>
	...

00001b14 <Reset_Handler>:
        if (pSrc != pDest) {
    1b14:	4811      	ldr	r0, [pc, #68]	; (1b5c <Reset_Handler+0x48>)
    1b16:	4912      	ldr	r1, [pc, #72]	; (1b60 <Reset_Handler+0x4c>)
{
    1b18:	b570      	push	{r4, r5, r6, lr}
        if (pSrc != pDest) {
    1b1a:	4288      	cmp	r0, r1
    1b1c:	d004      	beq.n	1b28 <Reset_Handler+0x14>
    1b1e:	2300      	movs	r3, #0
                for (; pDest < &_erelocate;) {
    1b20:	4c10      	ldr	r4, [pc, #64]	; (1b64 <Reset_Handler+0x50>)
    1b22:	18ca      	adds	r2, r1, r3
    1b24:	42a2      	cmp	r2, r4
    1b26:	d313      	bcc.n	1b50 <Reset_Handler+0x3c>
                *pDest++ = 0;
    1b28:	2100      	movs	r1, #0
    1b2a:	4b0f      	ldr	r3, [pc, #60]	; (1b68 <Reset_Handler+0x54>)
        for (pDest = &_szero; pDest < &_ezero;) {
    1b2c:	4a0f      	ldr	r2, [pc, #60]	; (1b6c <Reset_Handler+0x58>)
    1b2e:	4293      	cmp	r3, r2
    1b30:	d312      	bcc.n	1b58 <Reset_Handler+0x44>
        SCB->VTOR = ((uint32_t) pSrc & SCB_VTOR_TBLOFF_Msk);
    1b32:	21ff      	movs	r1, #255	; 0xff
    1b34:	4b0e      	ldr	r3, [pc, #56]	; (1b70 <Reset_Handler+0x5c>)
    1b36:	4a0f      	ldr	r2, [pc, #60]	; (1b74 <Reset_Handler+0x60>)
    1b38:	438b      	bics	r3, r1
    1b3a:	6093      	str	r3, [r2, #8]
        NVMCTRL->CTRLB.bit.MANW = 1;
    1b3c:	2380      	movs	r3, #128	; 0x80
    1b3e:	4a0e      	ldr	r2, [pc, #56]	; (1b78 <Reset_Handler+0x64>)
    1b40:	6851      	ldr	r1, [r2, #4]
    1b42:	430b      	orrs	r3, r1
    1b44:	6053      	str	r3, [r2, #4]
        __libc_init_array();
    1b46:	4b0d      	ldr	r3, [pc, #52]	; (1b7c <Reset_Handler+0x68>)
    1b48:	4798      	blx	r3
        main();
    1b4a:	4b0d      	ldr	r3, [pc, #52]	; (1b80 <Reset_Handler+0x6c>)
    1b4c:	4798      	blx	r3
    1b4e:	e7fe      	b.n	1b4e <Reset_Handler+0x3a>
                        *pDest++ = *pSrc++;
    1b50:	58c5      	ldr	r5, [r0, r3]
    1b52:	3304      	adds	r3, #4
    1b54:	6015      	str	r5, [r2, #0]
    1b56:	e7e4      	b.n	1b22 <Reset_Handler+0xe>
                *pDest++ = 0;
    1b58:	c302      	stmia	r3!, {r1}
    1b5a:	e7e8      	b.n	1b2e <Reset_Handler+0x1a>
    1b5c:	000052a0 	.word	0x000052a0
    1b60:	20000000 	.word	0x20000000
    1b64:	20000510 	.word	0x20000510
    1b68:	20000510 	.word	0x20000510
    1b6c:	200005f8 	.word	0x200005f8
    1b70:	00000000 	.word	0x00000000
    1b74:	e000ed00 	.word	0xe000ed00
    1b78:	41004000 	.word	0x41004000
    1b7c:	000032c5 	.word	0x000032c5
    1b80:	0000273d 	.word	0x0000273d

00001b84 <USART_0_CLOCK_init>:
}

static inline void hri_gclk_write_PCHCTRL_reg(const void *const hw, uint8_t index, hri_gclk_pchctrl_reg_t data)
{
	GCLK_CRITICAL_SECTION_ENTER();
	((Gclk *)hw)->PCHCTRL[index].reg = data;
    1b84:	4b06      	ldr	r3, [pc, #24]	; (1ba0 <USART_0_CLOCK_init+0x1c>)
    1b86:	2140      	movs	r1, #64	; 0x40
    1b88:	001a      	movs	r2, r3
    1b8a:	32d8      	adds	r2, #216	; 0xd8
    1b8c:	6011      	str	r1, [r2, #0]
    1b8e:	2243      	movs	r2, #67	; 0x43
    1b90:	33c4      	adds	r3, #196	; 0xc4
    1b92:	601a      	str	r2, [r3, #0]
}

static inline void hri_mclk_set_APBCMASK_SERCOM4_bit(const void *const hw)
{
	MCLK_CRITICAL_SECTION_ENTER();
	((Mclk *)hw)->APBCMASK.reg |= MCLK_APBCMASK_SERCOM4;
    1b94:	2310      	movs	r3, #16
    1b96:	4a03      	ldr	r2, [pc, #12]	; (1ba4 <USART_0_CLOCK_init+0x20>)
    1b98:	69d1      	ldr	r1, [r2, #28]
    1b9a:	430b      	orrs	r3, r1
    1b9c:	61d3      	str	r3, [r2, #28]

	hri_gclk_write_PCHCTRL_reg(GCLK, SERCOM4_GCLK_ID_CORE, CONF_GCLK_SERCOM4_CORE_SRC | (1 << GCLK_PCHCTRL_CHEN_Pos));
	hri_gclk_write_PCHCTRL_reg(GCLK, SERCOM4_GCLK_ID_SLOW, CONF_GCLK_SERCOM4_SLOW_SRC | (1 << GCLK_PCHCTRL_CHEN_Pos));

	hri_mclk_set_APBCMASK_SERCOM4_bit(MCLK);
}
    1b9e:	4770      	bx	lr
    1ba0:	40001800 	.word	0x40001800
    1ba4:	40000400 	.word	0x40000400

00001ba8 <USART_0_PORT_init>:
static inline void hri_port_write_PINCFG_PMUXEN_bit(const void *const hw, uint8_t submodule_index, uint8_t index,
                                                    bool value)
{
	uint8_t tmp;
	PORT_CRITICAL_SECTION_ENTER();
	tmp = ((Port *)hw)->Group[submodule_index].PINCFG[index].reg;
    1ba8:	4b0d      	ldr	r3, [pc, #52]	; (1be0 <USART_0_PORT_init+0x38>)
	tmp &= ~PORT_PINCFG_PMUXEN;
    1baa:	2201      	movs	r2, #1
	tmp = ((Port *)hw)->Group[submodule_index].PINCFG[index].reg;
    1bac:	0018      	movs	r0, r3
 * \brief USART pinmux initialization function
 *
 * Set each required pin to USART functionality
 */
void USART_0_PORT_init()
{
    1bae:	b530      	push	{r4, r5, lr}
    1bb0:	30c8      	adds	r0, #200	; 0xc8
    1bb2:	7801      	ldrb	r1, [r0, #0]
	tmp &= ~PORT_PMUX_PMUXE_Msk;
    1bb4:	240f      	movs	r4, #15
	tmp &= ~PORT_PINCFG_PMUXEN;
    1bb6:	4391      	bics	r1, r2
	tmp |= value << PORT_PINCFG_PMUXEN_Pos;
    1bb8:	4311      	orrs	r1, r2
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg = tmp;
    1bba:	7001      	strb	r1, [r0, #0]
	tmp = ((Port *)hw)->Group[submodule_index].PMUX[index].reg;
    1bbc:	0019      	movs	r1, r3
	tmp |= PORT_PMUX_PMUXE(data);
    1bbe:	2003      	movs	r0, #3
	tmp = ((Port *)hw)->Group[submodule_index].PMUX[index].reg;
    1bc0:	31b4      	adds	r1, #180	; 0xb4
    1bc2:	780d      	ldrb	r5, [r1, #0]
	tmp = ((Port *)hw)->Group[submodule_index].PINCFG[index].reg;
    1bc4:	33c9      	adds	r3, #201	; 0xc9
	tmp &= ~PORT_PMUX_PMUXE_Msk;
    1bc6:	43a5      	bics	r5, r4
	tmp |= PORT_PMUX_PMUXE(data);
    1bc8:	4328      	orrs	r0, r5
	((Port *)hw)->Group[submodule_index].PMUX[index].reg = tmp;
    1bca:	7008      	strb	r0, [r1, #0]
	tmp = ((Port *)hw)->Group[submodule_index].PINCFG[index].reg;
    1bcc:	7818      	ldrb	r0, [r3, #0]
	tmp &= ~PORT_PINCFG_PMUXEN;
    1bce:	4390      	bics	r0, r2
	tmp |= value << PORT_PINCFG_PMUXEN_Pos;
    1bd0:	4302      	orrs	r2, r0
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg = tmp;
    1bd2:	701a      	strb	r2, [r3, #0]
	tmp = ((Port *)hw)->Group[submodule_index].PMUX[index].reg;
    1bd4:	780b      	ldrb	r3, [r1, #0]
	tmp &= ~PORT_PMUX_PMUXO_Msk;
    1bd6:	401c      	ands	r4, r3
	tmp |= PORT_PMUX_PMUXO(data);
    1bd8:	2330      	movs	r3, #48	; 0x30
    1bda:	4323      	orrs	r3, r4
	((Port *)hw)->Group[submodule_index].PMUX[index].reg = tmp;
    1bdc:	700b      	strb	r3, [r1, #0]

	gpio_set_pin_function(PB08, PINMUX_PB08D_SERCOM4_PAD0);

	gpio_set_pin_function(PB09, PINMUX_PB09D_SERCOM4_PAD1);
}
    1bde:	bd30      	pop	{r4, r5, pc}
    1be0:	40002800 	.word	0x40002800

00001be4 <USART_0_init>:
 * \brief USART initialization function
 *
 * Enables USART peripheral, clocks and initializes USART driver
 */
void USART_0_init(void)
{
    1be4:	b513      	push	{r0, r1, r4, lr}
	USART_0_CLOCK_init();
    1be6:	4b06      	ldr	r3, [pc, #24]	; (1c00 <USART_0_init+0x1c>)
    1be8:	4798      	blx	r3
	usart_async_init(&USART_0, SERCOM4, USART_0_buffer, USART_0_BUFFER_SIZE, (void *)NULL);
    1bea:	2300      	movs	r3, #0
    1bec:	4a05      	ldr	r2, [pc, #20]	; (1c04 <USART_0_init+0x20>)
    1bee:	9300      	str	r3, [sp, #0]
    1bf0:	4905      	ldr	r1, [pc, #20]	; (1c08 <USART_0_init+0x24>)
    1bf2:	3320      	adds	r3, #32
    1bf4:	4c05      	ldr	r4, [pc, #20]	; (1c0c <USART_0_init+0x28>)
    1bf6:	4806      	ldr	r0, [pc, #24]	; (1c10 <USART_0_init+0x2c>)
    1bf8:	47a0      	blx	r4
	USART_0_PORT_init();
    1bfa:	4b06      	ldr	r3, [pc, #24]	; (1c14 <USART_0_init+0x30>)
    1bfc:	4798      	blx	r3
}
    1bfe:	bd13      	pop	{r0, r1, r4, pc}
    1c00:	00001b85 	.word	0x00001b85
    1c04:	2000052c 	.word	0x2000052c
    1c08:	42001000 	.word	0x42001000
    1c0c:	00001e19 	.word	0x00001e19
    1c10:	200005a8 	.word	0x200005a8
    1c14:	00001ba9 	.word	0x00001ba9

00001c18 <system_init>:

void system_init(void)
{
    1c18:	b510      	push	{r4, lr}
 * Currently the following initialization functions are supported:
 *  - System clock initialization
 */
static inline void init_mcu(void)
{
	_init_chip();
    1c1a:	4b02      	ldr	r3, [pc, #8]	; (1c24 <system_init+0xc>)
    1c1c:	4798      	blx	r3
	init_mcu();

	USART_0_init();
    1c1e:	4b02      	ldr	r3, [pc, #8]	; (1c28 <system_init+0x10>)
    1c20:	4798      	blx	r3
}
    1c22:	bd10      	pop	{r4, pc}
    1c24:	000021b5 	.word	0x000021b5
    1c28:	00001be5 	.word	0x00001be5

00001c2c <atomic_enter_critical>:
 */
__STATIC_FORCEINLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
    1c2c:	f3ef 8310 	mrs	r3, PRIMASK
/**
 * \brief Disable interrupts, enter critical section
 */
void atomic_enter_critical(hal_atomic_t volatile *atomic)
{
	*atomic = __get_PRIMASK();
    1c30:	6003      	str	r3, [r0, #0]
  __ASM volatile ("cpsid i" : : : "memory");
    1c32:	b672      	cpsid	i
  \details Ensures the apparent order of the explicit memory operations before
           and after the instruction, without ensuring their completion.
 */
__STATIC_FORCEINLINE void __DMB(void)
{
  __ASM volatile ("dmb 0xF":::"memory");
    1c34:	f3bf 8f5f 	dmb	sy
	__disable_irq();
	__DMB();
}
    1c38:	4770      	bx	lr

00001c3a <atomic_leave_critical>:
    1c3a:	f3bf 8f5f 	dmb	sy
 * \brief Exit atomic section
 */
void atomic_leave_critical(hal_atomic_t volatile *atomic)
{
	__DMB();
	__set_PRIMASK(*atomic);
    1c3e:	6803      	ldr	r3, [r0, #0]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
    1c40:	f383 8810 	msr	PRIMASK, r3
}
    1c44:	4770      	bx	lr
	...

00001c48 <delay_ms>:
/**
 * \brief Perform delay in ms
 */
void delay_ms(const uint16_t ms)
{
	_delay_cycles(hardware, _get_cycles_for_ms(ms));
    1c48:	4b04      	ldr	r3, [pc, #16]	; (1c5c <delay_ms+0x14>)
{
    1c4a:	b510      	push	{r4, lr}
	_delay_cycles(hardware, _get_cycles_for_ms(ms));
    1c4c:	681c      	ldr	r4, [r3, #0]
    1c4e:	4b04      	ldr	r3, [pc, #16]	; (1c60 <delay_ms+0x18>)
    1c50:	4798      	blx	r3
    1c52:	4b04      	ldr	r3, [pc, #16]	; (1c64 <delay_ms+0x1c>)
    1c54:	0001      	movs	r1, r0
    1c56:	0020      	movs	r0, r4
    1c58:	4798      	blx	r3
}
    1c5a:	bd10      	pop	{r4, pc}
    1c5c:	2000054c 	.word	0x2000054c
    1c60:	00002191 	.word	0x00002191
    1c64:	000021ad 	.word	0x000021ad

00001c68 <io_write>:

/**
 * \brief I/O write interface
 */
int32_t io_write(struct io_descriptor *const io_descr, const uint8_t *const buf, const uint16_t length)
{
    1c68:	b570      	push	{r4, r5, r6, lr}
    1c6a:	0004      	movs	r4, r0
    1c6c:	000d      	movs	r5, r1
    1c6e:	0016      	movs	r6, r2
	ASSERT(io_descr && buf);
    1c70:	2800      	cmp	r0, #0
    1c72:	d003      	beq.n	1c7c <io_write+0x14>
    1c74:	0008      	movs	r0, r1
    1c76:	1e43      	subs	r3, r0, #1
    1c78:	4198      	sbcs	r0, r3
    1c7a:	b2c0      	uxtb	r0, r0
    1c7c:	2234      	movs	r2, #52	; 0x34
    1c7e:	4904      	ldr	r1, [pc, #16]	; (1c90 <io_write+0x28>)
    1c80:	4b04      	ldr	r3, [pc, #16]	; (1c94 <io_write+0x2c>)
    1c82:	4798      	blx	r3
	return io_descr->write(io_descr, buf, length);
    1c84:	0032      	movs	r2, r6
    1c86:	0029      	movs	r1, r5
    1c88:	6823      	ldr	r3, [r4, #0]
    1c8a:	0020      	movs	r0, r4
    1c8c:	4798      	blx	r3
}
    1c8e:	bd70      	pop	{r4, r5, r6, pc}
    1c90:	000051cf 	.word	0x000051cf
    1c94:	0000207d 	.word	0x0000207d

00001c98 <io_read>:

/**
 * \brief I/O read interface
 */
int32_t io_read(struct io_descriptor *const io_descr, uint8_t *const buf, const uint16_t length)
{
    1c98:	b570      	push	{r4, r5, r6, lr}
    1c9a:	0004      	movs	r4, r0
    1c9c:	000d      	movs	r5, r1
    1c9e:	0016      	movs	r6, r2
	ASSERT(io_descr && buf);
    1ca0:	2800      	cmp	r0, #0
    1ca2:	d003      	beq.n	1cac <io_read+0x14>
    1ca4:	0008      	movs	r0, r1
    1ca6:	1e43      	subs	r3, r0, #1
    1ca8:	4198      	sbcs	r0, r3
    1caa:	b2c0      	uxtb	r0, r0
    1cac:	223d      	movs	r2, #61	; 0x3d
    1cae:	4904      	ldr	r1, [pc, #16]	; (1cc0 <io_read+0x28>)
    1cb0:	4b04      	ldr	r3, [pc, #16]	; (1cc4 <io_read+0x2c>)
    1cb2:	4798      	blx	r3
	return io_descr->read(io_descr, buf, length);
    1cb4:	0032      	movs	r2, r6
    1cb6:	0029      	movs	r1, r5
    1cb8:	6863      	ldr	r3, [r4, #4]
    1cba:	0020      	movs	r0, r4
    1cbc:	4798      	blx	r3
}
    1cbe:	bd70      	pop	{r4, r5, r6, pc}
    1cc0:	000051cf 	.word	0x000051cf
    1cc4:	0000207d 	.word	0x0000207d

00001cc8 <usart_transmission_complete>:
 */
static void usart_transmission_complete(struct _usart_async_device *device)
{
	struct usart_async_descriptor *descr = CONTAINER_OF(device, struct usart_async_descriptor, device);

	descr->stat = 0;
    1cc8:	2300      	movs	r3, #0
	struct usart_async_descriptor *descr = CONTAINER_OF(device, struct usart_async_descriptor, device);
    1cca:	3808      	subs	r0, #8
{
    1ccc:	b510      	push	{r4, lr}
	descr->stat = 0;
    1cce:	6303      	str	r3, [r0, #48]	; 0x30
	if (descr->usart_cb.tx_done) {
    1cd0:	6a43      	ldr	r3, [r0, #36]	; 0x24
    1cd2:	2b00      	cmp	r3, #0
    1cd4:	d000      	beq.n	1cd8 <usart_transmission_complete+0x10>
		descr->usart_cb.tx_done(descr);
    1cd6:	4798      	blx	r3
	}
}
    1cd8:	bd10      	pop	{r4, pc}

00001cda <usart_error>:
 */
static void usart_error(struct _usart_async_device *device)
{
	struct usart_async_descriptor *descr = CONTAINER_OF(device, struct usart_async_descriptor, device);

	descr->stat = 0;
    1cda:	2300      	movs	r3, #0
	struct usart_async_descriptor *descr = CONTAINER_OF(device, struct usart_async_descriptor, device);
    1cdc:	3808      	subs	r0, #8
{
    1cde:	b510      	push	{r4, lr}
	descr->stat = 0;
    1ce0:	6303      	str	r3, [r0, #48]	; 0x30
	if (descr->usart_cb.error) {
    1ce2:	6ac3      	ldr	r3, [r0, #44]	; 0x2c
    1ce4:	2b00      	cmp	r3, #0
    1ce6:	d000      	beq.n	1cea <usart_error+0x10>
		descr->usart_cb.error(descr);
    1ce8:	4798      	blx	r3
	}
}
    1cea:	bd10      	pop	{r4, pc}

00001cec <usart_fill_rx_buffer>:
{
    1cec:	b510      	push	{r4, lr}
	struct usart_async_descriptor *descr = CONTAINER_OF(device, struct usart_async_descriptor, device);
    1cee:	0004      	movs	r4, r0
	ringbuffer_put(&descr->rx, data);
    1cf0:	4b04      	ldr	r3, [pc, #16]	; (1d04 <usart_fill_rx_buffer+0x18>)
    1cf2:	302c      	adds	r0, #44	; 0x2c
    1cf4:	4798      	blx	r3
	if (descr->usart_cb.rx_done) {
    1cf6:	6a23      	ldr	r3, [r4, #32]
	struct usart_async_descriptor *descr = CONTAINER_OF(device, struct usart_async_descriptor, device);
    1cf8:	3c08      	subs	r4, #8
	if (descr->usart_cb.rx_done) {
    1cfa:	2b00      	cmp	r3, #0
    1cfc:	d001      	beq.n	1d02 <usart_fill_rx_buffer+0x16>
		descr->usart_cb.rx_done(descr);
    1cfe:	0020      	movs	r0, r4
    1d00:	4798      	blx	r3
}
    1d02:	bd10      	pop	{r4, pc}
    1d04:	00002109 	.word	0x00002109

00001d08 <usart_async_write>:
{
    1d08:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    1d0a:	0004      	movs	r4, r0
    1d0c:	000e      	movs	r6, r1
    1d0e:	0015      	movs	r5, r2
	ASSERT(descr && buf && length);
    1d10:	2800      	cmp	r0, #0
    1d12:	d004      	beq.n	1d1e <usart_async_write+0x16>
    1d14:	1e08      	subs	r0, r1, #0
    1d16:	d002      	beq.n	1d1e <usart_async_write+0x16>
    1d18:	0010      	movs	r0, r2
    1d1a:	1e43      	subs	r3, r0, #1
    1d1c:	4198      	sbcs	r0, r3
    1d1e:	2701      	movs	r7, #1
    1d20:	223c      	movs	r2, #60	; 0x3c
    1d22:	4038      	ands	r0, r7
    1d24:	32ff      	adds	r2, #255	; 0xff
    1d26:	490c      	ldr	r1, [pc, #48]	; (1d58 <usart_async_write+0x50>)
    1d28:	4b0c      	ldr	r3, [pc, #48]	; (1d5c <usart_async_write+0x54>)
    1d2a:	4798      	blx	r3
	if (descr->tx_por != descr->tx_buffer_length) {
    1d2c:	0022      	movs	r2, r4
    1d2e:	1da3      	adds	r3, r4, #6
    1d30:	324c      	adds	r2, #76	; 0x4c
    1d32:	8fd8      	ldrh	r0, [r3, #62]	; 0x3e
    1d34:	8811      	ldrh	r1, [r2, #0]
    1d36:	4288      	cmp	r0, r1
    1d38:	d10a      	bne.n	1d50 <usart_async_write+0x48>
	descr->tx_buffer        = (uint8_t *)buf;
    1d3a:	64a6      	str	r6, [r4, #72]	; 0x48
	_usart_async_enable_byte_sent_irq(&descr->device);
    1d3c:	0020      	movs	r0, r4
	descr->tx_buffer_length = length;
    1d3e:	8015      	strh	r5, [r2, #0]
	descr->tx_por           = 0;
    1d40:	2200      	movs	r2, #0
	_usart_async_enable_byte_sent_irq(&descr->device);
    1d42:	3008      	adds	r0, #8
	descr->tx_por           = 0;
    1d44:	87da      	strh	r2, [r3, #62]	; 0x3e
	descr->stat             = USART_ASYNC_STATUS_BUSY;
    1d46:	6327      	str	r7, [r4, #48]	; 0x30
	_usart_async_enable_byte_sent_irq(&descr->device);
    1d48:	4b05      	ldr	r3, [pc, #20]	; (1d60 <usart_async_write+0x58>)
    1d4a:	4798      	blx	r3
	return (int32_t)length;
    1d4c:	0028      	movs	r0, r5
}
    1d4e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		return ERR_NO_RESOURCE;
    1d50:	201c      	movs	r0, #28
    1d52:	4240      	negs	r0, r0
    1d54:	e7fb      	b.n	1d4e <usart_async_write+0x46>
    1d56:	46c0      	nop			; (mov r8, r8)
    1d58:	000051e3 	.word	0x000051e3
    1d5c:	0000207d 	.word	0x0000207d
    1d60:	00002669 	.word	0x00002669

00001d64 <usart_process_byte_sent>:
	if (descr->tx_por != descr->tx_buffer_length) {
    1d64:	0001      	movs	r1, r0
{
    1d66:	b510      	push	{r4, lr}
    1d68:	0004      	movs	r4, r0
	if (descr->tx_por != descr->tx_buffer_length) {
    1d6a:	8f83      	ldrh	r3, [r0, #60]	; 0x3c
    1d6c:	3044      	adds	r0, #68	; 0x44
    1d6e:	8800      	ldrh	r0, [r0, #0]
    1d70:	3908      	subs	r1, #8
    1d72:	4298      	cmp	r0, r3
    1d74:	d00a      	beq.n	1d8c <usart_process_byte_sent+0x28>
		_usart_async_write_byte(&descr->device, descr->tx_buffer[descr->tx_por++]);
    1d76:	6c89      	ldr	r1, [r1, #72]	; 0x48
    1d78:	1c58      	adds	r0, r3, #1
    1d7a:	87a0      	strh	r0, [r4, #60]	; 0x3c
    1d7c:	5cc9      	ldrb	r1, [r1, r3]
    1d7e:	0020      	movs	r0, r4
    1d80:	4b04      	ldr	r3, [pc, #16]	; (1d94 <usart_process_byte_sent+0x30>)
    1d82:	4798      	blx	r3
		_usart_async_enable_byte_sent_irq(&descr->device);
    1d84:	0020      	movs	r0, r4
    1d86:	4b04      	ldr	r3, [pc, #16]	; (1d98 <usart_process_byte_sent+0x34>)
		_usart_async_enable_tx_done_irq(&descr->device);
    1d88:	4798      	blx	r3
}
    1d8a:	bd10      	pop	{r4, pc}
		_usart_async_enable_tx_done_irq(&descr->device);
    1d8c:	0020      	movs	r0, r4
    1d8e:	4b03      	ldr	r3, [pc, #12]	; (1d9c <usart_process_byte_sent+0x38>)
    1d90:	e7fa      	b.n	1d88 <usart_process_byte_sent+0x24>
    1d92:	46c0      	nop			; (mov r8, r8)
    1d94:	00002661 	.word	0x00002661
    1d98:	00002669 	.word	0x00002669
    1d9c:	00002671 	.word	0x00002671

00001da0 <usart_async_read>:
{
    1da0:	b5f0      	push	{r4, r5, r6, r7, lr}
    1da2:	0005      	movs	r5, r0
    1da4:	b085      	sub	sp, #20
    1da6:	000e      	movs	r6, r1
    1da8:	0014      	movs	r4, r2
	ASSERT(descr && buf && length);
    1daa:	2800      	cmp	r0, #0
    1dac:	d004      	beq.n	1db8 <usart_async_read+0x18>
    1dae:	1e08      	subs	r0, r1, #0
    1db0:	d002      	beq.n	1db8 <usart_async_read+0x18>
    1db2:	0010      	movs	r0, r2
    1db4:	1e43      	subs	r3, r0, #1
    1db6:	4198      	sbcs	r0, r3
    1db8:	22ac      	movs	r2, #172	; 0xac
    1dba:	4911      	ldr	r1, [pc, #68]	; (1e00 <usart_async_read+0x60>)
    1dbc:	0052      	lsls	r2, r2, #1
    1dbe:	4b11      	ldr	r3, [pc, #68]	; (1e04 <usart_async_read+0x64>)
    1dc0:	4798      	blx	r3
	num = ringbuffer_num(&descr->rx);
    1dc2:	3534      	adds	r5, #52	; 0x34
	CRITICAL_SECTION_ENTER()
    1dc4:	a803      	add	r0, sp, #12
    1dc6:	4b10      	ldr	r3, [pc, #64]	; (1e08 <usart_async_read+0x68>)
    1dc8:	4798      	blx	r3
	num = ringbuffer_num(&descr->rx);
    1dca:	4b10      	ldr	r3, [pc, #64]	; (1e0c <usart_async_read+0x6c>)
    1dcc:	0028      	movs	r0, r5
    1dce:	4798      	blx	r3
	CRITICAL_SECTION_LEAVE()
    1dd0:	4b0f      	ldr	r3, [pc, #60]	; (1e10 <usart_async_read+0x70>)
	num = ringbuffer_num(&descr->rx);
    1dd2:	0007      	movs	r7, r0
	CRITICAL_SECTION_LEAVE()
    1dd4:	a803      	add	r0, sp, #12
    1dd6:	4798      	blx	r3
    1dd8:	1933      	adds	r3, r6, r4
	while ((was_read < num) && (was_read < length)) {
    1dda:	0034      	movs	r4, r6
    1ddc:	19f7      	adds	r7, r6, r7
    1dde:	9301      	str	r3, [sp, #4]
    1de0:	1ba0      	subs	r0, r4, r6
    1de2:	b280      	uxth	r0, r0
    1de4:	42bc      	cmp	r4, r7
    1de6:	d002      	beq.n	1dee <usart_async_read+0x4e>
    1de8:	9b01      	ldr	r3, [sp, #4]
    1dea:	429c      	cmp	r4, r3
    1dec:	d101      	bne.n	1df2 <usart_async_read+0x52>
}
    1dee:	b005      	add	sp, #20
    1df0:	bdf0      	pop	{r4, r5, r6, r7, pc}
		ringbuffer_get(&descr->rx, &buf[was_read++]);
    1df2:	0021      	movs	r1, r4
    1df4:	0028      	movs	r0, r5
    1df6:	4b07      	ldr	r3, [pc, #28]	; (1e14 <usart_async_read+0x74>)
    1df8:	4798      	blx	r3
    1dfa:	3401      	adds	r4, #1
    1dfc:	e7f0      	b.n	1de0 <usart_async_read+0x40>
    1dfe:	46c0      	nop			; (mov r8, r8)
    1e00:	000051e3 	.word	0x000051e3
    1e04:	0000207d 	.word	0x0000207d
    1e08:	00001c2d 	.word	0x00001c2d
    1e0c:	00002149 	.word	0x00002149
    1e10:	00001c3b 	.word	0x00001c3b
    1e14:	000020c5 	.word	0x000020c5

00001e18 <usart_async_init>:
{
    1e18:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    1e1a:	0004      	movs	r4, r0
    1e1c:	000d      	movs	r5, r1
    1e1e:	0016      	movs	r6, r2
    1e20:	001f      	movs	r7, r3
	ASSERT(descr && hw && rx_buffer && rx_buffer_length);
    1e22:	2800      	cmp	r0, #0
    1e24:	d006      	beq.n	1e34 <usart_async_init+0x1c>
    1e26:	1e08      	subs	r0, r1, #0
    1e28:	d004      	beq.n	1e34 <usart_async_init+0x1c>
    1e2a:	1e10      	subs	r0, r2, #0
    1e2c:	d002      	beq.n	1e34 <usart_async_init+0x1c>
    1e2e:	0018      	movs	r0, r3
    1e30:	1e43      	subs	r3, r0, #1
    1e32:	4198      	sbcs	r0, r3
    1e34:	223a      	movs	r2, #58	; 0x3a
    1e36:	4911      	ldr	r1, [pc, #68]	; (1e7c <usart_async_init+0x64>)
    1e38:	4b11      	ldr	r3, [pc, #68]	; (1e80 <usart_async_init+0x68>)
    1e3a:	4798      	blx	r3
	if (ERR_NONE != ringbuffer_init(&descr->rx, rx_buffer, rx_buffer_length)) {
    1e3c:	0020      	movs	r0, r4
    1e3e:	003a      	movs	r2, r7
    1e40:	0031      	movs	r1, r6
    1e42:	3034      	adds	r0, #52	; 0x34
    1e44:	4b0f      	ldr	r3, [pc, #60]	; (1e84 <usart_async_init+0x6c>)
    1e46:	4798      	blx	r3
    1e48:	2800      	cmp	r0, #0
    1e4a:	d113      	bne.n	1e74 <usart_async_init+0x5c>
	init_status = _usart_async_init(&descr->device, hw);
    1e4c:	0020      	movs	r0, r4
    1e4e:	0029      	movs	r1, r5
    1e50:	3008      	adds	r0, #8
    1e52:	4b0d      	ldr	r3, [pc, #52]	; (1e88 <usart_async_init+0x70>)
    1e54:	4798      	blx	r3
	if (init_status) {
    1e56:	2800      	cmp	r0, #0
    1e58:	d10b      	bne.n	1e72 <usart_async_init+0x5a>
	descr->io.read  = usart_async_read;
    1e5a:	4b0c      	ldr	r3, [pc, #48]	; (1e8c <usart_async_init+0x74>)
    1e5c:	6063      	str	r3, [r4, #4]
	descr->io.write = usart_async_write;
    1e5e:	4b0c      	ldr	r3, [pc, #48]	; (1e90 <usart_async_init+0x78>)
    1e60:	6023      	str	r3, [r4, #0]
	descr->device.usart_cb.tx_byte_sent = usart_process_byte_sent;
    1e62:	4b0c      	ldr	r3, [pc, #48]	; (1e94 <usart_async_init+0x7c>)
    1e64:	60a3      	str	r3, [r4, #8]
	descr->device.usart_cb.rx_done_cb   = usart_fill_rx_buffer;
    1e66:	4b0c      	ldr	r3, [pc, #48]	; (1e98 <usart_async_init+0x80>)
    1e68:	60e3      	str	r3, [r4, #12]
	descr->device.usart_cb.tx_done_cb   = usart_transmission_complete;
    1e6a:	4b0c      	ldr	r3, [pc, #48]	; (1e9c <usart_async_init+0x84>)
    1e6c:	6123      	str	r3, [r4, #16]
	descr->device.usart_cb.error_cb     = usart_error;
    1e6e:	4b0c      	ldr	r3, [pc, #48]	; (1ea0 <usart_async_init+0x88>)
    1e70:	6163      	str	r3, [r4, #20]
}
    1e72:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		return ERR_INVALID_ARG;
    1e74:	200d      	movs	r0, #13
    1e76:	4240      	negs	r0, r0
    1e78:	e7fb      	b.n	1e72 <usart_async_init+0x5a>
    1e7a:	46c0      	nop			; (mov r8, r8)
    1e7c:	000051e3 	.word	0x000051e3
    1e80:	0000207d 	.word	0x0000207d
    1e84:	00002085 	.word	0x00002085
    1e88:	0000258d 	.word	0x0000258d
    1e8c:	00001da1 	.word	0x00001da1
    1e90:	00001d09 	.word	0x00001d09
    1e94:	00001d65 	.word	0x00001d65
    1e98:	00001ced 	.word	0x00001ced
    1e9c:	00001cc9 	.word	0x00001cc9
    1ea0:	00001cdb 	.word	0x00001cdb

00001ea4 <usart_async_enable>:
{
    1ea4:	b510      	push	{r4, lr}
    1ea6:	0004      	movs	r4, r0
	ASSERT(descr);
    1ea8:	1e43      	subs	r3, r0, #1
    1eaa:	4198      	sbcs	r0, r3
    1eac:	2261      	movs	r2, #97	; 0x61
    1eae:	4905      	ldr	r1, [pc, #20]	; (1ec4 <usart_async_enable+0x20>)
    1eb0:	b2c0      	uxtb	r0, r0
    1eb2:	4b05      	ldr	r3, [pc, #20]	; (1ec8 <usart_async_enable+0x24>)
    1eb4:	4798      	blx	r3
	_usart_async_enable(&descr->device);
    1eb6:	0020      	movs	r0, r4
    1eb8:	4b04      	ldr	r3, [pc, #16]	; (1ecc <usart_async_enable+0x28>)
    1eba:	3008      	adds	r0, #8
    1ebc:	4798      	blx	r3
}
    1ebe:	2000      	movs	r0, #0
    1ec0:	bd10      	pop	{r4, pc}
    1ec2:	46c0      	nop			; (mov r8, r8)
    1ec4:	000051e3 	.word	0x000051e3
    1ec8:	0000207d 	.word	0x0000207d
    1ecc:	000025f9 	.word	0x000025f9

00001ed0 <usart_async_disable>:
{
    1ed0:	b510      	push	{r4, lr}
    1ed2:	0004      	movs	r4, r0
	ASSERT(descr);
    1ed4:	1e43      	subs	r3, r0, #1
    1ed6:	4198      	sbcs	r0, r3
    1ed8:	226c      	movs	r2, #108	; 0x6c
    1eda:	4905      	ldr	r1, [pc, #20]	; (1ef0 <usart_async_disable+0x20>)
    1edc:	b2c0      	uxtb	r0, r0
    1ede:	4b05      	ldr	r3, [pc, #20]	; (1ef4 <usart_async_disable+0x24>)
    1ee0:	4798      	blx	r3
	_usart_async_disable(&descr->device);
    1ee2:	0020      	movs	r0, r4
    1ee4:	4b04      	ldr	r3, [pc, #16]	; (1ef8 <usart_async_disable+0x28>)
    1ee6:	3008      	adds	r0, #8
    1ee8:	4798      	blx	r3
}
    1eea:	2000      	movs	r0, #0
    1eec:	bd10      	pop	{r4, pc}
    1eee:	46c0      	nop			; (mov r8, r8)
    1ef0:	000051e3 	.word	0x000051e3
    1ef4:	0000207d 	.word	0x0000207d
    1ef8:	00002611 	.word	0x00002611

00001efc <usart_async_get_io_descriptor>:
{
    1efc:	b570      	push	{r4, r5, r6, lr}
    1efe:	0004      	movs	r4, r0
    1f00:	000d      	movs	r5, r1
	ASSERT(descr && io);
    1f02:	2800      	cmp	r0, #0
    1f04:	d003      	beq.n	1f0e <usart_async_get_io_descriptor+0x12>
    1f06:	0008      	movs	r0, r1
    1f08:	1e43      	subs	r3, r0, #1
    1f0a:	4198      	sbcs	r0, r3
    1f0c:	b2c0      	uxtb	r0, r0
    1f0e:	2277      	movs	r2, #119	; 0x77
    1f10:	4902      	ldr	r1, [pc, #8]	; (1f1c <usart_async_get_io_descriptor+0x20>)
    1f12:	4b03      	ldr	r3, [pc, #12]	; (1f20 <usart_async_get_io_descriptor+0x24>)
    1f14:	4798      	blx	r3
	*io = &descr->io;
    1f16:	602c      	str	r4, [r5, #0]
}
    1f18:	2000      	movs	r0, #0
    1f1a:	bd70      	pop	{r4, r5, r6, pc}
    1f1c:	000051e3 	.word	0x000051e3
    1f20:	0000207d 	.word	0x0000207d

00001f24 <usart_async_register_callback>:
{
    1f24:	b570      	push	{r4, r5, r6, lr}
    1f26:	0005      	movs	r5, r0
	ASSERT(descr);
    1f28:	1e43      	subs	r3, r0, #1
    1f2a:	4198      	sbcs	r0, r3
{
    1f2c:	000e      	movs	r6, r1
    1f2e:	0014      	movs	r4, r2
	ASSERT(descr);
    1f30:	b2c0      	uxtb	r0, r0
    1f32:	2283      	movs	r2, #131	; 0x83
    1f34:	4913      	ldr	r1, [pc, #76]	; (1f84 <usart_async_register_callback+0x60>)
    1f36:	4b14      	ldr	r3, [pc, #80]	; (1f88 <usart_async_register_callback+0x64>)
    1f38:	4798      	blx	r3
	switch (type) {
    1f3a:	2e01      	cmp	r6, #1
    1f3c:	d011      	beq.n	1f62 <usart_async_register_callback+0x3e>
    1f3e:	2e00      	cmp	r6, #0
    1f40:	d004      	beq.n	1f4c <usart_async_register_callback+0x28>
    1f42:	2e02      	cmp	r6, #2
    1f44:	d015      	beq.n	1f72 <usart_async_register_callback+0x4e>
		return ERR_INVALID_ARG;
    1f46:	200d      	movs	r0, #13
    1f48:	4240      	negs	r0, r0
    1f4a:	e009      	b.n	1f60 <usart_async_register_callback+0x3c>
		descr->usart_cb.rx_done = cb;
    1f4c:	62ac      	str	r4, [r5, #40]	; 0x28
		_usart_async_set_irq_state(&descr->device, USART_ASYNC_RX_DONE, NULL != cb);
    1f4e:	0028      	movs	r0, r5
    1f50:	1e62      	subs	r2, r4, #1
    1f52:	4194      	sbcs	r4, r2
    1f54:	2101      	movs	r1, #1
    1f56:	b2e2      	uxtb	r2, r4
    1f58:	3008      	adds	r0, #8
		_usart_async_set_irq_state(&descr->device, USART_ASYNC_ERROR, NULL != cb);
    1f5a:	4b0c      	ldr	r3, [pc, #48]	; (1f8c <usart_async_register_callback+0x68>)
    1f5c:	4798      	blx	r3
	return ERR_NONE;
    1f5e:	2000      	movs	r0, #0
}
    1f60:	bd70      	pop	{r4, r5, r6, pc}
		descr->usart_cb.tx_done = cb;
    1f62:	626c      	str	r4, [r5, #36]	; 0x24
		_usart_async_set_irq_state(&descr->device, USART_ASYNC_TX_DONE, NULL != cb);
    1f64:	0028      	movs	r0, r5
    1f66:	1e62      	subs	r2, r4, #1
    1f68:	4194      	sbcs	r4, r2
    1f6a:	3008      	adds	r0, #8
    1f6c:	b2e2      	uxtb	r2, r4
    1f6e:	2102      	movs	r1, #2
    1f70:	e7f3      	b.n	1f5a <usart_async_register_callback+0x36>
		descr->usart_cb.error = cb;
    1f72:	62ec      	str	r4, [r5, #44]	; 0x2c
		_usart_async_set_irq_state(&descr->device, USART_ASYNC_ERROR, NULL != cb);
    1f74:	0028      	movs	r0, r5
    1f76:	1e62      	subs	r2, r4, #1
    1f78:	4194      	sbcs	r4, r2
    1f7a:	3008      	adds	r0, #8
    1f7c:	b2e2      	uxtb	r2, r4
    1f7e:	2103      	movs	r1, #3
    1f80:	e7eb      	b.n	1f5a <usart_async_register_callback+0x36>
    1f82:	46c0      	nop			; (mov r8, r8)
    1f84:	000051e3 	.word	0x000051e3
    1f88:	0000207d 	.word	0x0000207d
    1f8c:	00002679 	.word	0x00002679

00001f90 <usart_async_set_baud_rate>:
{
    1f90:	b570      	push	{r4, r5, r6, lr}
    1f92:	0004      	movs	r4, r0
	ASSERT(descr);
    1f94:	1e43      	subs	r3, r0, #1
    1f96:	4198      	sbcs	r0, r3
{
    1f98:	000d      	movs	r5, r1
	ASSERT(descr);
    1f9a:	22aa      	movs	r2, #170	; 0xaa
    1f9c:	b2c0      	uxtb	r0, r0
    1f9e:	4905      	ldr	r1, [pc, #20]	; (1fb4 <usart_async_set_baud_rate+0x24>)
    1fa0:	4b05      	ldr	r3, [pc, #20]	; (1fb8 <usart_async_set_baud_rate+0x28>)
    1fa2:	4798      	blx	r3
	_usart_async_set_baud_rate(&descr->device, baud_rate);
    1fa4:	0020      	movs	r0, r4
    1fa6:	0029      	movs	r1, r5
    1fa8:	3008      	adds	r0, #8
    1faa:	4b04      	ldr	r3, [pc, #16]	; (1fbc <usart_async_set_baud_rate+0x2c>)
    1fac:	4798      	blx	r3
}
    1fae:	2000      	movs	r0, #0
    1fb0:	bd70      	pop	{r4, r5, r6, pc}
    1fb2:	46c0      	nop			; (mov r8, r8)
    1fb4:	000051e3 	.word	0x000051e3
    1fb8:	0000207d 	.word	0x0000207d
    1fbc:	00002621 	.word	0x00002621

00001fc0 <usart_async_set_parity>:
{
    1fc0:	b570      	push	{r4, r5, r6, lr}
    1fc2:	0004      	movs	r4, r0
	ASSERT(descr);
    1fc4:	1e43      	subs	r3, r0, #1
    1fc6:	4198      	sbcs	r0, r3
{
    1fc8:	000d      	movs	r5, r1
	ASSERT(descr);
    1fca:	22cb      	movs	r2, #203	; 0xcb
    1fcc:	b2c0      	uxtb	r0, r0
    1fce:	4905      	ldr	r1, [pc, #20]	; (1fe4 <usart_async_set_parity+0x24>)
    1fd0:	4b05      	ldr	r3, [pc, #20]	; (1fe8 <usart_async_set_parity+0x28>)
    1fd2:	4798      	blx	r3
	_usart_async_set_parity(&descr->device, parity);
    1fd4:	0020      	movs	r0, r4
    1fd6:	0029      	movs	r1, r5
    1fd8:	3008      	adds	r0, #8
    1fda:	4b04      	ldr	r3, [pc, #16]	; (1fec <usart_async_set_parity+0x2c>)
    1fdc:	4798      	blx	r3
}
    1fde:	2000      	movs	r0, #0
    1fe0:	bd70      	pop	{r4, r5, r6, pc}
    1fe2:	46c0      	nop			; (mov r8, r8)
    1fe4:	000051e3 	.word	0x000051e3
    1fe8:	0000207d 	.word	0x0000207d
    1fec:	00002631 	.word	0x00002631

00001ff0 <usart_async_set_stopbits>:
{
    1ff0:	b570      	push	{r4, r5, r6, lr}
    1ff2:	0004      	movs	r4, r0
	ASSERT(descr);
    1ff4:	1e43      	subs	r3, r0, #1
    1ff6:	4198      	sbcs	r0, r3
{
    1ff8:	000d      	movs	r5, r1
	ASSERT(descr);
    1ffa:	22d6      	movs	r2, #214	; 0xd6
    1ffc:	b2c0      	uxtb	r0, r0
    1ffe:	4905      	ldr	r1, [pc, #20]	; (2014 <STACK_SIZE+0x14>)
    2000:	4b05      	ldr	r3, [pc, #20]	; (2018 <STACK_SIZE+0x18>)
    2002:	4798      	blx	r3
	_usart_async_set_stop_bits(&descr->device, stop_bits);
    2004:	0020      	movs	r0, r4
    2006:	0029      	movs	r1, r5
    2008:	3008      	adds	r0, #8
    200a:	4b04      	ldr	r3, [pc, #16]	; (201c <STACK_SIZE+0x1c>)
    200c:	4798      	blx	r3
}
    200e:	2000      	movs	r0, #0
    2010:	bd70      	pop	{r4, r5, r6, pc}
    2012:	46c0      	nop			; (mov r8, r8)
    2014:	000051e3 	.word	0x000051e3
    2018:	0000207d 	.word	0x0000207d
    201c:	00002641 	.word	0x00002641

00002020 <usart_async_set_character_size>:
{
    2020:	b570      	push	{r4, r5, r6, lr}
    2022:	0004      	movs	r4, r0
	ASSERT(descr);
    2024:	1e43      	subs	r3, r0, #1
    2026:	4198      	sbcs	r0, r3
{
    2028:	000d      	movs	r5, r1
	ASSERT(descr);
    202a:	22e1      	movs	r2, #225	; 0xe1
    202c:	b2c0      	uxtb	r0, r0
    202e:	4905      	ldr	r1, [pc, #20]	; (2044 <usart_async_set_character_size+0x24>)
    2030:	4b05      	ldr	r3, [pc, #20]	; (2048 <usart_async_set_character_size+0x28>)
    2032:	4798      	blx	r3
	_usart_async_set_character_size(&descr->device, size);
    2034:	0020      	movs	r0, r4
    2036:	0029      	movs	r1, r5
    2038:	3008      	adds	r0, #8
    203a:	4b04      	ldr	r3, [pc, #16]	; (204c <usart_async_set_character_size+0x2c>)
    203c:	4798      	blx	r3
}
    203e:	2000      	movs	r0, #0
    2040:	bd70      	pop	{r4, r5, r6, pc}
    2042:	46c0      	nop			; (mov r8, r8)
    2044:	000051e3 	.word	0x000051e3
    2048:	0000207d 	.word	0x0000207d
    204c:	00002651 	.word	0x00002651

00002050 <usart_async_flush_rx_buffer>:
{
    2050:	b510      	push	{r4, lr}
	ASSERT(descr);
    2052:	2222      	movs	r2, #34	; 0x22
{
    2054:	0004      	movs	r4, r0
	ASSERT(descr);
    2056:	1e43      	subs	r3, r0, #1
    2058:	4198      	sbcs	r0, r3
    205a:	32ff      	adds	r2, #255	; 0xff
    205c:	4904      	ldr	r1, [pc, #16]	; (2070 <usart_async_flush_rx_buffer+0x20>)
    205e:	b2c0      	uxtb	r0, r0
    2060:	4b04      	ldr	r3, [pc, #16]	; (2074 <usart_async_flush_rx_buffer+0x24>)
    2062:	4798      	blx	r3
	return ringbuffer_flush(&descr->rx);
    2064:	0020      	movs	r0, r4
    2066:	4b04      	ldr	r3, [pc, #16]	; (2078 <usart_async_flush_rx_buffer+0x28>)
    2068:	3034      	adds	r0, #52	; 0x34
    206a:	4798      	blx	r3
}
    206c:	bd10      	pop	{r4, pc}
    206e:	46c0      	nop			; (mov r8, r8)
    2070:	000051e3 	.word	0x000051e3
    2074:	0000207d 	.word	0x0000207d
    2078:	0000216d 	.word	0x0000216d

0000207c <assert>:
/**
 * \brief Assert function
 */
void assert(const bool condition, const char *const file, const int line)
{
	if (!(condition)) {
    207c:	2800      	cmp	r0, #0
    207e:	d100      	bne.n	2082 <assert+0x6>
		__asm("BKPT #0");
    2080:	be00      	bkpt	0x0000
	}
	(void)file;
	(void)line;
}
    2082:	4770      	bx	lr

00002084 <ringbuffer_init>:

/**
 * \brief Ringbuffer init
 */
int32_t ringbuffer_init(struct ringbuffer *const rb, void *buf, uint32_t size)
{
    2084:	b570      	push	{r4, r5, r6, lr}
    2086:	0005      	movs	r5, r0
    2088:	000e      	movs	r6, r1
    208a:	0014      	movs	r4, r2
	ASSERT(rb && buf && size);
    208c:	2800      	cmp	r0, #0
    208e:	d004      	beq.n	209a <ringbuffer_init+0x16>
    2090:	1e08      	subs	r0, r1, #0
    2092:	d002      	beq.n	209a <ringbuffer_init+0x16>
    2094:	0010      	movs	r0, r2
    2096:	1e43      	subs	r3, r0, #1
    2098:	4198      	sbcs	r0, r3
    209a:	4b08      	ldr	r3, [pc, #32]	; (20bc <ringbuffer_init+0x38>)
    209c:	2228      	movs	r2, #40	; 0x28
    209e:	4908      	ldr	r1, [pc, #32]	; (20c0 <ringbuffer_init+0x3c>)
    20a0:	4798      	blx	r3

	/*
	 * buf size must be aligned to power of 2
	 */
	if ((size & (size - 1)) != 0) {
    20a2:	0020      	movs	r0, r4
    20a4:	1e63      	subs	r3, r4, #1
    20a6:	4018      	ands	r0, r3
    20a8:	d104      	bne.n	20b4 <ringbuffer_init+0x30>
		return ERR_INVALID_ARG;
	}

	/* size - 1 is faster in calculation */
	rb->size        = size - 1;
    20aa:	606b      	str	r3, [r5, #4]
	rb->read_index  = 0;
    20ac:	60a8      	str	r0, [r5, #8]
	rb->write_index = rb->read_index;
    20ae:	60e8      	str	r0, [r5, #12]
	rb->buf         = (uint8_t *)buf;
    20b0:	602e      	str	r6, [r5, #0]

	return ERR_NONE;
}
    20b2:	bd70      	pop	{r4, r5, r6, pc}
		return ERR_INVALID_ARG;
    20b4:	200d      	movs	r0, #13
    20b6:	4240      	negs	r0, r0
    20b8:	e7fb      	b.n	20b2 <ringbuffer_init+0x2e>
    20ba:	46c0      	nop			; (mov r8, r8)
    20bc:	0000207d 	.word	0x0000207d
    20c0:	00005200 	.word	0x00005200

000020c4 <ringbuffer_get>:
/**
 * \brief Get one byte from ringbuffer
 *
 */
int32_t ringbuffer_get(struct ringbuffer *const rb, uint8_t *data)
{
    20c4:	b570      	push	{r4, r5, r6, lr}
    20c6:	0004      	movs	r4, r0
    20c8:	000d      	movs	r5, r1
	ASSERT(rb && data);
    20ca:	2800      	cmp	r0, #0
    20cc:	d003      	beq.n	20d6 <ringbuffer_get+0x12>
    20ce:	0008      	movs	r0, r1
    20d0:	1e43      	subs	r3, r0, #1
    20d2:	4198      	sbcs	r0, r3
    20d4:	b2c0      	uxtb	r0, r0
    20d6:	2240      	movs	r2, #64	; 0x40
    20d8:	4b09      	ldr	r3, [pc, #36]	; (2100 <ringbuffer_get+0x3c>)
    20da:	490a      	ldr	r1, [pc, #40]	; (2104 <ringbuffer_get+0x40>)
    20dc:	4798      	blx	r3

	if (rb->write_index != rb->read_index) {
    20de:	68a3      	ldr	r3, [r4, #8]
    20e0:	68e2      	ldr	r2, [r4, #12]
    20e2:	429a      	cmp	r2, r3
    20e4:	d009      	beq.n	20fa <ringbuffer_get+0x36>
		*data = rb->buf[rb->read_index & rb->size];
		rb->read_index++;
		return ERR_NONE;
    20e6:	2000      	movs	r0, #0
		*data = rb->buf[rb->read_index & rb->size];
    20e8:	6862      	ldr	r2, [r4, #4]
    20ea:	4013      	ands	r3, r2
    20ec:	6822      	ldr	r2, [r4, #0]
    20ee:	5cd3      	ldrb	r3, [r2, r3]
    20f0:	702b      	strb	r3, [r5, #0]
		rb->read_index++;
    20f2:	68a3      	ldr	r3, [r4, #8]
    20f4:	3301      	adds	r3, #1
    20f6:	60a3      	str	r3, [r4, #8]
	}

	return ERR_NOT_FOUND;
}
    20f8:	bd70      	pop	{r4, r5, r6, pc}
	return ERR_NOT_FOUND;
    20fa:	200a      	movs	r0, #10
    20fc:	4240      	negs	r0, r0
    20fe:	e7fb      	b.n	20f8 <ringbuffer_get+0x34>
    2100:	0000207d 	.word	0x0000207d
    2104:	00005200 	.word	0x00005200

00002108 <ringbuffer_put>:
/**
 * \brief Put one byte to ringbuffer
 *
 */
int32_t ringbuffer_put(struct ringbuffer *const rb, uint8_t data)
{
    2108:	b570      	push	{r4, r5, r6, lr}
    210a:	0004      	movs	r4, r0
	ASSERT(rb);
    210c:	1e43      	subs	r3, r0, #1
    210e:	4198      	sbcs	r0, r3
{
    2110:	000d      	movs	r5, r1
	ASSERT(rb);
    2112:	2251      	movs	r2, #81	; 0x51
    2114:	490a      	ldr	r1, [pc, #40]	; (2140 <ringbuffer_put+0x38>)
    2116:	4b0b      	ldr	r3, [pc, #44]	; (2144 <ringbuffer_put+0x3c>)
    2118:	b2c0      	uxtb	r0, r0
    211a:	4798      	blx	r3

	rb->buf[rb->write_index & rb->size] = data;
    211c:	68e2      	ldr	r2, [r4, #12]
    211e:	6863      	ldr	r3, [r4, #4]
    2120:	4013      	ands	r3, r2
    2122:	6822      	ldr	r2, [r4, #0]
    2124:	54d5      	strb	r5, [r2, r3]

	/*
	 * buffer full strategy: new data will overwrite the oldest data in
	 * the buffer
	 */
	if ((rb->write_index - rb->read_index) > rb->size) {
    2126:	68e3      	ldr	r3, [r4, #12]
    2128:	68a1      	ldr	r1, [r4, #8]
    212a:	6862      	ldr	r2, [r4, #4]
    212c:	1a59      	subs	r1, r3, r1
    212e:	4291      	cmp	r1, r2
    2130:	d901      	bls.n	2136 <ringbuffer_put+0x2e>
		rb->read_index = rb->write_index - rb->size;
    2132:	1a9a      	subs	r2, r3, r2
    2134:	60a2      	str	r2, [r4, #8]
	}

	rb->write_index++;
    2136:	3301      	adds	r3, #1

	return ERR_NONE;
}
    2138:	2000      	movs	r0, #0
	rb->write_index++;
    213a:	60e3      	str	r3, [r4, #12]
}
    213c:	bd70      	pop	{r4, r5, r6, pc}
    213e:	46c0      	nop			; (mov r8, r8)
    2140:	00005200 	.word	0x00005200
    2144:	0000207d 	.word	0x0000207d

00002148 <ringbuffer_num>:

/**
 * \brief Return the element number of ringbuffer
 */
uint32_t ringbuffer_num(const struct ringbuffer *const rb)
{
    2148:	b510      	push	{r4, lr}
    214a:	0004      	movs	r4, r0
	ASSERT(rb);
    214c:	1e43      	subs	r3, r0, #1
    214e:	4198      	sbcs	r0, r3
    2150:	2267      	movs	r2, #103	; 0x67
    2152:	b2c0      	uxtb	r0, r0
    2154:	4903      	ldr	r1, [pc, #12]	; (2164 <ringbuffer_num+0x1c>)
    2156:	4b04      	ldr	r3, [pc, #16]	; (2168 <ringbuffer_num+0x20>)
    2158:	4798      	blx	r3

	return rb->write_index - rb->read_index;
    215a:	68e0      	ldr	r0, [r4, #12]
    215c:	68a3      	ldr	r3, [r4, #8]
    215e:	1ac0      	subs	r0, r0, r3
}
    2160:	bd10      	pop	{r4, pc}
    2162:	46c0      	nop			; (mov r8, r8)
    2164:	00005200 	.word	0x00005200
    2168:	0000207d 	.word	0x0000207d

0000216c <ringbuffer_flush>:

/**
 * \brief Flush ringbuffer
 */
uint32_t ringbuffer_flush(struct ringbuffer *const rb)
{
    216c:	b510      	push	{r4, lr}
    216e:	0004      	movs	r4, r0
	ASSERT(rb);
    2170:	1e43      	subs	r3, r0, #1
    2172:	4198      	sbcs	r0, r3
    2174:	2271      	movs	r2, #113	; 0x71
    2176:	b2c0      	uxtb	r0, r0
    2178:	4903      	ldr	r1, [pc, #12]	; (2188 <ringbuffer_flush+0x1c>)
    217a:	4b04      	ldr	r3, [pc, #16]	; (218c <ringbuffer_flush+0x20>)
    217c:	4798      	blx	r3

	rb->read_index = rb->write_index;
    217e:	68e3      	ldr	r3, [r4, #12]

	return ERR_NONE;
}
    2180:	2000      	movs	r0, #0
	rb->read_index = rb->write_index;
    2182:	60a3      	str	r3, [r4, #8]
}
    2184:	bd10      	pop	{r4, pc}
    2186:	46c0      	nop			; (mov r8, r8)
    2188:	00005200 	.word	0x00005200
    218c:	0000207d 	.word	0x0000207d

00002190 <_get_cycles_for_ms>:

/**
 * \brief Retrieve the amount of cycles to delay for the given amount of ms
 */
uint32_t _get_cycles_for_ms(const uint16_t ms)
{
    2190:	0003      	movs	r3, r0
		return (ms * (freq / 100000) + 2) / 3 * 100;
    2192:	20a0      	movs	r0, #160	; 0xa0
    2194:	4358      	muls	r0, r3
{
    2196:	b510      	push	{r4, lr}
		return (ms * (freq / 100000) + 2) / 3 * 100;
    2198:	4b03      	ldr	r3, [pc, #12]	; (21a8 <_get_cycles_for_ms+0x18>)
    219a:	3002      	adds	r0, #2
    219c:	2103      	movs	r1, #3
    219e:	4798      	blx	r3
    21a0:	2364      	movs	r3, #100	; 0x64
    21a2:	4358      	muls	r0, r3
	return _get_cycles_for_ms_internal(ms, CONF_CPU_FREQUENCY, CPU_FREQ_POWER);
}
    21a4:	bd10      	pop	{r4, pc}
    21a6:	46c0      	nop			; (mov r8, r8)
    21a8:	00002765 	.word	0x00002765

000021ac <_delay_cycles>:
{
#ifndef _UNIT_TEST_
	(void)hw;
	(void)cycles;
#if defined __GNUC__
	__asm(".syntax unified\n"
    21ac:	3901      	subs	r1, #1
    21ae:	d8fd      	bhi.n	21ac <_delay_cycles>
	__asm("__delay:\n"
	      "subs r1, r1, #1\n"
	      "bhi __delay\n");
#endif
#endif
}
    21b0:	4770      	bx	lr
	...

000021b4 <_init_chip>:

/**
 * \brief Initialize the hardware abstraction layer
 */
void _init_chip(void)
{
    21b4:	b510      	push	{r4, lr}
}

static inline void hri_nvmctrl_set_CTRLB_RWS_bf(const void *const hw, hri_nvmctrl_ctrlb_reg_t mask)
{
	NVMCTRL_CRITICAL_SECTION_ENTER();
	((Nvmctrl *)hw)->CTRLB.reg |= NVMCTRL_CTRLB_RWS(mask);
    21b6:	4b09      	ldr	r3, [pc, #36]	; (21dc <_init_chip+0x28>)
	hri_nvmctrl_set_CTRLB_RWS_bf(NVMCTRL, CONF_NVM_WAIT_STATE);

	_set_performance_level(2);
    21b8:	2002      	movs	r0, #2
    21ba:	685a      	ldr	r2, [r3, #4]
    21bc:	605a      	str	r2, [r3, #4]
    21be:	4b08      	ldr	r3, [pc, #32]	; (21e0 <_init_chip+0x2c>)
    21c0:	4798      	blx	r3

	_osc32kctrl_init_sources();
    21c2:	4b08      	ldr	r3, [pc, #32]	; (21e4 <_init_chip+0x30>)
    21c4:	4798      	blx	r3
	_oscctrl_init_sources();
    21c6:	4b08      	ldr	r3, [pc, #32]	; (21e8 <_init_chip+0x34>)
    21c8:	4798      	blx	r3
	_mclk_init();
    21ca:	4b08      	ldr	r3, [pc, #32]	; (21ec <_init_chip+0x38>)
    21cc:	4798      	blx	r3
#if _GCLK_INIT_1ST
	_gclk_init_generators_by_fref(_GCLK_INIT_1ST);
#endif
	_oscctrl_init_referenced_generators();
    21ce:	4b08      	ldr	r3, [pc, #32]	; (21f0 <_init_chip+0x3c>)
    21d0:	4798      	blx	r3
	_gclk_init_generators_by_fref(_GCLK_INIT_LAST);
    21d2:	20ff      	movs	r0, #255	; 0xff
    21d4:	4b07      	ldr	r3, [pc, #28]	; (21f4 <_init_chip+0x40>)
    21d6:	4798      	blx	r3
#endif

#if (CONF_PORT_EVCTRL_PORT_0 | CONF_PORT_EVCTRL_PORT_1 | CONF_PORT_EVCTRL_PORT_2 | CONF_PORT_EVCTRL_PORT_3)
	_port_event_init();
#endif
}
    21d8:	bd10      	pop	{r4, pc}
    21da:	46c0      	nop			; (mov r8, r8)
    21dc:	41004000 	.word	0x41004000
    21e0:	0000227f 	.word	0x0000227f
    21e4:	0000222d 	.word	0x0000222d
    21e8:	00002245 	.word	0x00002245
    21ec:	00002219 	.word	0x00002219
    21f0:	0000227d 	.word	0x0000227d
    21f4:	000021f9 	.word	0x000021f9

000021f8 <_gclk_init_generators_by_fref>:

void _gclk_init_generators_by_fref(uint32_t bm)
{

#if CONF_GCLK_GENERATOR_0_CONFIG == 1
	if (bm & (1ul << 0)) {
    21f8:	07c3      	lsls	r3, r0, #31
    21fa:	d506      	bpl.n	220a <_gclk_init_generators_by_fref+0x12>
	((Gclk *)hw)->GENCTRL[index].reg = data;
    21fc:	4a03      	ldr	r2, [pc, #12]	; (220c <_gclk_init_generators_by_fref+0x14>)
    21fe:	4b04      	ldr	r3, [pc, #16]	; (2210 <_gclk_init_generators_by_fref+0x18>)
    2200:	621a      	str	r2, [r3, #32]
	while (((Gclk *)hw)->SYNCBUSY.reg & reg) {
    2202:	4a04      	ldr	r2, [pc, #16]	; (2214 <_gclk_init_generators_by_fref+0x1c>)
    2204:	6859      	ldr	r1, [r3, #4]
    2206:	4211      	tst	r1, r2
    2208:	d1fc      	bne.n	2204 <_gclk_init_generators_by_fref+0xc>
		        | (CONF_GCLK_GEN_8_DIVSEL << GCLK_GENCTRL_DIVSEL_Pos) | (CONF_GCLK_GEN_8_OE << GCLK_GENCTRL_OE_Pos)
		        | (CONF_GCLK_GEN_8_OOV << GCLK_GENCTRL_OOV_Pos) | (CONF_GCLK_GEN_8_IDC << GCLK_GENCTRL_IDC_Pos)
		        | (CONF_GCLK_GENERATOR_8_CONFIG << GCLK_GENCTRL_GENEN_Pos) | CONF_GCLK_GEN_8_SOURCE);
	}
#endif
}
    220a:	4770      	bx	lr
    220c:	00010106 	.word	0x00010106
    2210:	40001800 	.word	0x40001800
    2214:	000007fd 	.word	0x000007fd

00002218 <_mclk_init>:
	((Mclk *)hw)->BUPDIV.reg = data;
    2218:	2208      	movs	r2, #8
    221a:	4b03      	ldr	r3, [pc, #12]	; (2228 <_mclk_init+0x10>)
    221c:	719a      	strb	r2, [r3, #6]
	((Mclk *)hw)->LPDIV.reg = data;
    221e:	3a04      	subs	r2, #4
    2220:	715a      	strb	r2, [r3, #5]
	((Mclk *)hw)->CPUDIV.reg = data;
    2222:	3a03      	subs	r2, #3
    2224:	711a      	strb	r2, [r3, #4]
{
	void *hw = (void *)MCLK;
	hri_mclk_write_BUPDIV_reg(hw, MCLK_BUPDIV_BUPDIV(CONF_MCLK_BUPDIV));
	hri_mclk_write_LPDIV_reg(hw, MCLK_LPDIV_LPDIV(CONF_MCLK_LPDIV));
	hri_mclk_write_CPUDIV_reg(hw, MCLK_CPUDIV_CPUDIV(CONF_MCLK_CPUDIV));
}
    2226:	4770      	bx	lr
    2228:	40000400 	.word	0x40000400

0000222c <_osc32kctrl_init_sources>:
	calib = hri_osc32kctrl_read_OSCULP32K_CALIB_bf(hw);
	hri_osc32kctrl_write_OSCULP32K_reg(hw,
#if CONF_OSC32K_CALIB_ENABLE == 1
	                                   OSC32KCTRL_OSCULP32K_CALIB(CONF_OSC32K_CALIB)
#else
	                                   OSC32KCTRL_OSCULP32K_CALIB(calib)
    222c:	21f8      	movs	r1, #248	; 0xf8
}

static inline hri_osc32kctrl_osculp32k_reg_t hri_osc32kctrl_read_OSCULP32K_CALIB_bf(const void *const hw)
{
	uint32_t tmp;
	tmp = ((Osc32kctrl *)hw)->OSCULP32K.reg;
    222e:	4b04      	ldr	r3, [pc, #16]	; (2240 <_osc32kctrl_init_sources+0x14>)
    2230:	0149      	lsls	r1, r1, #5
    2232:	69da      	ldr	r2, [r3, #28]
    2234:	400a      	ands	r2, r1
}

static inline void hri_osc32kctrl_write_OSCULP32K_reg(const void *const hw, hri_osc32kctrl_osculp32k_reg_t data)
{
	OSC32KCTRL_CRITICAL_SECTION_ENTER();
	((Osc32kctrl *)hw)->OSCULP32K.reg = data;
    2236:	61da      	str	r2, [r3, #28]
	((Osc32kctrl *)hw)->RTCCTRL.reg = data;
    2238:	2201      	movs	r2, #1
    223a:	611a      	str	r2, [r3, #16]
		;
#endif
#endif
	hri_osc32kctrl_write_RTCCTRL_reg(hw, OSC32KCTRL_RTCCTRL_RTCSEL(CONF_RTCCTRL));
	(void)calib;
}
    223c:	4770      	bx	lr
    223e:	46c0      	nop			; (mov r8, r8)
    2240:	40001000 	.word	0x40001000

00002244 <_oscctrl_init_sources>:
}

static inline void hri_oscctrl_write_OSC16MCTRL_reg(const void *const hw, hri_oscctrl_osc16mctrl_reg_t data)
{
	OSCCTRL_CRITICAL_SECTION_ENTER();
	((Oscctrl *)hw)->OSC16MCTRL.reg = data;
    2244:	228e      	movs	r2, #142	; 0x8e
    2246:	4b0b      	ldr	r3, [pc, #44]	; (2274 <_oscctrl_init_sources+0x30>)

/**
 * \brief Initialize clock sources
 */
void _oscctrl_init_sources(void)
{
    2248:	b510      	push	{r4, lr}
    224a:	751a      	strb	r2, [r3, #20]
	while (((Oscctrl *)hw)->DPLLSYNCBUSY.reg & reg) {
    224c:	4a0a      	ldr	r2, [pc, #40]	; (2278 <_oscctrl_init_sources+0x34>)
    224e:	2002      	movs	r0, #2
    2250:	0011      	movs	r1, r2
    2252:	7814      	ldrb	r4, [r2, #0]
    2254:	4204      	tst	r4, r0
    2256:	d1fc      	bne.n	2252 <_oscctrl_init_sources+0xe>
#endif
#endif

#if CONF_OSC16M_CONFIG == 1
#if CONF_OSC16M_ENABLE == 1
	while (!hri_oscctrl_get_STATUS_OSC16MRDY_bit(hw))
    2258:	2210      	movs	r2, #16
	return (((Oscctrl *)hw)->STATUS.reg & OSCCTRL_STATUS_OSC16MRDY) >> OSCCTRL_STATUS_OSC16MRDY_Pos;
    225a:	68d8      	ldr	r0, [r3, #12]
    225c:	4210      	tst	r0, r2
    225e:	d0fc      	beq.n	225a <_oscctrl_init_sources+0x16>
	((Oscctrl *)hw)->OSC16MCTRL.reg |= OSCCTRL_OSC16MCTRL_ONDEMAND;
    2260:	2080      	movs	r0, #128	; 0x80
    2262:	7d1a      	ldrb	r2, [r3, #20]
    2264:	4302      	orrs	r2, r0
    2266:	751a      	strb	r2, [r3, #20]
	while (((Oscctrl *)hw)->DPLLSYNCBUSY.reg & reg) {
    2268:	230e      	movs	r3, #14
    226a:	780a      	ldrb	r2, [r1, #0]
    226c:	421a      	tst	r2, r3
    226e:	d1fc      	bne.n	226a <_oscctrl_init_sources+0x26>
#if CONF_OSC16M_ONDEMAND == 1
	hri_oscctrl_set_OSC16MCTRL_ONDEMAND_bit(hw);
#endif
#endif
	(void)hw;
}
    2270:	bd10      	pop	{r4, pc}
    2272:	46c0      	nop			; (mov r8, r8)
    2274:	40000c00 	.word	0x40000c00
    2278:	40000c38 	.word	0x40000c38

0000227c <_oscctrl_init_referenced_generators>:
#if CONF_DFLL_CONFIG == 1
	while (hri_gclk_read_SYNCBUSY_reg(GCLK))
		;
#endif
	(void)hw, (void)tmp;
}
    227c:	4770      	bx	lr

0000227e <_set_performance_level>:
}

static inline hri_pm_plcfg_reg_t hri_pm_get_PLCFG_PLSEL_bf(const void *const hw, hri_pm_plcfg_reg_t mask)
{
	uint8_t tmp;
	tmp = ((Pm *)hw)->PLCFG.reg;
    227e:	2380      	movs	r3, #128	; 0x80
	tmp = (tmp & PM_PLCFG_PLSEL(mask)) >> PM_PLCFG_PLSEL_Pos;
    2280:	2103      	movs	r1, #3
	tmp = ((Pm *)hw)->PLCFG.reg;
    2282:	05db      	lsls	r3, r3, #23
    2284:	789a      	ldrb	r2, [r3, #2]
/**
 * \brief Set performance level
 */
void _set_performance_level(const uint8_t level)
{
	if (hri_pm_get_PLCFG_PLSEL_bf(PM, PM_PLCFG_PLSEL_Msk) != level) {
    2286:	400a      	ands	r2, r1
    2288:	4290      	cmp	r0, r2
    228a:	d009      	beq.n	22a0 <_set_performance_level+0x22>
	((Pm *)hw)->INTFLAG.reg = mask;
    228c:	22ff      	movs	r2, #255	; 0xff
    228e:	719a      	strb	r2, [r3, #6]

static inline void hri_pm_write_PLCFG_PLSEL_bf(const void *const hw, hri_pm_plcfg_reg_t data)
{
	uint8_t tmp;
	PM_CRITICAL_SECTION_ENTER();
	tmp = ((Pm *)hw)->PLCFG.reg;
    2290:	789a      	ldrb	r2, [r3, #2]
	tmp &= ~PM_PLCFG_PLSEL_Msk;
	tmp |= PM_PLCFG_PLSEL(data);
    2292:	4008      	ands	r0, r1
	tmp &= ~PM_PLCFG_PLSEL_Msk;
    2294:	438a      	bics	r2, r1
	tmp |= PM_PLCFG_PLSEL(data);
    2296:	4310      	orrs	r0, r2
	((Pm *)hw)->PLCFG.reg = tmp;
    2298:	7098      	strb	r0, [r3, #2]
	return ((Pm *)hw)->INTFLAG.reg;
    229a:	799a      	ldrb	r2, [r3, #6]
		hri_pm_clear_INTFLAG_reg(PM, 0xFF);
		hri_pm_write_PLCFG_PLSEL_bf(PM, level);
		while (!hri_pm_read_INTFLAG_reg(PM))
    229c:	2a00      	cmp	r2, #0
    229e:	d0fc      	beq.n	229a <_set_performance_level+0x1c>
			;
	}
}
    22a0:	4770      	bx	lr
	...

000022a4 <__NVIC_EnableIRQ>:
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
  if ((int32_t)(IRQn) >= 0)
    22a4:	2800      	cmp	r0, #0
    22a6:	db05      	blt.n	22b4 <__NVIC_EnableIRQ+0x10>
  {
    NVIC->ISER[0U] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
    22a8:	231f      	movs	r3, #31
    22aa:	4018      	ands	r0, r3
    22ac:	3b1e      	subs	r3, #30
    22ae:	4083      	lsls	r3, r0
    22b0:	4a01      	ldr	r2, [pc, #4]	; (22b8 <__NVIC_EnableIRQ+0x14>)
    22b2:	6013      	str	r3, [r2, #0]
  }
}
    22b4:	4770      	bx	lr
    22b6:	46c0      	nop			; (mov r8, r8)
    22b8:	e000e100 	.word	0xe000e100

000022bc <__NVIC_DisableIRQ>:
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_DisableIRQ(IRQn_Type IRQn)
{
  if ((int32_t)(IRQn) >= 0)
    22bc:	2800      	cmp	r0, #0
    22be:	db09      	blt.n	22d4 <__NVIC_DisableIRQ+0x18>
  {
    NVIC->ICER[0U] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
    22c0:	231f      	movs	r3, #31
    22c2:	4018      	ands	r0, r3
    22c4:	3b1e      	subs	r3, #30
    22c6:	4083      	lsls	r3, r0
    22c8:	4a03      	ldr	r2, [pc, #12]	; (22d8 <__NVIC_DisableIRQ+0x1c>)
    22ca:	67d3      	str	r3, [r2, #124]	; 0x7c
  __ASM volatile ("dsb 0xF":::"memory");
    22cc:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
    22d0:	f3bf 8f6f 	isb	sy
    __DSB();
    __ISB();
  }
}
    22d4:	4770      	bx	lr
    22d6:	46c0      	nop			; (mov r8, r8)
    22d8:	e000e104 	.word	0xe000e104

000022dc <__NVIC_ClearPendingIRQ>:
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_ClearPendingIRQ(IRQn_Type IRQn)
{
  if ((int32_t)(IRQn) >= 0)
    22dc:	2800      	cmp	r0, #0
    22de:	db07      	blt.n	22f0 <__NVIC_ClearPendingIRQ+0x14>
  {
    NVIC->ICPR[0U] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
    22e0:	231f      	movs	r3, #31
    22e2:	22c0      	movs	r2, #192	; 0xc0
    22e4:	4018      	ands	r0, r3
    22e6:	3b1e      	subs	r3, #30
    22e8:	4083      	lsls	r3, r0
    22ea:	4902      	ldr	r1, [pc, #8]	; (22f4 <__NVIC_ClearPendingIRQ+0x18>)
    22ec:	0052      	lsls	r2, r2, #1
    22ee:	508b      	str	r3, [r1, r2]
  }
}
    22f0:	4770      	bx	lr
    22f2:	46c0      	nop			; (mov r8, r8)
    22f4:	e000e100 	.word	0xe000e100

000022f8 <hri_sercomusart_wait_for_sync>:
	return ((Sercom *)hw)->SPI.SYNCBUSY.reg & reg;
}

static inline void hri_sercomusart_wait_for_sync(const void *const hw, hri_sercomusart_syncbusy_reg_t reg)
{
	while (((Sercom *)hw)->USART.SYNCBUSY.reg & reg) {
    22f8:	69c3      	ldr	r3, [r0, #28]
    22fa:	4219      	tst	r1, r3
    22fc:	d1fc      	bne.n	22f8 <hri_sercomusart_wait_for_sync>
	};
}
    22fe:	4770      	bx	lr

00002300 <hri_sercomusart_get_CTRLA_ENABLE_bit>:
	hri_sercomusart_wait_for_sync(hw, SERCOM_USART_SYNCBUSY_SWRST | SERCOM_USART_SYNCBUSY_ENABLE);
	SERCOM_CRITICAL_SECTION_LEAVE();
}

static inline bool hri_sercomusart_get_CTRLA_ENABLE_bit(const void *const hw)
{
    2300:	b510      	push	{r4, lr}
    2302:	0004      	movs	r4, r0
	uint32_t tmp;
	hri_sercomusart_wait_for_sync(hw, SERCOM_USART_SYNCBUSY_SWRST | SERCOM_USART_SYNCBUSY_ENABLE);
    2304:	2103      	movs	r1, #3
    2306:	4b03      	ldr	r3, [pc, #12]	; (2314 <hri_sercomusart_get_CTRLA_ENABLE_bit+0x14>)
    2308:	4798      	blx	r3
	tmp = ((Sercom *)hw)->USART.CTRLA.reg;
    230a:	6820      	ldr	r0, [r4, #0]
	tmp = (tmp & SERCOM_USART_CTRLA_ENABLE) >> SERCOM_USART_CTRLA_ENABLE_Pos;
	return (bool)tmp;
    230c:	0780      	lsls	r0, r0, #30
    230e:	0fc0      	lsrs	r0, r0, #31
}
    2310:	bd10      	pop	{r4, pc}
    2312:	46c0      	nop			; (mov r8, r8)
    2314:	000022f9 	.word	0x000022f9

00002318 <hri_sercomusart_write_CTRLA_ENABLE_bit>:
static inline void hri_sercomusart_write_CTRLA_ENABLE_bit(const void *const hw, bool value)
{
	uint32_t tmp;
	SERCOM_CRITICAL_SECTION_ENTER();
	tmp = ((Sercom *)hw)->USART.CTRLA.reg;
	tmp &= ~SERCOM_USART_CTRLA_ENABLE;
    2318:	2202      	movs	r2, #2
	tmp = ((Sercom *)hw)->USART.CTRLA.reg;
    231a:	6803      	ldr	r3, [r0, #0]
{
    231c:	b510      	push	{r4, lr}
	tmp &= ~SERCOM_USART_CTRLA_ENABLE;
    231e:	4393      	bics	r3, r2
	tmp |= value << SERCOM_USART_CTRLA_ENABLE_Pos;
    2320:	0049      	lsls	r1, r1, #1
    2322:	4319      	orrs	r1, r3
	((Sercom *)hw)->USART.CTRLA.reg = tmp;
    2324:	6001      	str	r1, [r0, #0]
	hri_sercomusart_wait_for_sync(hw, SERCOM_USART_SYNCBUSY_SWRST | SERCOM_USART_SYNCBUSY_ENABLE);
    2326:	4b02      	ldr	r3, [pc, #8]	; (2330 <hri_sercomusart_write_CTRLA_ENABLE_bit+0x18>)
    2328:	2103      	movs	r1, #3
    232a:	4798      	blx	r3
	SERCOM_CRITICAL_SECTION_LEAVE();
}
    232c:	bd10      	pop	{r4, pc}
    232e:	46c0      	nop			; (mov r8, r8)
    2330:	000022f9 	.word	0x000022f9

00002334 <hri_sercomusart_clear_CTRLA_ENABLE_bit>:

static inline void hri_sercomusart_clear_CTRLA_ENABLE_bit(const void *const hw)
{
	SERCOM_CRITICAL_SECTION_ENTER();
	((Sercom *)hw)->USART.CTRLA.reg &= ~SERCOM_USART_CTRLA_ENABLE;
    2334:	2202      	movs	r2, #2
{
    2336:	b510      	push	{r4, lr}
	((Sercom *)hw)->USART.CTRLA.reg &= ~SERCOM_USART_CTRLA_ENABLE;
    2338:	6803      	ldr	r3, [r0, #0]
	hri_sercomusart_wait_for_sync(hw, SERCOM_USART_SYNCBUSY_SWRST | SERCOM_USART_SYNCBUSY_ENABLE);
    233a:	2103      	movs	r1, #3
	((Sercom *)hw)->USART.CTRLA.reg &= ~SERCOM_USART_CTRLA_ENABLE;
    233c:	4393      	bics	r3, r2
    233e:	6003      	str	r3, [r0, #0]
	hri_sercomusart_wait_for_sync(hw, SERCOM_USART_SYNCBUSY_SWRST | SERCOM_USART_SYNCBUSY_ENABLE);
    2340:	4b01      	ldr	r3, [pc, #4]	; (2348 <hri_sercomusart_clear_CTRLA_ENABLE_bit+0x14>)
    2342:	4798      	blx	r3
	SERCOM_CRITICAL_SECTION_LEAVE();
}
    2344:	bd10      	pop	{r4, pc}
    2346:	46c0      	nop			; (mov r8, r8)
    2348:	000022f9 	.word	0x000022f9

0000234c <_usart_set_baud_rate>:
 *
 * \param[in] device The pointer to USART device instance
 * \param[in] baud_rate A baud rate to set
 */
static void _usart_set_baud_rate(void *const hw, const uint32_t baud_rate)
{
    234c:	b573      	push	{r0, r1, r4, r5, r6, lr}
	bool enabled = hri_sercomusart_get_CTRLA_ENABLE_bit(hw);
    234e:	4b0c      	ldr	r3, [pc, #48]	; (2380 <_usart_set_baud_rate+0x34>)
{
    2350:	0004      	movs	r4, r0
    2352:	000d      	movs	r5, r1
	bool enabled = hri_sercomusart_get_CTRLA_ENABLE_bit(hw);
    2354:	4798      	blx	r3
    2356:	0006      	movs	r6, r0

	hri_sercomusart_clear_CTRLA_ENABLE_bit(hw);
    2358:	4b0a      	ldr	r3, [pc, #40]	; (2384 <_usart_set_baud_rate+0x38>)
    235a:	0020      	movs	r0, r4
    235c:	4798      	blx	r3

	CRITICAL_SECTION_ENTER()
    235e:	a801      	add	r0, sp, #4
    2360:	4b09      	ldr	r3, [pc, #36]	; (2388 <_usart_set_baud_rate+0x3c>)
    2362:	4798      	blx	r3
	hri_sercomusart_wait_for_sync(hw, SERCOM_USART_SYNCBUSY_ENABLE);
	hri_sercomusart_write_BAUD_reg(hw, baud_rate);
    2364:	b2ad      	uxth	r5, r5
	hri_sercomusart_wait_for_sync(hw, SERCOM_USART_SYNCBUSY_ENABLE);
    2366:	2102      	movs	r1, #2
    2368:	0020      	movs	r0, r4
    236a:	4b08      	ldr	r3, [pc, #32]	; (238c <_usart_set_baud_rate+0x40>)
    236c:	4798      	blx	r3
}

static inline void hri_sercomusart_write_BAUD_reg(const void *const hw, hri_sercomusart_baud_reg_t data)
{
	SERCOM_CRITICAL_SECTION_ENTER();
	((Sercom *)hw)->USART.BAUD.reg = data;
    236e:	81a5      	strh	r5, [r4, #12]
	CRITICAL_SECTION_LEAVE()
    2370:	a801      	add	r0, sp, #4
    2372:	4b07      	ldr	r3, [pc, #28]	; (2390 <_usart_set_baud_rate+0x44>)
    2374:	4798      	blx	r3

	hri_sercomusart_write_CTRLA_ENABLE_bit(hw, enabled);
    2376:	0031      	movs	r1, r6
    2378:	0020      	movs	r0, r4
    237a:	4b06      	ldr	r3, [pc, #24]	; (2394 <_usart_set_baud_rate+0x48>)
    237c:	4798      	blx	r3
}
    237e:	bd73      	pop	{r0, r1, r4, r5, r6, pc}
    2380:	00002301 	.word	0x00002301
    2384:	00002335 	.word	0x00002335
    2388:	00001c2d 	.word	0x00001c2d
    238c:	000022f9 	.word	0x000022f9
    2390:	00001c3b 	.word	0x00001c3b
    2394:	00002319 	.word	0x00002319

00002398 <_usart_set_stop_bits>:
 *
 * \param[in] device The pointer to USART device instance
 * \param[in] stop_bits A stop bits mode to set
 */
static void _usart_set_stop_bits(void *const hw, const enum usart_stop_bits stop_bits)
{
    2398:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
	bool enabled = hri_sercomusart_get_CTRLA_ENABLE_bit(hw);
    239a:	4b11      	ldr	r3, [pc, #68]	; (23e0 <_usart_set_stop_bits+0x48>)
{
    239c:	0004      	movs	r4, r0
    239e:	000d      	movs	r5, r1
	bool enabled = hri_sercomusart_get_CTRLA_ENABLE_bit(hw);
    23a0:	4798      	blx	r3

	hri_sercomusart_clear_CTRLA_ENABLE_bit(hw);
    23a2:	4b10      	ldr	r3, [pc, #64]	; (23e4 <_usart_set_stop_bits+0x4c>)
	bool enabled = hri_sercomusart_get_CTRLA_ENABLE_bit(hw);
    23a4:	0007      	movs	r7, r0
	hri_sercomusart_clear_CTRLA_ENABLE_bit(hw);
    23a6:	0020      	movs	r0, r4
    23a8:	4798      	blx	r3

	CRITICAL_SECTION_ENTER()
    23aa:	a801      	add	r0, sp, #4
    23ac:	4b0e      	ldr	r3, [pc, #56]	; (23e8 <_usart_set_stop_bits+0x50>)
    23ae:	4798      	blx	r3
	hri_sercomusart_wait_for_sync(hw, SERCOM_USART_SYNCBUSY_ENABLE);
    23b0:	4e0e      	ldr	r6, [pc, #56]	; (23ec <_usart_set_stop_bits+0x54>)
    23b2:	0020      	movs	r0, r4
    23b4:	2102      	movs	r1, #2
    23b6:	47b0      	blx	r6
	tmp &= ~SERCOM_USART_CTRLB_SBMODE;
    23b8:	2240      	movs	r2, #64	; 0x40
	tmp = ((Sercom *)hw)->USART.CTRLB.reg;
    23ba:	6863      	ldr	r3, [r4, #4]
	hri_sercomusart_wait_for_sync(hw, SERCOM_USART_SYNCBUSY_MASK);
    23bc:	2107      	movs	r1, #7
	tmp &= ~SERCOM_USART_CTRLB_SBMODE;
    23be:	4393      	bics	r3, r2
	hri_sercomusart_write_CTRLB_SBMODE_bit(hw, stop_bits);
    23c0:	1e6a      	subs	r2, r5, #1
    23c2:	4195      	sbcs	r5, r2
	tmp |= value << SERCOM_USART_CTRLB_SBMODE_Pos;
    23c4:	01ad      	lsls	r5, r5, #6
    23c6:	431d      	orrs	r5, r3
	((Sercom *)hw)->USART.CTRLB.reg = tmp;
    23c8:	6065      	str	r5, [r4, #4]
	hri_sercomusart_wait_for_sync(hw, SERCOM_USART_SYNCBUSY_MASK);
    23ca:	0020      	movs	r0, r4
    23cc:	47b0      	blx	r6
	CRITICAL_SECTION_LEAVE()
    23ce:	a801      	add	r0, sp, #4
    23d0:	4b07      	ldr	r3, [pc, #28]	; (23f0 <_usart_set_stop_bits+0x58>)
    23d2:	4798      	blx	r3

	hri_sercomusart_write_CTRLA_ENABLE_bit(hw, enabled);
    23d4:	0039      	movs	r1, r7
    23d6:	0020      	movs	r0, r4
    23d8:	4b06      	ldr	r3, [pc, #24]	; (23f4 <_usart_set_stop_bits+0x5c>)
    23da:	4798      	blx	r3
}
    23dc:	bdf7      	pop	{r0, r1, r2, r4, r5, r6, r7, pc}
    23de:	46c0      	nop			; (mov r8, r8)
    23e0:	00002301 	.word	0x00002301
    23e4:	00002335 	.word	0x00002335
    23e8:	00001c2d 	.word	0x00001c2d
    23ec:	000022f9 	.word	0x000022f9
    23f0:	00001c3b 	.word	0x00001c3b
    23f4:	00002319 	.word	0x00002319

000023f8 <_usart_set_character_size>:
 *
 * \param[in] device The pointer to USART device instance
 * \param[in] size A character size to set
 */
static void _usart_set_character_size(void *const hw, const enum usart_character_size size)
{
    23f8:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
	bool enabled = hri_sercomusart_get_CTRLA_ENABLE_bit(hw);
    23fa:	4b12      	ldr	r3, [pc, #72]	; (2444 <_usart_set_character_size+0x4c>)
{
    23fc:	0004      	movs	r4, r0
    23fe:	000d      	movs	r5, r1
	bool enabled = hri_sercomusart_get_CTRLA_ENABLE_bit(hw);
    2400:	4798      	blx	r3

	hri_sercomusart_clear_CTRLA_ENABLE_bit(hw);
    2402:	4b11      	ldr	r3, [pc, #68]	; (2448 <_usart_set_character_size+0x50>)
	bool enabled = hri_sercomusart_get_CTRLA_ENABLE_bit(hw);
    2404:	0007      	movs	r7, r0
	hri_sercomusart_clear_CTRLA_ENABLE_bit(hw);
    2406:	0020      	movs	r0, r4
    2408:	4798      	blx	r3

	CRITICAL_SECTION_ENTER()
    240a:	4b10      	ldr	r3, [pc, #64]	; (244c <_usart_set_character_size+0x54>)
    240c:	a801      	add	r0, sp, #4
    240e:	4798      	blx	r3
	hri_sercomusart_wait_for_sync(hw, SERCOM_USART_SYNCBUSY_ENABLE);
    2410:	2102      	movs	r1, #2
    2412:	0020      	movs	r0, r4
    2414:	4e0e      	ldr	r6, [pc, #56]	; (2450 <_usart_set_character_size+0x58>)
    2416:	47b0      	blx	r6
	tmp &= ~SERCOM_USART_CTRLB_CHSIZE_Msk;
    2418:	2107      	movs	r1, #7
	tmp = ((Sercom *)hw)->USART.CTRLB.reg;
    241a:	6863      	ldr	r3, [r4, #4]
	tmp |= SERCOM_USART_CTRLB_CHSIZE(data);
    241c:	400d      	ands	r5, r1
	tmp &= ~SERCOM_USART_CTRLB_CHSIZE_Msk;
    241e:	438b      	bics	r3, r1
	tmp |= SERCOM_USART_CTRLB_CHSIZE(data);
    2420:	431d      	orrs	r5, r3
	hri_sercomusart_wait_for_sync(hw, SERCOM_USART_SYNCBUSY_MASK);
    2422:	0020      	movs	r0, r4
	((Sercom *)hw)->USART.CTRLB.reg = tmp;
    2424:	6065      	str	r5, [r4, #4]
	hri_sercomusart_wait_for_sync(hw, SERCOM_USART_SYNCBUSY_MASK);
    2426:	47b0      	blx	r6
	hri_sercomusart_write_CTRLB_CHSIZE_bf(hw, size);
	CRITICAL_SECTION_LEAVE()
    2428:	a801      	add	r0, sp, #4
    242a:	4b0a      	ldr	r3, [pc, #40]	; (2454 <_usart_set_character_size+0x5c>)
    242c:	4798      	blx	r3

	if (enabled) {
    242e:	2f00      	cmp	r7, #0
    2430:	d006      	beq.n	2440 <_usart_set_character_size+0x48>
	((Sercom *)hw)->USART.CTRLA.reg |= SERCOM_USART_CTRLA_ENABLE;
    2432:	2302      	movs	r3, #2
    2434:	6822      	ldr	r2, [r4, #0]
	hri_sercomusart_wait_for_sync(hw, SERCOM_USART_SYNCBUSY_SWRST | SERCOM_USART_SYNCBUSY_ENABLE);
    2436:	2103      	movs	r1, #3
	((Sercom *)hw)->USART.CTRLA.reg |= SERCOM_USART_CTRLA_ENABLE;
    2438:	4313      	orrs	r3, r2
    243a:	6023      	str	r3, [r4, #0]
	hri_sercomusart_wait_for_sync(hw, SERCOM_USART_SYNCBUSY_SWRST | SERCOM_USART_SYNCBUSY_ENABLE);
    243c:	0020      	movs	r0, r4
    243e:	47b0      	blx	r6
		hri_sercomusart_set_CTRLA_ENABLE_bit(hw);
	}
}
    2440:	bdf7      	pop	{r0, r1, r2, r4, r5, r6, r7, pc}
    2442:	46c0      	nop			; (mov r8, r8)
    2444:	00002301 	.word	0x00002301
    2448:	00002335 	.word	0x00002335
    244c:	00001c2d 	.word	0x00001c2d
    2450:	000022f9 	.word	0x000022f9
    2454:	00001c3b 	.word	0x00001c3b

00002458 <_usart_set_parity>:
{
    2458:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
	bool enabled = hri_sercomusart_get_CTRLA_ENABLE_bit(hw);
    245a:	4b18      	ldr	r3, [pc, #96]	; (24bc <_usart_set_parity+0x64>)
{
    245c:	000d      	movs	r5, r1
    245e:	0004      	movs	r4, r0
	bool enabled = hri_sercomusart_get_CTRLA_ENABLE_bit(hw);
    2460:	4798      	blx	r3
	hri_sercomusart_clear_CTRLA_ENABLE_bit(hw);
    2462:	4b17      	ldr	r3, [pc, #92]	; (24c0 <_usart_set_parity+0x68>)
	bool enabled = hri_sercomusart_get_CTRLA_ENABLE_bit(hw);
    2464:	0007      	movs	r7, r0
	hri_sercomusart_clear_CTRLA_ENABLE_bit(hw);
    2466:	0020      	movs	r0, r4
    2468:	4798      	blx	r3
	CRITICAL_SECTION_ENTER()
    246a:	a801      	add	r0, sp, #4
    246c:	4b15      	ldr	r3, [pc, #84]	; (24c4 <_usart_set_parity+0x6c>)
    246e:	4798      	blx	r3
	hri_sercomusart_wait_for_sync(hw, SERCOM_USART_SYNCBUSY_ENABLE);
    2470:	2102      	movs	r1, #2
    2472:	0020      	movs	r0, r4
    2474:	4e14      	ldr	r6, [pc, #80]	; (24c8 <_usart_set_parity+0x70>)
    2476:	47b0      	blx	r6
	if (USART_PARITY_NONE != parity) {
    2478:	2d02      	cmp	r5, #2
    247a:	d01a      	beq.n	24b2 <_usart_set_parity+0x5a>
	((Sercom *)hw)->USART.CTRLA.reg |= SERCOM_USART_CTRLA_FORM(mask);
    247c:	2380      	movs	r3, #128	; 0x80
    247e:	6822      	ldr	r2, [r4, #0]
    2480:	045b      	lsls	r3, r3, #17
    2482:	4313      	orrs	r3, r2
	((Sercom *)hw)->USART.CTRLA.reg &= ~SERCOM_USART_CTRLA_FORM(mask);
    2484:	6023      	str	r3, [r4, #0]
	hri_sercomusart_wait_for_sync(hw, SERCOM_USART_SYNCBUSY_MASK);
    2486:	0020      	movs	r0, r4
    2488:	2107      	movs	r1, #7
    248a:	47b0      	blx	r6
	tmp &= ~SERCOM_USART_CTRLB_PMODE;
    248c:	4a0f      	ldr	r2, [pc, #60]	; (24cc <_usart_set_parity+0x74>)
	tmp = ((Sercom *)hw)->USART.CTRLB.reg;
    248e:	6863      	ldr	r3, [r4, #4]
	hri_sercomusart_wait_for_sync(hw, SERCOM_USART_SYNCBUSY_MASK);
    2490:	2107      	movs	r1, #7
	tmp &= ~SERCOM_USART_CTRLB_PMODE;
    2492:	4013      	ands	r3, r2
	hri_sercomusart_write_CTRLB_PMODE_bit(hw, parity);
    2494:	1e6a      	subs	r2, r5, #1
    2496:	4195      	sbcs	r5, r2
	tmp |= value << SERCOM_USART_CTRLB_PMODE_Pos;
    2498:	036d      	lsls	r5, r5, #13
    249a:	431d      	orrs	r5, r3
	((Sercom *)hw)->USART.CTRLB.reg = tmp;
    249c:	6065      	str	r5, [r4, #4]
	hri_sercomusart_wait_for_sync(hw, SERCOM_USART_SYNCBUSY_MASK);
    249e:	0020      	movs	r0, r4
    24a0:	47b0      	blx	r6
	CRITICAL_SECTION_LEAVE()
    24a2:	a801      	add	r0, sp, #4
    24a4:	4b0a      	ldr	r3, [pc, #40]	; (24d0 <_usart_set_parity+0x78>)
    24a6:	4798      	blx	r3
	hri_sercomusart_write_CTRLA_ENABLE_bit(hw, enabled);
    24a8:	0039      	movs	r1, r7
    24aa:	0020      	movs	r0, r4
    24ac:	4b09      	ldr	r3, [pc, #36]	; (24d4 <_usart_set_parity+0x7c>)
    24ae:	4798      	blx	r3
}
    24b0:	bdf7      	pop	{r0, r1, r2, r4, r5, r6, r7, pc}
	((Sercom *)hw)->USART.CTRLA.reg &= ~SERCOM_USART_CTRLA_FORM(mask);
    24b2:	6823      	ldr	r3, [r4, #0]
    24b4:	4a08      	ldr	r2, [pc, #32]	; (24d8 <_usart_set_parity+0x80>)
    24b6:	4013      	ands	r3, r2
    24b8:	e7e4      	b.n	2484 <_usart_set_parity+0x2c>
    24ba:	46c0      	nop			; (mov r8, r8)
    24bc:	00002301 	.word	0x00002301
    24c0:	00002335 	.word	0x00002335
    24c4:	00001c2d 	.word	0x00001c2d
    24c8:	000022f9 	.word	0x000022f9
    24cc:	ffffdfff 	.word	0xffffdfff
    24d0:	00001c3b 	.word	0x00001c3b
    24d4:	00002319 	.word	0x00002319
    24d8:	feffffff 	.word	0xfeffffff

000024dc <_usart_init>:
	if ((uint32_t)SERCOM5 == (uint32_t)hw) {
    24dc:	4b1c      	ldr	r3, [pc, #112]	; (2550 <_usart_init+0x74>)
{
    24de:	b570      	push	{r4, r5, r6, lr}
    24e0:	0004      	movs	r4, r0
	if ((uint32_t)SERCOM5 == (uint32_t)hw) {
    24e2:	4298      	cmp	r0, r3
    24e4:	d003      	beq.n	24ee <_usart_init+0x12>
	return ((uint32_t)hw - (uint32_t)SERCOM0) >> 10;
    24e6:	0383      	lsls	r3, r0, #14
		if (_usarts[i].number == sercom_offset) {
    24e8:	0e1b      	lsrs	r3, r3, #24
    24ea:	2b04      	cmp	r3, #4
    24ec:	d004      	beq.n	24f8 <_usart_init+0x1c>
	ASSERT(false);
    24ee:	4a19      	ldr	r2, [pc, #100]	; (2554 <_usart_init+0x78>)
    24f0:	4919      	ldr	r1, [pc, #100]	; (2558 <_usart_init+0x7c>)
    24f2:	2000      	movs	r0, #0
    24f4:	4b19      	ldr	r3, [pc, #100]	; (255c <_usart_init+0x80>)
    24f6:	4798      	blx	r3
	return ((Sercom *)hw)->USART.SYNCBUSY.reg & reg;
    24f8:	69e3      	ldr	r3, [r4, #28]
    24fa:	4d19      	ldr	r5, [pc, #100]	; (2560 <_usart_init+0x84>)
	if (!hri_sercomusart_is_syncing(hw, SERCOM_USART_SYNCBUSY_SWRST)) {
    24fc:	07db      	lsls	r3, r3, #31
    24fe:	d411      	bmi.n	2524 <_usart_init+0x48>
	tmp &= mask;
    2500:	2602      	movs	r6, #2
	hri_sercomusart_wait_for_sync(hw, SERCOM_USART_SYNCBUSY_SWRST | SERCOM_USART_SYNCBUSY_ENABLE);
    2502:	2103      	movs	r1, #3
    2504:	0020      	movs	r0, r4
    2506:	47a8      	blx	r5
	tmp = ((Sercom *)hw)->USART.CTRLA.reg;
    2508:	6823      	ldr	r3, [r4, #0]
		if (hri_sercomusart_get_CTRLA_reg(hw, SERCOM_USART_CTRLA_ENABLE)) {
    250a:	4233      	tst	r3, r6
    250c:	d005      	beq.n	251a <_usart_init+0x3e>
			hri_sercomusart_clear_CTRLA_ENABLE_bit(hw);
    250e:	0020      	movs	r0, r4
    2510:	4b14      	ldr	r3, [pc, #80]	; (2564 <_usart_init+0x88>)
    2512:	4798      	blx	r3
			hri_sercomusart_wait_for_sync(hw, SERCOM_USART_SYNCBUSY_ENABLE);
    2514:	0031      	movs	r1, r6
    2516:	0020      	movs	r0, r4
    2518:	47a8      	blx	r5
	((Sercom *)hw)->USART.CTRLA.reg = data;
    251a:	2305      	movs	r3, #5
	hri_sercomusart_wait_for_sync(hw, SERCOM_USART_SYNCBUSY_SWRST | SERCOM_USART_SYNCBUSY_ENABLE);
    251c:	2103      	movs	r1, #3
	((Sercom *)hw)->USART.CTRLA.reg = data;
    251e:	6023      	str	r3, [r4, #0]
	hri_sercomusart_wait_for_sync(hw, SERCOM_USART_SYNCBUSY_SWRST | SERCOM_USART_SYNCBUSY_ENABLE);
    2520:	0020      	movs	r0, r4
    2522:	47a8      	blx	r5
	hri_sercomusart_wait_for_sync(hw, SERCOM_USART_SYNCBUSY_SWRST);
    2524:	0020      	movs	r0, r4
    2526:	2101      	movs	r1, #1
    2528:	47a8      	blx	r5
	((Sercom *)hw)->USART.CTRLA.reg = data;
    252a:	4b0f      	ldr	r3, [pc, #60]	; (2568 <_usart_init+0x8c>)
	hri_sercomusart_wait_for_sync(hw, SERCOM_USART_SYNCBUSY_SWRST | SERCOM_USART_SYNCBUSY_ENABLE);
    252c:	0020      	movs	r0, r4
	((Sercom *)hw)->USART.CTRLA.reg = data;
    252e:	6023      	str	r3, [r4, #0]
	hri_sercomusart_wait_for_sync(hw, SERCOM_USART_SYNCBUSY_SWRST | SERCOM_USART_SYNCBUSY_ENABLE);
    2530:	2103      	movs	r1, #3
    2532:	47a8      	blx	r5
	((Sercom *)hw)->USART.CTRLB.reg = data;
    2534:	23c0      	movs	r3, #192	; 0xc0
    2536:	029b      	lsls	r3, r3, #10
    2538:	6063      	str	r3, [r4, #4]
	hri_sercomusart_wait_for_sync(hw, SERCOM_USART_SYNCBUSY_MASK);
    253a:	0020      	movs	r0, r4
    253c:	2107      	movs	r1, #7
    253e:	47a8      	blx	r5
}

static inline void hri_sercomusart_write_RXPL_reg(const void *const hw, hri_sercomusart_rxpl_reg_t data)
{
	SERCOM_CRITICAL_SECTION_ENTER();
	((Sercom *)hw)->USART.RXPL.reg = data;
    2540:	2000      	movs	r0, #0
	((Sercom *)hw)->USART.BAUD.reg = data;
    2542:	4b0a      	ldr	r3, [pc, #40]	; (256c <_usart_init+0x90>)
    2544:	81a3      	strh	r3, [r4, #12]
	((Sercom *)hw)->USART.RXPL.reg = data;
    2546:	73a0      	strb	r0, [r4, #14]
}

static inline void hri_sercomusart_write_DBGCTRL_reg(const void *const hw, hri_sercomusart_dbgctrl_reg_t data)
{
	SERCOM_CRITICAL_SECTION_ENTER();
	((Sercom *)hw)->USART.DBGCTRL.reg = data;
    2548:	3430      	adds	r4, #48	; 0x30
    254a:	7020      	strb	r0, [r4, #0]
}
    254c:	bd70      	pop	{r4, r5, r6, pc}
    254e:	46c0      	nop			; (mov r8, r8)
    2550:	43000400 	.word	0x43000400
    2554:	00000261 	.word	0x00000261
    2558:	00005224 	.word	0x00005224
    255c:	0000207d 	.word	0x0000207d
    2560:	000022f9 	.word	0x000022f9
    2564:	00002335 	.word	0x00002335
    2568:	40100004 	.word	0x40100004
    256c:	fffffd8a 	.word	0xfffffd8a

00002570 <_sercom_get_irq_num>:
	if ((uint32_t)SERCOM5 == (uint32_t)hw) {
    2570:	4a05      	ldr	r2, [pc, #20]	; (2588 <_sercom_get_irq_num+0x18>)
    2572:	2305      	movs	r3, #5
    2574:	4290      	cmp	r0, r2
    2576:	d003      	beq.n	2580 <_sercom_get_irq_num+0x10>
	return ((uint32_t)hw - (uint32_t)SERCOM0) >> 10;
    2578:	23be      	movs	r3, #190	; 0xbe
    257a:	061b      	lsls	r3, r3, #24
    257c:	18c0      	adds	r0, r0, r3
    257e:	0a83      	lsrs	r3, r0, #10
/**
 * \brief Retrieve IRQ number for the given hardware instance
 */
static uint8_t _sercom_get_irq_num(const void *const hw)
{
	return SERCOM0_IRQn + _sercom_get_hardware_index(hw);
    2580:	3308      	adds	r3, #8
    2582:	b2d8      	uxtb	r0, r3
}
    2584:	4770      	bx	lr
    2586:	46c0      	nop			; (mov r8, r8)
    2588:	43000400 	.word	0x43000400

0000258c <_usart_async_init>:
{
    258c:	b570      	push	{r4, r5, r6, lr}
    258e:	0006      	movs	r6, r0
	ASSERT(device);
    2590:	1e43      	subs	r3, r0, #1
    2592:	4198      	sbcs	r0, r3
{
    2594:	000c      	movs	r4, r1
	ASSERT(device);
    2596:	b2c0      	uxtb	r0, r0
    2598:	22c4      	movs	r2, #196	; 0xc4
    259a:	490e      	ldr	r1, [pc, #56]	; (25d4 <_usart_async_init+0x48>)
    259c:	4b0e      	ldr	r3, [pc, #56]	; (25d8 <_usart_async_init+0x4c>)
    259e:	4798      	blx	r3
	init_status = _usart_init(hw);
    25a0:	0020      	movs	r0, r4
    25a2:	4b0e      	ldr	r3, [pc, #56]	; (25dc <_usart_async_init+0x50>)
    25a4:	4798      	blx	r3
    25a6:	1e05      	subs	r5, r0, #0
	if (init_status) {
    25a8:	d112      	bne.n	25d0 <_usart_async_init+0x44>
	if (hw == SERCOM4) {
    25aa:	4b0d      	ldr	r3, [pc, #52]	; (25e0 <_usart_async_init+0x54>)
	device->hw = hw;
    25ac:	61b4      	str	r4, [r6, #24]
	if (hw == SERCOM4) {
    25ae:	429c      	cmp	r4, r3
    25b0:	d101      	bne.n	25b6 <_usart_async_init+0x2a>
		_sercom4_dev = (struct _usart_async_device *)dev;
    25b2:	4b0c      	ldr	r3, [pc, #48]	; (25e4 <_usart_async_init+0x58>)
    25b4:	601e      	str	r6, [r3, #0]
	NVIC_DisableIRQ((IRQn_Type)_sercom_get_irq_num(hw));
    25b6:	4b0c      	ldr	r3, [pc, #48]	; (25e8 <_usart_async_init+0x5c>)
    25b8:	0020      	movs	r0, r4
    25ba:	4798      	blx	r3
    25bc:	b244      	sxtb	r4, r0
    25be:	0020      	movs	r0, r4
    25c0:	4b0a      	ldr	r3, [pc, #40]	; (25ec <_usart_async_init+0x60>)
    25c2:	4798      	blx	r3
	NVIC_ClearPendingIRQ((IRQn_Type)_sercom_get_irq_num(hw));
    25c4:	0020      	movs	r0, r4
    25c6:	4b0a      	ldr	r3, [pc, #40]	; (25f0 <_usart_async_init+0x64>)
    25c8:	4798      	blx	r3
	NVIC_EnableIRQ((IRQn_Type)_sercom_get_irq_num(hw));
    25ca:	0020      	movs	r0, r4
    25cc:	4b09      	ldr	r3, [pc, #36]	; (25f4 <_usart_async_init+0x68>)
    25ce:	4798      	blx	r3
}
    25d0:	0028      	movs	r0, r5
    25d2:	bd70      	pop	{r4, r5, r6, pc}
    25d4:	00005224 	.word	0x00005224
    25d8:	0000207d 	.word	0x0000207d
    25dc:	000024dd 	.word	0x000024dd
    25e0:	42001000 	.word	0x42001000
    25e4:	20000550 	.word	0x20000550
    25e8:	00002571 	.word	0x00002571
    25ec:	000022bd 	.word	0x000022bd
    25f0:	000022dd 	.word	0x000022dd
    25f4:	000022a5 	.word	0x000022a5

000025f8 <_usart_async_enable>:
	((Sercom *)hw)->USART.CTRLA.reg |= SERCOM_USART_CTRLA_ENABLE;
    25f8:	2302      	movs	r3, #2
{
    25fa:	b510      	push	{r4, lr}
	hri_sercomusart_set_CTRLA_ENABLE_bit(device->hw);
    25fc:	6980      	ldr	r0, [r0, #24]
	hri_sercomusart_wait_for_sync(hw, SERCOM_USART_SYNCBUSY_SWRST | SERCOM_USART_SYNCBUSY_ENABLE);
    25fe:	2103      	movs	r1, #3
	((Sercom *)hw)->USART.CTRLA.reg |= SERCOM_USART_CTRLA_ENABLE;
    2600:	6802      	ldr	r2, [r0, #0]
    2602:	4313      	orrs	r3, r2
    2604:	6003      	str	r3, [r0, #0]
	hri_sercomusart_wait_for_sync(hw, SERCOM_USART_SYNCBUSY_SWRST | SERCOM_USART_SYNCBUSY_ENABLE);
    2606:	4b01      	ldr	r3, [pc, #4]	; (260c <_usart_async_enable+0x14>)
    2608:	4798      	blx	r3
}
    260a:	bd10      	pop	{r4, pc}
    260c:	000022f9 	.word	0x000022f9

00002610 <_usart_async_disable>:
{
    2610:	b510      	push	{r4, lr}
	hri_sercomusart_clear_CTRLA_ENABLE_bit(device->hw);
    2612:	6980      	ldr	r0, [r0, #24]
    2614:	4b01      	ldr	r3, [pc, #4]	; (261c <_usart_async_disable+0xc>)
    2616:	4798      	blx	r3
}
    2618:	bd10      	pop	{r4, pc}
    261a:	46c0      	nop			; (mov r8, r8)
    261c:	00002335 	.word	0x00002335

00002620 <_usart_async_set_baud_rate>:
{
    2620:	b510      	push	{r4, lr}
	_usart_set_baud_rate(device->hw, baud_rate);
    2622:	6980      	ldr	r0, [r0, #24]
    2624:	4b01      	ldr	r3, [pc, #4]	; (262c <_usart_async_set_baud_rate+0xc>)
    2626:	4798      	blx	r3
}
    2628:	bd10      	pop	{r4, pc}
    262a:	46c0      	nop			; (mov r8, r8)
    262c:	0000234d 	.word	0x0000234d

00002630 <_usart_async_set_parity>:
{
    2630:	b510      	push	{r4, lr}
	_usart_set_parity(device->hw, parity);
    2632:	6980      	ldr	r0, [r0, #24]
    2634:	4b01      	ldr	r3, [pc, #4]	; (263c <_usart_async_set_parity+0xc>)
    2636:	4798      	blx	r3
}
    2638:	bd10      	pop	{r4, pc}
    263a:	46c0      	nop			; (mov r8, r8)
    263c:	00002459 	.word	0x00002459

00002640 <_usart_async_set_stop_bits>:
{
    2640:	b510      	push	{r4, lr}
	_usart_set_stop_bits(device->hw, stop_bits);
    2642:	6980      	ldr	r0, [r0, #24]
    2644:	4b01      	ldr	r3, [pc, #4]	; (264c <_usart_async_set_stop_bits+0xc>)
    2646:	4798      	blx	r3
}
    2648:	bd10      	pop	{r4, pc}
    264a:	46c0      	nop			; (mov r8, r8)
    264c:	00002399 	.word	0x00002399

00002650 <_usart_async_set_character_size>:
{
    2650:	b510      	push	{r4, lr}
	_usart_set_character_size(device->hw, size);
    2652:	6980      	ldr	r0, [r0, #24]
    2654:	4b01      	ldr	r3, [pc, #4]	; (265c <_usart_async_set_character_size+0xc>)
    2656:	4798      	blx	r3
}
    2658:	bd10      	pop	{r4, pc}
    265a:	46c0      	nop			; (mov r8, r8)
    265c:	000023f9 	.word	0x000023f9

00002660 <_usart_async_write_byte>:
	hri_sercomusart_write_DATA_reg(device->hw, data);
    2660:	6983      	ldr	r3, [r0, #24]
    2662:	b289      	uxth	r1, r1
	((Sercom *)hw)->USART.DATA.reg = data;
    2664:	8519      	strh	r1, [r3, #40]	; 0x28
}
    2666:	4770      	bx	lr

00002668 <_usart_async_enable_byte_sent_irq>:
	((Sercom *)hw)->USART.INTENSET.reg = SERCOM_USART_INTENSET_DRE;
    2668:	2201      	movs	r2, #1
	hri_sercomusart_set_INTEN_DRE_bit(device->hw);
    266a:	6983      	ldr	r3, [r0, #24]
    266c:	759a      	strb	r2, [r3, #22]
}
    266e:	4770      	bx	lr

00002670 <_usart_async_enable_tx_done_irq>:
	((Sercom *)hw)->USART.INTENSET.reg = SERCOM_USART_INTENSET_TXC;
    2670:	2202      	movs	r2, #2
	hri_sercomusart_set_INTEN_TXC_bit(device->hw);
    2672:	6983      	ldr	r3, [r0, #24]
    2674:	759a      	strb	r2, [r3, #22]
}
    2676:	4770      	bx	lr

00002678 <_usart_async_set_irq_state>:
{
    2678:	b570      	push	{r4, r5, r6, lr}
    267a:	0004      	movs	r4, r0
	ASSERT(device);
    267c:	1e43      	subs	r3, r0, #1
    267e:	4198      	sbcs	r0, r3
{
    2680:	000e      	movs	r6, r1
	ASSERT(device);
    2682:	4b10      	ldr	r3, [pc, #64]	; (26c4 <_usart_async_set_irq_state+0x4c>)
{
    2684:	0015      	movs	r5, r2
	ASSERT(device);
    2686:	b2c0      	uxtb	r0, r0
    2688:	4a0f      	ldr	r2, [pc, #60]	; (26c8 <_usart_async_set_irq_state+0x50>)
    268a:	4910      	ldr	r1, [pc, #64]	; (26cc <_usart_async_set_irq_state+0x54>)
    268c:	4798      	blx	r3
	if (USART_ASYNC_BYTE_SENT == type || USART_ASYNC_TX_DONE == type) {
    268e:	2202      	movs	r2, #2
    2690:	0033      	movs	r3, r6
    2692:	4393      	bics	r3, r2
    2694:	d109      	bne.n	26aa <_usart_async_set_irq_state+0x32>
		hri_sercomusart_write_INTEN_DRE_bit(device->hw, state);
    2696:	69a3      	ldr	r3, [r4, #24]
    2698:	2101      	movs	r1, #1
	if (value == 0x0) {
    269a:	2d00      	cmp	r5, #0
    269c:	d102      	bne.n	26a4 <_usart_async_set_irq_state+0x2c>
		((Sercom *)hw)->USART.INTENCLR.reg = SERCOM_USART_INTENSET_DRE;
    269e:	7519      	strb	r1, [r3, #20]
		((Sercom *)hw)->USART.INTENCLR.reg = SERCOM_USART_INTENSET_ERROR;
    26a0:	751a      	strb	r2, [r3, #20]
}
    26a2:	bd70      	pop	{r4, r5, r6, pc}
		((Sercom *)hw)->USART.INTENSET.reg = SERCOM_USART_INTENSET_DRE;
    26a4:	7599      	strb	r1, [r3, #22]
		((Sercom *)hw)->USART.INTENSET.reg = SERCOM_USART_INTENSET_ERROR;
    26a6:	759a      	strb	r2, [r3, #22]
    26a8:	e7fb      	b.n	26a2 <_usart_async_set_irq_state+0x2a>
	} else if (USART_ASYNC_RX_DONE == type) {
    26aa:	2e01      	cmp	r6, #1
    26ac:	d104      	bne.n	26b8 <_usart_async_set_irq_state+0x40>
    26ae:	2204      	movs	r2, #4
		hri_sercomusart_write_INTEN_RXC_bit(device->hw, state);
    26b0:	69a3      	ldr	r3, [r4, #24]
	if (value == 0x0) {
    26b2:	2d00      	cmp	r5, #0
    26b4:	d1f7      	bne.n	26a6 <_usart_async_set_irq_state+0x2e>
    26b6:	e7f3      	b.n	26a0 <_usart_async_set_irq_state+0x28>
	} else if (USART_ASYNC_ERROR == type) {
    26b8:	2e03      	cmp	r6, #3
    26ba:	d1f2      	bne.n	26a2 <_usart_async_set_irq_state+0x2a>
		hri_sercomusart_write_INTEN_ERROR_bit(device->hw, state);
    26bc:	69a3      	ldr	r3, [r4, #24]
    26be:	2280      	movs	r2, #128	; 0x80
    26c0:	e7f7      	b.n	26b2 <_usart_async_set_irq_state+0x3a>
    26c2:	46c0      	nop			; (mov r8, r8)
    26c4:	0000207d 	.word	0x0000207d
    26c8:	00000221 	.word	0x00000221
    26cc:	00005224 	.word	0x00005224

000026d0 <SERCOM4_Handler>:
	return NULL;
}

void SERCOM4_Handler(void)
{
	_sercom_usart_interrupt_handler(_sercom4_dev);
    26d0:	4b19      	ldr	r3, [pc, #100]	; (2738 <SERCOM4_Handler+0x68>)
{
    26d2:	b510      	push	{r4, lr}
	_sercom_usart_interrupt_handler(_sercom4_dev);
    26d4:	6818      	ldr	r0, [r3, #0]
	if (hri_sercomusart_get_interrupt_DRE_bit(hw) && hri_sercomusart_get_INTEN_DRE_bit(hw)) {
    26d6:	2301      	movs	r3, #1
	void *hw = device->hw;
    26d8:	6984      	ldr	r4, [r0, #24]
	return (((Sercom *)hw)->USART.INTFLAG.reg & SERCOM_USART_INTFLAG_DRE) >> SERCOM_USART_INTFLAG_DRE_Pos;
    26da:	7e22      	ldrb	r2, [r4, #24]
	if (hri_sercomusart_get_interrupt_DRE_bit(hw) && hri_sercomusart_get_INTEN_DRE_bit(hw)) {
    26dc:	421a      	tst	r2, r3
    26de:	d006      	beq.n	26ee <SERCOM4_Handler+0x1e>
	return (((Sercom *)hw)->USART.INTENSET.reg & SERCOM_USART_INTENSET_DRE) >> SERCOM_USART_INTENSET_DRE_Pos;
    26e0:	7da2      	ldrb	r2, [r4, #22]
    26e2:	421a      	tst	r2, r3
    26e4:	d003      	beq.n	26ee <SERCOM4_Handler+0x1e>
	((Sercom *)hw)->USART.INTENCLR.reg = SERCOM_USART_INTENSET_DRE;
    26e6:	7523      	strb	r3, [r4, #20]
		device->usart_cb.tx_byte_sent(device);
    26e8:	6803      	ldr	r3, [r0, #0]
		device->usart_cb.tx_done_cb(device);
    26ea:	4798      	blx	r3
}
    26ec:	bd10      	pop	{r4, pc}
	return (((Sercom *)hw)->USART.INTFLAG.reg & SERCOM_USART_INTFLAG_TXC) >> SERCOM_USART_INTFLAG_TXC_Pos;
    26ee:	7e23      	ldrb	r3, [r4, #24]
    26f0:	2201      	movs	r2, #1
	} else if (hri_sercomusart_get_interrupt_TXC_bit(hw) && hri_sercomusart_get_INTEN_TXC_bit(hw)) {
    26f2:	079b      	lsls	r3, r3, #30
    26f4:	d507      	bpl.n	2706 <SERCOM4_Handler+0x36>
	return (((Sercom *)hw)->USART.INTENSET.reg & SERCOM_USART_INTENSET_TXC) >> SERCOM_USART_INTENSET_TXC_Pos;
    26f6:	7da3      	ldrb	r3, [r4, #22]
    26f8:	40d3      	lsrs	r3, r2
    26fa:	4213      	tst	r3, r2
    26fc:	d003      	beq.n	2706 <SERCOM4_Handler+0x36>
	((Sercom *)hw)->USART.INTENCLR.reg = SERCOM_USART_INTENSET_TXC;
    26fe:	2302      	movs	r3, #2
    2700:	7523      	strb	r3, [r4, #20]
		device->usart_cb.tx_done_cb(device);
    2702:	6883      	ldr	r3, [r0, #8]
    2704:	e7f1      	b.n	26ea <SERCOM4_Handler+0x1a>
	return (((Sercom *)hw)->USART.INTFLAG.reg & SERCOM_USART_INTFLAG_RXC) >> SERCOM_USART_INTFLAG_RXC_Pos;
    2706:	7e23      	ldrb	r3, [r4, #24]
	} else if (hri_sercomusart_get_interrupt_RXC_bit(hw)) {
    2708:	075b      	lsls	r3, r3, #29
    270a:	d50b      	bpl.n	2724 <SERCOM4_Handler+0x54>
		if (hri_sercomusart_read_STATUS_reg(hw)
    270c:	2337      	movs	r3, #55	; 0x37
	SERCOM_CRITICAL_SECTION_LEAVE();
}

static inline hri_sercomusart_status_reg_t hri_sercomusart_read_STATUS_reg(const void *const hw)
{
	return ((Sercom *)hw)->USART.STATUS.reg;
    270e:	8b62      	ldrh	r2, [r4, #26]
    2710:	421a      	tst	r2, r3
    2712:	d002      	beq.n	271a <SERCOM4_Handler+0x4a>
	((Sercom *)hw)->USART.STATUS.reg = mask;
    2714:	3308      	adds	r3, #8
    2716:	8363      	strh	r3, [r4, #26]
}
    2718:	e7e8      	b.n	26ec <SERCOM4_Handler+0x1c>
	return ((Sercom *)hw)->USART.DATA.reg;
    271a:	8d21      	ldrh	r1, [r4, #40]	; 0x28
		device->usart_cb.rx_done_cb(device, hri_sercomusart_read_DATA_reg(hw));
    271c:	6843      	ldr	r3, [r0, #4]
    271e:	b2c9      	uxtb	r1, r1
    2720:	4798      	blx	r3
    2722:	e7e3      	b.n	26ec <SERCOM4_Handler+0x1c>
	return (((Sercom *)hw)->USART.INTFLAG.reg & SERCOM_USART_INTFLAG_ERROR) >> SERCOM_USART_INTFLAG_ERROR_Pos;
    2724:	7e23      	ldrb	r3, [r4, #24]
	} else if (hri_sercomusart_get_interrupt_ERROR_bit(hw)) {
    2726:	09db      	lsrs	r3, r3, #7
    2728:	d0e0      	beq.n	26ec <SERCOM4_Handler+0x1c>
	((Sercom *)hw)->USART.INTFLAG.reg = SERCOM_USART_INTFLAG_ERROR;
    272a:	2380      	movs	r3, #128	; 0x80
    272c:	7623      	strb	r3, [r4, #24]
		device->usart_cb.error_cb(device);
    272e:	68c3      	ldr	r3, [r0, #12]
    2730:	4798      	blx	r3
	return ((Sercom *)hw)->USART.STATUS.reg;
    2732:	8b63      	ldrh	r3, [r4, #26]
    2734:	b29b      	uxth	r3, r3
    2736:	e7ee      	b.n	2716 <SERCOM4_Handler+0x46>
    2738:	20000550 	.word	0x20000550

0000273c <main>:
#include "cupdi/cupdi.h"

int main(void)
{
	/* Initializes MCU, drivers and middleware */
	atmel_start_init();
    273c:	4b02      	ldr	r3, [pc, #8]	; (2748 <main+0xc>)
{
    273e:	b510      	push	{r4, lr}
	atmel_start_init();
    2740:	4798      	blx	r3

#ifdef CUPDI
	cupdi_operate();
    2742:	4b02      	ldr	r3, [pc, #8]	; (274c <main+0x10>)
    2744:	4798      	blx	r3
    2746:	e7fe      	b.n	2746 <main+0xa>
    2748:	00000115 	.word	0x00000115
    274c:	00000235 	.word	0x00000235

00002750 <__gnu_thumb1_case_uqi>:
    2750:	b402      	push	{r1}
    2752:	4671      	mov	r1, lr
    2754:	0849      	lsrs	r1, r1, #1
    2756:	0049      	lsls	r1, r1, #1
    2758:	5c09      	ldrb	r1, [r1, r0]
    275a:	0049      	lsls	r1, r1, #1
    275c:	448e      	add	lr, r1
    275e:	bc02      	pop	{r1}
    2760:	4770      	bx	lr
    2762:	46c0      	nop			; (mov r8, r8)

00002764 <__udivsi3>:
    2764:	2200      	movs	r2, #0
    2766:	0843      	lsrs	r3, r0, #1
    2768:	428b      	cmp	r3, r1
    276a:	d374      	bcc.n	2856 <__udivsi3+0xf2>
    276c:	0903      	lsrs	r3, r0, #4
    276e:	428b      	cmp	r3, r1
    2770:	d35f      	bcc.n	2832 <__udivsi3+0xce>
    2772:	0a03      	lsrs	r3, r0, #8
    2774:	428b      	cmp	r3, r1
    2776:	d344      	bcc.n	2802 <__udivsi3+0x9e>
    2778:	0b03      	lsrs	r3, r0, #12
    277a:	428b      	cmp	r3, r1
    277c:	d328      	bcc.n	27d0 <__udivsi3+0x6c>
    277e:	0c03      	lsrs	r3, r0, #16
    2780:	428b      	cmp	r3, r1
    2782:	d30d      	bcc.n	27a0 <__udivsi3+0x3c>
    2784:	22ff      	movs	r2, #255	; 0xff
    2786:	0209      	lsls	r1, r1, #8
    2788:	ba12      	rev	r2, r2
    278a:	0c03      	lsrs	r3, r0, #16
    278c:	428b      	cmp	r3, r1
    278e:	d302      	bcc.n	2796 <__udivsi3+0x32>
    2790:	1212      	asrs	r2, r2, #8
    2792:	0209      	lsls	r1, r1, #8
    2794:	d065      	beq.n	2862 <__udivsi3+0xfe>
    2796:	0b03      	lsrs	r3, r0, #12
    2798:	428b      	cmp	r3, r1
    279a:	d319      	bcc.n	27d0 <__udivsi3+0x6c>
    279c:	e000      	b.n	27a0 <__udivsi3+0x3c>
    279e:	0a09      	lsrs	r1, r1, #8
    27a0:	0bc3      	lsrs	r3, r0, #15
    27a2:	428b      	cmp	r3, r1
    27a4:	d301      	bcc.n	27aa <__udivsi3+0x46>
    27a6:	03cb      	lsls	r3, r1, #15
    27a8:	1ac0      	subs	r0, r0, r3
    27aa:	4152      	adcs	r2, r2
    27ac:	0b83      	lsrs	r3, r0, #14
    27ae:	428b      	cmp	r3, r1
    27b0:	d301      	bcc.n	27b6 <__udivsi3+0x52>
    27b2:	038b      	lsls	r3, r1, #14
    27b4:	1ac0      	subs	r0, r0, r3
    27b6:	4152      	adcs	r2, r2
    27b8:	0b43      	lsrs	r3, r0, #13
    27ba:	428b      	cmp	r3, r1
    27bc:	d301      	bcc.n	27c2 <__udivsi3+0x5e>
    27be:	034b      	lsls	r3, r1, #13
    27c0:	1ac0      	subs	r0, r0, r3
    27c2:	4152      	adcs	r2, r2
    27c4:	0b03      	lsrs	r3, r0, #12
    27c6:	428b      	cmp	r3, r1
    27c8:	d301      	bcc.n	27ce <__udivsi3+0x6a>
    27ca:	030b      	lsls	r3, r1, #12
    27cc:	1ac0      	subs	r0, r0, r3
    27ce:	4152      	adcs	r2, r2
    27d0:	0ac3      	lsrs	r3, r0, #11
    27d2:	428b      	cmp	r3, r1
    27d4:	d301      	bcc.n	27da <__udivsi3+0x76>
    27d6:	02cb      	lsls	r3, r1, #11
    27d8:	1ac0      	subs	r0, r0, r3
    27da:	4152      	adcs	r2, r2
    27dc:	0a83      	lsrs	r3, r0, #10
    27de:	428b      	cmp	r3, r1
    27e0:	d301      	bcc.n	27e6 <__udivsi3+0x82>
    27e2:	028b      	lsls	r3, r1, #10
    27e4:	1ac0      	subs	r0, r0, r3
    27e6:	4152      	adcs	r2, r2
    27e8:	0a43      	lsrs	r3, r0, #9
    27ea:	428b      	cmp	r3, r1
    27ec:	d301      	bcc.n	27f2 <__udivsi3+0x8e>
    27ee:	024b      	lsls	r3, r1, #9
    27f0:	1ac0      	subs	r0, r0, r3
    27f2:	4152      	adcs	r2, r2
    27f4:	0a03      	lsrs	r3, r0, #8
    27f6:	428b      	cmp	r3, r1
    27f8:	d301      	bcc.n	27fe <__udivsi3+0x9a>
    27fa:	020b      	lsls	r3, r1, #8
    27fc:	1ac0      	subs	r0, r0, r3
    27fe:	4152      	adcs	r2, r2
    2800:	d2cd      	bcs.n	279e <__udivsi3+0x3a>
    2802:	09c3      	lsrs	r3, r0, #7
    2804:	428b      	cmp	r3, r1
    2806:	d301      	bcc.n	280c <__udivsi3+0xa8>
    2808:	01cb      	lsls	r3, r1, #7
    280a:	1ac0      	subs	r0, r0, r3
    280c:	4152      	adcs	r2, r2
    280e:	0983      	lsrs	r3, r0, #6
    2810:	428b      	cmp	r3, r1
    2812:	d301      	bcc.n	2818 <__udivsi3+0xb4>
    2814:	018b      	lsls	r3, r1, #6
    2816:	1ac0      	subs	r0, r0, r3
    2818:	4152      	adcs	r2, r2
    281a:	0943      	lsrs	r3, r0, #5
    281c:	428b      	cmp	r3, r1
    281e:	d301      	bcc.n	2824 <__udivsi3+0xc0>
    2820:	014b      	lsls	r3, r1, #5
    2822:	1ac0      	subs	r0, r0, r3
    2824:	4152      	adcs	r2, r2
    2826:	0903      	lsrs	r3, r0, #4
    2828:	428b      	cmp	r3, r1
    282a:	d301      	bcc.n	2830 <__udivsi3+0xcc>
    282c:	010b      	lsls	r3, r1, #4
    282e:	1ac0      	subs	r0, r0, r3
    2830:	4152      	adcs	r2, r2
    2832:	08c3      	lsrs	r3, r0, #3
    2834:	428b      	cmp	r3, r1
    2836:	d301      	bcc.n	283c <__udivsi3+0xd8>
    2838:	00cb      	lsls	r3, r1, #3
    283a:	1ac0      	subs	r0, r0, r3
    283c:	4152      	adcs	r2, r2
    283e:	0883      	lsrs	r3, r0, #2
    2840:	428b      	cmp	r3, r1
    2842:	d301      	bcc.n	2848 <__udivsi3+0xe4>
    2844:	008b      	lsls	r3, r1, #2
    2846:	1ac0      	subs	r0, r0, r3
    2848:	4152      	adcs	r2, r2
    284a:	0843      	lsrs	r3, r0, #1
    284c:	428b      	cmp	r3, r1
    284e:	d301      	bcc.n	2854 <__udivsi3+0xf0>
    2850:	004b      	lsls	r3, r1, #1
    2852:	1ac0      	subs	r0, r0, r3
    2854:	4152      	adcs	r2, r2
    2856:	1a41      	subs	r1, r0, r1
    2858:	d200      	bcs.n	285c <__udivsi3+0xf8>
    285a:	4601      	mov	r1, r0
    285c:	4152      	adcs	r2, r2
    285e:	4610      	mov	r0, r2
    2860:	4770      	bx	lr
    2862:	e7ff      	b.n	2864 <__udivsi3+0x100>
    2864:	b501      	push	{r0, lr}
    2866:	2000      	movs	r0, #0
    2868:	f000 f8f0 	bl	2a4c <__aeabi_idiv0>
    286c:	bd02      	pop	{r1, pc}
    286e:	46c0      	nop			; (mov r8, r8)

00002870 <__aeabi_uidivmod>:
    2870:	2900      	cmp	r1, #0
    2872:	d0f7      	beq.n	2864 <__udivsi3+0x100>
    2874:	e776      	b.n	2764 <__udivsi3>
    2876:	4770      	bx	lr

00002878 <__divsi3>:
    2878:	4603      	mov	r3, r0
    287a:	430b      	orrs	r3, r1
    287c:	d47f      	bmi.n	297e <__divsi3+0x106>
    287e:	2200      	movs	r2, #0
    2880:	0843      	lsrs	r3, r0, #1
    2882:	428b      	cmp	r3, r1
    2884:	d374      	bcc.n	2970 <__divsi3+0xf8>
    2886:	0903      	lsrs	r3, r0, #4
    2888:	428b      	cmp	r3, r1
    288a:	d35f      	bcc.n	294c <__divsi3+0xd4>
    288c:	0a03      	lsrs	r3, r0, #8
    288e:	428b      	cmp	r3, r1
    2890:	d344      	bcc.n	291c <__divsi3+0xa4>
    2892:	0b03      	lsrs	r3, r0, #12
    2894:	428b      	cmp	r3, r1
    2896:	d328      	bcc.n	28ea <__divsi3+0x72>
    2898:	0c03      	lsrs	r3, r0, #16
    289a:	428b      	cmp	r3, r1
    289c:	d30d      	bcc.n	28ba <__divsi3+0x42>
    289e:	22ff      	movs	r2, #255	; 0xff
    28a0:	0209      	lsls	r1, r1, #8
    28a2:	ba12      	rev	r2, r2
    28a4:	0c03      	lsrs	r3, r0, #16
    28a6:	428b      	cmp	r3, r1
    28a8:	d302      	bcc.n	28b0 <__divsi3+0x38>
    28aa:	1212      	asrs	r2, r2, #8
    28ac:	0209      	lsls	r1, r1, #8
    28ae:	d065      	beq.n	297c <__divsi3+0x104>
    28b0:	0b03      	lsrs	r3, r0, #12
    28b2:	428b      	cmp	r3, r1
    28b4:	d319      	bcc.n	28ea <__divsi3+0x72>
    28b6:	e000      	b.n	28ba <__divsi3+0x42>
    28b8:	0a09      	lsrs	r1, r1, #8
    28ba:	0bc3      	lsrs	r3, r0, #15
    28bc:	428b      	cmp	r3, r1
    28be:	d301      	bcc.n	28c4 <__divsi3+0x4c>
    28c0:	03cb      	lsls	r3, r1, #15
    28c2:	1ac0      	subs	r0, r0, r3
    28c4:	4152      	adcs	r2, r2
    28c6:	0b83      	lsrs	r3, r0, #14
    28c8:	428b      	cmp	r3, r1
    28ca:	d301      	bcc.n	28d0 <__divsi3+0x58>
    28cc:	038b      	lsls	r3, r1, #14
    28ce:	1ac0      	subs	r0, r0, r3
    28d0:	4152      	adcs	r2, r2
    28d2:	0b43      	lsrs	r3, r0, #13
    28d4:	428b      	cmp	r3, r1
    28d6:	d301      	bcc.n	28dc <__divsi3+0x64>
    28d8:	034b      	lsls	r3, r1, #13
    28da:	1ac0      	subs	r0, r0, r3
    28dc:	4152      	adcs	r2, r2
    28de:	0b03      	lsrs	r3, r0, #12
    28e0:	428b      	cmp	r3, r1
    28e2:	d301      	bcc.n	28e8 <__divsi3+0x70>
    28e4:	030b      	lsls	r3, r1, #12
    28e6:	1ac0      	subs	r0, r0, r3
    28e8:	4152      	adcs	r2, r2
    28ea:	0ac3      	lsrs	r3, r0, #11
    28ec:	428b      	cmp	r3, r1
    28ee:	d301      	bcc.n	28f4 <__divsi3+0x7c>
    28f0:	02cb      	lsls	r3, r1, #11
    28f2:	1ac0      	subs	r0, r0, r3
    28f4:	4152      	adcs	r2, r2
    28f6:	0a83      	lsrs	r3, r0, #10
    28f8:	428b      	cmp	r3, r1
    28fa:	d301      	bcc.n	2900 <__divsi3+0x88>
    28fc:	028b      	lsls	r3, r1, #10
    28fe:	1ac0      	subs	r0, r0, r3
    2900:	4152      	adcs	r2, r2
    2902:	0a43      	lsrs	r3, r0, #9
    2904:	428b      	cmp	r3, r1
    2906:	d301      	bcc.n	290c <__divsi3+0x94>
    2908:	024b      	lsls	r3, r1, #9
    290a:	1ac0      	subs	r0, r0, r3
    290c:	4152      	adcs	r2, r2
    290e:	0a03      	lsrs	r3, r0, #8
    2910:	428b      	cmp	r3, r1
    2912:	d301      	bcc.n	2918 <__divsi3+0xa0>
    2914:	020b      	lsls	r3, r1, #8
    2916:	1ac0      	subs	r0, r0, r3
    2918:	4152      	adcs	r2, r2
    291a:	d2cd      	bcs.n	28b8 <__divsi3+0x40>
    291c:	09c3      	lsrs	r3, r0, #7
    291e:	428b      	cmp	r3, r1
    2920:	d301      	bcc.n	2926 <__divsi3+0xae>
    2922:	01cb      	lsls	r3, r1, #7
    2924:	1ac0      	subs	r0, r0, r3
    2926:	4152      	adcs	r2, r2
    2928:	0983      	lsrs	r3, r0, #6
    292a:	428b      	cmp	r3, r1
    292c:	d301      	bcc.n	2932 <__divsi3+0xba>
    292e:	018b      	lsls	r3, r1, #6
    2930:	1ac0      	subs	r0, r0, r3
    2932:	4152      	adcs	r2, r2
    2934:	0943      	lsrs	r3, r0, #5
    2936:	428b      	cmp	r3, r1
    2938:	d301      	bcc.n	293e <__divsi3+0xc6>
    293a:	014b      	lsls	r3, r1, #5
    293c:	1ac0      	subs	r0, r0, r3
    293e:	4152      	adcs	r2, r2
    2940:	0903      	lsrs	r3, r0, #4
    2942:	428b      	cmp	r3, r1
    2944:	d301      	bcc.n	294a <__divsi3+0xd2>
    2946:	010b      	lsls	r3, r1, #4
    2948:	1ac0      	subs	r0, r0, r3
    294a:	4152      	adcs	r2, r2
    294c:	08c3      	lsrs	r3, r0, #3
    294e:	428b      	cmp	r3, r1
    2950:	d301      	bcc.n	2956 <__divsi3+0xde>
    2952:	00cb      	lsls	r3, r1, #3
    2954:	1ac0      	subs	r0, r0, r3
    2956:	4152      	adcs	r2, r2
    2958:	0883      	lsrs	r3, r0, #2
    295a:	428b      	cmp	r3, r1
    295c:	d301      	bcc.n	2962 <__divsi3+0xea>
    295e:	008b      	lsls	r3, r1, #2
    2960:	1ac0      	subs	r0, r0, r3
    2962:	4152      	adcs	r2, r2
    2964:	0843      	lsrs	r3, r0, #1
    2966:	428b      	cmp	r3, r1
    2968:	d301      	bcc.n	296e <__divsi3+0xf6>
    296a:	004b      	lsls	r3, r1, #1
    296c:	1ac0      	subs	r0, r0, r3
    296e:	4152      	adcs	r2, r2
    2970:	1a41      	subs	r1, r0, r1
    2972:	d200      	bcs.n	2976 <__divsi3+0xfe>
    2974:	4601      	mov	r1, r0
    2976:	4152      	adcs	r2, r2
    2978:	4610      	mov	r0, r2
    297a:	4770      	bx	lr
    297c:	e05d      	b.n	2a3a <__divsi3+0x1c2>
    297e:	0fca      	lsrs	r2, r1, #31
    2980:	d000      	beq.n	2984 <__divsi3+0x10c>
    2982:	4249      	negs	r1, r1
    2984:	1003      	asrs	r3, r0, #32
    2986:	d300      	bcc.n	298a <__divsi3+0x112>
    2988:	4240      	negs	r0, r0
    298a:	4053      	eors	r3, r2
    298c:	2200      	movs	r2, #0
    298e:	469c      	mov	ip, r3
    2990:	0903      	lsrs	r3, r0, #4
    2992:	428b      	cmp	r3, r1
    2994:	d32d      	bcc.n	29f2 <__divsi3+0x17a>
    2996:	0a03      	lsrs	r3, r0, #8
    2998:	428b      	cmp	r3, r1
    299a:	d312      	bcc.n	29c2 <__divsi3+0x14a>
    299c:	22fc      	movs	r2, #252	; 0xfc
    299e:	0189      	lsls	r1, r1, #6
    29a0:	ba12      	rev	r2, r2
    29a2:	0a03      	lsrs	r3, r0, #8
    29a4:	428b      	cmp	r3, r1
    29a6:	d30c      	bcc.n	29c2 <__divsi3+0x14a>
    29a8:	0189      	lsls	r1, r1, #6
    29aa:	1192      	asrs	r2, r2, #6
    29ac:	428b      	cmp	r3, r1
    29ae:	d308      	bcc.n	29c2 <__divsi3+0x14a>
    29b0:	0189      	lsls	r1, r1, #6
    29b2:	1192      	asrs	r2, r2, #6
    29b4:	428b      	cmp	r3, r1
    29b6:	d304      	bcc.n	29c2 <__divsi3+0x14a>
    29b8:	0189      	lsls	r1, r1, #6
    29ba:	d03a      	beq.n	2a32 <__divsi3+0x1ba>
    29bc:	1192      	asrs	r2, r2, #6
    29be:	e000      	b.n	29c2 <__divsi3+0x14a>
    29c0:	0989      	lsrs	r1, r1, #6
    29c2:	09c3      	lsrs	r3, r0, #7
    29c4:	428b      	cmp	r3, r1
    29c6:	d301      	bcc.n	29cc <__divsi3+0x154>
    29c8:	01cb      	lsls	r3, r1, #7
    29ca:	1ac0      	subs	r0, r0, r3
    29cc:	4152      	adcs	r2, r2
    29ce:	0983      	lsrs	r3, r0, #6
    29d0:	428b      	cmp	r3, r1
    29d2:	d301      	bcc.n	29d8 <__divsi3+0x160>
    29d4:	018b      	lsls	r3, r1, #6
    29d6:	1ac0      	subs	r0, r0, r3
    29d8:	4152      	adcs	r2, r2
    29da:	0943      	lsrs	r3, r0, #5
    29dc:	428b      	cmp	r3, r1
    29de:	d301      	bcc.n	29e4 <__divsi3+0x16c>
    29e0:	014b      	lsls	r3, r1, #5
    29e2:	1ac0      	subs	r0, r0, r3
    29e4:	4152      	adcs	r2, r2
    29e6:	0903      	lsrs	r3, r0, #4
    29e8:	428b      	cmp	r3, r1
    29ea:	d301      	bcc.n	29f0 <__divsi3+0x178>
    29ec:	010b      	lsls	r3, r1, #4
    29ee:	1ac0      	subs	r0, r0, r3
    29f0:	4152      	adcs	r2, r2
    29f2:	08c3      	lsrs	r3, r0, #3
    29f4:	428b      	cmp	r3, r1
    29f6:	d301      	bcc.n	29fc <__divsi3+0x184>
    29f8:	00cb      	lsls	r3, r1, #3
    29fa:	1ac0      	subs	r0, r0, r3
    29fc:	4152      	adcs	r2, r2
    29fe:	0883      	lsrs	r3, r0, #2
    2a00:	428b      	cmp	r3, r1
    2a02:	d301      	bcc.n	2a08 <__divsi3+0x190>
    2a04:	008b      	lsls	r3, r1, #2
    2a06:	1ac0      	subs	r0, r0, r3
    2a08:	4152      	adcs	r2, r2
    2a0a:	d2d9      	bcs.n	29c0 <__divsi3+0x148>
    2a0c:	0843      	lsrs	r3, r0, #1
    2a0e:	428b      	cmp	r3, r1
    2a10:	d301      	bcc.n	2a16 <__divsi3+0x19e>
    2a12:	004b      	lsls	r3, r1, #1
    2a14:	1ac0      	subs	r0, r0, r3
    2a16:	4152      	adcs	r2, r2
    2a18:	1a41      	subs	r1, r0, r1
    2a1a:	d200      	bcs.n	2a1e <__divsi3+0x1a6>
    2a1c:	4601      	mov	r1, r0
    2a1e:	4663      	mov	r3, ip
    2a20:	4152      	adcs	r2, r2
    2a22:	105b      	asrs	r3, r3, #1
    2a24:	4610      	mov	r0, r2
    2a26:	d301      	bcc.n	2a2c <__divsi3+0x1b4>
    2a28:	4240      	negs	r0, r0
    2a2a:	2b00      	cmp	r3, #0
    2a2c:	d500      	bpl.n	2a30 <__divsi3+0x1b8>
    2a2e:	4249      	negs	r1, r1
    2a30:	4770      	bx	lr
    2a32:	4663      	mov	r3, ip
    2a34:	105b      	asrs	r3, r3, #1
    2a36:	d300      	bcc.n	2a3a <__divsi3+0x1c2>
    2a38:	4240      	negs	r0, r0
    2a3a:	b501      	push	{r0, lr}
    2a3c:	2000      	movs	r0, #0
    2a3e:	f000 f805 	bl	2a4c <__aeabi_idiv0>
    2a42:	bd02      	pop	{r1, pc}

00002a44 <__aeabi_idivmod>:
    2a44:	2900      	cmp	r1, #0
    2a46:	d0f8      	beq.n	2a3a <__divsi3+0x1c2>
    2a48:	e716      	b.n	2878 <__divsi3>
    2a4a:	4770      	bx	lr

00002a4c <__aeabi_idiv0>:
    2a4c:	4770      	bx	lr
    2a4e:	46c0      	nop			; (mov r8, r8)

00002a50 <__aeabi_f2uiz>:
    2a50:	219e      	movs	r1, #158	; 0x9e
    2a52:	b510      	push	{r4, lr}
    2a54:	05c9      	lsls	r1, r1, #23
    2a56:	1c04      	adds	r4, r0, #0
    2a58:	f000 fb64 	bl	3124 <__aeabi_fcmpge>
    2a5c:	2800      	cmp	r0, #0
    2a5e:	d103      	bne.n	2a68 <__aeabi_f2uiz+0x18>
    2a60:	1c20      	adds	r0, r4, #0
    2a62:	f000 fac9 	bl	2ff8 <__aeabi_f2iz>
    2a66:	bd10      	pop	{r4, pc}
    2a68:	219e      	movs	r1, #158	; 0x9e
    2a6a:	1c20      	adds	r0, r4, #0
    2a6c:	05c9      	lsls	r1, r1, #23
    2a6e:	f000 f927 	bl	2cc0 <__aeabi_fsub>
    2a72:	f000 fac1 	bl	2ff8 <__aeabi_f2iz>
    2a76:	2380      	movs	r3, #128	; 0x80
    2a78:	061b      	lsls	r3, r3, #24
    2a7a:	469c      	mov	ip, r3
    2a7c:	4460      	add	r0, ip
    2a7e:	e7f2      	b.n	2a66 <__aeabi_f2uiz+0x16>

00002a80 <__aeabi_fmul>:
    2a80:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    2a82:	4657      	mov	r7, sl
    2a84:	464e      	mov	r6, r9
    2a86:	4645      	mov	r5, r8
    2a88:	46de      	mov	lr, fp
    2a8a:	b5e0      	push	{r5, r6, r7, lr}
    2a8c:	0247      	lsls	r7, r0, #9
    2a8e:	0046      	lsls	r6, r0, #1
    2a90:	4688      	mov	r8, r1
    2a92:	0a7f      	lsrs	r7, r7, #9
    2a94:	0e36      	lsrs	r6, r6, #24
    2a96:	0fc4      	lsrs	r4, r0, #31
    2a98:	2e00      	cmp	r6, #0
    2a9a:	d047      	beq.n	2b2c <__aeabi_fmul+0xac>
    2a9c:	2eff      	cmp	r6, #255	; 0xff
    2a9e:	d024      	beq.n	2aea <__aeabi_fmul+0x6a>
    2aa0:	00fb      	lsls	r3, r7, #3
    2aa2:	2780      	movs	r7, #128	; 0x80
    2aa4:	04ff      	lsls	r7, r7, #19
    2aa6:	431f      	orrs	r7, r3
    2aa8:	2300      	movs	r3, #0
    2aaa:	4699      	mov	r9, r3
    2aac:	469a      	mov	sl, r3
    2aae:	3e7f      	subs	r6, #127	; 0x7f
    2ab0:	4643      	mov	r3, r8
    2ab2:	025d      	lsls	r5, r3, #9
    2ab4:	0058      	lsls	r0, r3, #1
    2ab6:	0fdb      	lsrs	r3, r3, #31
    2ab8:	0a6d      	lsrs	r5, r5, #9
    2aba:	0e00      	lsrs	r0, r0, #24
    2abc:	4698      	mov	r8, r3
    2abe:	d043      	beq.n	2b48 <__aeabi_fmul+0xc8>
    2ac0:	28ff      	cmp	r0, #255	; 0xff
    2ac2:	d03b      	beq.n	2b3c <__aeabi_fmul+0xbc>
    2ac4:	00eb      	lsls	r3, r5, #3
    2ac6:	2580      	movs	r5, #128	; 0x80
    2ac8:	2200      	movs	r2, #0
    2aca:	04ed      	lsls	r5, r5, #19
    2acc:	431d      	orrs	r5, r3
    2ace:	387f      	subs	r0, #127	; 0x7f
    2ad0:	1836      	adds	r6, r6, r0
    2ad2:	1c73      	adds	r3, r6, #1
    2ad4:	4641      	mov	r1, r8
    2ad6:	469b      	mov	fp, r3
    2ad8:	464b      	mov	r3, r9
    2ada:	4061      	eors	r1, r4
    2adc:	4313      	orrs	r3, r2
    2ade:	2b0f      	cmp	r3, #15
    2ae0:	d864      	bhi.n	2bac <__aeabi_fmul+0x12c>
    2ae2:	4875      	ldr	r0, [pc, #468]	; (2cb8 <__aeabi_fmul+0x238>)
    2ae4:	009b      	lsls	r3, r3, #2
    2ae6:	58c3      	ldr	r3, [r0, r3]
    2ae8:	469f      	mov	pc, r3
    2aea:	2f00      	cmp	r7, #0
    2aec:	d142      	bne.n	2b74 <__aeabi_fmul+0xf4>
    2aee:	2308      	movs	r3, #8
    2af0:	4699      	mov	r9, r3
    2af2:	3b06      	subs	r3, #6
    2af4:	26ff      	movs	r6, #255	; 0xff
    2af6:	469a      	mov	sl, r3
    2af8:	e7da      	b.n	2ab0 <__aeabi_fmul+0x30>
    2afa:	4641      	mov	r1, r8
    2afc:	2a02      	cmp	r2, #2
    2afe:	d028      	beq.n	2b52 <__aeabi_fmul+0xd2>
    2b00:	2a03      	cmp	r2, #3
    2b02:	d100      	bne.n	2b06 <__aeabi_fmul+0x86>
    2b04:	e0ce      	b.n	2ca4 <__aeabi_fmul+0x224>
    2b06:	2a01      	cmp	r2, #1
    2b08:	d000      	beq.n	2b0c <__aeabi_fmul+0x8c>
    2b0a:	e0ac      	b.n	2c66 <__aeabi_fmul+0x1e6>
    2b0c:	4011      	ands	r1, r2
    2b0e:	2000      	movs	r0, #0
    2b10:	2200      	movs	r2, #0
    2b12:	b2cc      	uxtb	r4, r1
    2b14:	0240      	lsls	r0, r0, #9
    2b16:	05d2      	lsls	r2, r2, #23
    2b18:	0a40      	lsrs	r0, r0, #9
    2b1a:	07e4      	lsls	r4, r4, #31
    2b1c:	4310      	orrs	r0, r2
    2b1e:	4320      	orrs	r0, r4
    2b20:	bc3c      	pop	{r2, r3, r4, r5}
    2b22:	4690      	mov	r8, r2
    2b24:	4699      	mov	r9, r3
    2b26:	46a2      	mov	sl, r4
    2b28:	46ab      	mov	fp, r5
    2b2a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    2b2c:	2f00      	cmp	r7, #0
    2b2e:	d115      	bne.n	2b5c <__aeabi_fmul+0xdc>
    2b30:	2304      	movs	r3, #4
    2b32:	4699      	mov	r9, r3
    2b34:	3b03      	subs	r3, #3
    2b36:	2600      	movs	r6, #0
    2b38:	469a      	mov	sl, r3
    2b3a:	e7b9      	b.n	2ab0 <__aeabi_fmul+0x30>
    2b3c:	20ff      	movs	r0, #255	; 0xff
    2b3e:	2202      	movs	r2, #2
    2b40:	2d00      	cmp	r5, #0
    2b42:	d0c5      	beq.n	2ad0 <__aeabi_fmul+0x50>
    2b44:	2203      	movs	r2, #3
    2b46:	e7c3      	b.n	2ad0 <__aeabi_fmul+0x50>
    2b48:	2d00      	cmp	r5, #0
    2b4a:	d119      	bne.n	2b80 <__aeabi_fmul+0x100>
    2b4c:	2000      	movs	r0, #0
    2b4e:	2201      	movs	r2, #1
    2b50:	e7be      	b.n	2ad0 <__aeabi_fmul+0x50>
    2b52:	2401      	movs	r4, #1
    2b54:	22ff      	movs	r2, #255	; 0xff
    2b56:	400c      	ands	r4, r1
    2b58:	2000      	movs	r0, #0
    2b5a:	e7db      	b.n	2b14 <__aeabi_fmul+0x94>
    2b5c:	0038      	movs	r0, r7
    2b5e:	f000 faeb 	bl	3138 <__clzsi2>
    2b62:	2676      	movs	r6, #118	; 0x76
    2b64:	1f43      	subs	r3, r0, #5
    2b66:	409f      	lsls	r7, r3
    2b68:	2300      	movs	r3, #0
    2b6a:	4276      	negs	r6, r6
    2b6c:	1a36      	subs	r6, r6, r0
    2b6e:	4699      	mov	r9, r3
    2b70:	469a      	mov	sl, r3
    2b72:	e79d      	b.n	2ab0 <__aeabi_fmul+0x30>
    2b74:	230c      	movs	r3, #12
    2b76:	4699      	mov	r9, r3
    2b78:	3b09      	subs	r3, #9
    2b7a:	26ff      	movs	r6, #255	; 0xff
    2b7c:	469a      	mov	sl, r3
    2b7e:	e797      	b.n	2ab0 <__aeabi_fmul+0x30>
    2b80:	0028      	movs	r0, r5
    2b82:	f000 fad9 	bl	3138 <__clzsi2>
    2b86:	1f43      	subs	r3, r0, #5
    2b88:	409d      	lsls	r5, r3
    2b8a:	2376      	movs	r3, #118	; 0x76
    2b8c:	425b      	negs	r3, r3
    2b8e:	1a18      	subs	r0, r3, r0
    2b90:	2200      	movs	r2, #0
    2b92:	e79d      	b.n	2ad0 <__aeabi_fmul+0x50>
    2b94:	2080      	movs	r0, #128	; 0x80
    2b96:	2400      	movs	r4, #0
    2b98:	03c0      	lsls	r0, r0, #15
    2b9a:	22ff      	movs	r2, #255	; 0xff
    2b9c:	e7ba      	b.n	2b14 <__aeabi_fmul+0x94>
    2b9e:	003d      	movs	r5, r7
    2ba0:	4652      	mov	r2, sl
    2ba2:	e7ab      	b.n	2afc <__aeabi_fmul+0x7c>
    2ba4:	003d      	movs	r5, r7
    2ba6:	0021      	movs	r1, r4
    2ba8:	4652      	mov	r2, sl
    2baa:	e7a7      	b.n	2afc <__aeabi_fmul+0x7c>
    2bac:	0c3b      	lsrs	r3, r7, #16
    2bae:	469c      	mov	ip, r3
    2bb0:	042a      	lsls	r2, r5, #16
    2bb2:	0c12      	lsrs	r2, r2, #16
    2bb4:	0c2b      	lsrs	r3, r5, #16
    2bb6:	0014      	movs	r4, r2
    2bb8:	4660      	mov	r0, ip
    2bba:	4665      	mov	r5, ip
    2bbc:	043f      	lsls	r7, r7, #16
    2bbe:	0c3f      	lsrs	r7, r7, #16
    2bc0:	437c      	muls	r4, r7
    2bc2:	4342      	muls	r2, r0
    2bc4:	435d      	muls	r5, r3
    2bc6:	437b      	muls	r3, r7
    2bc8:	0c27      	lsrs	r7, r4, #16
    2bca:	189b      	adds	r3, r3, r2
    2bcc:	18ff      	adds	r7, r7, r3
    2bce:	42ba      	cmp	r2, r7
    2bd0:	d903      	bls.n	2bda <__aeabi_fmul+0x15a>
    2bd2:	2380      	movs	r3, #128	; 0x80
    2bd4:	025b      	lsls	r3, r3, #9
    2bd6:	469c      	mov	ip, r3
    2bd8:	4465      	add	r5, ip
    2bda:	0424      	lsls	r4, r4, #16
    2bdc:	043a      	lsls	r2, r7, #16
    2bde:	0c24      	lsrs	r4, r4, #16
    2be0:	1912      	adds	r2, r2, r4
    2be2:	0193      	lsls	r3, r2, #6
    2be4:	1e5c      	subs	r4, r3, #1
    2be6:	41a3      	sbcs	r3, r4
    2be8:	0c3f      	lsrs	r7, r7, #16
    2bea:	0e92      	lsrs	r2, r2, #26
    2bec:	197d      	adds	r5, r7, r5
    2bee:	431a      	orrs	r2, r3
    2bf0:	01ad      	lsls	r5, r5, #6
    2bf2:	4315      	orrs	r5, r2
    2bf4:	012b      	lsls	r3, r5, #4
    2bf6:	d504      	bpl.n	2c02 <__aeabi_fmul+0x182>
    2bf8:	2301      	movs	r3, #1
    2bfa:	465e      	mov	r6, fp
    2bfc:	086a      	lsrs	r2, r5, #1
    2bfe:	401d      	ands	r5, r3
    2c00:	4315      	orrs	r5, r2
    2c02:	0032      	movs	r2, r6
    2c04:	327f      	adds	r2, #127	; 0x7f
    2c06:	2a00      	cmp	r2, #0
    2c08:	dd25      	ble.n	2c56 <__aeabi_fmul+0x1d6>
    2c0a:	076b      	lsls	r3, r5, #29
    2c0c:	d004      	beq.n	2c18 <__aeabi_fmul+0x198>
    2c0e:	230f      	movs	r3, #15
    2c10:	402b      	ands	r3, r5
    2c12:	2b04      	cmp	r3, #4
    2c14:	d000      	beq.n	2c18 <__aeabi_fmul+0x198>
    2c16:	3504      	adds	r5, #4
    2c18:	012b      	lsls	r3, r5, #4
    2c1a:	d503      	bpl.n	2c24 <__aeabi_fmul+0x1a4>
    2c1c:	0032      	movs	r2, r6
    2c1e:	4b27      	ldr	r3, [pc, #156]	; (2cbc <__aeabi_fmul+0x23c>)
    2c20:	3280      	adds	r2, #128	; 0x80
    2c22:	401d      	ands	r5, r3
    2c24:	2afe      	cmp	r2, #254	; 0xfe
    2c26:	dc94      	bgt.n	2b52 <__aeabi_fmul+0xd2>
    2c28:	2401      	movs	r4, #1
    2c2a:	01a8      	lsls	r0, r5, #6
    2c2c:	0a40      	lsrs	r0, r0, #9
    2c2e:	b2d2      	uxtb	r2, r2
    2c30:	400c      	ands	r4, r1
    2c32:	e76f      	b.n	2b14 <__aeabi_fmul+0x94>
    2c34:	2080      	movs	r0, #128	; 0x80
    2c36:	03c0      	lsls	r0, r0, #15
    2c38:	4207      	tst	r7, r0
    2c3a:	d007      	beq.n	2c4c <__aeabi_fmul+0x1cc>
    2c3c:	4205      	tst	r5, r0
    2c3e:	d105      	bne.n	2c4c <__aeabi_fmul+0x1cc>
    2c40:	4328      	orrs	r0, r5
    2c42:	0240      	lsls	r0, r0, #9
    2c44:	0a40      	lsrs	r0, r0, #9
    2c46:	4644      	mov	r4, r8
    2c48:	22ff      	movs	r2, #255	; 0xff
    2c4a:	e763      	b.n	2b14 <__aeabi_fmul+0x94>
    2c4c:	4338      	orrs	r0, r7
    2c4e:	0240      	lsls	r0, r0, #9
    2c50:	0a40      	lsrs	r0, r0, #9
    2c52:	22ff      	movs	r2, #255	; 0xff
    2c54:	e75e      	b.n	2b14 <__aeabi_fmul+0x94>
    2c56:	2401      	movs	r4, #1
    2c58:	1aa3      	subs	r3, r4, r2
    2c5a:	2b1b      	cmp	r3, #27
    2c5c:	dd05      	ble.n	2c6a <__aeabi_fmul+0x1ea>
    2c5e:	400c      	ands	r4, r1
    2c60:	2200      	movs	r2, #0
    2c62:	2000      	movs	r0, #0
    2c64:	e756      	b.n	2b14 <__aeabi_fmul+0x94>
    2c66:	465e      	mov	r6, fp
    2c68:	e7cb      	b.n	2c02 <__aeabi_fmul+0x182>
    2c6a:	002a      	movs	r2, r5
    2c6c:	2020      	movs	r0, #32
    2c6e:	40da      	lsrs	r2, r3
    2c70:	1ac3      	subs	r3, r0, r3
    2c72:	409d      	lsls	r5, r3
    2c74:	002b      	movs	r3, r5
    2c76:	1e5d      	subs	r5, r3, #1
    2c78:	41ab      	sbcs	r3, r5
    2c7a:	4313      	orrs	r3, r2
    2c7c:	075a      	lsls	r2, r3, #29
    2c7e:	d004      	beq.n	2c8a <__aeabi_fmul+0x20a>
    2c80:	220f      	movs	r2, #15
    2c82:	401a      	ands	r2, r3
    2c84:	2a04      	cmp	r2, #4
    2c86:	d000      	beq.n	2c8a <__aeabi_fmul+0x20a>
    2c88:	3304      	adds	r3, #4
    2c8a:	015a      	lsls	r2, r3, #5
    2c8c:	d504      	bpl.n	2c98 <__aeabi_fmul+0x218>
    2c8e:	2401      	movs	r4, #1
    2c90:	2201      	movs	r2, #1
    2c92:	400c      	ands	r4, r1
    2c94:	2000      	movs	r0, #0
    2c96:	e73d      	b.n	2b14 <__aeabi_fmul+0x94>
    2c98:	2401      	movs	r4, #1
    2c9a:	019b      	lsls	r3, r3, #6
    2c9c:	0a58      	lsrs	r0, r3, #9
    2c9e:	400c      	ands	r4, r1
    2ca0:	2200      	movs	r2, #0
    2ca2:	e737      	b.n	2b14 <__aeabi_fmul+0x94>
    2ca4:	2080      	movs	r0, #128	; 0x80
    2ca6:	2401      	movs	r4, #1
    2ca8:	03c0      	lsls	r0, r0, #15
    2caa:	4328      	orrs	r0, r5
    2cac:	0240      	lsls	r0, r0, #9
    2cae:	0a40      	lsrs	r0, r0, #9
    2cb0:	400c      	ands	r4, r1
    2cb2:	22ff      	movs	r2, #255	; 0xff
    2cb4:	e72e      	b.n	2b14 <__aeabi_fmul+0x94>
    2cb6:	46c0      	nop			; (mov r8, r8)
    2cb8:	00005240 	.word	0x00005240
    2cbc:	f7ffffff 	.word	0xf7ffffff

00002cc0 <__aeabi_fsub>:
    2cc0:	b5f0      	push	{r4, r5, r6, r7, lr}
    2cc2:	464f      	mov	r7, r9
    2cc4:	46d6      	mov	lr, sl
    2cc6:	4646      	mov	r6, r8
    2cc8:	0044      	lsls	r4, r0, #1
    2cca:	b5c0      	push	{r6, r7, lr}
    2ccc:	0fc2      	lsrs	r2, r0, #31
    2cce:	0247      	lsls	r7, r0, #9
    2cd0:	0248      	lsls	r0, r1, #9
    2cd2:	0a40      	lsrs	r0, r0, #9
    2cd4:	4684      	mov	ip, r0
    2cd6:	4666      	mov	r6, ip
    2cd8:	0a7b      	lsrs	r3, r7, #9
    2cda:	0048      	lsls	r0, r1, #1
    2cdc:	0fc9      	lsrs	r1, r1, #31
    2cde:	469a      	mov	sl, r3
    2ce0:	0e24      	lsrs	r4, r4, #24
    2ce2:	0015      	movs	r5, r2
    2ce4:	00db      	lsls	r3, r3, #3
    2ce6:	0e00      	lsrs	r0, r0, #24
    2ce8:	4689      	mov	r9, r1
    2cea:	00f6      	lsls	r6, r6, #3
    2cec:	28ff      	cmp	r0, #255	; 0xff
    2cee:	d100      	bne.n	2cf2 <__aeabi_fsub+0x32>
    2cf0:	e08f      	b.n	2e12 <__aeabi_fsub+0x152>
    2cf2:	2101      	movs	r1, #1
    2cf4:	464f      	mov	r7, r9
    2cf6:	404f      	eors	r7, r1
    2cf8:	0039      	movs	r1, r7
    2cfa:	4291      	cmp	r1, r2
    2cfc:	d066      	beq.n	2dcc <__aeabi_fsub+0x10c>
    2cfe:	1a22      	subs	r2, r4, r0
    2d00:	2a00      	cmp	r2, #0
    2d02:	dc00      	bgt.n	2d06 <__aeabi_fsub+0x46>
    2d04:	e09d      	b.n	2e42 <__aeabi_fsub+0x182>
    2d06:	2800      	cmp	r0, #0
    2d08:	d13d      	bne.n	2d86 <__aeabi_fsub+0xc6>
    2d0a:	2e00      	cmp	r6, #0
    2d0c:	d100      	bne.n	2d10 <__aeabi_fsub+0x50>
    2d0e:	e08b      	b.n	2e28 <__aeabi_fsub+0x168>
    2d10:	1e51      	subs	r1, r2, #1
    2d12:	2900      	cmp	r1, #0
    2d14:	d000      	beq.n	2d18 <__aeabi_fsub+0x58>
    2d16:	e0b5      	b.n	2e84 <__aeabi_fsub+0x1c4>
    2d18:	2401      	movs	r4, #1
    2d1a:	1b9b      	subs	r3, r3, r6
    2d1c:	015a      	lsls	r2, r3, #5
    2d1e:	d544      	bpl.n	2daa <__aeabi_fsub+0xea>
    2d20:	019b      	lsls	r3, r3, #6
    2d22:	099f      	lsrs	r7, r3, #6
    2d24:	0038      	movs	r0, r7
    2d26:	f000 fa07 	bl	3138 <__clzsi2>
    2d2a:	3805      	subs	r0, #5
    2d2c:	4087      	lsls	r7, r0
    2d2e:	4284      	cmp	r4, r0
    2d30:	dd00      	ble.n	2d34 <__aeabi_fsub+0x74>
    2d32:	e096      	b.n	2e62 <__aeabi_fsub+0x1a2>
    2d34:	1b04      	subs	r4, r0, r4
    2d36:	003a      	movs	r2, r7
    2d38:	2020      	movs	r0, #32
    2d3a:	3401      	adds	r4, #1
    2d3c:	40e2      	lsrs	r2, r4
    2d3e:	1b04      	subs	r4, r0, r4
    2d40:	40a7      	lsls	r7, r4
    2d42:	003b      	movs	r3, r7
    2d44:	1e5f      	subs	r7, r3, #1
    2d46:	41bb      	sbcs	r3, r7
    2d48:	2400      	movs	r4, #0
    2d4a:	4313      	orrs	r3, r2
    2d4c:	075a      	lsls	r2, r3, #29
    2d4e:	d004      	beq.n	2d5a <__aeabi_fsub+0x9a>
    2d50:	220f      	movs	r2, #15
    2d52:	401a      	ands	r2, r3
    2d54:	2a04      	cmp	r2, #4
    2d56:	d000      	beq.n	2d5a <__aeabi_fsub+0x9a>
    2d58:	3304      	adds	r3, #4
    2d5a:	015a      	lsls	r2, r3, #5
    2d5c:	d527      	bpl.n	2dae <__aeabi_fsub+0xee>
    2d5e:	3401      	adds	r4, #1
    2d60:	2cff      	cmp	r4, #255	; 0xff
    2d62:	d100      	bne.n	2d66 <__aeabi_fsub+0xa6>
    2d64:	e079      	b.n	2e5a <__aeabi_fsub+0x19a>
    2d66:	2201      	movs	r2, #1
    2d68:	019b      	lsls	r3, r3, #6
    2d6a:	0a5b      	lsrs	r3, r3, #9
    2d6c:	b2e4      	uxtb	r4, r4
    2d6e:	402a      	ands	r2, r5
    2d70:	025b      	lsls	r3, r3, #9
    2d72:	05e4      	lsls	r4, r4, #23
    2d74:	0a58      	lsrs	r0, r3, #9
    2d76:	07d2      	lsls	r2, r2, #31
    2d78:	4320      	orrs	r0, r4
    2d7a:	4310      	orrs	r0, r2
    2d7c:	bc1c      	pop	{r2, r3, r4}
    2d7e:	4690      	mov	r8, r2
    2d80:	4699      	mov	r9, r3
    2d82:	46a2      	mov	sl, r4
    2d84:	bdf0      	pop	{r4, r5, r6, r7, pc}
    2d86:	2cff      	cmp	r4, #255	; 0xff
    2d88:	d0e0      	beq.n	2d4c <__aeabi_fsub+0x8c>
    2d8a:	2180      	movs	r1, #128	; 0x80
    2d8c:	04c9      	lsls	r1, r1, #19
    2d8e:	430e      	orrs	r6, r1
    2d90:	2a1b      	cmp	r2, #27
    2d92:	dc7b      	bgt.n	2e8c <__aeabi_fsub+0x1cc>
    2d94:	0031      	movs	r1, r6
    2d96:	2020      	movs	r0, #32
    2d98:	40d1      	lsrs	r1, r2
    2d9a:	1a82      	subs	r2, r0, r2
    2d9c:	4096      	lsls	r6, r2
    2d9e:	1e72      	subs	r2, r6, #1
    2da0:	4196      	sbcs	r6, r2
    2da2:	430e      	orrs	r6, r1
    2da4:	1b9b      	subs	r3, r3, r6
    2da6:	015a      	lsls	r2, r3, #5
    2da8:	d4ba      	bmi.n	2d20 <__aeabi_fsub+0x60>
    2daa:	075a      	lsls	r2, r3, #29
    2dac:	d1d0      	bne.n	2d50 <__aeabi_fsub+0x90>
    2dae:	2201      	movs	r2, #1
    2db0:	08df      	lsrs	r7, r3, #3
    2db2:	402a      	ands	r2, r5
    2db4:	2cff      	cmp	r4, #255	; 0xff
    2db6:	d133      	bne.n	2e20 <__aeabi_fsub+0x160>
    2db8:	2f00      	cmp	r7, #0
    2dba:	d100      	bne.n	2dbe <__aeabi_fsub+0xfe>
    2dbc:	e0a8      	b.n	2f10 <__aeabi_fsub+0x250>
    2dbe:	2380      	movs	r3, #128	; 0x80
    2dc0:	03db      	lsls	r3, r3, #15
    2dc2:	433b      	orrs	r3, r7
    2dc4:	025b      	lsls	r3, r3, #9
    2dc6:	0a5b      	lsrs	r3, r3, #9
    2dc8:	24ff      	movs	r4, #255	; 0xff
    2dca:	e7d1      	b.n	2d70 <__aeabi_fsub+0xb0>
    2dcc:	1a21      	subs	r1, r4, r0
    2dce:	2900      	cmp	r1, #0
    2dd0:	dd4c      	ble.n	2e6c <__aeabi_fsub+0x1ac>
    2dd2:	2800      	cmp	r0, #0
    2dd4:	d02a      	beq.n	2e2c <__aeabi_fsub+0x16c>
    2dd6:	2cff      	cmp	r4, #255	; 0xff
    2dd8:	d0b8      	beq.n	2d4c <__aeabi_fsub+0x8c>
    2dda:	2080      	movs	r0, #128	; 0x80
    2ddc:	04c0      	lsls	r0, r0, #19
    2dde:	4306      	orrs	r6, r0
    2de0:	291b      	cmp	r1, #27
    2de2:	dd00      	ble.n	2de6 <__aeabi_fsub+0x126>
    2de4:	e0af      	b.n	2f46 <__aeabi_fsub+0x286>
    2de6:	0030      	movs	r0, r6
    2de8:	2720      	movs	r7, #32
    2dea:	40c8      	lsrs	r0, r1
    2dec:	1a79      	subs	r1, r7, r1
    2dee:	408e      	lsls	r6, r1
    2df0:	1e71      	subs	r1, r6, #1
    2df2:	418e      	sbcs	r6, r1
    2df4:	4306      	orrs	r6, r0
    2df6:	199b      	adds	r3, r3, r6
    2df8:	0159      	lsls	r1, r3, #5
    2dfa:	d5d6      	bpl.n	2daa <__aeabi_fsub+0xea>
    2dfc:	3401      	adds	r4, #1
    2dfe:	2cff      	cmp	r4, #255	; 0xff
    2e00:	d100      	bne.n	2e04 <__aeabi_fsub+0x144>
    2e02:	e085      	b.n	2f10 <__aeabi_fsub+0x250>
    2e04:	2201      	movs	r2, #1
    2e06:	497a      	ldr	r1, [pc, #488]	; (2ff0 <__aeabi_fsub+0x330>)
    2e08:	401a      	ands	r2, r3
    2e0a:	085b      	lsrs	r3, r3, #1
    2e0c:	400b      	ands	r3, r1
    2e0e:	4313      	orrs	r3, r2
    2e10:	e79c      	b.n	2d4c <__aeabi_fsub+0x8c>
    2e12:	2e00      	cmp	r6, #0
    2e14:	d000      	beq.n	2e18 <__aeabi_fsub+0x158>
    2e16:	e770      	b.n	2cfa <__aeabi_fsub+0x3a>
    2e18:	e76b      	b.n	2cf2 <__aeabi_fsub+0x32>
    2e1a:	1e3b      	subs	r3, r7, #0
    2e1c:	d1c5      	bne.n	2daa <__aeabi_fsub+0xea>
    2e1e:	2200      	movs	r2, #0
    2e20:	027b      	lsls	r3, r7, #9
    2e22:	0a5b      	lsrs	r3, r3, #9
    2e24:	b2e4      	uxtb	r4, r4
    2e26:	e7a3      	b.n	2d70 <__aeabi_fsub+0xb0>
    2e28:	0014      	movs	r4, r2
    2e2a:	e78f      	b.n	2d4c <__aeabi_fsub+0x8c>
    2e2c:	2e00      	cmp	r6, #0
    2e2e:	d04d      	beq.n	2ecc <__aeabi_fsub+0x20c>
    2e30:	1e48      	subs	r0, r1, #1
    2e32:	2800      	cmp	r0, #0
    2e34:	d157      	bne.n	2ee6 <__aeabi_fsub+0x226>
    2e36:	199b      	adds	r3, r3, r6
    2e38:	2401      	movs	r4, #1
    2e3a:	015a      	lsls	r2, r3, #5
    2e3c:	d5b5      	bpl.n	2daa <__aeabi_fsub+0xea>
    2e3e:	2402      	movs	r4, #2
    2e40:	e7e0      	b.n	2e04 <__aeabi_fsub+0x144>
    2e42:	2a00      	cmp	r2, #0
    2e44:	d125      	bne.n	2e92 <__aeabi_fsub+0x1d2>
    2e46:	1c62      	adds	r2, r4, #1
    2e48:	b2d2      	uxtb	r2, r2
    2e4a:	2a01      	cmp	r2, #1
    2e4c:	dd72      	ble.n	2f34 <__aeabi_fsub+0x274>
    2e4e:	1b9f      	subs	r7, r3, r6
    2e50:	017a      	lsls	r2, r7, #5
    2e52:	d535      	bpl.n	2ec0 <__aeabi_fsub+0x200>
    2e54:	1af7      	subs	r7, r6, r3
    2e56:	000d      	movs	r5, r1
    2e58:	e764      	b.n	2d24 <__aeabi_fsub+0x64>
    2e5a:	2201      	movs	r2, #1
    2e5c:	2300      	movs	r3, #0
    2e5e:	402a      	ands	r2, r5
    2e60:	e786      	b.n	2d70 <__aeabi_fsub+0xb0>
    2e62:	003b      	movs	r3, r7
    2e64:	4a63      	ldr	r2, [pc, #396]	; (2ff4 <__aeabi_fsub+0x334>)
    2e66:	1a24      	subs	r4, r4, r0
    2e68:	4013      	ands	r3, r2
    2e6a:	e76f      	b.n	2d4c <__aeabi_fsub+0x8c>
    2e6c:	2900      	cmp	r1, #0
    2e6e:	d16c      	bne.n	2f4a <__aeabi_fsub+0x28a>
    2e70:	1c61      	adds	r1, r4, #1
    2e72:	b2c8      	uxtb	r0, r1
    2e74:	2801      	cmp	r0, #1
    2e76:	dd4e      	ble.n	2f16 <__aeabi_fsub+0x256>
    2e78:	29ff      	cmp	r1, #255	; 0xff
    2e7a:	d049      	beq.n	2f10 <__aeabi_fsub+0x250>
    2e7c:	199b      	adds	r3, r3, r6
    2e7e:	085b      	lsrs	r3, r3, #1
    2e80:	000c      	movs	r4, r1
    2e82:	e763      	b.n	2d4c <__aeabi_fsub+0x8c>
    2e84:	2aff      	cmp	r2, #255	; 0xff
    2e86:	d041      	beq.n	2f0c <__aeabi_fsub+0x24c>
    2e88:	000a      	movs	r2, r1
    2e8a:	e781      	b.n	2d90 <__aeabi_fsub+0xd0>
    2e8c:	2601      	movs	r6, #1
    2e8e:	1b9b      	subs	r3, r3, r6
    2e90:	e789      	b.n	2da6 <__aeabi_fsub+0xe6>
    2e92:	2c00      	cmp	r4, #0
    2e94:	d01c      	beq.n	2ed0 <__aeabi_fsub+0x210>
    2e96:	28ff      	cmp	r0, #255	; 0xff
    2e98:	d021      	beq.n	2ede <__aeabi_fsub+0x21e>
    2e9a:	2480      	movs	r4, #128	; 0x80
    2e9c:	04e4      	lsls	r4, r4, #19
    2e9e:	4252      	negs	r2, r2
    2ea0:	4323      	orrs	r3, r4
    2ea2:	2a1b      	cmp	r2, #27
    2ea4:	dd00      	ble.n	2ea8 <__aeabi_fsub+0x1e8>
    2ea6:	e096      	b.n	2fd6 <__aeabi_fsub+0x316>
    2ea8:	001c      	movs	r4, r3
    2eaa:	2520      	movs	r5, #32
    2eac:	40d4      	lsrs	r4, r2
    2eae:	1aaa      	subs	r2, r5, r2
    2eb0:	4093      	lsls	r3, r2
    2eb2:	1e5a      	subs	r2, r3, #1
    2eb4:	4193      	sbcs	r3, r2
    2eb6:	4323      	orrs	r3, r4
    2eb8:	1af3      	subs	r3, r6, r3
    2eba:	0004      	movs	r4, r0
    2ebc:	000d      	movs	r5, r1
    2ebe:	e72d      	b.n	2d1c <__aeabi_fsub+0x5c>
    2ec0:	2f00      	cmp	r7, #0
    2ec2:	d000      	beq.n	2ec6 <__aeabi_fsub+0x206>
    2ec4:	e72e      	b.n	2d24 <__aeabi_fsub+0x64>
    2ec6:	2200      	movs	r2, #0
    2ec8:	2400      	movs	r4, #0
    2eca:	e7a9      	b.n	2e20 <__aeabi_fsub+0x160>
    2ecc:	000c      	movs	r4, r1
    2ece:	e73d      	b.n	2d4c <__aeabi_fsub+0x8c>
    2ed0:	2b00      	cmp	r3, #0
    2ed2:	d058      	beq.n	2f86 <__aeabi_fsub+0x2c6>
    2ed4:	43d2      	mvns	r2, r2
    2ed6:	2a00      	cmp	r2, #0
    2ed8:	d0ee      	beq.n	2eb8 <__aeabi_fsub+0x1f8>
    2eda:	28ff      	cmp	r0, #255	; 0xff
    2edc:	d1e1      	bne.n	2ea2 <__aeabi_fsub+0x1e2>
    2ede:	0033      	movs	r3, r6
    2ee0:	24ff      	movs	r4, #255	; 0xff
    2ee2:	000d      	movs	r5, r1
    2ee4:	e732      	b.n	2d4c <__aeabi_fsub+0x8c>
    2ee6:	29ff      	cmp	r1, #255	; 0xff
    2ee8:	d010      	beq.n	2f0c <__aeabi_fsub+0x24c>
    2eea:	0001      	movs	r1, r0
    2eec:	e778      	b.n	2de0 <__aeabi_fsub+0x120>
    2eee:	2b00      	cmp	r3, #0
    2ef0:	d06e      	beq.n	2fd0 <__aeabi_fsub+0x310>
    2ef2:	24ff      	movs	r4, #255	; 0xff
    2ef4:	2e00      	cmp	r6, #0
    2ef6:	d100      	bne.n	2efa <__aeabi_fsub+0x23a>
    2ef8:	e728      	b.n	2d4c <__aeabi_fsub+0x8c>
    2efa:	2280      	movs	r2, #128	; 0x80
    2efc:	4651      	mov	r1, sl
    2efe:	03d2      	lsls	r2, r2, #15
    2f00:	4211      	tst	r1, r2
    2f02:	d003      	beq.n	2f0c <__aeabi_fsub+0x24c>
    2f04:	4661      	mov	r1, ip
    2f06:	4211      	tst	r1, r2
    2f08:	d100      	bne.n	2f0c <__aeabi_fsub+0x24c>
    2f0a:	0033      	movs	r3, r6
    2f0c:	24ff      	movs	r4, #255	; 0xff
    2f0e:	e71d      	b.n	2d4c <__aeabi_fsub+0x8c>
    2f10:	24ff      	movs	r4, #255	; 0xff
    2f12:	2300      	movs	r3, #0
    2f14:	e72c      	b.n	2d70 <__aeabi_fsub+0xb0>
    2f16:	2c00      	cmp	r4, #0
    2f18:	d1e9      	bne.n	2eee <__aeabi_fsub+0x22e>
    2f1a:	2b00      	cmp	r3, #0
    2f1c:	d063      	beq.n	2fe6 <__aeabi_fsub+0x326>
    2f1e:	2e00      	cmp	r6, #0
    2f20:	d100      	bne.n	2f24 <__aeabi_fsub+0x264>
    2f22:	e713      	b.n	2d4c <__aeabi_fsub+0x8c>
    2f24:	199b      	adds	r3, r3, r6
    2f26:	015a      	lsls	r2, r3, #5
    2f28:	d400      	bmi.n	2f2c <__aeabi_fsub+0x26c>
    2f2a:	e73e      	b.n	2daa <__aeabi_fsub+0xea>
    2f2c:	4a31      	ldr	r2, [pc, #196]	; (2ff4 <__aeabi_fsub+0x334>)
    2f2e:	000c      	movs	r4, r1
    2f30:	4013      	ands	r3, r2
    2f32:	e70b      	b.n	2d4c <__aeabi_fsub+0x8c>
    2f34:	2c00      	cmp	r4, #0
    2f36:	d11e      	bne.n	2f76 <__aeabi_fsub+0x2b6>
    2f38:	2b00      	cmp	r3, #0
    2f3a:	d12f      	bne.n	2f9c <__aeabi_fsub+0x2dc>
    2f3c:	2e00      	cmp	r6, #0
    2f3e:	d04f      	beq.n	2fe0 <__aeabi_fsub+0x320>
    2f40:	0033      	movs	r3, r6
    2f42:	000d      	movs	r5, r1
    2f44:	e702      	b.n	2d4c <__aeabi_fsub+0x8c>
    2f46:	2601      	movs	r6, #1
    2f48:	e755      	b.n	2df6 <__aeabi_fsub+0x136>
    2f4a:	2c00      	cmp	r4, #0
    2f4c:	d11f      	bne.n	2f8e <__aeabi_fsub+0x2ce>
    2f4e:	2b00      	cmp	r3, #0
    2f50:	d043      	beq.n	2fda <__aeabi_fsub+0x31a>
    2f52:	43c9      	mvns	r1, r1
    2f54:	2900      	cmp	r1, #0
    2f56:	d00b      	beq.n	2f70 <__aeabi_fsub+0x2b0>
    2f58:	28ff      	cmp	r0, #255	; 0xff
    2f5a:	d039      	beq.n	2fd0 <__aeabi_fsub+0x310>
    2f5c:	291b      	cmp	r1, #27
    2f5e:	dc44      	bgt.n	2fea <__aeabi_fsub+0x32a>
    2f60:	001c      	movs	r4, r3
    2f62:	2720      	movs	r7, #32
    2f64:	40cc      	lsrs	r4, r1
    2f66:	1a79      	subs	r1, r7, r1
    2f68:	408b      	lsls	r3, r1
    2f6a:	1e59      	subs	r1, r3, #1
    2f6c:	418b      	sbcs	r3, r1
    2f6e:	4323      	orrs	r3, r4
    2f70:	199b      	adds	r3, r3, r6
    2f72:	0004      	movs	r4, r0
    2f74:	e740      	b.n	2df8 <__aeabi_fsub+0x138>
    2f76:	2b00      	cmp	r3, #0
    2f78:	d11a      	bne.n	2fb0 <__aeabi_fsub+0x2f0>
    2f7a:	2e00      	cmp	r6, #0
    2f7c:	d124      	bne.n	2fc8 <__aeabi_fsub+0x308>
    2f7e:	2780      	movs	r7, #128	; 0x80
    2f80:	2200      	movs	r2, #0
    2f82:	03ff      	lsls	r7, r7, #15
    2f84:	e71b      	b.n	2dbe <__aeabi_fsub+0xfe>
    2f86:	0033      	movs	r3, r6
    2f88:	0004      	movs	r4, r0
    2f8a:	000d      	movs	r5, r1
    2f8c:	e6de      	b.n	2d4c <__aeabi_fsub+0x8c>
    2f8e:	28ff      	cmp	r0, #255	; 0xff
    2f90:	d01e      	beq.n	2fd0 <__aeabi_fsub+0x310>
    2f92:	2480      	movs	r4, #128	; 0x80
    2f94:	04e4      	lsls	r4, r4, #19
    2f96:	4249      	negs	r1, r1
    2f98:	4323      	orrs	r3, r4
    2f9a:	e7df      	b.n	2f5c <__aeabi_fsub+0x29c>
    2f9c:	2e00      	cmp	r6, #0
    2f9e:	d100      	bne.n	2fa2 <__aeabi_fsub+0x2e2>
    2fa0:	e6d4      	b.n	2d4c <__aeabi_fsub+0x8c>
    2fa2:	1b9f      	subs	r7, r3, r6
    2fa4:	017a      	lsls	r2, r7, #5
    2fa6:	d400      	bmi.n	2faa <__aeabi_fsub+0x2ea>
    2fa8:	e737      	b.n	2e1a <__aeabi_fsub+0x15a>
    2faa:	1af3      	subs	r3, r6, r3
    2fac:	000d      	movs	r5, r1
    2fae:	e6cd      	b.n	2d4c <__aeabi_fsub+0x8c>
    2fb0:	24ff      	movs	r4, #255	; 0xff
    2fb2:	2e00      	cmp	r6, #0
    2fb4:	d100      	bne.n	2fb8 <__aeabi_fsub+0x2f8>
    2fb6:	e6c9      	b.n	2d4c <__aeabi_fsub+0x8c>
    2fb8:	2280      	movs	r2, #128	; 0x80
    2fba:	4650      	mov	r0, sl
    2fbc:	03d2      	lsls	r2, r2, #15
    2fbe:	4210      	tst	r0, r2
    2fc0:	d0a4      	beq.n	2f0c <__aeabi_fsub+0x24c>
    2fc2:	4660      	mov	r0, ip
    2fc4:	4210      	tst	r0, r2
    2fc6:	d1a1      	bne.n	2f0c <__aeabi_fsub+0x24c>
    2fc8:	0033      	movs	r3, r6
    2fca:	000d      	movs	r5, r1
    2fcc:	24ff      	movs	r4, #255	; 0xff
    2fce:	e6bd      	b.n	2d4c <__aeabi_fsub+0x8c>
    2fd0:	0033      	movs	r3, r6
    2fd2:	24ff      	movs	r4, #255	; 0xff
    2fd4:	e6ba      	b.n	2d4c <__aeabi_fsub+0x8c>
    2fd6:	2301      	movs	r3, #1
    2fd8:	e76e      	b.n	2eb8 <__aeabi_fsub+0x1f8>
    2fda:	0033      	movs	r3, r6
    2fdc:	0004      	movs	r4, r0
    2fde:	e6b5      	b.n	2d4c <__aeabi_fsub+0x8c>
    2fe0:	2700      	movs	r7, #0
    2fe2:	2200      	movs	r2, #0
    2fe4:	e71c      	b.n	2e20 <__aeabi_fsub+0x160>
    2fe6:	0033      	movs	r3, r6
    2fe8:	e6b0      	b.n	2d4c <__aeabi_fsub+0x8c>
    2fea:	2301      	movs	r3, #1
    2fec:	e7c0      	b.n	2f70 <__aeabi_fsub+0x2b0>
    2fee:	46c0      	nop			; (mov r8, r8)
    2ff0:	7dffffff 	.word	0x7dffffff
    2ff4:	fbffffff 	.word	0xfbffffff

00002ff8 <__aeabi_f2iz>:
    2ff8:	0241      	lsls	r1, r0, #9
    2ffa:	0043      	lsls	r3, r0, #1
    2ffc:	0fc2      	lsrs	r2, r0, #31
    2ffe:	0a49      	lsrs	r1, r1, #9
    3000:	0e1b      	lsrs	r3, r3, #24
    3002:	2000      	movs	r0, #0
    3004:	2b7e      	cmp	r3, #126	; 0x7e
    3006:	dd0d      	ble.n	3024 <__aeabi_f2iz+0x2c>
    3008:	2b9d      	cmp	r3, #157	; 0x9d
    300a:	dc0c      	bgt.n	3026 <__aeabi_f2iz+0x2e>
    300c:	2080      	movs	r0, #128	; 0x80
    300e:	0400      	lsls	r0, r0, #16
    3010:	4301      	orrs	r1, r0
    3012:	2b95      	cmp	r3, #149	; 0x95
    3014:	dc0a      	bgt.n	302c <__aeabi_f2iz+0x34>
    3016:	2096      	movs	r0, #150	; 0x96
    3018:	1ac3      	subs	r3, r0, r3
    301a:	40d9      	lsrs	r1, r3
    301c:	4248      	negs	r0, r1
    301e:	2a00      	cmp	r2, #0
    3020:	d100      	bne.n	3024 <__aeabi_f2iz+0x2c>
    3022:	0008      	movs	r0, r1
    3024:	4770      	bx	lr
    3026:	4b03      	ldr	r3, [pc, #12]	; (3034 <__aeabi_f2iz+0x3c>)
    3028:	18d0      	adds	r0, r2, r3
    302a:	e7fb      	b.n	3024 <__aeabi_f2iz+0x2c>
    302c:	3b96      	subs	r3, #150	; 0x96
    302e:	4099      	lsls	r1, r3
    3030:	e7f4      	b.n	301c <__aeabi_f2iz+0x24>
    3032:	46c0      	nop			; (mov r8, r8)
    3034:	7fffffff 	.word	0x7fffffff

00003038 <__aeabi_ui2f>:
    3038:	b510      	push	{r4, lr}
    303a:	1e04      	subs	r4, r0, #0
    303c:	d027      	beq.n	308e <__aeabi_ui2f+0x56>
    303e:	f000 f87b 	bl	3138 <__clzsi2>
    3042:	239e      	movs	r3, #158	; 0x9e
    3044:	1a1b      	subs	r3, r3, r0
    3046:	2b96      	cmp	r3, #150	; 0x96
    3048:	dc0a      	bgt.n	3060 <__aeabi_ui2f+0x28>
    304a:	2296      	movs	r2, #150	; 0x96
    304c:	1ad2      	subs	r2, r2, r3
    304e:	4094      	lsls	r4, r2
    3050:	0264      	lsls	r4, r4, #9
    3052:	0a64      	lsrs	r4, r4, #9
    3054:	b2db      	uxtb	r3, r3
    3056:	0264      	lsls	r4, r4, #9
    3058:	05db      	lsls	r3, r3, #23
    305a:	0a60      	lsrs	r0, r4, #9
    305c:	4318      	orrs	r0, r3
    305e:	bd10      	pop	{r4, pc}
    3060:	2b99      	cmp	r3, #153	; 0x99
    3062:	dc17      	bgt.n	3094 <__aeabi_ui2f+0x5c>
    3064:	2299      	movs	r2, #153	; 0x99
    3066:	1ad2      	subs	r2, r2, r3
    3068:	2a00      	cmp	r2, #0
    306a:	dd27      	ble.n	30bc <__aeabi_ui2f+0x84>
    306c:	4094      	lsls	r4, r2
    306e:	0022      	movs	r2, r4
    3070:	4c13      	ldr	r4, [pc, #76]	; (30c0 <__aeabi_ui2f+0x88>)
    3072:	4014      	ands	r4, r2
    3074:	0751      	lsls	r1, r2, #29
    3076:	d004      	beq.n	3082 <__aeabi_ui2f+0x4a>
    3078:	210f      	movs	r1, #15
    307a:	400a      	ands	r2, r1
    307c:	2a04      	cmp	r2, #4
    307e:	d000      	beq.n	3082 <__aeabi_ui2f+0x4a>
    3080:	3404      	adds	r4, #4
    3082:	0162      	lsls	r2, r4, #5
    3084:	d412      	bmi.n	30ac <__aeabi_ui2f+0x74>
    3086:	01a4      	lsls	r4, r4, #6
    3088:	0a64      	lsrs	r4, r4, #9
    308a:	b2db      	uxtb	r3, r3
    308c:	e7e3      	b.n	3056 <__aeabi_ui2f+0x1e>
    308e:	2300      	movs	r3, #0
    3090:	2400      	movs	r4, #0
    3092:	e7e0      	b.n	3056 <__aeabi_ui2f+0x1e>
    3094:	22b9      	movs	r2, #185	; 0xb9
    3096:	0021      	movs	r1, r4
    3098:	1ad2      	subs	r2, r2, r3
    309a:	4091      	lsls	r1, r2
    309c:	000a      	movs	r2, r1
    309e:	1e51      	subs	r1, r2, #1
    30a0:	418a      	sbcs	r2, r1
    30a2:	2105      	movs	r1, #5
    30a4:	1a09      	subs	r1, r1, r0
    30a6:	40cc      	lsrs	r4, r1
    30a8:	4314      	orrs	r4, r2
    30aa:	e7db      	b.n	3064 <__aeabi_ui2f+0x2c>
    30ac:	4b04      	ldr	r3, [pc, #16]	; (30c0 <__aeabi_ui2f+0x88>)
    30ae:	401c      	ands	r4, r3
    30b0:	239f      	movs	r3, #159	; 0x9f
    30b2:	01a4      	lsls	r4, r4, #6
    30b4:	1a1b      	subs	r3, r3, r0
    30b6:	0a64      	lsrs	r4, r4, #9
    30b8:	b2db      	uxtb	r3, r3
    30ba:	e7cc      	b.n	3056 <__aeabi_ui2f+0x1e>
    30bc:	0022      	movs	r2, r4
    30be:	e7d7      	b.n	3070 <__aeabi_ui2f+0x38>
    30c0:	fbffffff 	.word	0xfbffffff

000030c4 <__aeabi_cfrcmple>:
    30c4:	4684      	mov	ip, r0
    30c6:	1c08      	adds	r0, r1, #0
    30c8:	4661      	mov	r1, ip
    30ca:	e7ff      	b.n	30cc <__aeabi_cfcmpeq>

000030cc <__aeabi_cfcmpeq>:
    30cc:	b51f      	push	{r0, r1, r2, r3, r4, lr}
    30ce:	f000 f8b7 	bl	3240 <__lesf2>
    30d2:	2800      	cmp	r0, #0
    30d4:	d401      	bmi.n	30da <__aeabi_cfcmpeq+0xe>
    30d6:	2100      	movs	r1, #0
    30d8:	42c8      	cmn	r0, r1
    30da:	bd1f      	pop	{r0, r1, r2, r3, r4, pc}

000030dc <__aeabi_fcmpeq>:
    30dc:	b510      	push	{r4, lr}
    30de:	f000 f849 	bl	3174 <__eqsf2>
    30e2:	4240      	negs	r0, r0
    30e4:	3001      	adds	r0, #1
    30e6:	bd10      	pop	{r4, pc}

000030e8 <__aeabi_fcmplt>:
    30e8:	b510      	push	{r4, lr}
    30ea:	f000 f8a9 	bl	3240 <__lesf2>
    30ee:	2800      	cmp	r0, #0
    30f0:	db01      	blt.n	30f6 <__aeabi_fcmplt+0xe>
    30f2:	2000      	movs	r0, #0
    30f4:	bd10      	pop	{r4, pc}
    30f6:	2001      	movs	r0, #1
    30f8:	bd10      	pop	{r4, pc}
    30fa:	46c0      	nop			; (mov r8, r8)

000030fc <__aeabi_fcmple>:
    30fc:	b510      	push	{r4, lr}
    30fe:	f000 f89f 	bl	3240 <__lesf2>
    3102:	2800      	cmp	r0, #0
    3104:	dd01      	ble.n	310a <__aeabi_fcmple+0xe>
    3106:	2000      	movs	r0, #0
    3108:	bd10      	pop	{r4, pc}
    310a:	2001      	movs	r0, #1
    310c:	bd10      	pop	{r4, pc}
    310e:	46c0      	nop			; (mov r8, r8)

00003110 <__aeabi_fcmpgt>:
    3110:	b510      	push	{r4, lr}
    3112:	f000 f855 	bl	31c0 <__gesf2>
    3116:	2800      	cmp	r0, #0
    3118:	dc01      	bgt.n	311e <__aeabi_fcmpgt+0xe>
    311a:	2000      	movs	r0, #0
    311c:	bd10      	pop	{r4, pc}
    311e:	2001      	movs	r0, #1
    3120:	bd10      	pop	{r4, pc}
    3122:	46c0      	nop			; (mov r8, r8)

00003124 <__aeabi_fcmpge>:
    3124:	b510      	push	{r4, lr}
    3126:	f000 f84b 	bl	31c0 <__gesf2>
    312a:	2800      	cmp	r0, #0
    312c:	da01      	bge.n	3132 <__aeabi_fcmpge+0xe>
    312e:	2000      	movs	r0, #0
    3130:	bd10      	pop	{r4, pc}
    3132:	2001      	movs	r0, #1
    3134:	bd10      	pop	{r4, pc}
    3136:	46c0      	nop			; (mov r8, r8)

00003138 <__clzsi2>:
    3138:	211c      	movs	r1, #28
    313a:	2301      	movs	r3, #1
    313c:	041b      	lsls	r3, r3, #16
    313e:	4298      	cmp	r0, r3
    3140:	d301      	bcc.n	3146 <__clzsi2+0xe>
    3142:	0c00      	lsrs	r0, r0, #16
    3144:	3910      	subs	r1, #16
    3146:	0a1b      	lsrs	r3, r3, #8
    3148:	4298      	cmp	r0, r3
    314a:	d301      	bcc.n	3150 <__clzsi2+0x18>
    314c:	0a00      	lsrs	r0, r0, #8
    314e:	3908      	subs	r1, #8
    3150:	091b      	lsrs	r3, r3, #4
    3152:	4298      	cmp	r0, r3
    3154:	d301      	bcc.n	315a <__clzsi2+0x22>
    3156:	0900      	lsrs	r0, r0, #4
    3158:	3904      	subs	r1, #4
    315a:	a202      	add	r2, pc, #8	; (adr r2, 3164 <__clzsi2+0x2c>)
    315c:	5c10      	ldrb	r0, [r2, r0]
    315e:	1840      	adds	r0, r0, r1
    3160:	4770      	bx	lr
    3162:	46c0      	nop			; (mov r8, r8)
    3164:	02020304 	.word	0x02020304
    3168:	01010101 	.word	0x01010101
	...

00003174 <__eqsf2>:
    3174:	b570      	push	{r4, r5, r6, lr}
    3176:	0042      	lsls	r2, r0, #1
    3178:	0245      	lsls	r5, r0, #9
    317a:	024e      	lsls	r6, r1, #9
    317c:	004c      	lsls	r4, r1, #1
    317e:	0fc3      	lsrs	r3, r0, #31
    3180:	0a6d      	lsrs	r5, r5, #9
    3182:	0e12      	lsrs	r2, r2, #24
    3184:	0a76      	lsrs	r6, r6, #9
    3186:	0e24      	lsrs	r4, r4, #24
    3188:	0fc9      	lsrs	r1, r1, #31
    318a:	2001      	movs	r0, #1
    318c:	2aff      	cmp	r2, #255	; 0xff
    318e:	d006      	beq.n	319e <__eqsf2+0x2a>
    3190:	2cff      	cmp	r4, #255	; 0xff
    3192:	d003      	beq.n	319c <__eqsf2+0x28>
    3194:	42a2      	cmp	r2, r4
    3196:	d101      	bne.n	319c <__eqsf2+0x28>
    3198:	42b5      	cmp	r5, r6
    319a:	d006      	beq.n	31aa <__eqsf2+0x36>
    319c:	bd70      	pop	{r4, r5, r6, pc}
    319e:	2d00      	cmp	r5, #0
    31a0:	d1fc      	bne.n	319c <__eqsf2+0x28>
    31a2:	2cff      	cmp	r4, #255	; 0xff
    31a4:	d1fa      	bne.n	319c <__eqsf2+0x28>
    31a6:	2e00      	cmp	r6, #0
    31a8:	d1f8      	bne.n	319c <__eqsf2+0x28>
    31aa:	428b      	cmp	r3, r1
    31ac:	d006      	beq.n	31bc <__eqsf2+0x48>
    31ae:	2001      	movs	r0, #1
    31b0:	2a00      	cmp	r2, #0
    31b2:	d1f3      	bne.n	319c <__eqsf2+0x28>
    31b4:	0028      	movs	r0, r5
    31b6:	1e45      	subs	r5, r0, #1
    31b8:	41a8      	sbcs	r0, r5
    31ba:	e7ef      	b.n	319c <__eqsf2+0x28>
    31bc:	2000      	movs	r0, #0
    31be:	e7ed      	b.n	319c <__eqsf2+0x28>

000031c0 <__gesf2>:
    31c0:	b5f0      	push	{r4, r5, r6, r7, lr}
    31c2:	0042      	lsls	r2, r0, #1
    31c4:	0245      	lsls	r5, r0, #9
    31c6:	024c      	lsls	r4, r1, #9
    31c8:	0fc3      	lsrs	r3, r0, #31
    31ca:	0048      	lsls	r0, r1, #1
    31cc:	0a6d      	lsrs	r5, r5, #9
    31ce:	0e12      	lsrs	r2, r2, #24
    31d0:	0a64      	lsrs	r4, r4, #9
    31d2:	0e00      	lsrs	r0, r0, #24
    31d4:	0fc9      	lsrs	r1, r1, #31
    31d6:	2aff      	cmp	r2, #255	; 0xff
    31d8:	d01e      	beq.n	3218 <__gesf2+0x58>
    31da:	28ff      	cmp	r0, #255	; 0xff
    31dc:	d021      	beq.n	3222 <__gesf2+0x62>
    31de:	2a00      	cmp	r2, #0
    31e0:	d10a      	bne.n	31f8 <__gesf2+0x38>
    31e2:	426e      	negs	r6, r5
    31e4:	416e      	adcs	r6, r5
    31e6:	b2f6      	uxtb	r6, r6
    31e8:	2800      	cmp	r0, #0
    31ea:	d10f      	bne.n	320c <__gesf2+0x4c>
    31ec:	2c00      	cmp	r4, #0
    31ee:	d10d      	bne.n	320c <__gesf2+0x4c>
    31f0:	2000      	movs	r0, #0
    31f2:	2d00      	cmp	r5, #0
    31f4:	d009      	beq.n	320a <__gesf2+0x4a>
    31f6:	e005      	b.n	3204 <__gesf2+0x44>
    31f8:	2800      	cmp	r0, #0
    31fa:	d101      	bne.n	3200 <__gesf2+0x40>
    31fc:	2c00      	cmp	r4, #0
    31fe:	d001      	beq.n	3204 <__gesf2+0x44>
    3200:	428b      	cmp	r3, r1
    3202:	d011      	beq.n	3228 <__gesf2+0x68>
    3204:	2101      	movs	r1, #1
    3206:	4258      	negs	r0, r3
    3208:	4308      	orrs	r0, r1
    320a:	bdf0      	pop	{r4, r5, r6, r7, pc}
    320c:	2e00      	cmp	r6, #0
    320e:	d0f7      	beq.n	3200 <__gesf2+0x40>
    3210:	2001      	movs	r0, #1
    3212:	3901      	subs	r1, #1
    3214:	4308      	orrs	r0, r1
    3216:	e7f8      	b.n	320a <__gesf2+0x4a>
    3218:	2d00      	cmp	r5, #0
    321a:	d0de      	beq.n	31da <__gesf2+0x1a>
    321c:	2002      	movs	r0, #2
    321e:	4240      	negs	r0, r0
    3220:	e7f3      	b.n	320a <__gesf2+0x4a>
    3222:	2c00      	cmp	r4, #0
    3224:	d0db      	beq.n	31de <__gesf2+0x1e>
    3226:	e7f9      	b.n	321c <__gesf2+0x5c>
    3228:	4282      	cmp	r2, r0
    322a:	dceb      	bgt.n	3204 <__gesf2+0x44>
    322c:	db04      	blt.n	3238 <__gesf2+0x78>
    322e:	42a5      	cmp	r5, r4
    3230:	d8e8      	bhi.n	3204 <__gesf2+0x44>
    3232:	2000      	movs	r0, #0
    3234:	42a5      	cmp	r5, r4
    3236:	d2e8      	bcs.n	320a <__gesf2+0x4a>
    3238:	2101      	movs	r1, #1
    323a:	1e58      	subs	r0, r3, #1
    323c:	4308      	orrs	r0, r1
    323e:	e7e4      	b.n	320a <__gesf2+0x4a>

00003240 <__lesf2>:
    3240:	b5f0      	push	{r4, r5, r6, r7, lr}
    3242:	0042      	lsls	r2, r0, #1
    3244:	024d      	lsls	r5, r1, #9
    3246:	004c      	lsls	r4, r1, #1
    3248:	0246      	lsls	r6, r0, #9
    324a:	0a76      	lsrs	r6, r6, #9
    324c:	0e12      	lsrs	r2, r2, #24
    324e:	0fc3      	lsrs	r3, r0, #31
    3250:	0a6d      	lsrs	r5, r5, #9
    3252:	0e24      	lsrs	r4, r4, #24
    3254:	0fc9      	lsrs	r1, r1, #31
    3256:	2aff      	cmp	r2, #255	; 0xff
    3258:	d016      	beq.n	3288 <__lesf2+0x48>
    325a:	2cff      	cmp	r4, #255	; 0xff
    325c:	d018      	beq.n	3290 <__lesf2+0x50>
    325e:	2a00      	cmp	r2, #0
    3260:	d10a      	bne.n	3278 <__lesf2+0x38>
    3262:	4270      	negs	r0, r6
    3264:	4170      	adcs	r0, r6
    3266:	b2c0      	uxtb	r0, r0
    3268:	2c00      	cmp	r4, #0
    326a:	d015      	beq.n	3298 <__lesf2+0x58>
    326c:	2800      	cmp	r0, #0
    326e:	d005      	beq.n	327c <__lesf2+0x3c>
    3270:	2001      	movs	r0, #1
    3272:	3901      	subs	r1, #1
    3274:	4308      	orrs	r0, r1
    3276:	bdf0      	pop	{r4, r5, r6, r7, pc}
    3278:	2c00      	cmp	r4, #0
    327a:	d013      	beq.n	32a4 <__lesf2+0x64>
    327c:	4299      	cmp	r1, r3
    327e:	d014      	beq.n	32aa <__lesf2+0x6a>
    3280:	2001      	movs	r0, #1
    3282:	425b      	negs	r3, r3
    3284:	4318      	orrs	r0, r3
    3286:	e7f6      	b.n	3276 <__lesf2+0x36>
    3288:	2002      	movs	r0, #2
    328a:	2e00      	cmp	r6, #0
    328c:	d1f3      	bne.n	3276 <__lesf2+0x36>
    328e:	e7e4      	b.n	325a <__lesf2+0x1a>
    3290:	2002      	movs	r0, #2
    3292:	2d00      	cmp	r5, #0
    3294:	d1ef      	bne.n	3276 <__lesf2+0x36>
    3296:	e7e2      	b.n	325e <__lesf2+0x1e>
    3298:	2d00      	cmp	r5, #0
    329a:	d1e7      	bne.n	326c <__lesf2+0x2c>
    329c:	2000      	movs	r0, #0
    329e:	2e00      	cmp	r6, #0
    32a0:	d0e9      	beq.n	3276 <__lesf2+0x36>
    32a2:	e7ed      	b.n	3280 <__lesf2+0x40>
    32a4:	2d00      	cmp	r5, #0
    32a6:	d1e9      	bne.n	327c <__lesf2+0x3c>
    32a8:	e7ea      	b.n	3280 <__lesf2+0x40>
    32aa:	42a2      	cmp	r2, r4
    32ac:	dc06      	bgt.n	32bc <__lesf2+0x7c>
    32ae:	dbdf      	blt.n	3270 <__lesf2+0x30>
    32b0:	42ae      	cmp	r6, r5
    32b2:	d803      	bhi.n	32bc <__lesf2+0x7c>
    32b4:	2000      	movs	r0, #0
    32b6:	42ae      	cmp	r6, r5
    32b8:	d3da      	bcc.n	3270 <__lesf2+0x30>
    32ba:	e7dc      	b.n	3276 <__lesf2+0x36>
    32bc:	2001      	movs	r0, #1
    32be:	4249      	negs	r1, r1
    32c0:	4308      	orrs	r0, r1
    32c2:	e7d8      	b.n	3276 <__lesf2+0x36>

000032c4 <__libc_init_array>:
    32c4:	b570      	push	{r4, r5, r6, lr}
    32c6:	2600      	movs	r6, #0
    32c8:	4d0c      	ldr	r5, [pc, #48]	; (32fc <__libc_init_array+0x38>)
    32ca:	4c0d      	ldr	r4, [pc, #52]	; (3300 <__libc_init_array+0x3c>)
    32cc:	1b64      	subs	r4, r4, r5
    32ce:	10a4      	asrs	r4, r4, #2
    32d0:	42a6      	cmp	r6, r4
    32d2:	d109      	bne.n	32e8 <__libc_init_array+0x24>
    32d4:	2600      	movs	r6, #0
    32d6:	f001 ffd3 	bl	5280 <_init>
    32da:	4d0a      	ldr	r5, [pc, #40]	; (3304 <__libc_init_array+0x40>)
    32dc:	4c0a      	ldr	r4, [pc, #40]	; (3308 <__libc_init_array+0x44>)
    32de:	1b64      	subs	r4, r4, r5
    32e0:	10a4      	asrs	r4, r4, #2
    32e2:	42a6      	cmp	r6, r4
    32e4:	d105      	bne.n	32f2 <__libc_init_array+0x2e>
    32e6:	bd70      	pop	{r4, r5, r6, pc}
    32e8:	00b3      	lsls	r3, r6, #2
    32ea:	58eb      	ldr	r3, [r5, r3]
    32ec:	4798      	blx	r3
    32ee:	3601      	adds	r6, #1
    32f0:	e7ee      	b.n	32d0 <__libc_init_array+0xc>
    32f2:	00b3      	lsls	r3, r6, #2
    32f4:	58eb      	ldr	r3, [r5, r3]
    32f6:	4798      	blx	r3
    32f8:	3601      	adds	r6, #1
    32fa:	e7f2      	b.n	32e2 <__libc_init_array+0x1e>
    32fc:	0000528c 	.word	0x0000528c
    3300:	0000528c 	.word	0x0000528c
    3304:	0000528c 	.word	0x0000528c
    3308:	00005290 	.word	0x00005290

0000330c <memcpy>:
    330c:	2300      	movs	r3, #0
    330e:	b510      	push	{r4, lr}
    3310:	429a      	cmp	r2, r3
    3312:	d100      	bne.n	3316 <memcpy+0xa>
    3314:	bd10      	pop	{r4, pc}
    3316:	5ccc      	ldrb	r4, [r1, r3]
    3318:	54c4      	strb	r4, [r0, r3]
    331a:	3301      	adds	r3, #1
    331c:	e7f8      	b.n	3310 <memcpy+0x4>

0000331e <memset>:
    331e:	0003      	movs	r3, r0
    3320:	1882      	adds	r2, r0, r2
    3322:	4293      	cmp	r3, r2
    3324:	d100      	bne.n	3328 <memset+0xa>
    3326:	4770      	bx	lr
    3328:	7019      	strb	r1, [r3, #0]
    332a:	3301      	adds	r3, #1
    332c:	e7f9      	b.n	3322 <memset+0x4>
    332e:	6974      	.short	0x6974
    3330:	3631796e 	.word	0x3631796e
    3334:	00003731 	.word	0x00003731

00003338 <device_1617>:
    3338:	0000332e 00003340                       .3..@3..

00003340 <device_tiny_161x>:
    3340:	00003364 40008000 0f000040 11001000     d3.....@@.......
    3350:	000b1280 13000001 00200020 00801400     ........ . .....
    3360:	00000020 796e6974 78313631 3e940c00               ...tiny161x.

0000336d <bindata0>:
    336d:	003e940c 005b940c 005b940c 005b940c     ..>...[...[...[.
    337d:	005b940c 005b940c 0062940c 005b940c     ..[...[...b...[.
    338d:	005b940c 005b940c 005b940c 005b940c     ..[...[...[...[.
    339d:	005b940c 005b940c 005b940c 005b940c     ..[...[...[...[.
    33ad:	005b940c 005b940c 005b940c 005b940c     ..[...[...[...[.
    33bd:	0368940c 038c940c 005b940c 005b940c     ..h.......[...[.
    33cd:	005b940c 005b940c 005b940c 005b940c     ..[...[...[...[.
    33dd:	005b940c 005b940c 005b940c be1f2411     ..[...[...[..$..
    33ed:	bfcdefcf bfdee3df e0a0e318 eee4e3b8     ................
    33fd:	c002e1fd 920d9005 07b136a6 e328f7d9     .........6....(.
    340d:	e3b8e6a6 921dc001 07b23bad 940ef7e1     .........;......
    341d:	940c0089 940c0eed 940e0000 940e03e7     ................
    342d:	9508021f 920f921f 920fb60f 932f2411     .............$/.
    343d:	934f933f 936f935f 938f937f 93af939f     ?.O._.o.........
    344d:	93ef93bf 940e93ff e082030d 01439380     ..............C.
    345d:	91ef91ff 91af91bf 918f919f 916f917f     ..............o.
    346d:	914f915f 912f913f be0f900f 901f900f     _.O.?./.........
    347d:	940e9518 b78f005d bf8f6880 0274940e     ....]....h....t.
    348d:	386c9180 f7d13081 386c9210 e090e080     ..l8.0....l8....
    349d:	0359940e e0812fc8 940ee090 2b8c0359     ..Y../......Y..+
    34ad:	982cf414 9a2ccfeb 9508cfe9 2fc893cf     ..,...,......../
    34bd:	0424940e f3e12388 940e2f8c 940e0432     ..$..#.../..2...
    34cd:	1181042a 91cfcffc 92ef9508 930f92ff     *...............
    34dd:	93cf931f d00093df b7deb7cd 38669180     ..............f8
    34ed:	f481708f e318e000 e1f32e0f e3f82eef     .p..............
    34fd:	2df02eff 918101f8 940e018f 16e000a6     ...-............
    350d:	f7c106f1 940ee585 918000a6 940e3866     ............f8..
    351d:	821900a6 8189821a 9702819a c053f008     ..............S.
    352d:	819a8189 0332940e 940e2f19 2f8100a6     ......2../...../
    353d:	00a6940e 819a8189 033f940e 940e2f19     ..........?../..
    354d:	2f8100a6 00a6940e 819a8189 0332940e     .../..........2.
    355d:	8189018c 940e819a 1b08033f 2f800b19     ........?....../
    356d:	00a6940e 940e2f81 818900a6 940e819a     ...../..........
    357d:	2f19034c 00a6940e 940e2f81 818900a6     L../...../......
    358d:	940e819a 23880359 e081f424 00a6940e     ....Y..#$.......
    359d:	e080c003 00a6940e 819a8189 0fee01fc     ................
    35ad:	0f8e1fff 01fc1f9f 4cf75ced 940e8180     .........\.L....
    35bd:	818900a6 9601819a 839a8389 819a8189     ................
    35cd:	f4089702 9180cfad 940e386b 918000a6     ........k8......
    35dd:	e0913866 93900f98 940e3866 ea8a00a6     f8......f8......
    35ed:	00a6940e 900f900f 91cf91df 910f911f     ................
    35fd:	90ef90ff e0819508 386d9380 91e09508     ..........m8....
    360d:	91f0382b 8180382c f4442388 389091e0     +8..,8...#D....8
    361d:	389191f0 60848180 c0038380 9380e081     ...8...`........
    362d:	940e386c 950800b5 f4242388 9380e081     l8.......#$.....
    363d:	c009386b c003fd86 386b9210 708fc004     k8........k8...p
    364d:	93805f8e 940e386b 950800b5 e398e88c     ._..k8..........
    365d:	0c5c940e e070e060 e398e489 0cce940e     ..\.`.p.........
    366d:	e070e060 e398e489 0ced940e e070e061     `.p.........a.p.
    367d:	e398e489 0cce940e e070e061 e398e489     ........a.p.....
    368d:	0ced940e e358e842 e28be060 940ee398     ....B.X.`.......
    369d:	e84704ae e061e358 e398e28b 04ae940e     ..G.X.a.........
    36ad:	019c9508 f0692b89 e0f1e4e0 fd928191     .....+i.........
    36bd:	e4e0cffd 8722e0f1 81828733 83826082     ......".3....`..
    36cd:	e4e0c005 8182e0f1 83827f8d e0f1e4e0     ................
    36dd:	fd818181 9210cffd 92100148 95080149     ........H...I...
    36ed:	e0f1e8e0 8a138215 e0f1e4e0 fd808181     ................
    36fd:	e4e0cffd 8180e0f1 83807f8e fd808981     ................
    370d:	e4e0cffd 8980e0f1 8b807f8e e090e184     ................
    371d:	38679380 38689390 38489180 f4983085     ..g8..h8..H8.0..
    372d:	01479210 fd808181 e989cffd 01409380     ..G...........@.
    373d:	38679180 38689190 1f990f88 1f990f88     ..g8..h8........
    374d:	01a1940e e081c011 01479380 e0f1e4e0     ..........G.....
    375d:	fd808181 e881cffd 01409380 38679180     ..........@...g8
    376d:	38689190 01a1940e e0f1e4e0 fd808181     ..h8............
    377d:	e4e0cffd 8180e0f1 83806081 91809508     .........`......
    378d:	91903867 97443868 940ef049 e08101c0     g8..h8D.I.......
    379d:	386e9380 38699210 386a9210 e1849508     ..n8..i8..j8....
    37ad:	940ee090 e1e701a1 8180e0f4 83807f87     ................
    37bd:	7f888180 83806084 e0f4e1e6 7f878180     .....`..........
    37cd:	81808380 60847f88 940e8380 e9e201c0     .......`........
    37dd:	8210e3f8 e398e287 83928381 e398e283     ................
    37ed:	83948383 e398e18b 83968385 e398e18f     ................
    37fd:	87908387 e398e183 87928781 e398e187     ................
    380d:	87948783 e09ae988 87968785 e091e786     ................
    381d:	8b908787 e091e684 8b928b81 e091e48b     ................
    382d:	8b948b83 8a168a15 e091e48f 8f908b87     ................
    383d:	940e01cf 940e0893 9380088e 93903890     .............8..
    384d:	940e3891 950800a5 386e9180 f4393081     .8........n8.09.
    385d:	940ee080 118108f2 9210c002 9180386e     ............n8..
    386d:	3081386d c083f009 0942940e c0031181     m8.0......B.....
    387d:	094a940e e880c003 0164940e 386d9210     ..J.......d...m8
    388d:	389091e0 389191f0 ff828180 e081c007     ...8...8........
    389d:	386e9380 7f8b8180 c0698380 387c9180     ..n8......i...|8
    38ad:	c005ff80 38699210 386a9210 9180c056     ......i8..j8V...
    38bd:	91903869 3888386a f4084193 e06fc04e     i8..j8.8.A..N.o.
    38cd:	e483e072 940ee398 91200d2e 91303867     r......... .g80.
    38dd:	3d203868 f4094037 1181c04a e4e0c048     h8 =7@..J...H...
    38ed:	8181e0f1 cffdfd80 e0f1e4e0 7f8e8180     ................
    38fd:	ed808380 9380e097 93903867 91803868     ........g8..h8..
    390d:	30853848 e191f460 e8e01b98 8395e0f1     H8.0`...........
    391d:	8b83e086 e19fe480 01a1940e e196c00b     ................
    392d:	e8e01b98 8395e0f1 8b83e086 e097ed80     ................
    393d:	01a1940e e0f1e4e0 fd808981 e4e0cffd     ................
    394d:	8980e0f1 8b806081 fd808181 e4e0cffd     .....`..........
    395d:	8180e0f1 83806081 9180c00a 91903867     .....`......g8..
    396d:	97443868 940ef021 940e0e6a 918001c0     h8D.!...j.......
    397d:	3081386e 9588f009 e0819508 386e9380     n8.0..........n8
    398d:	38679180 38689190 04a3940e 38679120     ..g8..h8.... .g8
    399d:	38689130 38699180 386a9190 954001a9     0.h8..i8..j8..@.
    39ad:	17849550 f4380795 1f930f82 38699380     P.....8.......i8
    39bd:	386a9390 ef8f9508 9380ef9f 93903869     ..j8........i8..
    39cd:	9508386a 0f22019c 0f221f33 0f821f33     j8....".3.".3...
    39dd:	01fc1f93 4cf757ee 81928181 019c9508     .....W.L........
    39ed:	1f330f22 1f930f82 0fee01fc 55e51fff     ".3............U
    39fd:	81844cf7 95088195 0f22019c 0f221f33     .L........".3.".
    3a0d:	0f821f33 01fc1f93 4cf757ee 81948183     3........W.L....
    3a1d:	019c9508 1f330f22 1f930f82 1f990f88     ....".3.........
    3a2d:	382f91e0 383091f0 1ff90fe8 95088180     ../8..08........
    3a3d:	920f921f 920fb60f 932f2411 934f933f     .........$/.?.O.
    3a4d:	936f935f 938f937f 93af939f 93ef93bf     _.o.............
    3a5d:	940e93ff 91ff0e7b 91bf91ef 919f91af     ....{...........
    3a6d:	917f918f 915f916f 913f914f 900f912f     ....o._.O.?./...
    3a7d:	900fbe0f 9518901f 920f921f 920fb60f     ................
    3a8d:	932f2411 934f933f 936f935f 938f937f     .$/.?.O._.o.....
    3a9d:	93af939f 93ef93bf 940e93ff 91ff0ea7     ................
    3aad:	91bf91ef 919f91af 917f918f 915f916f     ............o._.
    3abd:	913f914f 900f912f 900fbe0f 9518901f     O.?./...........
    3acd:	9380e082 e0800089 e0409508 e681ed68     ..........@.h...
    3add:	940ee090 e0800402 94789508 9508e080     ..........x.....
    3aed:	e0f4e1e0 60888180 31e89381 07f8e084     .......`...1....
    3afd:	e3e0f7c9 8180e0f4 93816088 e08433e8     .........`...3..
    3b0d:	f7c907f8 e0f4e5e0 60888180 35e89381     ...........`...5
    3b1d:	07f8e084 9508f7c9 e3e39823 8180e0f4     ........#.......
    3b2d:	83807f87 9a22982a 041a940e 940e9508     ....*.".........
    3b3d:	9a2c03c0 940e9a24 940e03b5 940e0406     ..,.$...........
    3b4d:	940e03dc 940e03fa 940e03bd 940e0415     ................
    3b5d:	950803b0 e0f1e8e0 8385e181 8b83e086     ................
    3b6d:	9508e080 bf6401fc 95088340 e0f1e4e0     ......d.@.......
    3b7d:	11818181 e4e0cffd e881e0f1 e0818380     ................
    3b8d:	e0828387 e0808382 e0839508 00509380     ..............P.
    3b9d:	9508e080 e0f8e0e0 e098e283 87918780     ................
    3bad:	8386ec80 9508e080 08049180 2788fb85     ...............'
    3bbd:	9508f980 08049180 2788fb86 e091f980     ...........'....
    3bcd:	95082789 e0f8e0e0 ff958194 9380cffd     .'..............
    3bdd:	95080802 92df92cf 930f92ff 93cf931f     ................
    3bed:	01ec93df 81bf81ae 0fcc01eb 0fc61fdd     ................
    3bfd:	0fca1fd7 80fa1fdb 814401fc e0e68155     ..........D.U...
    3c0d:	01909fe6 0d309fe7 018a2411 1f130f02     ......0..$......
    3c1d:	812201f8 01f98133 81328121 810401f8     ..".3...!.2.....
    3c2d:	1b208115 81e80b31 09311b2e 81ea01ec     .. .1.....1.....
    3c3d:	810081fb 01fa8111 e050e040 07511740     ........@.P.@.Q.
    3c4d:	1746f139 f0f90757 918c9612 12f89712     9.F.W...........
    3c5d:	8180c01a 30825885 80c4f0e8 818280d5     .....X.0........
    3c6d:	01ec8193 819a8189 06d916c8 198cf460     ............`...
    3c7d:	91cc099d 17c8e0d0 f42807d9 0b9d1b8c     ..........(.....
    3c8d:	07391728 5f4ff038 96134f5f cfd69636     (.9.8.O__O..6...
    3c9d:	c001e080 91dfe081 911f91cf 90ff910f     ................
    3cad:	90cf90df 91209508 9130386f 0f823870     ...... .o80.p8..
    3cbd:	93801f93 9390386f 95083870 f0d99700     ....o8..p8......
    3ccd:	05511541 e026f0c1 01b09f62 01dc2411     A.Q...&.b....$..
    3cdd:	91ed9614 971591fc 1ff70fe6 8320e021     ............!. .
    3ced:	918d9614 9715919c 0fe601fc 83421ff7     ..............B.
    3cfd:	e0808353 e08b9508 922f9508 924f923f     S........./.?.O.
    3d0d:	926f925f 928f927f 92af929f 92cf92bf     _.o.............
    3d1d:	92ef92df 930f92ff 93cf931f 970093df     ................
    3d2d:	c37df409 2ca101ec 2c812cb1 2c212c91     ..}....,.,.,.,!,
    3d3d:	e0332cd1 e8452ec3 e8562e64 e0672e75     .,3...E.d.V.u.g.
    3d4d:	e0722e36 e0e82e47 81ea2e5e 818081fb     6.r.G...^.......
    3d5d:	16888191 f0080699 0175c1a5 1cff0cee     ..........u.....
    3d6d:	811d810c 1d1f0d0e 918c01d8 f4093084     .............0..
    3d7d:	f438c0a2 f1013082 c049f008 f0593081     ..8..0....I..0Y.
    3d8d:	3885c18a c0c2f409 f4093886 3087c0f6     ...8.....8.....0
    3d9d:	c181f009 01d8c137 91ed9612 971391fc     ....7...........
    3dad:	718e8180 c169f009 818c924c 01fc819d     ...q..i.L.......
    3dbd:	1dff0dee c1618251 812101f8 f1292322     ....Q.a...!."#).
    3dcd:	81f38002 30252de0 8181f020 01d88192     .....-%0 .......
    3ddd:	01d8c00e 918d9614 9715919c 81528141     ............A.R.
    3ded:	07951784 1748f069 f4300759 96149701     ....i.H.Y.0.....
    3dfd:	939c938d c0049715 01f89601 83958384     ................
    3e0d:	01d85021 932c9611 01f8c138 01d8c131     !P....,.8...1...
    3e1d:	912d9614 9715913c 918d9612 9713919c     ..-.<...........
    3e2d:	961101dc 915c914d 17249712 f4090735     ....M.\...$.5...
    3e3d:	818ec132 1742819f f4e00753 0b351b24     2.....B.S...$.5.
    3e4d:	0daa01dc 918c1dbb 8005e090 9595c002     ................
    3e5d:	940a9587 2799f7e2 07391728 c11bf408     .......'(.9.....
    3e6d:	23888184 c117f409 823001f8 81fb81ea     ...#......0.....
    3e7d:	c01a8124 0dea01fc 1b421dfb 81800b53     $.........B.S...
    3e8d:	1748e090 f4080759 8182c106 f0312388     ..H.Y........#1.
    3e9d:	01ce01b4 043a940e c0fd1181 01d8e0e4     ......:.........
    3ead:	81ea93ec 812281fb 819d818c 0dee01fc     ......".........
    3ebd:	83211dff 01d8c0e2 912d9614 9715913c     ..!.......-.<...
    3ecd:	91ed9612 971391fc 81928181 07931782     ................
    3edd:	c0d7f408 81ff81ee 1dfb0dea 0b931b82     ................
    3eed:	e0308120 07391728 c0aff008 23888182      .0.(.9........#
    3efd:	01b4f031 940e01ce 1181043a 01f8c0cc     1.......:.......
    3f0d:	23888181 c067f409 c0b65081 81b981a8     ...#..g..P......
    3f1d:	96138580 81ec938c 0dee81fd 81441dff     ..............D.
    3f2d:	81a28155 961181b3 919c918d 17849712     U...............
    3f3d:	f0c00795 81bf81ae 1dbb0daa 2f26916c     ............l.&/
    3f4d:	9611e030 5f7f917c 9535c002 957a9527     0...|.._..5.'.z.
    3f5d:	1b84f7e2 1b620b95 e0302f26 07391728     ......b.&/0.(.9.
    3f6d:	c097f408 81ea8270 812281fb 819d818c     ....p.....".....
    3f7d:	0dee01fc 83211dff 01d8c042 916d9614     ......!.B.....m.
    3f8d:	9715917c 91ed9612 971391fc 81328121     |...........!.2.
    3f9d:	07371726 9611f458 9711918c c0021181     &.7.X...........
    3fad:	c07792cc 01f85081 c0738381 81ff81ee     ..w..P....s.....
    3fbd:	1dfb0dea 2f488180 8191e050 c0025f9f     ......H/P...._..
    3fcd:	95479555 f7e2959a 0b371b26 e0901b84     U.G.....&.7.....
    3fdd:	07931782 01d8f460 81ea926c 812381fb     ....`...l.....#.
    3fed:	819d818c 0dee01fc 83211dff 01f8c052     ..........!.R...
    3ffd:	11818181 82c0c002 5081c04c 24228381     ........L..P.."$
    400d:	c03b9423 961401d8 913c912d 96129715     #.;.....-.<.....
    401d:	919c918d 01dc9713 918d9611 9712919c     ................
    402d:	07931782 1b28f568 81ae0b39 0daa81bf     ....h.(.9.......
    403d:	918c1dbb 8005e090 9595c002 940a9587     ................
    404d:	2799f7e2 07391728 01f8f418 c01a82c0     ...'(.9.........
    405d:	961101d8 9711918c c00c1181 938ce081     ................
    406d:	819d818c 0dee01fc 80021dff 2de081f3     ...............-
    407d:	c01182c0 01f85081 24dd8381 c00b94d3     .....P.....$....
    408d:	92cc01d8 819d818c 0dee01fc 82111dff     ................
    409d:	2422c002 efbf9423 0a9b1a8b 0eaee0e3     .."$#...........
    40ad:	ce531cb1 81f981e8 ff878180 e040c023     ..S.........#.@.
    40bd:	e020e050 81eae030 818081fb 17288191     P. .0.........(.
    40cd:	f4980739 81fd81ec 1ff50fe4 81b381a2     9...............
    40dd:	fd80918c 8190c005 f0117f97 938c6081     .............`..
    40ed:	4f3f5f2f 4f5f5f4a 81e8cfe6 818081f9     /_?OJ__O........
    40fd:	8380778f c00710d1 81f981e8 c06f1021     .w..........!.o.
    410d:	7f8e8180 81eac06e 858181fb f3a12388     ....n........#..
    411d:	81f981e8 68808180 81ea8380 858181fb     .......h........
    412d:	f7513081 e050e040 e030e020 2ed9e096     .0Q.@.P. .0.....
    413d:	81fb81ea 81718160 07371726 810cf6e8     ....`.q.&.7.....
    414d:	01fa811d 1fff0fee 1ff10fe0 2f988180     .............../
    415d:	f1a17f97 f0113885 f5b13083 80ff80ee     .....8...0......
    416d:	0fa401d7 96121fb5 20bb90bc e080f139     ........... 9...
    417d:	2cc1e090 07971786 1728f4f8 f0d10739     ...,......(.9...
    418d:	01d09ed8 0db09ed9 0fa02411 91ac1fb1     .........$......
    419d:	f01130a4 f47138a6 0faa01dc 0fa81fbb     .0...8q.........
    41ad:	0dae1fb9 96121dbf 12ba91ac 01cbc003     ................
    41bd:	94c324cc cfde9601 c00610c1 81f38002     .$..............
    41cd:	81802de0 c0057f8e 81f38002 81802de0     .-...........-..
    41dd:	83806081 4f3f5f2f 4f5f5f4d 8180cfa9     .`../_?OM__O....
    41ed:	83806081 386f9180 38709190 81f981e8     .`....o8..p8....
    41fd:	81328121 534801a9 17484f5f f4380759     !.2...HS_OH.Y.8.
    420d:	0b931b82 94a324aa 2ebae0a3 1782c044     .....$......D...
    421d:	f0100793 c104e080 0b931b82 3c899701     ...............<
    422d:	f3c00591 5c88cfef 81e80991 812181f9     .......\......!.
    423d:	53288132 83214f3f 81238332 c0961121     2.(S?O!.2.#.!...
    424d:	23228124 5021f011 81e88324 812581f9     $."#..!P$.....%.
    425d:	f0112322 83255021 809b808a 961601d4     "#..!P%.........
    426d:	9716912c c01b1121 809b808a 812701f4     ,...!.........'.
    427d:	c0481121 81fb81ea 23228123 e020f061     !.H.....#."#a. .
    428d:	e0a0e030 81eae0b0 814081fb 17a48151     0.........@.Q...
    429d:	f40807b5 3c89c06e f6280591 8108cfbb     ....n..<..(.....
    42ad:	01f88119 11218124 90edcfdf e06090fc     ....$.!.......`.
    42bd:	e040e070 154ee050 f0f1055f 81fd81ec     p.@.P.N._.......
    42cd:	1ff70fe6 30238120 3028f011 8124f481     .... .#0..(0..$.
    42dd:	80c28135 01d680d3 90cd9611 971290dc     5...............
    42ed:	053d152c 5f2ff420 83244f3f 5f4f8335     ,.=. ./_?O$.5.O_
    42fd:	5f6a4f5f cfdf4f7f 812601f4 961401d8     _Oj_.O....&.....
    430d:	cfb2932c 81198108 961501d8 1121912c     ,...........,.!.
    431d:	80e0cfb1 e06080f1 e040e070 154ee050     ......`.p.@.P.N.
    432d:	f0f1055f 81fd81ec 1ff70fe6 30238120     _........... .#0
    433d:	3028f011 8124f481 80c28135 01d680d3     ..(0..$.5.......
    434d:	90cd9611 971290dc 06d316c2 5021f420     ............ .!P
    435d:	83240931 5f4f8335 5f6a4f5f cfdf4f7f     1.$.5.O__Oj_.O..
    436d:	812701f4 961501d8 cf84932c 83235021     ..'.....,...!P#.
    437d:	01a9cf81 1f550f44 81fd81ec 1ff50fe4     ....D.U.........
    438d:	38658160 c047f009 23668161 5061f019     `.e8..G.a.f#..aP
    439d:	c0418361 816c82a0 01fb817d 1ff50fe4     a.A...l.}.......
    43ad:	81f38002 82b02de0 81ff81ee 1ff30fe2     .....-..........
    43bd:	20dd80d2 e040f181 e000e050 81eae010     ... ..@.P.......
    43cd:	816081fb 17068171 f5280717 81ff81ee     ..`.q.....(.....
    43dd:	1ff50fe4 12d68162 01bac019 1f770f66     ....b.......f.w.
    43ed:	81fd81ec 0e86014f 01f41e97 80f380e2     ....O...........
    43fd:	80f001f7 c00afef0 82a001f4 81fd81ec     ................
    440d:	1ff70fe6 81f38002 82b02de0 4f1f5f0f     .........-..._.O
    441d:	4f5f5f4d 9611cfd4 4f3f5f2d e08bcf34     M__O....-_?O4...
    442d:	91cf91df 910f911f 90ef90ff 90cf90df     ................
    443d:	90af90bf 908f909f 906f907f 904f905f     ..........o._.O.
    444d:	902f903f e0959508 38739390 38b791e0     ?./.......s8...8
    445d:	38b891f0 89f28801 97302de0 9409f009     ...8.....-0.....
    446d:	91e0cfff 91f038b7 880338b8 2de089f4     .....8...8.....-
    447d:	f0099730 e4809409 0873940c 38b79180     0.........s....8
    448d:	38b89190 93cf9508 38b79380 38b89390     ...8.......8...8
    449d:	38739180 f0393085 f0283082 38719180     ..s8.09..0(...q8
    44ad:	f1712388 9210c040 e0c03871 38b791a0     .#q.@...q8.....8
    44bd:	38b891b0 e0902f8c 1f990f88 91ed9611     ...8./..........
    44cd:	971291fc 1ff90fe8 81f09001 97302de0     .............-0.
    44dd:	9617f329 913c912d 01d99718 1fb90fa8     )...-.<.........
    44ed:	919c918d 23889509 9180f029 5f8f3871     .......#)...q8._
    44fd:	38719380 91805fcf 23883871 cfcef2b9     ..q8._..q8.#....
    450d:	9380e082 91e03873 91f038b7 840738b8     ....s8...8...8..
    451d:	2de089f0 f0119730 c0089509 9380e085     ...-0...........
    452d:	e0813873 5f8fc001 38719380 38719180     s8....._..q8..q8
    453d:	f0312388 38719210 91cfe880 0873940c     .#1...q8......s.
    454d:	950891cf 93cf931f 2f1893df 38b791a0     .........../...8
    455d:	38b891b0 912d9615 9716913c 01f9e0d0     ...8..-.<.......
    456d:	1df10fed 1df10fed 81918180 f0112b89     .............+..
    457d:	cff55fdf 918d9653 9754919c f1492b89     ._..S.....T..+I.
    458d:	e0902f81 1f990f88 0fe801f9 90011ff9     ./..............
    459d:	2de081f0 f0e99730 912d961b 971c913c     ...-0.....-.<...
    45ad:	0fa801d9 918d1fb9 9700919c e861f091     ..............a.
    45bd:	9509e078 11812fc8 e083c006 38739380     x..../........s8
    45cd:	38729210 e082c003 38739380 f028171d     ..r8......s8..(.
    45dd:	e0c2c001 940ee882 2f8c0873 91cf91df     ........s../....
    45ed:	9508911f 38b791e0 38b891f0 85f68405     .......8...8....
    45fd:	94092de0 93cf931f 921f93df b7deb7cd     .-..............
    460d:	91e08219 91f038b7 880538b8 2de089f6     .....8...8.....-
    461d:	f0499730 9380e082 01ce3873 95099601     0.I.....s8......
    462d:	9380e083 91803873 11813871 8119c02c     ....s8..q8..,...
    463d:	c0291111 9380e084 91a03873 91b038b7     ..).....s8...8..
    464d:	918038b8 e0903872 1f990f88 91ed9613     .8..r8..........
    465d:	971491fc 1ff90fe8 81f09001 96192de0     .............-..
    466d:	913c912d 9730971a 01d9f081 1fb90fa8     -.<...0.........
    467d:	919c918d 11819509 9180c03e 5f8f3872     ........>...r8._
    468d:	38729380 e010cfda 9210c03d 01f93872     ..r8....=...r8..
    469d:	1df10fe1 1df10fe1 81f09001 97302de0     .............-0.
    46ad:	9001f059 2de081f0 ff878180 919cc003     Y......-........
    46bd:	939c6094 cfeb5f1f 38729310 9380e082     .`..._....r8....
    46cd:	96573873 91fc91ed 97309758 9509f011     s8W.....X.0.....
    46dd:	9180c005 5f8f3871 38719380 9180e010     ....q8._..q8....
    46ed:	23883871 9210f079 91803871 64803872     q8.#y...q8..r8.d
    46fd:	0873940e 9180c007 5f8f3871 38719380     ..s.....q8._..q8
    470d:	cfede013 900f2f81 91cf91df 9508911f     ...../..........
    471d:	38799180 387a9190 38b991a0 38ba91b0     ..y8..z8...8...8
    472d:	91fc91ed 81409711 e0258151 01b09f28     ......@.Q.%.(...
    473d:	0d709f29 e0202411 1784e030 f4a80795     ).p..$ .0.......
    474d:	91ed9614 971591fc 1ff30fe2 1ff70fe6     ................
    475d:	5f2b81e0 fde04f3f 9601c002 9380cfee     ..+_?O..........
    476d:	93903879 e080387a 92109508 92103879     y8..z8......y8..
    477d:	e081387a 01bc9508 38b991e0 38ba91f0     z8.........8...8
    478d:	e083019c 1f330f22 f7e1958a 81b381a2     ....".3.........
    479d:	1fb30fa2 919c9612 96139712 9390918c     ................
    47ad:	9380062a 81a2062b 0fa281b3 919c1fb3     *...+...........
    47bd:	918c9611 06269390 06279380 9f96e095     ......&...'.....
    47cd:	9f9701a0 24110d50 81b581a4 1fb50fa4     ....P..$........
    47dd:	918c9613 061a9380 81b581a4 1fb50fa4     ................
    47ed:	918c9614 061b9380 81b581a4 1fb50fa4     ................
    47fd:	fd81918c 8184939c 01dc8195 1fb50fa4     ................
    480d:	718c918c 81a2f469 0fa281b3 96161fb3     ...qi...........
    481d:	95a291ac e0b070af 46b252a2 c001918c     .....p...R.F....
    482d:	9380e38f 81a2061c 0fa281b3 96141fb3     ................
    483d:	318b918c 5f8cf410 e18fc001 06059380     ...1..._........
    484d:	81b381a2 1fb30fa2 918c9617 06019380     ................
    485d:	81b381a2 1fb30fa2 918c9615 708f9582     ...............p
    486d:	06199380 81938182 0fe201fc 81851ff3     ................
    487d:	6180708f 06029380 06189180 93806083     .p.a.........`..
    488d:	e8810618 06009380 9380e081 95080608     ................
    489d:	924f923f 926f925f 928f927f 92af929f     ?.O._.o.........
    48ad:	92cf92bf 92ef92df 930f92ff 93cf931f     ................
    48bd:	918093df 23883878 c148f409 38b991a0     ....x8.#..H....8
    48cd:	38ba91b0 38bb90c0 38bc90d0 e010e000     ...8...8...8....
    48dd:	e070e060 2cf12ce1 2433e080 e8d19433     `.p..,.,..3$3...
    48ed:	24882e4d 2499948a 906d9493 9711907c     M..$...$..m.|...
    48fd:	812001f3 16e28131 f00806f3 01e6c123     .. .1.......#...
    490d:	91399129 9614016e 91fc91ed 0fe69715     ).9.n...........
    491d:	81401ff7 e050714c 95479556 95479556     ..@.LqP.V.G.V.G.
    492d:	05511541 3041f021 f0b90551 9612c102     A.Q.!.A0Q.......
    493d:	91dc91cd 0fc09713 814e1fd1 819f704f     ..........N.Op..
    494d:	f4101749 c0011b94 c002e090 95279536     I...........6.'.
    495d:	f7e2959a 83328321 9612c0ed 915c914d     ....!.2.....M.\.
    496d:	0f409713 01ea1f51 c002800f 95279536     ..@.Q.......6.'.
    497d:	f7e2940a 83328321 80b480a3 e0d21521     ....!.2.....!...
    498d:	f020073d 40315f2f c005e091 1b4201a4     =. ./_1@......B.
    499d:	019a0b53 01e3e090 e4d0805a c005125d     S.......Z...]...
    49ad:	95279536 f0192399 2399c009 ef4ff039     6.'..#.....#9.O.
    49bd:	06b416a4 8240f431 c007e08e 94732477     ....1.@.....w$s.
    49cd:	2c71c001 0531302a 9614f490 91fc91ed     ..q,*01.........
    49dd:	0fe69715 81901ff7 8230ff97 91ed9614     ..........0.....
    49ed:	971591fc 1ff70fe6 82b482a3 01e5c0a3     ................
    49fd:	27dd2fcd 70cf95c2 01a52f9c 705f2744     ./.'...p./..D'_p
    4a0d:	01a52e65 27557f40 95429552 2745704f     e...@.U'R.B.OpE'
    4a1d:	2745705f 705f2d5a 30c42ea5 7093f030     _pE'Z-_p...00..p
    4a2d:	95c795d6 95c795d6 10710f9c e850c03c     ..........q.<.P.
    4a3d:	30520d55 e056f410 e053c007 1795c005     U.R0..V...S.....
    4a4d:	5f9ff468 09315c2f 05313d20 c006f7c0     h.._/\1. =1.....
    4a5d:	166ce0cf 9463f049 09315125 05313126     ..l.I.c.%Q1.&11.
    4a6d:	e0dff7b8 c00e126d f4201795 e0d55f9f     ....m..... .._..
    4a7d:	c0082e6d 2e6ce0cf 304fc005 5f4ff049     m.....l...O0I.O_
    4a8d:	09315022 05313023 304ff7c0 c065f009     "P1.#01...O0..e.
    4a9d:	1664e04f 9463f181 c05fe045 f0612399     O.d...c.E._..#a.
    4aad:	5c2f5091 3d200931 f7c00531 2066c005     .P/\1. =1.....f 
    4abd:	946af041 09315125 05313126 1061f7c0     A.j.%Q1.&11...a.
    4acd:	2399c00d 5091f021 2e65e05a 2c61c007     ...#!..PZ.e...a,
    4add:	2344c005 5041f041 09315022 05313023     ..D#A.AP"P1.#01.
    4aed:	1141f7c0 2066c010 946af1e9 3023e04a     ..A...f ..j.J.#0
    4afd:	f6c80531 1359c008 3023c02f f1400531     1.....Y./.#01.@.
    4b0d:	2ea4e04f 3094e04f 0f99f018 50990f99     O...O..0.......P
    4b1d:	9f4ce1c0 241101a0 294a2956 e0d02fc9     ..L....$V)J)./..
    4b2d:	27cc2fdc 7fd095d2 2b5d2b4c 83548343     ./.'....L+]+C.T.
    4b3d:	cfffc001 1aedefdf 5f6b0afd 5f084f7f     ..........k_.O._
    4b4d:	ced34f1f 9390e092 c00e3878 c00ce083     .O......x8......
    4b5d:	e02fe04f cfd72ea2 3023e04f f0080531     O./.....O.#01...
    4b6d:	cfd1cf73 cfcfe040 91cf91df 910f911f     s...@...........
    4b7d:	90ef90ff 90cf90df 90af90bf 908f909f     ................
    4b8d:	906f907f 904f905f 9508903f 93df93cf     ..o._.O.?.......
    4b9d:	f1e19700 91ed01dc 81a091fc e06081b1     ..............`.
    4bad:	e040e070 e020e050 174ae030 f099075b     p.@.P. .0.J.[...
    4bbd:	81ea01ec 0fe681fb 81c01ff7 800281d1     ................
    4bcd:	2de081f3 2bfd2bec 2b3f2b2e 4f5f5f4f     ...-.+.+.+?+O__O
    4bdd:	4f7f5f68 1521cfea f0d10531 38789180     h_.O..!.1.....x8
    4bed:	c0081181 06229320 06239330 9380e081     .... .".0.#.....
    4bfd:	c00a3878 06229180 93802b82 91800622     x8...."..+.."...
    4c0d:	2b830623 06239380 c003e080 c001e08b     #..+..#.........
    4c1d:	91dfe082 950891cf f0319700 38bb9380     ..........1....8
    4c2d:	38bc9390 9508e080 9508e08b 05711561     ...8........a.q.
    4c3d:	9700f1a1 9120f191 23223878 3024f181     ...... .x8"#..$0
    4c4d:	9380f181 939038b9 936038ba 93703876     .....8...8`.v8p.
    4c5d:	92103877 01dc0618 91fc91ed 34208122     w8..........". 4
    4c6d:	ec20f439 06189320 06189120 c0056220     9. . ... ... b..
    4c7d:	f4413820 06189120 93206228 92100618      8A. ...(b .....
    4c8d:	c013061e f4793821 06189120 93206228     ....!8y. ...(b .
    4c9d:	e8260618 061e9320 e08bc008 e0839508     ..&. ...........
    4cad:	e0819508 e0829508 92109508 01dc0600     ................
    4cbd:	91fc91ed 31808184 e180f008 06039380     .......1........
    4ccd:	9380e081 9380060b 9380060a 92103864     ............d8..
    4cdd:	92103879 940e387a 118109d8 e084c00b     y8..z8..........
    4ced:	38789380 38799180 387a9190 0a0b940e     ..x8..y8..z8....
    4cfd:	9508e080 9380e082 95083878 f0c99700     ........x8......
    4d0d:	91ed01dc 971191fc 81318120 07371726     ........ .1.&.7.
    4d1d:	e045f090 01909f46 0d309f47 96142411     ..E.F...G.0..$..
    4d2d:	91fc91ed 0fe29715 e0811ff3 e0808380     ................
    4d3d:	e08b9508 e0829508 01fc9508 f1d12b89     .............+..
    4d4d:	81b181a0 919c918d 17869711 f1a00797     ................
    4d5d:	919c9612 81f58004 34902de0 e085f459     .........-.4Y...
    4d6d:	01d09f86 0db09f87 0fae2411 e3841fbf     .........$......
    4d7d:	c00de092 30925890 e085f480 01d09f86     .....X.0........
    4d8d:	0db09f87 0fae2411 e6871fbf 9613e095     .....$..........
    4d9d:	939c938d e0809714 e082c001 9f96e095     ................
    4dad:	9f970190 24110d30 1ff30fe2 60928190     ....0..$.......`
    4dbd:	95088390 9508e08b 9508e082 931f930f     ................
    4dcd:	93df93cf 2b8901fc c12cf409 81b181a0     .......+..,.....
    4ddd:	f4099710 1561c127 f4090571 900dc123     ....'.a.q...#...
    4ded:	2da091bc 81338122 919c918d 07391728     ...-".3.....(.9.
    4dfd:	c11af008 06009210 06189210 81b181a0     ................
    4e0d:	91bc900d 96122da0 3480918c ec80f439     .....-.....49...
    4e1d:	06189380 06189180 c0036280 06189180     .........b......
    4e2d:	93806288 93600618 93703874 e0823875     .b....`.t8p.u8..
    4e3d:	38649380 81538142 38799340 387a9350     ..d8B.S.@.y8P.z8
    4e4d:	81d181c0 38b993c0 38ba93d0 e07301ca     .......8...8..s.
    4e5d:	1f990f88 f7e1957a 81bb81aa 1fb90fa8     ....z...........
    4e6d:	913c9612 96139712 9330912c 9320062a     ..<.....,.0.*. .
    4e7d:	81aa062b 0fa881bb 913c1fb9 912c9611     +.........<...,.
    4e8d:	06269330 06279320 9f64e065 9f650190     0.&. .'.e.d...e.
    4e9d:	24110d30 81b181a0 900d9614 2da091bc     0..$...........-
    4ead:	1fb30fa2 914c9613 061a9340 81b181a0     ......L.@.......
    4ebd:	914d9614 9715915c 0fa201da 96141fb3     ..M.\...........
    4ecd:	9320912c 81a0061b 961281b1 91bc900d     ,. .............
    4edd:	0fa82da0 96161fb9 95a291ac e0b070af     .-...........p..
    4eed:	46b252a2 9320912c 8120061c 81a28131     .R.F,. ... .1...
    4efd:	01ad81b3 0f44e0a3 95aa1f55 01d9f7e1     ......D.U.......
    4f0d:	912d9612 9713913c 0fa201da 96141fb3     ..-.<...........
    4f1d:	312b912c 5f2cf410 e12fc001 06059320     ,.+1..,_../. ...
    4f2d:	81b181a0 900d9612 2da091bc 1fb90fa8     ...........-....
    4f3d:	912c9617 06019320 81b181a0 900d9612     ..,. ...........
    4f4d:	2da091bc 1fb90fa8 912c9615 93207f20     ...-......,. . .
    4f5d:	812a0619 01d9813b 1fb90fa8 918c9615     ..*.;...........
    4f6d:	6180708f 06029380 81118100 81938182     .p.a............
    4f7d:	9f48e045 9f490190 24110d30 961401d8     E.H...I.0..$....
    4f8d:	915c914d 01da9715 1fb30fa2 912d9611     M.\...........-.
    4f9d:	9712913c e0708164 0f4601a9 1b261f57     <...d.p...F.W.&.
    4fad:	e0630b37 1f990f88 f7e1956a 961201d8     7.c.....j.......
    4fbd:	91fc91ed 0fe89713 816a1ff9 01db817b     ..........j.{...
    4fcd:	1fb90fa8 919c9616 8187709f 2e081b89     .........p......
    4fdd:	0f44c002 940a1f55 01b9f7e2 0f66c002     ..D.U.........f.
    4fed:	958a1f77 01cbf7e2 06149340 06159350     w.......@...P...
    4ffd:	06129360 06139390 9380e084 e0830604     `...............
    500d:	060b9380 9380e082 e081060a 06099380     ................
    501d:	06189180 93806083 e8810618 06009380     .....`..........
    502d:	c003e080 c001e08b 91dfe082 911f91cf     ................
    503d:	9508910f 38649180 f4593082 9380e081     ......d8.0Y.....
    504d:	92103864 92100618 92100600 e0800609     d8..............
    505d:	e0839508 92109508 91400600 91500610     ..........@...P.
    506d:	91800611 91903879 019c387a 1f330f22     ....y8..z8..".3.
    507d:	38bb91e0 38bc91f0 1ff30fe2 83518340     ...8...8....@.Q.
    508d:	93809601 93903879 940e387a 118109d8     ....y8..z8......
    509d:	e084c009 38789380 38799180 387a9190     ......x8..y8..z8
    50ad:	0a0b940c 387691e0 387791f0 91209409     ......v8..w8.. .
    50bd:	91300610 91600611 91703879 01cb387a     ..0...`.y8p.z8..
    50cd:	1f990f88 38bb91e0 38bc91f0 1ff90fe8     .......8...8....
    50dd:	83318320 38b991a0 38ba91b0 e05301cb      .1....8...8..S.
    50ed:	1f990f88 f7e1955a 91ed9612 971391fc     ....Z...........
    50fd:	1ff90fe8 709f8196 17988187 1b89f410     .......p........
    510d:	e080c001 9f96e095 9f9701a0 24110d50     ............P..$
    511d:	91ed9614 971591fc 1ff50fe4 9536c002     ..............6.
    512d:	958a9527 8321f7e2 e0828332 38789380     '.....!.2.....x8
    513d:	387491e0 387591f0 94f89409 1c3fcfff     ..t8..u8......?.
    514d:	0103050b 8600b45f 00eb034a 00000000     ...._...J.......
    515d:	55aa0000 2ba06e01 49000038 66000038     ...U.n.+8..I8..f
    516d:	4900000c cd000038 16000004 7c00000c     ...I8..........|
    517d:	ab383938 1e383338 011e0001 02000200     898.838.........
    518d:	14000500 49011405 1e000038 4f385f05     .......I8...._8O
    519d:	00388238 00000800 00040002 00000400     8.8.............
    51ad:	02040002 00308000 564e0001 6172454d     ......0...NVMEra
    51bd:	4e006573 72504d56 0020676f 25552455     se.NVMProg .U$U%
    51cd:	2e2ee555 6c61682f 6372732f 6c61682f     U.../hal/src/hal
    51dd:	2e6f695f 2e2e0063 6c61682f 6372732f     _io.c.../hal/src
    51ed:	6c61682f 6173755f 615f7472 636e7973     /hal_usart_async
    51fd:	2e00632e 61682f2e 74752f6c 2f736c69     .c.../hal/utils/
    520d:	2f637273 6c697475 69725f73 7562676e     src/utils_ringbu
    521d:	72656666 2e00632e 70682f2e 65732f6c     ffer.c.../hpl/se
    522d:	6d6f6372 6c70682f 7265735f 2e6d6f63     rcom/hpl_sercom.
    523d:	ac000063 fc00002b fc00002a fa00002a     c...+...*...*...
    524d:	9e00002a 9e00002b 9400002b fa00002b     *...+...+...+...
    525d:	9e00002a 9400002b 9e00002b fa00002b     *...+...+...+...
    526d:	a400002a a400002b a400002b 3400002b     *...+...+...+..4
    527d:	f800002c                                         ,..

00005280 <_init>:
    5280:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    5282:	46c0      	nop			; (mov r8, r8)
    5284:	bcf8      	pop	{r3, r4, r5, r6, r7}
    5286:	bc08      	pop	{r3}
    5288:	469e      	mov	lr, r3
    528a:	4770      	bx	lr

0000528c <__init_array_start>:
    528c:	000000dd 	.word	0x000000dd

00005290 <_fini>:
    5290:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    5292:	46c0      	nop			; (mov r8, r8)
    5294:	bcf8      	pop	{r3, r4, r5, r6, r7}
    5296:	bc08      	pop	{r3}
    5298:	469e      	mov	lr, r3
    529a:	4770      	bx	lr

0000529c <__fini_array_start>:
    529c:	000000b5 	.word	0x000000b5
