
updi_test_V3.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00005048  00000000  00000000  00010000  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .relocate     00000504  20000000  00005048  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  2 .lpram        00000000  30000000  30000000  00020504  2**0
                  CONTENTS
  3 .bss          000000e8  20000504  0000554c  00020504  2**2
                  ALLOC
  4 .stack        00002004  200005ec  00005634  00020504  2**0
                  ALLOC
  5 .ARM.attributes 00000028  00000000  00000000  00020504  2**0
                  CONTENTS, READONLY
  6 .comment      00000059  00000000  00000000  0002052c  2**0
                  CONTENTS, READONLY
  7 .debug_info   0001d835  00000000  00000000  00020585  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 000039ef  00000000  00000000  0003ddba  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_loc    0000d304  00000000  00000000  000417a9  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_aranges 00000c58  00000000  00000000  0004eaad  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00001748  00000000  00000000  0004f705  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_macro  0001e28f  00000000  00000000  00050e4d  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_line   000123a8  00000000  00000000  0006f0dc  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_str    0009469d  00000000  00000000  00081484  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_frame  00002360  00000000  00000000  00115b24  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <exception_table>:
       0:	f0 25 00 20 bd 18 00 00 b9 18 00 00 b9 18 00 00     .%. ............
	...
      2c:	b9 18 00 00 00 00 00 00 00 00 00 00 b9 18 00 00     ................
      3c:	b9 18 00 00 b9 18 00 00 b9 18 00 00 b9 18 00 00     ................
      4c:	b9 18 00 00 b9 18 00 00 b9 18 00 00 b9 18 00 00     ................
      5c:	b9 18 00 00 b9 18 00 00 b9 18 00 00 b9 18 00 00     ................
      6c:	b9 18 00 00 79 24 00 00 b9 18 00 00 b9 18 00 00     ....y$..........
      7c:	b9 18 00 00 b9 18 00 00 b9 18 00 00 b9 18 00 00     ................
      8c:	b9 18 00 00 b9 18 00 00 b9 18 00 00 b9 18 00 00     ................
      9c:	b9 18 00 00 b9 18 00 00 b9 18 00 00 b9 18 00 00     ................
      ac:	b9 18 00 00 00 00 00 00                             ........

000000b4 <__do_global_dtors_aux>:
      b4:	b510      	push	{r4, lr}
      b6:	4c06      	ldr	r4, [pc, #24]	; (d0 <__do_global_dtors_aux+0x1c>)
      b8:	7823      	ldrb	r3, [r4, #0]
      ba:	2b00      	cmp	r3, #0
      bc:	d107      	bne.n	ce <__do_global_dtors_aux+0x1a>
      be:	4b05      	ldr	r3, [pc, #20]	; (d4 <__do_global_dtors_aux+0x20>)
      c0:	2b00      	cmp	r3, #0
      c2:	d002      	beq.n	ca <__do_global_dtors_aux+0x16>
      c4:	4804      	ldr	r0, [pc, #16]	; (d8 <__do_global_dtors_aux+0x24>)
      c6:	e000      	b.n	ca <__do_global_dtors_aux+0x16>
      c8:	bf00      	nop
      ca:	2301      	movs	r3, #1
      cc:	7023      	strb	r3, [r4, #0]
      ce:	bd10      	pop	{r4, pc}
      d0:	20000504 	.word	0x20000504
      d4:	00000000 	.word	0x00000000
      d8:	00005048 	.word	0x00005048

000000dc <frame_dummy>:
      dc:	4b08      	ldr	r3, [pc, #32]	; (100 <frame_dummy+0x24>)
      de:	b510      	push	{r4, lr}
      e0:	2b00      	cmp	r3, #0
      e2:	d003      	beq.n	ec <frame_dummy+0x10>
      e4:	4907      	ldr	r1, [pc, #28]	; (104 <frame_dummy+0x28>)
      e6:	4808      	ldr	r0, [pc, #32]	; (108 <frame_dummy+0x2c>)
      e8:	e000      	b.n	ec <frame_dummy+0x10>
      ea:	bf00      	nop
      ec:	4807      	ldr	r0, [pc, #28]	; (10c <frame_dummy+0x30>)
      ee:	6803      	ldr	r3, [r0, #0]
      f0:	2b00      	cmp	r3, #0
      f2:	d100      	bne.n	f6 <frame_dummy+0x1a>
      f4:	bd10      	pop	{r4, pc}
      f6:	4b06      	ldr	r3, [pc, #24]	; (110 <frame_dummy+0x34>)
      f8:	2b00      	cmp	r3, #0
      fa:	d0fb      	beq.n	f4 <frame_dummy+0x18>
      fc:	4798      	blx	r3
      fe:	e7f9      	b.n	f4 <frame_dummy+0x18>
     100:	00000000 	.word	0x00000000
     104:	20000508 	.word	0x20000508
     108:	00005048 	.word	0x00005048
     10c:	00005048 	.word	0x00005048
     110:	00000000 	.word	0x00000000

00000114 <atmel_start_init>:

/**
 * Initializes MCU, drivers and middleware in the project
 **/
void atmel_start_init(void)
{
     114:	b510      	push	{r4, lr}
	system_init();
     116:	4b01      	ldr	r3, [pc, #4]	; (11c <atmel_start_init+0x8>)
     118:	4798      	blx	r3
}
     11a:	bd10      	pop	{r4, pc}
     11c:	000019c1 	.word	0x000019c1

00000120 <set_default_segment_id>:

    return 0;
}

int set_default_segment_id(hex_data_t *dhex, ihex_segment_t segmentid)
{
     120:	22a0      	movs	r2, #160	; 0xa0
     122:	00d2      	lsls	r2, r2, #3
     124:	0003      	movs	r3, r0
     126:	1882      	adds	r2, r0, r2
	segment_buffer_t *seg;
	int result = 0;
     128:	2000      	movs	r0, #0
{
     12a:	b510      	push	{r4, lr}

	for (int i = 0; i < MAX_SEGMENT_COUNT_IN_RECORDS; i++) {
		seg = &dhex->segment[i];
		if (!seg->sid && seg->addr_to && seg->data) {
     12c:	881c      	ldrh	r4, [r3, #0]
     12e:	2c00      	cmp	r4, #0
     130:	d107      	bne.n	142 <set_default_segment_id+0x22>
     132:	689c      	ldr	r4, [r3, #8]
     134:	2c00      	cmp	r4, #0
     136:	d004      	beq.n	142 <set_default_segment_id+0x22>
     138:	68dc      	ldr	r4, [r3, #12]
     13a:	2c00      	cmp	r4, #0
     13c:	d001      	beq.n	142 <set_default_segment_id+0x22>
			seg->sid = segmentid;
     13e:	8019      	strh	r1, [r3, #0]
			result++;
     140:	3001      	adds	r0, #1
     142:	3314      	adds	r3, #20
	for (int i = 0; i < MAX_SEGMENT_COUNT_IN_RECORDS; i++) {
     144:	4293      	cmp	r3, r2
     146:	d1f1      	bne.n	12c <set_default_segment_id+0xc>
		}
	}

	return result;
}
     148:	bd10      	pop	{r4, pc}
	...

0000014c <updi_program>:
    @nvm_ptr: updi_nvm_init() device handle
    @file: hex/ihex file path
    @returns 0 - success, other value failed code
*/
int updi_program(void *nvm_ptr)
{
     14c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
    segment_buffer_t *seg;
    ihex_segment_t sid;
    nvm_info_t iflash;
    int i, result = 0;

    result = nvm_get_block_info(nvm_ptr, NVM_FLASH, &iflash);
     14e:	4b17      	ldr	r3, [pc, #92]	; (1ac <updi_program+0x60>)
     150:	466a      	mov	r2, sp
     152:	2100      	movs	r1, #0
{
     154:	0006      	movs	r6, r0
    result = nvm_get_block_info(nvm_ptr, NVM_FLASH, &iflash);
     156:	4798      	blx	r3
    if (result) {
     158:	2800      	cmp	r0, #0
     15a:	d122      	bne.n	1a2 <updi_program+0x56>
        //DBG_INFO(UPDI_DEBUG, "nvm_get_block_info failed %d", result);
        return -2;
    }
        
    sid = ADDR_TO_SEGMENTID(iflash.nvm_start);
     15c:	466b      	mov	r3, sp
    set_default_segment_id(dhex, sid);
     15e:	4c14      	ldr	r4, [pc, #80]	; (1b0 <updi_program+0x64>)
    sid = ADDR_TO_SEGMENTID(iflash.nvm_start);
     160:	8819      	ldrh	r1, [r3, #0]
    set_default_segment_id(dhex, sid);
     162:	0020      	movs	r0, r4
     164:	0909      	lsrs	r1, r1, #4
     166:	4b13      	ldr	r3, [pc, #76]	; (1b4 <updi_program+0x68>)
     168:	4798      	blx	r3

    result = nvm_chip_erase(nvm_ptr);
     16a:	0030      	movs	r0, r6
     16c:	4b12      	ldr	r3, [pc, #72]	; (1b8 <updi_program+0x6c>)
     16e:	4798      	blx	r3
     170:	1e05      	subs	r5, r0, #0
    if (result) {
     172:	d119      	bne.n	1a8 <updi_program+0x5c>
        //DBG_INFO(UPDI_DEBUG, "nvm_chip_erase failed %d", result);
        result = -4;
        goto out;
    }

    for (i = 0; i < ARRAY_SIZE(dhex->segment); i++) {
     174:	4b11      	ldr	r3, [pc, #68]	; (1bc <updi_program+0x70>)
     176:	429c      	cmp	r4, r3
     178:	d101      	bne.n	17e <updi_program+0x32>

    //DBG_INFO(UPDI_DEBUG, "Program finished");

out:
    return result;
}
     17a:	0028      	movs	r0, r5
     17c:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
        if (seg->data) {
     17e:	68e2      	ldr	r2, [r4, #12]
     180:	2a00      	cmp	r2, #0
     182:	d101      	bne.n	188 <updi_program+0x3c>
     184:	3414      	adds	r4, #20
     186:	e7f5      	b.n	174 <updi_program+0x28>
            result = nvm_write_flash/*nvm_write_auto*/(nvm_ptr, SEGMENTID_TO_ADDR(seg->sid) + seg->addr_from, (u8 *)seg->data, seg->len);
     188:	8821      	ldrh	r1, [r4, #0]
     18a:	6863      	ldr	r3, [r4, #4]
     18c:	0109      	lsls	r1, r1, #4
     18e:	1859      	adds	r1, r3, r1
     190:	b289      	uxth	r1, r1
     192:	6923      	ldr	r3, [r4, #16]
     194:	0030      	movs	r0, r6
     196:	4f0a      	ldr	r7, [pc, #40]	; (1c0 <updi_program+0x74>)
     198:	47b8      	blx	r7
            if (result) {
     19a:	2800      	cmp	r0, #0
     19c:	d0f2      	beq.n	184 <updi_program+0x38>
                result = -5;
     19e:	2505      	movs	r5, #5
     1a0:	e000      	b.n	1a4 <updi_program+0x58>
        return -2;
     1a2:	2502      	movs	r5, #2
                result = -5;
     1a4:	426d      	negs	r5, r5
     1a6:	e7e8      	b.n	17a <updi_program+0x2e>
        result = -4;
     1a8:	2504      	movs	r5, #4
     1aa:	e7fb      	b.n	1a4 <updi_program+0x58>
     1ac:	00001445 	.word	0x00001445
     1b0:	20000000 	.word	0x20000000
     1b4:	00000121 	.word	0x00000121
     1b8:	00001411 	.word	0x00001411
     1bc:	20000500 	.word	0x20000500
     1c0:	0000146d 	.word	0x0000146d

000001c4 <cupdi_operate>:
{
     1c4:	b570      	push	{r4, r5, r6, lr}
    dev = get_chip_info(dev_name);
     1c6:	4819      	ldr	r0, [pc, #100]	; (22c <cupdi_operate+0x68>)
     1c8:	4b19      	ldr	r3, [pc, #100]	; (230 <cupdi_operate+0x6c>)
     1ca:	4798      	blx	r3
     1cc:	1e02      	subs	r2, r0, #0
    if (!dev) {
     1ce:	d029      	beq.n	224 <cupdi_operate+0x60>
    nvm_ptr = updi_nvm_init(comport, baudrate, (void *)dev);
     1d0:	21e1      	movs	r1, #225	; 0xe1
     1d2:	2000      	movs	r0, #0
     1d4:	0249      	lsls	r1, r1, #9
     1d6:	4b17      	ldr	r3, [pc, #92]	; (234 <cupdi_operate+0x70>)
     1d8:	4798      	blx	r3
     1da:	1e05      	subs	r5, r0, #0
    if (!nvm_ptr) {
     1dc:	d01e      	beq.n	21c <cupdi_operate+0x58>
    result = nvm_get_device_info(nvm_ptr);
     1de:	4b16      	ldr	r3, [pc, #88]	; (238 <cupdi_operate+0x74>)
     1e0:	4798      	blx	r3
        result = -4;
     1e2:	2404      	movs	r4, #4
    if (result) {
     1e4:	2800      	cmp	r0, #0
     1e6:	d117      	bne.n	218 <cupdi_operate+0x54>
    result = nvm_enter_progmode(nvm_ptr);
     1e8:	0028      	movs	r0, r5
     1ea:	4b14      	ldr	r3, [pc, #80]	; (23c <cupdi_operate+0x78>)
     1ec:	4798      	blx	r3
    if (result) {
     1ee:	2800      	cmp	r0, #0
     1f0:	d10c      	bne.n	20c <cupdi_operate+0x48>
    result = updi_program(nvm_ptr);//file);
     1f2:	0028      	movs	r0, r5
     1f4:	4b12      	ldr	r3, [pc, #72]	; (240 <cupdi_operate+0x7c>)
     1f6:	4798      	blx	r3
     1f8:	1e04      	subs	r4, r0, #0
    if (result) {
     1fa:	d111      	bne.n	220 <cupdi_operate+0x5c>
    nvm_leave_progmode(nvm_ptr);
     1fc:	4b11      	ldr	r3, [pc, #68]	; (244 <cupdi_operate+0x80>)
     1fe:	0028      	movs	r0, r5
     200:	4798      	blx	r3
    updi_nvm_deinit(nvm_ptr);
     202:	0028      	movs	r0, r5
     204:	4b10      	ldr	r3, [pc, #64]	; (248 <cupdi_operate+0x84>)
     206:	4798      	blx	r3
}
     208:	0020      	movs	r0, r4
     20a:	bd70      	pop	{r4, r5, r6, pc}
        result = nvm_unlock_device(nvm_ptr);
     20c:	0028      	movs	r0, r5
     20e:	4b0f      	ldr	r3, [pc, #60]	; (24c <cupdi_operate+0x88>)
     210:	4798      	blx	r3
            result = -5;
     212:	2405      	movs	r4, #5
        if (result) {
     214:	2800      	cmp	r0, #0
     216:	d0ec      	beq.n	1f2 <cupdi_operate+0x2e>
        result = -9;
     218:	4264      	negs	r4, r4
     21a:	e7ef      	b.n	1fc <cupdi_operate+0x38>
        result = -3;
     21c:	2403      	movs	r4, #3
     21e:	e7fb      	b.n	218 <cupdi_operate+0x54>
        result = -9;
     220:	2409      	movs	r4, #9
     222:	e7f9      	b.n	218 <cupdi_operate+0x54>
        return -2;
     224:	2402      	movs	r4, #2
     226:	4264      	negs	r4, r4
     228:	e7ee      	b.n	208 <cupdi_operate+0x44>
     22a:	46c0      	nop			; (mov r8, r8)
     22c:	000030d6 	.word	0x000030d6
     230:	00000251 	.word	0x00000251
     234:	00001301 	.word	0x00001301
     238:	0000134d 	.word	0x0000134d
     23c:	00001371 	.word	0x00001371
     240:	0000014d 	.word	0x0000014d
     244:	000013a1 	.word	0x000013a1
     248:	0000132d 	.word	0x0000132d
     24c:	000013d9 	.word	0x000013d9

00000250 <get_chip_info>:
};

inline const device_info_t * get_chip_info(const char *dev_name) 
{
    return (&device_1617);
}
     250:	4800      	ldr	r0, [pc, #0]	; (254 <get_chip_info+0x4>)
     252:	4770      	bx	lr
     254:	000030e0 	.word	0x000030e0

00000258 <dev_get_nvm_info>:
    @type: NVM type
    @info: chip flash information
    @return 0 successful, other value failed
*/
int dev_get_nvm_info(const void *dev_ptr, NVM_TYPE_T type, nvm_info_t * info)
{
     258:	b510      	push	{r4, lr}
     25a:	0013      	movs	r3, r2
     25c:	0004      	movs	r4, r0
    get NVM information
    */
    const device_info_t *dev = (const device_info_t *)dev_ptr;
    const nvm_info_t *iblock;

    switch (type) {
     25e:	2903      	cmp	r1, #3
     260:	d812      	bhi.n	288 <dev_get_nvm_info+0x30>
     262:	0008      	movs	r0, r1
     264:	6861      	ldr	r1, [r4, #4]
     266:	f002 f947 	bl	24f8 <__gnu_thumb1_case_uqi>
     26a:	0902      	.short	0x0902
     26c:	0d0b      	.short	0x0d0b
    case NVM_FLASH:
        iblock = &dev->mmap->flash;
     26e:	3104      	adds	r1, #4
        break;
    default:
        return -2;
    }

    memcpy(info, iblock, sizeof(*info));
     270:	0018      	movs	r0, r3
     272:	2206      	movs	r2, #6
     274:	4b06      	ldr	r3, [pc, #24]	; (290 <dev_get_nvm_info+0x38>)
     276:	4798      	blx	r3

    return 0;
     278:	2000      	movs	r0, #0
}
     27a:	bd10      	pop	{r4, pc}
        iblock = &dev->mmap->eeprom;
     27c:	311c      	adds	r1, #28
        break;
     27e:	e7f7      	b.n	270 <dev_get_nvm_info+0x18>
        iblock = &dev->mmap->userrow;
     280:	3116      	adds	r1, #22
        break;
     282:	e7f5      	b.n	270 <dev_get_nvm_info+0x18>
        iblock = &dev->mmap->fuse;
     284:	3110      	adds	r1, #16
        break;
     286:	e7f3      	b.n	270 <dev_get_nvm_info+0x18>
        return -2;
     288:	2002      	movs	r0, #2
     28a:	4240      	negs	r0, r0
     28c:	e7f5      	b.n	27a <dev_get_nvm_info+0x22>
     28e:	46c0      	nop			; (mov r8, r8)
     290:	000030b5 	.word	0x000030b5

00000294 <msleep>:

#include "hal_delay.h"

//delay millisecond here
void msleep(int ms)
{
     294:	b510      	push	{r4, lr}
    /*usleep(ms * 1000);*/
	delay_ms(ms);
     296:	b280      	uxth	r0, r0
     298:	4b01      	ldr	r3, [pc, #4]	; (2a0 <msleep+0xc>)
     29a:	4798      	blx	r3
}
     29c:	bd10      	pop	{r4, pc}
     29e:	46c0      	nop			; (mov r8, r8)
     2a0:	000019f1 	.word	0x000019f1

000002a4 <err_cb_USART_0>:
	/* Transfer completed */
}
static void err_cb_USART_0(const struct usart_async_descriptor *const io_descr)
{
	/* Transfer completed */
}
     2a4:	4770      	bx	lr

000002a6 <rx_cb_USART_0>:
     2a6:	4770      	bx	lr

000002a8 <tx_cb_USART_0>:
     2a8:	4770      	bx	lr
	...

000002ac <SetPortState>:
* @param BYTE byteSize The data size
* @param BYTE stopBits The number of stop bits ONESTOPBIT|ONE5STOPBITS|TWOSTOPBITS
* @param BYTE parity The partity checksum  NOPARITY|ODDPARITY|EVENPARITY
* @returns 0 - success, other value failed code
*/
int SetPortState(void *ptr_ser, const SER_PORT_STATE_T *st) {
     2ac:	b570      	push	{r4, r5, r6, lr}

    //if (!VALID_SER(ser))
    //    return ERROR_PTR;
			
	// Set baund rate
	usart_async_set_baud_rate(&USART_0, USART_BAUD_RATE(st->baudRate));
     2ae:	6808      	ldr	r0, [r1, #0]
     2b0:	4b21      	ldr	r3, [pc, #132]	; (338 <SetPortState+0x8c>)
int SetPortState(void *ptr_ser, const SER_PORT_STATE_T *st) {
     2b2:	000d      	movs	r5, r1
	usart_async_set_baud_rate(&USART_0, USART_BAUD_RATE(st->baudRate));
     2b4:	4798      	blx	r3
     2b6:	4b21      	ldr	r3, [pc, #132]	; (33c <SetPortState+0x90>)
     2b8:	4921      	ldr	r1, [pc, #132]	; (340 <SetPortState+0x94>)
     2ba:	4798      	blx	r3
     2bc:	1c01      	adds	r1, r0, #0
     2be:	208f      	movs	r0, #143	; 0x8f
     2c0:	4b20      	ldr	r3, [pc, #128]	; (344 <SetPortState+0x98>)
     2c2:	05c0      	lsls	r0, r0, #23
     2c4:	4798      	blx	r3
     2c6:	4b20      	ldr	r3, [pc, #128]	; (348 <SetPortState+0x9c>)
     2c8:	4798      	blx	r3
     2ca:	4c20      	ldr	r4, [pc, #128]	; (34c <SetPortState+0xa0>)
     2cc:	0001      	movs	r1, r0
     2ce:	4b20      	ldr	r3, [pc, #128]	; (350 <SetPortState+0xa4>)
     2d0:	0020      	movs	r0, r4
     2d2:	4798      	blx	r3

    /* Set databits */
	enum usart_character_size charSize;
    switch (st->byteSize) {
     2d4:	7928      	ldrb	r0, [r5, #4]
     2d6:	3805      	subs	r0, #5
     2d8:	2803      	cmp	r0, #3
     2da:	d825      	bhi.n	328 <SetPortState+0x7c>
     2dc:	f002 f90c 	bl	24f8 <__gnu_thumb1_case_uqi>
     2e0:	1e1c0220 	.word	0x1e1c0220
        case 5:
            charSize = USART_CHARACTER_SIZE_5BITS;
            break;
        case 6:
            charSize = USART_CHARACTER_SIZE_6BITS;
     2e4:	2106      	movs	r1, #6
            break;
        default:
            charSize = USART_CHARACTER_SIZE_9BITS;
            return -6;
    }
	usart_async_set_character_size(&USART_0, charSize);
     2e6:	0020      	movs	r0, r4
     2e8:	4b1a      	ldr	r3, [pc, #104]	; (354 <SetPortState+0xa8>)
     2ea:	4798      	blx	r3

    /* Set stopbits */
	enum usart_stop_bits stopBits;
    switch (st->stopBits) {
     2ec:	7969      	ldrb	r1, [r5, #5]
     2ee:	2900      	cmp	r1, #0
     2f0:	d002      	beq.n	2f8 <SetPortState+0x4c>
     2f2:	2902      	cmp	r1, #2
     2f4:	d11b      	bne.n	32e <SetPortState+0x82>
        case ONESTOPBIT:
            stopBits = USART_STOP_BITS_ONE;
            break;
        case TWOSTOPBITS:
            stopBits = USART_STOP_BITS_TWO;
     2f6:	3901      	subs	r1, #1
            break;
        default:
            stopBits = USART_STOP_BITS_ONE;
            return -7;
    }
	usart_async_set_stopbits(&USART_0, stopBits);
     2f8:	0020      	movs	r0, r4
     2fa:	4b17      	ldr	r3, [pc, #92]	; (358 <SetPortState+0xac>)
     2fc:	4798      	blx	r3

    /* Set parity */
	enum usart_parity parity;
    switch (st->parity) {
     2fe:	79a9      	ldrb	r1, [r5, #6]
     300:	2901      	cmp	r1, #1
     302:	d004      	beq.n	30e <SetPortState+0x62>
     304:	2900      	cmp	r1, #0
     306:	d00d      	beq.n	324 <SetPortState+0x78>
     308:	2902      	cmp	r1, #2
     30a:	d112      	bne.n	332 <SetPortState+0x86>
            break;
        case ODDPARITY:
            parity = USART_PARITY_ODD;
            break;
        case EVENPARITY:
            parity = USART_PARITY_EVEN;
     30c:	2100      	movs	r1, #0
            break;
        default:
            parity = USART_PARITY_NONE;
            return -8;
    }
	usart_async_set_parity(&USART_0, parity);
     30e:	0020      	movs	r0, r4
     310:	4b12      	ldr	r3, [pc, #72]	; (35c <SetPortState+0xb0>)
     312:	4798      	blx	r3

    return 0;
     314:	2000      	movs	r0, #0
}
     316:	bd70      	pop	{r4, r5, r6, pc}
            charSize = USART_CHARACTER_SIZE_7BITS;
     318:	2107      	movs	r1, #7
            break;
     31a:	e7e4      	b.n	2e6 <SetPortState+0x3a>
            charSize = USART_CHARACTER_SIZE_8BITS;
     31c:	2100      	movs	r1, #0
            break;
     31e:	e7e2      	b.n	2e6 <SetPortState+0x3a>
            charSize = USART_CHARACTER_SIZE_5BITS;
     320:	2105      	movs	r1, #5
     322:	e7e0      	b.n	2e6 <SetPortState+0x3a>
            parity = USART_PARITY_NONE;
     324:	2102      	movs	r1, #2
     326:	e7f2      	b.n	30e <SetPortState+0x62>
            return -6;
     328:	2006      	movs	r0, #6
            return -8;
     32a:	4240      	negs	r0, r0
     32c:	e7f3      	b.n	316 <SetPortState+0x6a>
            return -7;
     32e:	2007      	movs	r0, #7
     330:	e7fb      	b.n	32a <SetPortState+0x7e>
            return -8;
     332:	2008      	movs	r0, #8
     334:	e7f9      	b.n	32a <SetPortState+0x7e>
     336:	46c0      	nop			; (mov r8, r8)
     338:	00002de1 	.word	0x00002de1
     33c:	00002829 	.word	0x00002829
     340:	3d8637bd 	.word	0x3d8637bd
     344:	00002a69 	.word	0x00002a69
     348:	000027f9 	.word	0x000027f9
     34c:	2000059c 	.word	0x2000059c
     350:	00001d39 	.word	0x00001d39
     354:	00001dc9 	.word	0x00001dc9
     358:	00001d99 	.word	0x00001d99
     35c:	00001d69 	.word	0x00001d69

00000360 <OpenPort>:
HANDLE OpenPort(const void *port, const SER_PORT_STATE_T *st) {
     360:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
     362:	000e      	movs	r6, r1
	usart_async_register_callback(&USART_0, USART_ASYNC_TXC_CB, tx_cb_USART_0);
     364:	4c12      	ldr	r4, [pc, #72]	; (3b0 <OpenPort+0x50>)
     366:	4d13      	ldr	r5, [pc, #76]	; (3b4 <OpenPort+0x54>)
     368:	4a13      	ldr	r2, [pc, #76]	; (3b8 <OpenPort+0x58>)
     36a:	2101      	movs	r1, #1
     36c:	0020      	movs	r0, r4
     36e:	47a8      	blx	r5
	usart_async_register_callback(&USART_0, USART_ASYNC_RXC_CB, rx_cb_USART_0);
     370:	4a12      	ldr	r2, [pc, #72]	; (3bc <OpenPort+0x5c>)
     372:	2100      	movs	r1, #0
     374:	0020      	movs	r0, r4
     376:	47a8      	blx	r5
	usart_async_register_callback(&USART_0, USART_ASYNC_ERROR_CB, err_cb_USART_0);
     378:	4a11      	ldr	r2, [pc, #68]	; (3c0 <OpenPort+0x60>)
     37a:	2102      	movs	r1, #2
     37c:	0020      	movs	r0, r4
     37e:	47a8      	blx	r5
	usart_async_get_io_descriptor(&USART_0, &iodes);
     380:	4f10      	ldr	r7, [pc, #64]	; (3c4 <OpenPort+0x64>)
     382:	4b11      	ldr	r3, [pc, #68]	; (3c8 <OpenPort+0x68>)
     384:	0039      	movs	r1, r7
     386:	0020      	movs	r0, r4
     388:	4798      	blx	r3
	usart_async_enable(&USART_0);
     38a:	4b10      	ldr	r3, [pc, #64]	; (3cc <OpenPort+0x6c>)
     38c:	0020      	movs	r0, r4
     38e:	4798      	blx	r3
    ser->mgwd = UPD_SERCOM_MAGIC_WORD;
     390:	4d0f      	ldr	r5, [pc, #60]	; (3d0 <OpenPort+0x70>)
     392:	4b10      	ldr	r3, [pc, #64]	; (3d4 <OpenPort+0x74>)
    if (SetPortState(ser, st) != 0) {
     394:	0031      	movs	r1, r6
    ser->mgwd = UPD_SERCOM_MAGIC_WORD;
     396:	602b      	str	r3, [r5, #0]
    ser->io = iodes;
     398:	683b      	ldr	r3, [r7, #0]
    if (SetPortState(ser, st) != 0) {
     39a:	0028      	movs	r0, r5
    ser->io = iodes;
     39c:	606b      	str	r3, [r5, #4]
    if (SetPortState(ser, st) != 0) {
     39e:	4b0e      	ldr	r3, [pc, #56]	; (3d8 <OpenPort+0x78>)
     3a0:	4798      	blx	r3
     3a2:	2800      	cmp	r0, #0
     3a4:	d002      	beq.n	3ac <OpenPort+0x4c>
    upd_sercom_t *ser = (upd_sercom_t *)ptr_ser;

    if (!ser)
        return;

    usart_async_disable(&USART_0);
     3a6:	0020      	movs	r0, r4
     3a8:	4b0c      	ldr	r3, [pc, #48]	; (3dc <OpenPort+0x7c>)
     3aa:	4798      	blx	r3
}
     3ac:	0028      	movs	r0, r5
     3ae:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
     3b0:	2000059c 	.word	0x2000059c
     3b4:	00001ccd 	.word	0x00001ccd
     3b8:	000002a9 	.word	0x000002a9
     3bc:	000002a7 	.word	0x000002a7
     3c0:	000002a5 	.word	0x000002a5
     3c4:	20000548 	.word	0x20000548
     3c8:	00001ca5 	.word	0x00001ca5
     3cc:	00001c4d 	.word	0x00001c4d
     3d0:	2000054c 	.word	0x2000054c
     3d4:	0000a5a5 	.word	0x0000a5a5
     3d8:	000002ad 	.word	0x000002ad
     3dc:	00001c79 	.word	0x00001c79

000003e0 <FlushPort>:
{
     3e0:	b510      	push	{r4, lr}
    if (!VALID_SER(ser))
     3e2:	2800      	cmp	r0, #0
     3e4:	d008      	beq.n	3f8 <FlushPort+0x18>
     3e6:	4b06      	ldr	r3, [pc, #24]	; (400 <FlushPort+0x20>)
     3e8:	6802      	ldr	r2, [r0, #0]
     3ea:	429a      	cmp	r2, r3
     3ec:	d104      	bne.n	3f8 <FlushPort+0x18>
    usart_async_flush_rx_buffer(&USART_0);
     3ee:	4805      	ldr	r0, [pc, #20]	; (404 <FlushPort+0x24>)
     3f0:	4b05      	ldr	r3, [pc, #20]	; (408 <FlushPort+0x28>)
     3f2:	4798      	blx	r3
    return 0;
     3f4:	2000      	movs	r0, #0
}
     3f6:	bd10      	pop	{r4, pc}
        return ERROR_PTR;
     3f8:	2001      	movs	r0, #1
     3fa:	4240      	negs	r0, r0
     3fc:	e7fb      	b.n	3f6 <FlushPort+0x16>
     3fe:	46c0      	nop			; (mov r8, r8)
     400:	0000a5a5 	.word	0x0000a5a5
     404:	2000059c 	.word	0x2000059c
     408:	00001df9 	.word	0x00001df9

0000040c <SendData>:
int SendData(void *ptr_ser, const /*LPVOID*/u8 *tx, DWORD len) {
     40c:	b510      	push	{r4, lr}
    if (!VALID_SER(ser))
     40e:	2800      	cmp	r0, #0
     410:	d009      	beq.n	426 <SendData+0x1a>
     412:	4b06      	ldr	r3, [pc, #24]	; (42c <SendData+0x20>)
     414:	6804      	ldr	r4, [r0, #0]
     416:	429c      	cmp	r4, r3
     418:	d105      	bne.n	426 <SendData+0x1a>
	written = io_write(ser->io, tx, len);
     41a:	b292      	uxth	r2, r2
     41c:	6840      	ldr	r0, [r0, #4]
     41e:	4b04      	ldr	r3, [pc, #16]	; (430 <SendData+0x24>)
     420:	4798      	blx	r3
    return 0;
     422:	2000      	movs	r0, #0
}
     424:	bd10      	pop	{r4, pc}
        return ERROR_PTR;
     426:	2001      	movs	r0, #1
     428:	4240      	negs	r0, r0
     42a:	e7fb      	b.n	424 <SendData+0x18>
     42c:	0000a5a5 	.word	0x0000a5a5
     430:	00001a11 	.word	0x00001a11

00000434 <ReadData>:
int ReadData(void *ptr_ser, LPVOID rx, DWORD len) {
     434:	b510      	push	{r4, lr}
    reading = io_read(ser->io, rx, len);
     436:	b292      	uxth	r2, r2
     438:	6840      	ldr	r0, [r0, #4]
     43a:	4b01      	ldr	r3, [pc, #4]	; (440 <ReadData+0xc>)
     43c:	4798      	blx	r3
}
     43e:	bd10      	pop	{r4, pc}
     440:	00001a41 	.word	0x00001a41

00000444 <ClosePort>:
void ClosePort(void *ptr_ser) {
     444:	b510      	push	{r4, lr}
    if (!ser)
     446:	2800      	cmp	r0, #0
     448:	d002      	beq.n	450 <ClosePort+0xc>
    usart_async_disable(&USART_0);
     44a:	4802      	ldr	r0, [pc, #8]	; (454 <ClosePort+0x10>)
     44c:	4b02      	ldr	r3, [pc, #8]	; (458 <ClosePort+0x14>)
     44e:	4798      	blx	r3
}
     450:	bd10      	pop	{r4, pc}
     452:	46c0      	nop			; (mov r8, r8)
     454:	2000059c 	.word	0x2000059c
     458:	00001c79 	.word	0x00001c79

0000045c <updi_application_init>:
    @dev: point chip dev object
    @return APP ptr, NULL if failed
*/
upd_application_t application;
void *updi_application_init(const char *port, int baud, void *dev)
{
     45c:	b510      	push	{r4, lr}
    upd_application_t *app = NULL;
    void *link;

    //DBG_INFO(APP_DEBUG, "<APP> init application");

    link = updi_datalink_init(port, baud);
     45e:	4b06      	ldr	r3, [pc, #24]	; (478 <updi_application_init+0x1c>)
{
     460:	0014      	movs	r4, r2
    link = updi_datalink_init(port, baud);
     462:	4798      	blx	r3
    upd_application_t *app = NULL;
     464:	1e03      	subs	r3, r0, #0
    if (link) {
     466:	d004      	beq.n	472 <updi_application_init+0x16>
        app = &application;//(upd_application_t *)malloc(sizeof(*app));
        app->mgwd = UPD_APPLICATION_MAGIC_WORD;
     468:	4b04      	ldr	r3, [pc, #16]	; (47c <updi_application_init+0x20>)
     46a:	4a05      	ldr	r2, [pc, #20]	; (480 <updi_application_init+0x24>)
        app->link = (void *)link;
     46c:	6058      	str	r0, [r3, #4]
        app->mgwd = UPD_APPLICATION_MAGIC_WORD;
     46e:	601a      	str	r2, [r3, #0]
        app->dev = (device_info_t *)dev;
     470:	609c      	str	r4, [r3, #8]
    }

    return app;
}
     472:	0018      	movs	r0, r3
     474:	bd10      	pop	{r4, pc}
     476:	46c0      	nop			; (mov r8, r8)
     478:	00000dbd 	.word	0x00000dbd
     47c:	20000554 	.word	0x20000554
     480:	0000b4b4 	.word	0x0000b4b4

00000484 <updi_application_deinit>:
    APP object destroy
    @app_ptr: APP object pointer, acquired from updi_application_init()
    @no return
*/
void updi_application_deinit(void *app_ptr)
{
     484:	b510      	push	{r4, lr}
    upd_application_t *app = (upd_application_t *)app_ptr;
    if (VALID_APP(app)) {
     486:	2800      	cmp	r0, #0
     488:	d006      	beq.n	498 <updi_application_deinit+0x14>
     48a:	4b04      	ldr	r3, [pc, #16]	; (49c <updi_application_deinit+0x18>)
     48c:	6802      	ldr	r2, [r0, #0]
     48e:	429a      	cmp	r2, r3
     490:	d102      	bne.n	498 <updi_application_deinit+0x14>
        //DBG_INFO(APP_DEBUG, "<APP> deinit application");

        updi_datalink_deinit(LINK(app));
     492:	6840      	ldr	r0, [r0, #4]
     494:	4b02      	ldr	r3, [pc, #8]	; (4a0 <updi_application_deinit+0x1c>)
     496:	4798      	blx	r3
        //free(app);
    }
}
     498:	bd10      	pop	{r4, pc}
     49a:	46c0      	nop			; (mov r8, r8)
     49c:	0000b4b4 	.word	0x0000b4b4
     4a0:	00000bf5 	.word	0x00000bf5

000004a4 <app_in_prog_mode>:
    APP check whether device in Unlocked Mode
    @app_ptr: APP object pointer, acquired from updi_application_init()
    @return true if Unlocked, other value if Locked
*/
bool app_in_prog_mode(void *app_ptr)
{
     4a4:	b537      	push	{r0, r1, r2, r4, r5, lr}
    u8 status;
    int result;
    bool ret = false;

    if (!VALID_APP(app))
        return ret;
     4a6:	1e04      	subs	r4, r0, #0
    if (!VALID_APP(app))
     4a8:	d010      	beq.n	4cc <app_in_prog_mode+0x28>
     4aa:	4b09      	ldr	r3, [pc, #36]	; (4d0 <app_in_prog_mode+0x2c>)
     4ac:	6802      	ldr	r2, [r0, #0]
        return ret;
     4ae:	2400      	movs	r4, #0
    if (!VALID_APP(app))
     4b0:	429a      	cmp	r2, r3
     4b2:	d10b      	bne.n	4cc <app_in_prog_mode+0x28>

    result = _link_ldcs(LINK(app), UPDI_ASI_SYS_STATUS, &status);
     4b4:	466b      	mov	r3, sp
     4b6:	1ddd      	adds	r5, r3, #7
     4b8:	002a      	movs	r2, r5
     4ba:	210b      	movs	r1, #11
     4bc:	6840      	ldr	r0, [r0, #4]
     4be:	4b05      	ldr	r3, [pc, #20]	; (4d4 <app_in_prog_mode+0x30>)
     4c0:	4798      	blx	r3
    if (!result && status & (1 << UPDI_ASI_SYS_STATUS_NVMPROG))
     4c2:	42a0      	cmp	r0, r4
     4c4:	d102      	bne.n	4cc <app_in_prog_mode+0x28>
     4c6:	782c      	ldrb	r4, [r5, #0]
     4c8:	0724      	lsls	r4, r4, #28
     4ca:	0fe4      	lsrs	r4, r4, #31
        ret = true;

    //DBG_INFO(APP_DEBUG, "<APP> In PROG mode: %d", ret);

    return ret;
}
     4cc:	0020      	movs	r0, r4
     4ce:	bd3e      	pop	{r1, r2, r3, r4, r5, pc}
     4d0:	0000b4b4 	.word	0x0000b4b4
     4d4:	00000c15 	.word	0x00000c15

000004d8 <app_wait_unlocked>:
    @app_ptr: APP object pointer, acquired from updi_application_init()
    @timeout: max waiting time
    @return 0 successful, other value if failed
*/
int app_wait_unlocked(void *app_ptr, int timeout)
{
     4d8:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
     4da:	0005      	movs	r5, r0
     4dc:	000c      	movs	r4, r1
    */
    upd_application_t *app = (upd_application_t *)app_ptr;
    u8 status;
    int result;

    if (!VALID_APP(app))
     4de:	2800      	cmp	r0, #0
     4e0:	d01c      	beq.n	51c <app_wait_unlocked+0x44>
     4e2:	4b0f      	ldr	r3, [pc, #60]	; (520 <app_wait_unlocked+0x48>)
     4e4:	6802      	ldr	r2, [r0, #0]
     4e6:	429a      	cmp	r2, r3
     4e8:	d118      	bne.n	51c <app_wait_unlocked+0x44>
        result = _link_ldcs(LINK(app), UPDI_ASI_SYS_STATUS, &status);
        if (result) {
            //DBG_INFO(APP_DEBUG, "_link_ldcs failed %d", result);
        }
        else {
            if (!(status & (1 << UPDI_ASI_SYS_STATUS_LOCKSTATUS)))
     4ea:	2601      	movs	r6, #1
        result = _link_ldcs(LINK(app), UPDI_ASI_SYS_STATUS, &status);
     4ec:	466b      	mov	r3, sp
     4ee:	1ddf      	adds	r7, r3, #7
     4f0:	003a      	movs	r2, r7
     4f2:	210b      	movs	r1, #11
     4f4:	6868      	ldr	r0, [r5, #4]
     4f6:	4b0b      	ldr	r3, [pc, #44]	; (524 <app_wait_unlocked+0x4c>)
     4f8:	4798      	blx	r3
        if (result) {
     4fa:	2800      	cmp	r0, #0
     4fc:	d102      	bne.n	504 <app_wait_unlocked+0x2c>
            if (!(status & (1 << UPDI_ASI_SYS_STATUS_LOCKSTATUS)))
     4fe:	783b      	ldrb	r3, [r7, #0]
     500:	4233      	tst	r3, r6
     502:	d008      	beq.n	516 <app_wait_unlocked+0x3e>
                break;
        }

        msleep(1);
     504:	0030      	movs	r0, r6
     506:	4b08      	ldr	r3, [pc, #32]	; (528 <app_wait_unlocked+0x50>)
    } while (--timeout > 0);
     508:	3c01      	subs	r4, #1
        msleep(1);
     50a:	4798      	blx	r3
    } while (--timeout > 0);
     50c:	2c00      	cmp	r4, #0
     50e:	dced      	bgt.n	4ec <app_wait_unlocked+0x14>

    if (timeout <= 0 || result) {
        //DBG_INFO(APP_DEBUG, "Timeout waiting for device to unlock status %02x result %d", status, result);
        return -2;
     510:	2002      	movs	r0, #2
        return ERROR_PTR;
     512:	4240      	negs	r0, r0
     514:	e001      	b.n	51a <app_wait_unlocked+0x42>
    if (timeout <= 0 || result) {
     516:	2c00      	cmp	r4, #0
     518:	ddfa      	ble.n	510 <app_wait_unlocked+0x38>
    }

    return 0;
}
     51a:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
        return ERROR_PTR;
     51c:	2001      	movs	r0, #1
     51e:	e7f8      	b.n	512 <app_wait_unlocked+0x3a>
     520:	0000b4b4 	.word	0x0000b4b4
     524:	00000c15 	.word	0x00000c15
     528:	00000295 	.word	0x00000295

0000052c <app_disable>:
APP disable updi interface
@app_ptr: APP object pointer, acquired from updi_application_init()
@return 0 successful, other value if failed
*/
int app_disable(void *app_ptr)
{
     52c:	b510      	push	{r4, lr}
    Disable UPDI interface temperarily
    */
    upd_application_t *app = (upd_application_t *)app_ptr;
    int result;

    if (!VALID_APP(app))
     52e:	2800      	cmp	r0, #0
     530:	d00c      	beq.n	54c <app_disable+0x20>
     532:	4b08      	ldr	r3, [pc, #32]	; (554 <app_disable+0x28>)
     534:	6802      	ldr	r2, [r0, #0]
     536:	429a      	cmp	r2, r3
     538:	d108      	bne.n	54c <app_disable+0x20>
        return ERROR_PTR;

    //DBG_INFO(APP_DEBUG, "<APP> Disable");

    result = link_stcs(LINK(app), UPDI_CS_CTRLB, (1 << UPDI_CTRLB_UPDIDIS_BIT) | (1 << UPDI_CTRLB_CCDETDIS_BIT));
     53a:	220c      	movs	r2, #12
     53c:	2103      	movs	r1, #3
     53e:	6840      	ldr	r0, [r0, #4]
     540:	4b05      	ldr	r3, [pc, #20]	; (558 <app_disable+0x2c>)
     542:	4798      	blx	r3
    if (result) {
     544:	2800      	cmp	r0, #0
     546:	d003      	beq.n	550 <app_disable+0x24>
        //DBG_INFO(APP_DEBUG, "link_stcs failed %d", result);
        return -2;
     548:	2002      	movs	r0, #2
     54a:	e000      	b.n	54e <app_disable+0x22>
        return ERROR_PTR;
     54c:	2001      	movs	r0, #1
        return -2;
     54e:	4240      	negs	r0, r0
    }

    return 0;
}
     550:	bd10      	pop	{r4, pc}
     552:	46c0      	nop			; (mov r8, r8)
     554:	0000b4b4 	.word	0x0000b4b4
     558:	00000cb5 	.word	0x00000cb5

0000055c <app_reset>:
    @app_ptr: APP object pointer, acquired from updi_application_init()
    @apply_reset: true - set, false - clear
    @return 0 successful, other value if failed
*/
int app_reset(void *app_ptr, bool apply_reset)
{
     55c:	b510      	push	{r4, lr}
     55e:	000a      	movs	r2, r1
    Applies or releases an UPDI reset condition
    */
    upd_application_t *app = (upd_application_t *)app_ptr;
    int result;

    if (!VALID_APP(app))
     560:	2800      	cmp	r0, #0
     562:	d00e      	beq.n	582 <app_reset+0x26>
     564:	4b08      	ldr	r3, [pc, #32]	; (588 <app_reset+0x2c>)
     566:	6801      	ldr	r1, [r0, #0]
     568:	4299      	cmp	r1, r3
     56a:	d10a      	bne.n	582 <app_reset+0x26>
     56c:	4b07      	ldr	r3, [pc, #28]	; (58c <app_reset+0x30>)
        return ERROR_PTR;

    //DBG_INFO(APP_DEBUG, "<APP> Reset %d", apply_reset);

    if (apply_reset) {
     56e:	2a00      	cmp	r2, #0
     570:	d000      	beq.n	574 <app_reset+0x18>
        //DBG_INFO(APP_DEBUG, "Apply reset");
        result = link_stcs(LINK(app), UPDI_ASI_RESET_REQ, UPDI_RESET_REQ_VALUE);
     572:	2259      	movs	r2, #89	; 0x59
    }
    else {
        //DBG_INFO(APP_DEBUG, "Release reset");
        result = link_stcs(LINK(app), UPDI_ASI_RESET_REQ, 0);
     574:	2108      	movs	r1, #8
     576:	6840      	ldr	r0, [r0, #4]
     578:	4798      	blx	r3
    }

    if (result) {
     57a:	2800      	cmp	r0, #0
     57c:	d003      	beq.n	586 <app_reset+0x2a>
        //DBG_INFO(APP_DEBUG, "link_stcs failed %d", result);
        return -2;
     57e:	2002      	movs	r0, #2
     580:	e000      	b.n	584 <app_reset+0x28>
        return ERROR_PTR;
     582:	2001      	movs	r0, #1
        return -2;
     584:	4240      	negs	r0, r0
    }

    return 0;
}
     586:	bd10      	pop	{r4, pc}
     588:	0000b4b4 	.word	0x0000b4b4
     58c:	00000cb5 	.word	0x00000cb5

00000590 <app_toggle_reset>:
    @app_ptr: APP object pointer, acquired from updi_application_init()
    @delay: Reset keep time before clear
    @return 0 successful, other value if failed
*/
int app_toggle_reset(void *app_ptr, int delay)
{
     590:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
     592:	0004      	movs	r4, r0
     594:	000f      	movs	r7, r1
    Toggle an UPDI reset condition
    */
    upd_application_t *app = (upd_application_t *)app_ptr;
    int result;

    if (!VALID_APP(app))
     596:	2800      	cmp	r0, #0
     598:	d012      	beq.n	5c0 <app_toggle_reset+0x30>
     59a:	4b0c      	ldr	r3, [pc, #48]	; (5cc <app_toggle_reset+0x3c>)
     59c:	6802      	ldr	r2, [r0, #0]
     59e:	429a      	cmp	r2, r3
     5a0:	d10e      	bne.n	5c0 <app_toggle_reset+0x30>
        return ERROR_PTR;

    //DBG_INFO(APP_DEBUG, "<APP> Toggle Reset");

    //Toggle reset
    result = app_reset(app, true);
     5a2:	2101      	movs	r1, #1
     5a4:	4d0a      	ldr	r5, [pc, #40]	; (5d0 <app_toggle_reset+0x40>)
     5a6:	47a8      	blx	r5
     5a8:	1e06      	subs	r6, r0, #0
    if (result) {
     5aa:	d10c      	bne.n	5c6 <app_toggle_reset+0x36>
        //DBG_INFO(APP_DEBUG, "app_reset failed %d", result);
        return -2;
    }

    msleep(delay);
     5ac:	0038      	movs	r0, r7
     5ae:	4b09      	ldr	r3, [pc, #36]	; (5d4 <app_toggle_reset+0x44>)
     5b0:	4798      	blx	r3

    result = app_reset(app, false);
     5b2:	0031      	movs	r1, r6
     5b4:	0020      	movs	r0, r4
     5b6:	47a8      	blx	r5
    if (result) {
     5b8:	2800      	cmp	r0, #0
     5ba:	d003      	beq.n	5c4 <app_toggle_reset+0x34>
        //DBG_INFO(APP_DEBUG, "app_reset failed %d", result);
        return -3;
     5bc:	2003      	movs	r0, #3
     5be:	e000      	b.n	5c2 <app_toggle_reset+0x32>
        return ERROR_PTR;
     5c0:	2001      	movs	r0, #1
        return -3;
     5c2:	4240      	negs	r0, r0
    }

    return 0;
}
     5c4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
        return -2;
     5c6:	2002      	movs	r0, #2
     5c8:	e7fb      	b.n	5c2 <app_toggle_reset+0x32>
     5ca:	46c0      	nop			; (mov r8, r8)
     5cc:	0000b4b4 	.word	0x0000b4b4
     5d0:	0000055d 	.word	0x0000055d
     5d4:	00000295 	.word	0x00000295

000005d8 <app_unlock>:
{
     5d8:	b537      	push	{r0, r1, r2, r4, r5, lr}
     5da:	1e04      	subs	r4, r0, #0
    if (!VALID_APP(app))
     5dc:	d024      	beq.n	628 <app_unlock+0x50>
     5de:	4b17      	ldr	r3, [pc, #92]	; (63c <app_unlock+0x64>)
     5e0:	6802      	ldr	r2, [r0, #0]
     5e2:	429a      	cmp	r2, r3
     5e4:	d120      	bne.n	628 <app_unlock+0x50>
    result = link_key(LINK(app), UPDI_KEY_64, UPDI_KEY_CHIPERASE);
     5e6:	4a16      	ldr	r2, [pc, #88]	; (640 <app_unlock+0x68>)
     5e8:	2100      	movs	r1, #0
     5ea:	6840      	ldr	r0, [r0, #4]
     5ec:	4b15      	ldr	r3, [pc, #84]	; (644 <app_unlock+0x6c>)
     5ee:	4798      	blx	r3
    if (result) {
     5f0:	2800      	cmp	r0, #0
     5f2:	d11c      	bne.n	62e <app_unlock+0x56>
    result = _link_ldcs(LINK(app), UPDI_ASI_KEY_STATUS, &status);
     5f4:	466b      	mov	r3, sp
     5f6:	1ddd      	adds	r5, r3, #7
     5f8:	002a      	movs	r2, r5
     5fa:	2107      	movs	r1, #7
     5fc:	6860      	ldr	r0, [r4, #4]
     5fe:	4b12      	ldr	r3, [pc, #72]	; (648 <app_unlock+0x70>)
     600:	4798      	blx	r3
    if (result || !(status & (1 << UPDI_ASI_KEY_STATUS_CHIPERASE))) {
     602:	2800      	cmp	r0, #0
     604:	d115      	bne.n	632 <app_unlock+0x5a>
     606:	782b      	ldrb	r3, [r5, #0]
     608:	071b      	lsls	r3, r3, #28
     60a:	d512      	bpl.n	632 <app_unlock+0x5a>
    result = app_toggle_reset(app_ptr, 1);
     60c:	2101      	movs	r1, #1
     60e:	0020      	movs	r0, r4
     610:	4b0e      	ldr	r3, [pc, #56]	; (64c <app_unlock+0x74>)
     612:	4798      	blx	r3
    if (result) {
     614:	2800      	cmp	r0, #0
     616:	d10e      	bne.n	636 <app_unlock+0x5e>
    result = app_wait_unlocked(app, 100);
     618:	2164      	movs	r1, #100	; 0x64
     61a:	0020      	movs	r0, r4
     61c:	4b0c      	ldr	r3, [pc, #48]	; (650 <app_unlock+0x78>)
     61e:	4798      	blx	r3
    if (result) {
     620:	2800      	cmp	r0, #0
     622:	d003      	beq.n	62c <app_unlock+0x54>
        return -5;
     624:	2005      	movs	r0, #5
     626:	e000      	b.n	62a <app_unlock+0x52>
        return ERROR_PTR;
     628:	2001      	movs	r0, #1
        return -5;
     62a:	4240      	negs	r0, r0
}
     62c:	bd3e      	pop	{r1, r2, r3, r4, r5, pc}
        return -2;
     62e:	2002      	movs	r0, #2
     630:	e7fb      	b.n	62a <app_unlock+0x52>
        return -3;
     632:	2003      	movs	r0, #3
     634:	e7f9      	b.n	62a <app_unlock+0x52>
        return -4;
     636:	2004      	movs	r0, #4
     638:	e7f7      	b.n	62a <app_unlock+0x52>
     63a:	46c0      	nop			; (mov r8, r8)
     63c:	0000b4b4 	.word	0x0000b4b4
     640:	00004f5f 	.word	0x00004f5f
     644:	00001291 	.word	0x00001291
     648:	00000c15 	.word	0x00000c15
     64c:	00000591 	.word	0x00000591
     650:	000004d9 	.word	0x000004d9

00000654 <app_enter_progmode>:
{
     654:	b573      	push	{r0, r1, r4, r5, r6, lr}
     656:	1e04      	subs	r4, r0, #0
    if (!VALID_APP(app))
     658:	d02b      	beq.n	6b2 <app_enter_progmode+0x5e>
     65a:	4b1c      	ldr	r3, [pc, #112]	; (6cc <app_enter_progmode+0x78>)
     65c:	6802      	ldr	r2, [r0, #0]
     65e:	429a      	cmp	r2, r3
     660:	d127      	bne.n	6b2 <app_enter_progmode+0x5e>
    if (app_in_prog_mode(app_ptr)) {
     662:	4d1b      	ldr	r5, [pc, #108]	; (6d0 <app_enter_progmode+0x7c>)
     664:	47a8      	blx	r5
     666:	1e01      	subs	r1, r0, #0
     668:	d121      	bne.n	6ae <app_enter_progmode+0x5a>
    result = link_key(LINK(app), UPDI_KEY_64, UPDI_KEY_NVM);
     66a:	4a1a      	ldr	r2, [pc, #104]	; (6d4 <app_enter_progmode+0x80>)
     66c:	6860      	ldr	r0, [r4, #4]
     66e:	4b1a      	ldr	r3, [pc, #104]	; (6d8 <app_enter_progmode+0x84>)
     670:	4798      	blx	r3
    if (result) {
     672:	2800      	cmp	r0, #0
     674:	d120      	bne.n	6b8 <app_enter_progmode+0x64>
    result = _link_ldcs(LINK(app), UPDI_ASI_KEY_STATUS, &status);
     676:	466b      	mov	r3, sp
     678:	1dde      	adds	r6, r3, #7
     67a:	0032      	movs	r2, r6
     67c:	2107      	movs	r1, #7
     67e:	6860      	ldr	r0, [r4, #4]
     680:	4b16      	ldr	r3, [pc, #88]	; (6dc <app_enter_progmode+0x88>)
     682:	4798      	blx	r3
    if (result || !(status & (1 << UPDI_ASI_KEY_STATUS_NVMPROG))) {
     684:	2800      	cmp	r0, #0
     686:	d119      	bne.n	6bc <app_enter_progmode+0x68>
     688:	7833      	ldrb	r3, [r6, #0]
     68a:	06db      	lsls	r3, r3, #27
     68c:	d516      	bpl.n	6bc <app_enter_progmode+0x68>
    result = app_toggle_reset(app_ptr, 1);
     68e:	2101      	movs	r1, #1
     690:	0020      	movs	r0, r4
     692:	4b13      	ldr	r3, [pc, #76]	; (6e0 <app_enter_progmode+0x8c>)
     694:	4798      	blx	r3
    if (result) {
     696:	2800      	cmp	r0, #0
     698:	d112      	bne.n	6c0 <app_enter_progmode+0x6c>
    result = app_wait_unlocked(app_ptr, 100);
     69a:	2164      	movs	r1, #100	; 0x64
     69c:	0020      	movs	r0, r4
     69e:	4b11      	ldr	r3, [pc, #68]	; (6e4 <app_enter_progmode+0x90>)
     6a0:	4798      	blx	r3
    if (result) {
     6a2:	2800      	cmp	r0, #0
     6a4:	d10e      	bne.n	6c4 <app_enter_progmode+0x70>
    if (!app_in_prog_mode(app_ptr)) {
     6a6:	0020      	movs	r0, r4
     6a8:	47a8      	blx	r5
     6aa:	2800      	cmp	r0, #0
     6ac:	d00c      	beq.n	6c8 <app_enter_progmode+0x74>
        return 0;
     6ae:	2000      	movs	r0, #0
}
     6b0:	bd76      	pop	{r1, r2, r4, r5, r6, pc}
        return ERROR_PTR;
     6b2:	2001      	movs	r0, #1
        return -6;
     6b4:	4240      	negs	r0, r0
     6b6:	e7fb      	b.n	6b0 <app_enter_progmode+0x5c>
        return -2;
     6b8:	2002      	movs	r0, #2
     6ba:	e7fb      	b.n	6b4 <app_enter_progmode+0x60>
        return -3;
     6bc:	2003      	movs	r0, #3
     6be:	e7f9      	b.n	6b4 <app_enter_progmode+0x60>
        return -4;
     6c0:	2004      	movs	r0, #4
     6c2:	e7f7      	b.n	6b4 <app_enter_progmode+0x60>
        return -5;
     6c4:	2005      	movs	r0, #5
     6c6:	e7f5      	b.n	6b4 <app_enter_progmode+0x60>
        return -6;
     6c8:	2006      	movs	r0, #6
     6ca:	e7f3      	b.n	6b4 <app_enter_progmode+0x60>
     6cc:	0000b4b4 	.word	0x0000b4b4
     6d0:	000004a5 	.word	0x000004a5
     6d4:	00004f68 	.word	0x00004f68
     6d8:	00001291 	.word	0x00001291
     6dc:	00000c15 	.word	0x00000c15
     6e0:	00000591 	.word	0x00000591
     6e4:	000004d9 	.word	0x000004d9

000006e8 <app_leave_progmode>:
{
     6e8:	b510      	push	{r4, lr}
     6ea:	1e04      	subs	r4, r0, #0
    if (!VALID_APP(app))
     6ec:	d00f      	beq.n	70e <app_leave_progmode+0x26>
     6ee:	4b0a      	ldr	r3, [pc, #40]	; (718 <app_leave_progmode+0x30>)
     6f0:	6802      	ldr	r2, [r0, #0]
     6f2:	429a      	cmp	r2, r3
     6f4:	d10b      	bne.n	70e <app_leave_progmode+0x26>
    result = app_toggle_reset(app_ptr, 1);
     6f6:	2101      	movs	r1, #1
     6f8:	4b08      	ldr	r3, [pc, #32]	; (71c <app_leave_progmode+0x34>)
     6fa:	4798      	blx	r3
    if (result) {
     6fc:	2800      	cmp	r0, #0
     6fe:	d109      	bne.n	714 <app_leave_progmode+0x2c>
    result = app_disable(app_ptr);
     700:	0020      	movs	r0, r4
     702:	4b07      	ldr	r3, [pc, #28]	; (720 <app_leave_progmode+0x38>)
     704:	4798      	blx	r3
    if (result) {
     706:	2800      	cmp	r0, #0
     708:	d003      	beq.n	712 <app_leave_progmode+0x2a>
        return -3;
     70a:	2003      	movs	r0, #3
     70c:	e000      	b.n	710 <app_leave_progmode+0x28>
        return ERROR_PTR;
     70e:	2001      	movs	r0, #1
        return -3;
     710:	4240      	negs	r0, r0
}
     712:	bd10      	pop	{r4, pc}
        return -2;
     714:	2002      	movs	r0, #2
     716:	e7fb      	b.n	710 <app_leave_progmode+0x28>
     718:	0000b4b4 	.word	0x0000b4b4
     71c:	00000591 	.word	0x00000591
     720:	0000052d 	.word	0x0000052d

00000724 <app_wait_flash_ready>:
    @app_ptr: APP object pointer, acquired from updi_application_init()
    @timeout: max flash programing time
    @return 0 successful, other value if failed
*/
int app_wait_flash_ready(void *app_ptr, int timeout)
{
     724:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
     726:	0005      	movs	r5, r0
     728:	000c      	movs	r4, r1
    */
    upd_application_t *app = (upd_application_t *)app_ptr;
    u8 status;
    int result;

    if (!VALID_APP(app))
     72a:	2800      	cmp	r0, #0
     72c:	d024      	beq.n	778 <app_wait_flash_ready+0x54>
     72e:	4b13      	ldr	r3, [pc, #76]	; (77c <app_wait_flash_ready+0x58>)
     730:	6802      	ldr	r2, [r0, #0]
     732:	429a      	cmp	r2, r3
     734:	d120      	bne.n	778 <app_wait_flash_ready+0x54>
            if (status & (1 << UPDI_NVM_STATUS_WRITE_ERROR)) {
                result = -3;
                break;
            }

            if (!(status & ((1 << UPDI_NVM_STATUS_EEPROM_BUSY) | (1 << UPDI_NVM_STATUS_FLASH_BUSY))))
     736:	2703      	movs	r7, #3
        result = _link_ld(LINK(app), APP_REG(app, nvmctrl_address) + UPDI_NVMCTRL_STATUS, &status);
     738:	466b      	mov	r3, sp
     73a:	1dde      	adds	r6, r3, #7
     73c:	68ab      	ldr	r3, [r5, #8]
     73e:	0032      	movs	r2, r6
     740:	685b      	ldr	r3, [r3, #4]
     742:	6868      	ldr	r0, [r5, #4]
     744:	8999      	ldrh	r1, [r3, #12]
     746:	4b0e      	ldr	r3, [pc, #56]	; (780 <app_wait_flash_ready+0x5c>)
     748:	3102      	adds	r1, #2
     74a:	b289      	uxth	r1, r1
     74c:	4798      	blx	r3
        if (result) {
     74e:	2800      	cmp	r0, #0
     750:	d002      	beq.n	758 <app_wait_flash_ready+0x34>
        msleep(1);
    } while (--timeout > 0);

    if (timeout <= 0 || result) {
        //DBG_INFO(APP_DEBUG, "Timeout waiting for wait flash ready status %02x result %d", status, result);
        return -3;
     752:	2003      	movs	r0, #3
        return ERROR_PTR;
     754:	4240      	negs	r0, r0
     756:	e00e      	b.n	776 <app_wait_flash_ready+0x52>
            if (status & (1 << UPDI_NVM_STATUS_WRITE_ERROR)) {
     758:	2204      	movs	r2, #4
     75a:	7833      	ldrb	r3, [r6, #0]
     75c:	4213      	tst	r3, r2
     75e:	d1f8      	bne.n	752 <app_wait_flash_ready+0x2e>
            if (!(status & ((1 << UPDI_NVM_STATUS_EEPROM_BUSY) | (1 << UPDI_NVM_STATUS_FLASH_BUSY))))
     760:	423b      	tst	r3, r7
     762:	d006      	beq.n	772 <app_wait_flash_ready+0x4e>
        msleep(1);
     764:	2001      	movs	r0, #1
     766:	4b07      	ldr	r3, [pc, #28]	; (784 <app_wait_flash_ready+0x60>)
    } while (--timeout > 0);
     768:	3c01      	subs	r4, #1
        msleep(1);
     76a:	4798      	blx	r3
    } while (--timeout > 0);
     76c:	2c00      	cmp	r4, #0
     76e:	dce3      	bgt.n	738 <app_wait_flash_ready+0x14>
     770:	e7ef      	b.n	752 <app_wait_flash_ready+0x2e>
    if (timeout <= 0 || result) {
     772:	2c00      	cmp	r4, #0
     774:	dded      	ble.n	752 <app_wait_flash_ready+0x2e>
    }

    return 0;
}
     776:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
        return ERROR_PTR;
     778:	2001      	movs	r0, #1
     77a:	e7eb      	b.n	754 <app_wait_flash_ready+0x30>
     77c:	0000b4b4 	.word	0x0000b4b4
     780:	00000e2d 	.word	0x00000e2d
     784:	00000295 	.word	0x00000295

00000788 <app_execute_nvm_command>:
    @app_ptr: APP object pointer, acquired from updi_application_init()
    @command: command content
    @return 0 successful, other value if failed
*/
int app_execute_nvm_command(void *app_ptr, u8 command)
{
     788:	b510      	push	{r4, lr}
     78a:	000a      	movs	r2, r1
    /*
        Executes an NVM COMMAND on the NVM CTRL
    */
    upd_application_t *app = (upd_application_t *)app_ptr;

    if (!VALID_APP(app))
     78c:	2800      	cmp	r0, #0
     78e:	d00a      	beq.n	7a6 <app_execute_nvm_command+0x1e>
     790:	4b06      	ldr	r3, [pc, #24]	; (7ac <app_execute_nvm_command+0x24>)
     792:	6801      	ldr	r1, [r0, #0]
     794:	4299      	cmp	r1, r3
     796:	d106      	bne.n	7a6 <app_execute_nvm_command+0x1e>
        return ERROR_PTR;

    //DBG_INFO(APP_DEBUG, "<APP> NVMCMD %d executing", command);

    return link_st(LINK(app), APP_REG(app, nvmctrl_address) + UPDI_NVMCTRL_CTRLA, command);
     798:	6883      	ldr	r3, [r0, #8]
     79a:	6840      	ldr	r0, [r0, #4]
     79c:	685b      	ldr	r3, [r3, #4]
     79e:	8999      	ldrh	r1, [r3, #12]
     7a0:	4b03      	ldr	r3, [pc, #12]	; (7b0 <app_execute_nvm_command+0x28>)
     7a2:	4798      	blx	r3
}
     7a4:	bd10      	pop	{r4, pc}
        return ERROR_PTR;
     7a6:	2001      	movs	r0, #1
     7a8:	4240      	negs	r0, r0
     7aa:	e7fb      	b.n	7a4 <app_execute_nvm_command+0x1c>
     7ac:	0000b4b4 	.word	0x0000b4b4
     7b0:	00000edd 	.word	0x00000edd

000007b4 <app_chip_erase>:
    APP erase chip
    @app_ptr: APP object pointer, acquired from updi_application_init()
    @return 0 successful, other value if failed
*/
int app_chip_erase(void *app_ptr)
{
     7b4:	b570      	push	{r4, r5, r6, lr}
     7b6:	1e04      	subs	r4, r0, #0
    */

    upd_application_t *app = (upd_application_t *)app_ptr;
    int result;

    if (!VALID_APP(app))
     7b8:	d019      	beq.n	7ee <app_chip_erase+0x3a>
     7ba:	4b0f      	ldr	r3, [pc, #60]	; (7f8 <app_chip_erase+0x44>)
     7bc:	6802      	ldr	r2, [r0, #0]
     7be:	429a      	cmp	r2, r3
     7c0:	d115      	bne.n	7ee <app_chip_erase+0x3a>
        return ERROR_PTR;

    //DBG_INFO(APP_DEBUG, "<APP> Chip erase using NVM CTRL");

    //Wait until NVM CTRL is ready to erase
    result = app_wait_flash_ready(app, TIMEOUT_WAIT_FLASH_READY);
     7c2:	21fa      	movs	r1, #250	; 0xfa
     7c4:	4d0d      	ldr	r5, [pc, #52]	; (7fc <app_chip_erase+0x48>)
     7c6:	0089      	lsls	r1, r1, #2
     7c8:	47a8      	blx	r5
    if (result) {
     7ca:	2800      	cmp	r0, #0
     7cc:	d002      	beq.n	7d4 <app_chip_erase+0x20>
        //DBG_INFO(APP_DEBUG, "app_wait_flash_ready timeout before erase failed %d", result);
        return -2;
     7ce:	2002      	movs	r0, #2

    //Erase
    result = app_execute_nvm_command(app, UPDI_NVMCTRL_CTRLA_CHIP_ERASE);
    if (result) {
        //DBG_INFO(APP_DEBUG, "app_execute_nvm_command failed %d", result);
        return -3;
     7d0:	4240      	negs	r0, r0
     7d2:	e00b      	b.n	7ec <app_chip_erase+0x38>
    result = app_execute_nvm_command(app, UPDI_NVMCTRL_CTRLA_CHIP_ERASE);
     7d4:	2105      	movs	r1, #5
     7d6:	0020      	movs	r0, r4
     7d8:	4b09      	ldr	r3, [pc, #36]	; (800 <app_chip_erase+0x4c>)
     7da:	4798      	blx	r3
    if (result) {
     7dc:	2800      	cmp	r0, #0
     7de:	d108      	bne.n	7f2 <app_chip_erase+0x3e>
    }

    // And wait for it
    result = app_wait_flash_ready(app, TIMEOUT_WAIT_FLASH_READY);
     7e0:	21fa      	movs	r1, #250	; 0xfa
     7e2:	0020      	movs	r0, r4
     7e4:	0089      	lsls	r1, r1, #2
     7e6:	47a8      	blx	r5
    if (result) {
     7e8:	2800      	cmp	r0, #0
     7ea:	d1f0      	bne.n	7ce <app_chip_erase+0x1a>
        //DBG_INFO(APP_DEBUG, "app_wait_flash_ready timeout after erase failed %d", result);
        return -2;
    }

    return 0;
}
     7ec:	bd70      	pop	{r4, r5, r6, pc}
        return ERROR_PTR;
     7ee:	2001      	movs	r0, #1
     7f0:	e7ee      	b.n	7d0 <app_chip_erase+0x1c>
        return -3;
     7f2:	2003      	movs	r0, #3
     7f4:	e7ec      	b.n	7d0 <app_chip_erase+0x1c>
     7f6:	46c0      	nop			; (mov r8, r8)
     7f8:	0000b4b4 	.word	0x0000b4b4
     7fc:	00000725 	.word	0x00000725
     800:	00000789 	.word	0x00000789

00000804 <app_read_data_words>:
    @len: data len
    @return 0 successful, other value if failed
*/

int app_read_data_words(void *app_ptr, u16 address, u8 *data, int len)
{
     804:	b570      	push	{r4, r5, r6, lr}
     806:	0004      	movs	r4, r0
     808:	0015      	movs	r5, r2
     80a:	001e      	movs	r6, r3
    Reads a number of words of data from UPDI
    */
    upd_application_t *app = (upd_application_t *)app_ptr;
    int result;

    if (!VALID_APP(app) || !VALID_PTR(data) || len < 2)
     80c:	2800      	cmp	r0, #0
     80e:	d02d      	beq.n	86c <app_read_data_words+0x68>
     810:	4b1b      	ldr	r3, [pc, #108]	; (880 <app_read_data_words+0x7c>)
     812:	6802      	ldr	r2, [r0, #0]
     814:	429a      	cmp	r2, r3
     816:	d129      	bne.n	86c <app_read_data_words+0x68>
     818:	2d00      	cmp	r5, #0
     81a:	d027      	beq.n	86c <app_read_data_words+0x68>
        return ERROR_PTR;
     81c:	0028      	movs	r0, r5
    if (!VALID_APP(app) || !VALID_PTR(data) || len < 2)
     81e:	1c6b      	adds	r3, r5, #1
     820:	d00a      	beq.n	838 <app_read_data_words+0x34>
     822:	2e01      	cmp	r6, #1
     824:	dd22      	ble.n	86c <app_read_data_words+0x68>

    //DBG_INFO(APP_DEBUG, "<APP> Read words data(%d) addr: %hX", len, address);

    // Special-case of 1 word
    if (len == 2) {
     826:	2e02      	cmp	r6, #2
     828:	d107      	bne.n	83a <app_read_data_words+0x36>
        result = _link_ld16(LINK(app), address, (u16 *)data);
     82a:	002a      	movs	r2, r5
     82c:	6860      	ldr	r0, [r4, #4]
     82e:	4b15      	ldr	r3, [pc, #84]	; (884 <app_read_data_words+0x80>)
     830:	4798      	blx	r3
        if (result) {
     832:	2800      	cmp	r0, #0
     834:	d11c      	bne.n	870 <app_read_data_words+0x6c>
            //DBG_INFO(APP_DEBUG, "_link_ld16 failed %d", result);
            return -2;
        }

        return 0;
     836:	2000      	movs	r0, #0
        //DBG_INFO(APP_DEBUG, "link_ld_ptr_inc16 failed %d", result);
        return -6;
    }

    return 0;
}
     838:	bd70      	pop	{r4, r5, r6, pc}
    if (len > (UPDI_MAX_REPEAT_SIZE >> 1) + 1) {
     83a:	2e80      	cmp	r6, #128	; 0x80
     83c:	dc1a      	bgt.n	874 <app_read_data_words+0x70>
    result = link_st_ptr(LINK(app), address);
     83e:	6860      	ldr	r0, [r4, #4]
     840:	4b11      	ldr	r3, [pc, #68]	; (888 <app_read_data_words+0x84>)
     842:	4798      	blx	r3
    if (result) {
     844:	2800      	cmp	r0, #0
     846:	d117      	bne.n	878 <app_read_data_words+0x74>
    result = link_repeat16(LINK(app), (len >> 1) - 1);
     848:	1071      	asrs	r1, r6, #1
     84a:	3901      	subs	r1, #1
     84c:	b289      	uxth	r1, r1
     84e:	6860      	ldr	r0, [r4, #4]
     850:	4b0e      	ldr	r3, [pc, #56]	; (88c <app_read_data_words+0x88>)
     852:	4798      	blx	r3
    if (result) {
     854:	2800      	cmp	r0, #0
     856:	d111      	bne.n	87c <app_read_data_words+0x78>
    result = link_ld_ptr_inc16(LINK(app), data, len);
     858:	0032      	movs	r2, r6
     85a:	0029      	movs	r1, r5
     85c:	6860      	ldr	r0, [r4, #4]
     85e:	4b0c      	ldr	r3, [pc, #48]	; (890 <app_read_data_words+0x8c>)
     860:	4798      	blx	r3
    if (result) {
     862:	2800      	cmp	r0, #0
     864:	d0e7      	beq.n	836 <app_read_data_words+0x32>
        return -6;
     866:	2006      	movs	r0, #6
        return -5;
     868:	4240      	negs	r0, r0
     86a:	e7e5      	b.n	838 <app_read_data_words+0x34>
        return ERROR_PTR;
     86c:	2001      	movs	r0, #1
     86e:	e7fb      	b.n	868 <app_read_data_words+0x64>
            return -2;
     870:	2002      	movs	r0, #2
     872:	e7f9      	b.n	868 <app_read_data_words+0x64>
        return -3;
     874:	2003      	movs	r0, #3
     876:	e7f7      	b.n	868 <app_read_data_words+0x64>
        return -4;
     878:	2004      	movs	r0, #4
     87a:	e7f5      	b.n	868 <app_read_data_words+0x64>
        return -5;
     87c:	2005      	movs	r0, #5
     87e:	e7f3      	b.n	868 <app_read_data_words+0x64>
     880:	0000b4b4 	.word	0x0000b4b4
     884:	00000e85 	.word	0x00000e85
     888:	00001075 	.word	0x00001075
     88c:	0000122d 	.word	0x0000122d
     890:	00001021 	.word	0x00001021

00000894 <app_read_data_bytes>:
    @data: data output buffer
    @len: data len
    @return 0 successful, other value if failed
*/
int app_read_data_bytes(void *app_ptr, u16 address, u8 *data, int len)
{
     894:	b570      	push	{r4, r5, r6, lr}
     896:	0004      	movs	r4, r0
     898:	0015      	movs	r5, r2
     89a:	001e      	movs	r6, r3
    Reads a number of bytes of data from UPDI
    */
    upd_application_t *app = (upd_application_t *)app_ptr;
    int result;

    if (!VALID_APP(app) || !VALID_PTR(data) || len < 1)
     89c:	2800      	cmp	r0, #0
     89e:	d02e      	beq.n	8fe <app_read_data_bytes+0x6a>
     8a0:	4b1c      	ldr	r3, [pc, #112]	; (914 <app_read_data_bytes+0x80>)
     8a2:	6802      	ldr	r2, [r0, #0]
     8a4:	429a      	cmp	r2, r3
     8a6:	d12a      	bne.n	8fe <app_read_data_bytes+0x6a>
     8a8:	2d00      	cmp	r5, #0
     8aa:	d028      	beq.n	8fe <app_read_data_bytes+0x6a>
        return ERROR_PTR;
     8ac:	0028      	movs	r0, r5
    if (!VALID_APP(app) || !VALID_PTR(data) || len < 1)
     8ae:	1c6b      	adds	r3, r5, #1
     8b0:	d00a      	beq.n	8c8 <app_read_data_bytes+0x34>
     8b2:	2e00      	cmp	r6, #0
     8b4:	dd23      	ble.n	8fe <app_read_data_bytes+0x6a>

    //DBG_INFO(APP_DEBUG, "<APP> Read bytes data(%d) addr: %hX", len, address);

    // Special-case of 1 byte
    if (len == 1) {
     8b6:	2e01      	cmp	r6, #1
     8b8:	d107      	bne.n	8ca <app_read_data_bytes+0x36>
        result = _link_ld(LINK(app), address, data);
     8ba:	002a      	movs	r2, r5
     8bc:	6860      	ldr	r0, [r4, #4]
     8be:	4b16      	ldr	r3, [pc, #88]	; (918 <app_read_data_bytes+0x84>)
     8c0:	4798      	blx	r3
        if (result) {
     8c2:	2800      	cmp	r0, #0
     8c4:	d11d      	bne.n	902 <app_read_data_bytes+0x6e>
            //DBG_INFO(APP_DEBUG, "_link_ld failed %d", result);
            return -2;
        }

        return 0;
     8c6:	2000      	movs	r0, #0
        //DBG_INFO(APP_DEBUG, "link_ld_ptr_inc failed %d", result);
        return -6;
    }

    return 0;
}
     8c8:	bd70      	pop	{r4, r5, r6, pc}
    if (len > UPDI_MAX_REPEAT_SIZE + 1) {
     8ca:	2380      	movs	r3, #128	; 0x80
     8cc:	005b      	lsls	r3, r3, #1
     8ce:	429e      	cmp	r6, r3
     8d0:	dc19      	bgt.n	906 <app_read_data_bytes+0x72>
    result = link_st_ptr(LINK(app), address);
     8d2:	6860      	ldr	r0, [r4, #4]
     8d4:	4b11      	ldr	r3, [pc, #68]	; (91c <app_read_data_bytes+0x88>)
     8d6:	4798      	blx	r3
    if (result) {
     8d8:	2800      	cmp	r0, #0
     8da:	d116      	bne.n	90a <app_read_data_bytes+0x76>
    result = link_repeat(LINK(app), len - 1);
     8dc:	1e71      	subs	r1, r6, #1
     8de:	b2c9      	uxtb	r1, r1
     8e0:	6860      	ldr	r0, [r4, #4]
     8e2:	4b0f      	ldr	r3, [pc, #60]	; (920 <app_read_data_bytes+0x8c>)
     8e4:	4798      	blx	r3
    if (result) {
     8e6:	2800      	cmp	r0, #0
     8e8:	d111      	bne.n	90e <app_read_data_bytes+0x7a>
    result = link_ld_ptr_inc(LINK(app), data, len);
     8ea:	0032      	movs	r2, r6
     8ec:	0029      	movs	r1, r5
     8ee:	6860      	ldr	r0, [r4, #4]
     8f0:	4b0c      	ldr	r3, [pc, #48]	; (924 <app_read_data_bytes+0x90>)
     8f2:	4798      	blx	r3
    if (result) {
     8f4:	2800      	cmp	r0, #0
     8f6:	d0e6      	beq.n	8c6 <app_read_data_bytes+0x32>
        return -6;
     8f8:	2006      	movs	r0, #6
        return -5;
     8fa:	4240      	negs	r0, r0
     8fc:	e7e4      	b.n	8c8 <app_read_data_bytes+0x34>
        return ERROR_PTR;
     8fe:	2001      	movs	r0, #1
     900:	e7fb      	b.n	8fa <app_read_data_bytes+0x66>
            return -2;
     902:	2002      	movs	r0, #2
     904:	e7f9      	b.n	8fa <app_read_data_bytes+0x66>
        return -3;
     906:	2003      	movs	r0, #3
     908:	e7f7      	b.n	8fa <app_read_data_bytes+0x66>
        return -4;
     90a:	2004      	movs	r0, #4
     90c:	e7f5      	b.n	8fa <app_read_data_bytes+0x66>
        return -5;
     90e:	2005      	movs	r0, #5
     910:	e7f3      	b.n	8fa <app_read_data_bytes+0x66>
     912:	46c0      	nop			; (mov r8, r8)
     914:	0000b4b4 	.word	0x0000b4b4
     918:	00000e2d 	.word	0x00000e2d
     91c:	00001075 	.word	0x00001075
     920:	000011f1 	.word	0x000011f1
     924:	00000fd1 	.word	0x00000fd1

00000928 <app_read_data>:
    @data: data output buffer
    @len: data len
    @return 0 successful, other value if failed
*/
int app_read_data(void *app_ptr, u16 address, u8 *data, int len)
{
     928:	b570      	push	{r4, r5, r6, lr}
    /*
    Reads a number of bytes of data from UPDI
    */
    bool use_word_access = !(len & 0x1);
     92a:	2401      	movs	r4, #1
{
     92c:	0005      	movs	r5, r0
    bool use_word_access = !(len & 0x1);
     92e:	401c      	ands	r4, r3
    int result;

    //DBG_INFO(APP_DEBUG, "<APP> Read data(%d)", len);

    if (!VALID_PTR(data) || len <= 0)
     930:	2a00      	cmp	r2, #0
     932:	d00c      	beq.n	94e <app_read_data+0x26>
        return ERROR_PTR;
     934:	0010      	movs	r0, r2
    if (!VALID_PTR(data) || len <= 0)
     936:	1c56      	adds	r6, r2, #1
     938:	d006      	beq.n	948 <app_read_data+0x20>
     93a:	2b00      	cmp	r3, #0
     93c:	dd07      	ble.n	94e <app_read_data+0x26>

    if (use_word_access)
        result = app_read_data_words(app_ptr, address, data, len);
     93e:	0028      	movs	r0, r5
    if (use_word_access)
     940:	2c00      	cmp	r4, #0
     942:	d102      	bne.n	94a <app_read_data+0x22>
        result = app_read_data_words(app_ptr, address, data, len);
     944:	4c03      	ldr	r4, [pc, #12]	; (954 <app_read_data+0x2c>)
    else
        result = app_read_data_bytes(app_ptr, address, data, len);
     946:	47a0      	blx	r4

    return result;
}
     948:	bd70      	pop	{r4, r5, r6, pc}
        result = app_read_data_bytes(app_ptr, address, data, len);
     94a:	4c03      	ldr	r4, [pc, #12]	; (958 <app_read_data+0x30>)
     94c:	e7fb      	b.n	946 <app_read_data+0x1e>
        return ERROR_PTR;
     94e:	2001      	movs	r0, #1
     950:	4240      	negs	r0, r0
     952:	e7f9      	b.n	948 <app_read_data+0x20>
     954:	00000805 	.word	0x00000805
     958:	00000895 	.word	0x00000895

0000095c <app_device_info>:
{
     95c:	b570      	push	{r4, r5, r6, lr}
     95e:	0004      	movs	r4, r0
     960:	b08a      	sub	sp, #40	; 0x28
    if (!VALID_APP(app))
     962:	2800      	cmp	r0, #0
     964:	d026      	beq.n	9b4 <app_device_info+0x58>
     966:	4b18      	ldr	r3, [pc, #96]	; (9c8 <app_device_info+0x6c>)
     968:	6802      	ldr	r2, [r0, #0]
     96a:	429a      	cmp	r2, r3
     96c:	d122      	bne.n	9b4 <app_device_info+0x58>
    result = link_read_sib(LINK(app), sib, sizeof(sib));
     96e:	2210      	movs	r2, #16
     970:	a906      	add	r1, sp, #24
     972:	6840      	ldr	r0, [r0, #4]
     974:	4b15      	ldr	r3, [pc, #84]	; (9cc <app_device_info+0x70>)
     976:	4798      	blx	r3
     978:	1e05      	subs	r5, r0, #0
    if (result) {
     97a:	d120      	bne.n	9be <app_device_info+0x62>
    if (app_in_prog_mode(app)) {
     97c:	0020      	movs	r0, r4
     97e:	4b14      	ldr	r3, [pc, #80]	; (9d0 <app_device_info+0x74>)
     980:	4798      	blx	r3
     982:	2800      	cmp	r0, #0
     984:	d018      	beq.n	9b8 <app_device_info+0x5c>
        result = app_read_data(app, APP_REG(app, sigrow_address), sigrow, sizeof(sigrow));
     986:	68a3      	ldr	r3, [r4, #8]
     988:	aa02      	add	r2, sp, #8
     98a:	685b      	ldr	r3, [r3, #4]
     98c:	0020      	movs	r0, r4
     98e:	89d9      	ldrh	r1, [r3, #14]
     990:	4e10      	ldr	r6, [pc, #64]	; (9d4 <app_device_info+0x78>)
     992:	230e      	movs	r3, #14
     994:	47b0      	blx	r6
        if (result) {
     996:	2800      	cmp	r0, #0
     998:	d113      	bne.n	9c2 <app_device_info+0x66>
        result = app_read_data(app, APP_REG(app, syscfg_address) + 1, revid, sizeof(revid));
     99a:	68a3      	ldr	r3, [r4, #8]
     99c:	aa01      	add	r2, sp, #4
     99e:	685b      	ldr	r3, [r3, #4]
     9a0:	0020      	movs	r0, r4
     9a2:	8959      	ldrh	r1, [r3, #10]
     9a4:	2301      	movs	r3, #1
     9a6:	3101      	adds	r1, #1
     9a8:	b289      	uxth	r1, r1
     9aa:	47b0      	blx	r6
        if (result) {
     9ac:	2800      	cmp	r0, #0
     9ae:	d003      	beq.n	9b8 <app_device_info+0x5c>
            return -4;
     9b0:	2504      	movs	r5, #4
     9b2:	e000      	b.n	9b6 <app_device_info+0x5a>
        return ERROR_PTR;
     9b4:	2501      	movs	r5, #1
            return -4;
     9b6:	426d      	negs	r5, r5
}
     9b8:	0028      	movs	r0, r5
     9ba:	b00a      	add	sp, #40	; 0x28
     9bc:	bd70      	pop	{r4, r5, r6, pc}
        return -2;
     9be:	2502      	movs	r5, #2
     9c0:	e7f9      	b.n	9b6 <app_device_info+0x5a>
            return -3;
     9c2:	2503      	movs	r5, #3
     9c4:	e7f7      	b.n	9b6 <app_device_info+0x5a>
     9c6:	46c0      	nop			; (mov r8, r8)
     9c8:	0000b4b4 	.word	0x0000b4b4
     9cc:	0000126d 	.word	0x0000126d
     9d0:	000004a5 	.word	0x000004a5
     9d4:	00000929 	.word	0x00000929

000009d8 <app_write_data_words>:
    @data: data buffer
    @len: data len
    @return 0 successful, other value if failed
*/
int app_write_data_words(void *app_ptr, u16 address, const u8 *data, int len)
{
     9d8:	b570      	push	{r4, r5, r6, lr}
     9da:	0004      	movs	r4, r0
     9dc:	0015      	movs	r5, r2
     9de:	001e      	movs	r6, r3
        Writes a number of words to memory
    */
    upd_application_t *app = (upd_application_t *)app_ptr;
    int result;

    if (!VALID_APP(app) || !VALID_PTR(data) || len < 2)
     9e0:	2800      	cmp	r0, #0
     9e2:	d035      	beq.n	a50 <app_write_data_words+0x78>
     9e4:	4b1d      	ldr	r3, [pc, #116]	; (a5c <app_write_data_words+0x84>)
     9e6:	6802      	ldr	r2, [r0, #0]
     9e8:	429a      	cmp	r2, r3
     9ea:	d131      	bne.n	a50 <app_write_data_words+0x78>
     9ec:	2d00      	cmp	r5, #0
     9ee:	d02f      	beq.n	a50 <app_write_data_words+0x78>
        return ERROR_PTR;
     9f0:	0028      	movs	r0, r5
    if (!VALID_APP(app) || !VALID_PTR(data) || len < 2)
     9f2:	1c6b      	adds	r3, r5, #1
     9f4:	d011      	beq.n	a1a <app_write_data_words+0x42>
     9f6:	2e01      	cmp	r6, #1
     9f8:	dd2a      	ble.n	a50 <app_write_data_words+0x78>

    //DBG_INFO(APP_DEBUG, "<APP> Write words data(%d) addr: %hX", len, address);
    
    // Special-case of 1 word
    if (len == 2) {
     9fa:	2e02      	cmp	r6, #2
     9fc:	d10e      	bne.n	a1c <app_write_data_words+0x44>
        result = link_st16(LINK(app), address, data[0] + (data[1] << 8));
     9fe:	786b      	ldrb	r3, [r5, #1]
     a00:	782a      	ldrb	r2, [r5, #0]
     a02:	021b      	lsls	r3, r3, #8
     a04:	18d2      	adds	r2, r2, r3
     a06:	b292      	uxth	r2, r2
     a08:	6860      	ldr	r0, [r4, #4]
     a0a:	4b15      	ldr	r3, [pc, #84]	; (a60 <app_write_data_words+0x88>)
     a0c:	4798      	blx	r3
        if (result) {
     a0e:	2800      	cmp	r0, #0
     a10:	d002      	beq.n	a18 <app_write_data_words+0x40>
            //DBG_INFO(APP_DEBUG, "link_st16 failed %d", result);
            return -3;
     a12:	2003      	movs	r0, #3

    //Fire up the repeat
    result = link_repeat16(LINK(app), (len >> 1) - 1);
    if (result) {
        //DBG_INFO(APP_DEBUG, "link_repeat16 failed %d", result);
        return -5;
     a14:	4240      	negs	r0, r0
     a16:	e000      	b.n	a1a <app_write_data_words+0x42>
        return 0;
     a18:	2000      	movs	r0, #0
        //DBG_INFO(APP_DEBUG, "link_st_ptr_inc16 failed %d", result);
        return -6;
    }

    return 0;
}
     a1a:	bd70      	pop	{r4, r5, r6, pc}
    if (len > ((UPDI_MAX_REPEAT_SIZE + 1) << 1)) {
     a1c:	2380      	movs	r3, #128	; 0x80
     a1e:	009b      	lsls	r3, r3, #2
     a20:	429e      	cmp	r6, r3
     a22:	dcf6      	bgt.n	a12 <app_write_data_words+0x3a>
    result = link_st_ptr(LINK(app), address);
     a24:	6860      	ldr	r0, [r4, #4]
     a26:	4b0f      	ldr	r3, [pc, #60]	; (a64 <app_write_data_words+0x8c>)
     a28:	4798      	blx	r3
    if (result) {
     a2a:	2800      	cmp	r0, #0
     a2c:	d112      	bne.n	a54 <app_write_data_words+0x7c>
    result = link_repeat16(LINK(app), (len >> 1) - 1);
     a2e:	1071      	asrs	r1, r6, #1
     a30:	3901      	subs	r1, #1
     a32:	b289      	uxth	r1, r1
     a34:	6860      	ldr	r0, [r4, #4]
     a36:	4b0c      	ldr	r3, [pc, #48]	; (a68 <app_write_data_words+0x90>)
     a38:	4798      	blx	r3
    if (result) {
     a3a:	2800      	cmp	r0, #0
     a3c:	d10c      	bne.n	a58 <app_write_data_words+0x80>
    result = link_st_ptr_inc16(LINK(app), data, len);
     a3e:	0032      	movs	r2, r6
     a40:	0029      	movs	r1, r5
     a42:	6860      	ldr	r0, [r4, #4]
     a44:	4b09      	ldr	r3, [pc, #36]	; (a6c <app_write_data_words+0x94>)
     a46:	4798      	blx	r3
    if (result) {
     a48:	2800      	cmp	r0, #0
     a4a:	d0e5      	beq.n	a18 <app_write_data_words+0x40>
        return -6;
     a4c:	2006      	movs	r0, #6
     a4e:	e7e1      	b.n	a14 <app_write_data_words+0x3c>
        return ERROR_PTR;
     a50:	2001      	movs	r0, #1
     a52:	e7df      	b.n	a14 <app_write_data_words+0x3c>
        return -4;
     a54:	2004      	movs	r0, #4
     a56:	e7dd      	b.n	a14 <app_write_data_words+0x3c>
        return -5;
     a58:	2005      	movs	r0, #5
     a5a:	e7db      	b.n	a14 <app_write_data_words+0x3c>
     a5c:	0000b4b4 	.word	0x0000b4b4
     a60:	00000f55 	.word	0x00000f55
     a64:	00001075 	.word	0x00001075
     a68:	0000122d 	.word	0x0000122d
     a6c:	00001159 	.word	0x00001159

00000a70 <app_write_data_bytes>:
    @data: data buffer
    @len: data len
    @return 0 successful, other value if failed
*/
int app_write_data_bytes(void *app_ptr, u16 address, const u8 *data, int len)
{
     a70:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
     a72:	0004      	movs	r4, r0
     a74:	000f      	movs	r7, r1
     a76:	0015      	movs	r5, r2
     a78:	001e      	movs	r6, r3
    Writes a number of bytes to memory
    */
    upd_application_t *app = (upd_application_t *)app_ptr;
    int result;

    if (!VALID_APP(app) || !VALID_PTR(data) || len < 1)
     a7a:	2800      	cmp	r0, #0
     a7c:	d030      	beq.n	ae0 <app_write_data_bytes+0x70>
     a7e:	4b1c      	ldr	r3, [pc, #112]	; (af0 <app_write_data_bytes+0x80>)
     a80:	6802      	ldr	r2, [r0, #0]
     a82:	429a      	cmp	r2, r3
     a84:	d12c      	bne.n	ae0 <app_write_data_bytes+0x70>
     a86:	2d00      	cmp	r5, #0
     a88:	d02a      	beq.n	ae0 <app_write_data_bytes+0x70>
        return ERROR_PTR;
     a8a:	0028      	movs	r0, r5
    if (!VALID_APP(app) || !VALID_PTR(data) || len < 1)
     a8c:	1c6b      	adds	r3, r5, #1
     a8e:	d029      	beq.n	ae4 <app_write_data_bytes+0x74>
     a90:	2e00      	cmp	r6, #0
     a92:	dd25      	ble.n	ae0 <app_write_data_bytes+0x70>

    //DBG_INFO(APP_DEBUG, "<APP> Write bytes data(%d) addr: %hX", len, address);

    // Special-case of 1 byte
    if (len == 1) {
     a94:	2e01      	cmp	r6, #1
     a96:	d10d      	bne.n	ab4 <app_write_data_bytes+0x44>
        result = link_st(LINK(app), address, data[0]);
     a98:	782a      	ldrb	r2, [r5, #0]
     a9a:	6860      	ldr	r0, [r4, #4]
     a9c:	4b15      	ldr	r3, [pc, #84]	; (af4 <app_write_data_bytes+0x84>)
     a9e:	4798      	blx	r3
        if (result) {
     aa0:	2800      	cmp	r0, #0
     aa2:	d120      	bne.n	ae6 <app_write_data_bytes+0x76>
        //DBG_INFO(APP_DEBUG, "Write data length out of size %d", len);
        return -3;
    }

    // Store the address
    result = link_st_ptr(LINK(app), address);
     aa4:	0039      	movs	r1, r7
     aa6:	6860      	ldr	r0, [r4, #4]
     aa8:	4b13      	ldr	r3, [pc, #76]	; (af8 <app_write_data_bytes+0x88>)
     aaa:	4798      	blx	r3
    if (result) {
     aac:	2800      	cmp	r0, #0
     aae:	d007      	beq.n	ac0 <app_write_data_bytes+0x50>
        //DBG_INFO(APP_DEBUG, "link_st_ptr failed %d", result);
        return -4;
     ab0:	2004      	movs	r0, #4
     ab2:	e016      	b.n	ae2 <app_write_data_bytes+0x72>
    if (len > UPDI_MAX_REPEAT_SIZE + 1) {
     ab4:	2380      	movs	r3, #128	; 0x80
     ab6:	005b      	lsls	r3, r3, #1
     ab8:	429e      	cmp	r6, r3
     aba:	ddf3      	ble.n	aa4 <app_write_data_bytes+0x34>
        return -3;
     abc:	2003      	movs	r0, #3
     abe:	e010      	b.n	ae2 <app_write_data_bytes+0x72>
    }

    //Fire up the repeat
    result = link_repeat(LINK(app), len - 1);
     ac0:	1e71      	subs	r1, r6, #1
     ac2:	b2c9      	uxtb	r1, r1
     ac4:	6860      	ldr	r0, [r4, #4]
     ac6:	4b0d      	ldr	r3, [pc, #52]	; (afc <app_write_data_bytes+0x8c>)
     ac8:	4798      	blx	r3
    if (result) {
     aca:	2800      	cmp	r0, #0
     acc:	d10d      	bne.n	aea <app_write_data_bytes+0x7a>
        //DBG_INFO(APP_DEBUG, "link_repeat failed %d", result);
        return -5;
    }
 
    result = link_st_ptr_inc(LINK(app), data, len);
     ace:	0032      	movs	r2, r6
     ad0:	0029      	movs	r1, r5
     ad2:	6860      	ldr	r0, [r4, #4]
     ad4:	4b0a      	ldr	r3, [pc, #40]	; (b00 <app_write_data_bytes+0x90>)
     ad6:	4798      	blx	r3
    if (result) {
     ad8:	2800      	cmp	r0, #0
     ada:	d003      	beq.n	ae4 <app_write_data_bytes+0x74>
        //DBG_INFO(APP_DEBUG, "link_st_ptr_inc16 failed %d", result);
        return -6;
     adc:	2006      	movs	r0, #6
     ade:	e000      	b.n	ae2 <app_write_data_bytes+0x72>
        return ERROR_PTR;
     ae0:	2001      	movs	r0, #1
        return -6;
     ae2:	4240      	negs	r0, r0
    }

    return 0;
}
     ae4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
            return -2;
     ae6:	2002      	movs	r0, #2
     ae8:	e7fb      	b.n	ae2 <app_write_data_bytes+0x72>
        return -5;
     aea:	2005      	movs	r0, #5
     aec:	e7f9      	b.n	ae2 <app_write_data_bytes+0x72>
     aee:	46c0      	nop			; (mov r8, r8)
     af0:	0000b4b4 	.word	0x0000b4b4
     af4:	00000edd 	.word	0x00000edd
     af8:	00001075 	.word	0x00001075
     afc:	000011f1 	.word	0x000011f1
     b00:	000010cd 	.word	0x000010cd

00000b04 <app_write_data>:
    @len: data len
    @use_word_access: whether use 2 bytes mode for writing
    @return 0 successful, other value if failed
*/
int app_write_data(void *app_ptr, u16 address, const u8 *data, int len, bool use_word_access)
{
     b04:	b570      	push	{r4, r5, r6, lr}
     b06:	0004      	movs	r4, r0
     b08:	a804      	add	r0, sp, #16
     b0a:	7805      	ldrb	r5, [r0, #0]
    */
    int result;

    //DBG_INFO(APP_DEBUG, "<APP> Write data(%d)", len);

    if (!VALID_PTR(data) || len <= 0)
     b0c:	2a00      	cmp	r2, #0
     b0e:	d00b      	beq.n	b28 <app_write_data+0x24>
        return ERROR_PTR;
     b10:	0010      	movs	r0, r2
    if (!VALID_PTR(data) || len <= 0)
     b12:	1c56      	adds	r6, r2, #1
     b14:	d007      	beq.n	b26 <app_write_data+0x22>
     b16:	2b00      	cmp	r3, #0
     b18:	dd06      	ble.n	b28 <app_write_data+0x24>

    if (use_word_access)
        result = app_write_data_words(app_ptr, address, data, len);
     b1a:	0020      	movs	r0, r4
     b1c:	4c04      	ldr	r4, [pc, #16]	; (b30 <app_write_data+0x2c>)
    if (use_word_access)
     b1e:	2d00      	cmp	r5, #0
     b20:	d100      	bne.n	b24 <app_write_data+0x20>
    else
        result = app_write_data_bytes(app_ptr, address, data, len);
     b22:	4c04      	ldr	r4, [pc, #16]	; (b34 <app_write_data+0x30>)
     b24:	47a0      	blx	r4
    
    return result;
}
     b26:	bd70      	pop	{r4, r5, r6, pc}
        return ERROR_PTR;
     b28:	2001      	movs	r0, #1
     b2a:	4240      	negs	r0, r0
     b2c:	e7fb      	b.n	b26 <app_write_data+0x22>
     b2e:	46c0      	nop			; (mov r8, r8)
     b30:	000009d9 	.word	0x000009d9
     b34:	00000a71 	.word	0x00000a71

00000b38 <_app_write_nvm>:
    @len: data len
    @nvm_command: programming command
    @return 0 successful, other value if failed
*/
int _app_write_nvm(void *app_ptr, u16 address, const u8 *data, int len, u8 nvm_command, bool use_word_access)
{
     b38:	b5f0      	push	{r4, r5, r6, r7, lr}
     b3a:	b087      	sub	sp, #28
     b3c:	9303      	str	r3, [sp, #12]
     b3e:	ab0c      	add	r3, sp, #48	; 0x30
     b40:	781b      	ldrb	r3, [r3, #0]
     b42:	0004      	movs	r4, r0
     b44:	9304      	str	r3, [sp, #16]
     b46:	ab0d      	add	r3, sp, #52	; 0x34
     b48:	781b      	ldrb	r3, [r3, #0]
     b4a:	000f      	movs	r7, r1
     b4c:	9202      	str	r2, [sp, #8]
     b4e:	9305      	str	r3, [sp, #20]
        By default the PAGE_WRITE command is used, which requires that the page is already erased.
    */
    upd_application_t *app = (upd_application_t *)app_ptr;
    int result;

    if (!VALID_APP(app))
     b50:	2800      	cmp	r0, #0
     b52:	d02c      	beq.n	bae <_app_write_nvm+0x76>
     b54:	4b1d      	ldr	r3, [pc, #116]	; (bcc <_app_write_nvm+0x94>)
     b56:	6802      	ldr	r2, [r0, #0]
     b58:	429a      	cmp	r2, r3
     b5a:	d128      	bne.n	bae <_app_write_nvm+0x76>
        return ERROR_PTR;

    //DBG_INFO(APP_DEBUG, "<APP> Chip write nvm");

    // Check that NVM controller is ready
    result = app_wait_flash_ready(app, TIMEOUT_WAIT_FLASH_READY);
     b5c:	21fa      	movs	r1, #250	; 0xfa
     b5e:	4d1c      	ldr	r5, [pc, #112]	; (bd0 <_app_write_nvm+0x98>)
     b60:	0089      	lsls	r1, r1, #2
     b62:	47a8      	blx	r5
    if (result) {
     b64:	2800      	cmp	r0, #0
     b66:	d126      	bne.n	bb6 <_app_write_nvm+0x7e>

    // Erase write command will clear the buffer automantic
    
    //Clear the page buffer
    //DBG_INFO(APP_DEBUG, "Clear page buffer");
    result = app_execute_nvm_command(app, UPDI_NVMCTRL_CTRLA_PAGE_BUFFER_CLR);
     b68:	2104      	movs	r1, #4
     b6a:	0020      	movs	r0, r4
     b6c:	4e19      	ldr	r6, [pc, #100]	; (bd4 <_app_write_nvm+0x9c>)
     b6e:	47b0      	blx	r6
    if (result) {
     b70:	2800      	cmp	r0, #0
     b72:	d122      	bne.n	bba <_app_write_nvm+0x82>
        //DBG_INFO(APP_DEBUG, "app_execute_nvm_command failed %d", UPDI_NVMCTRL_CTRLA_PAGE_BUFFER_CLR, result);
        return -3;
    }

    // Waif for NVM controller to be ready
    result = app_wait_flash_ready(app, TIMEOUT_WAIT_FLASH_READY);
     b74:	21fa      	movs	r1, #250	; 0xfa
     b76:	0020      	movs	r0, r4
     b78:	0089      	lsls	r1, r1, #2
     b7a:	47a8      	blx	r5
    if (result) {
     b7c:	2800      	cmp	r0, #0
     b7e:	d11e      	bne.n	bbe <_app_write_nvm+0x86>
        //DBG_INFO(APP_DEBUG, "app_wait_flash_ready timeout after page buffer clear failed %d", result);
        return -4;
    }
    
    // Load the page buffer by writing directly to location
    result = app_write_data(app, address, data, len, use_word_access);
     b80:	9b05      	ldr	r3, [sp, #20]
     b82:	0039      	movs	r1, r7
     b84:	9300      	str	r3, [sp, #0]
     b86:	9a02      	ldr	r2, [sp, #8]
     b88:	9b03      	ldr	r3, [sp, #12]
     b8a:	0020      	movs	r0, r4
     b8c:	4f12      	ldr	r7, [pc, #72]	; (bd8 <_app_write_nvm+0xa0>)
     b8e:	47b8      	blx	r7
    if (result) {
     b90:	2800      	cmp	r0, #0
     b92:	d116      	bne.n	bc2 <_app_write_nvm+0x8a>
        return -5;
    }

    // Write the page to NVM, maybe erase first
    //DBG_INFO(APP_DEBUG, "Committing page");
    result = app_execute_nvm_command(app, nvm_command);
     b94:	9904      	ldr	r1, [sp, #16]
     b96:	0020      	movs	r0, r4
     b98:	47b0      	blx	r6
    if (result) {
     b9a:	2800      	cmp	r0, #0
     b9c:	d113      	bne.n	bc6 <_app_write_nvm+0x8e>
        //DBG_INFO(APP_DEBUG, "app_execute_nvm_command(%d) failed %d", nvm_command, result);
        return -6;
    }

    // Waif for NVM controller to be ready again
    result = app_wait_flash_ready(app, TIMEOUT_WAIT_FLASH_READY);
     b9e:	21fa      	movs	r1, #250	; 0xfa
     ba0:	0020      	movs	r0, r4
     ba2:	0089      	lsls	r1, r1, #2
     ba4:	47a8      	blx	r5
    if (result) {
     ba6:	2800      	cmp	r0, #0
     ba8:	d003      	beq.n	bb2 <_app_write_nvm+0x7a>
        //DBG_INFO(APP_DEBUG, "app_wait_flash_ready timeout after page write failed %d", result);
        return -7;
     baa:	2007      	movs	r0, #7
     bac:	e000      	b.n	bb0 <_app_write_nvm+0x78>
        return ERROR_PTR;
     bae:	2001      	movs	r0, #1
        return -7;
     bb0:	4240      	negs	r0, r0
    }

    return 0;
}
     bb2:	b007      	add	sp, #28
     bb4:	bdf0      	pop	{r4, r5, r6, r7, pc}
        return -2;
     bb6:	2002      	movs	r0, #2
     bb8:	e7fa      	b.n	bb0 <_app_write_nvm+0x78>
        return -3;
     bba:	2003      	movs	r0, #3
     bbc:	e7f8      	b.n	bb0 <_app_write_nvm+0x78>
        return -4;
     bbe:	2004      	movs	r0, #4
     bc0:	e7f6      	b.n	bb0 <_app_write_nvm+0x78>
        return -5;
     bc2:	2005      	movs	r0, #5
     bc4:	e7f4      	b.n	bb0 <_app_write_nvm+0x78>
        return -6;
     bc6:	2006      	movs	r0, #6
     bc8:	e7f2      	b.n	bb0 <_app_write_nvm+0x78>
     bca:	46c0      	nop			; (mov r8, r8)
     bcc:	0000b4b4 	.word	0x0000b4b4
     bd0:	00000725 	.word	0x00000725
     bd4:	00000789 	.word	0x00000789
     bd8:	00000b05 	.word	0x00000b05

00000bdc <app_write_nvm>:
    @data: data buffer
    @len: data len
    @return 0 successful, other value if failed
*/
int app_write_nvm(void *app_ptr, u16 address, const u8 *data, int len)
{
     bdc:	b537      	push	{r0, r1, r2, r4, r5, lr}
    bool use_word_access = !(len & 0x1);
     bde:	2401      	movs	r4, #1

    return _app_write_nvm(app_ptr, address, data, len, UPDI_NVMCTRL_CTRLA_WRITE_PAGE, use_word_access);
     be0:	0025      	movs	r5, r4
     be2:	439d      	bics	r5, r3
     be4:	9501      	str	r5, [sp, #4]
     be6:	9400      	str	r4, [sp, #0]
     be8:	4c01      	ldr	r4, [pc, #4]	; (bf0 <app_write_nvm+0x14>)
     bea:	47a0      	blx	r4
}
     bec:	bd3e      	pop	{r1, r2, r3, r4, r5, pc}
     bee:	46c0      	nop			; (mov r8, r8)
     bf0:	00000b39 	.word	0x00000b39

00000bf4 <updi_datalink_deinit>:
    LINK object destroy
    @link_ptr: APP object pointer, acquired from updi_datalink_init()
    @no return
*/
void updi_datalink_deinit(void *link_ptr)
{
     bf4:	b510      	push	{r4, lr}
    upd_datalink_t *link = (upd_datalink_t *)link_ptr;
    if (VALID_LINK(link)) {
     bf6:	2800      	cmp	r0, #0
     bf8:	d006      	beq.n	c08 <updi_datalink_deinit+0x14>
     bfa:	4b04      	ldr	r3, [pc, #16]	; (c0c <updi_datalink_deinit+0x18>)
     bfc:	6802      	ldr	r2, [r0, #0]
     bfe:	429a      	cmp	r2, r3
     c00:	d102      	bne.n	c08 <updi_datalink_deinit+0x14>
        //DBG_INFO(LINK_DEBUG, "<LINK> deinit link");

        updi_physical_deinit(PHY(link));
     c02:	6840      	ldr	r0, [r0, #4]
     c04:	4b02      	ldr	r3, [pc, #8]	; (c10 <updi_datalink_deinit+0x1c>)
     c06:	4798      	blx	r3
        //free(link);
    }
}
     c08:	bd10      	pop	{r4, pc}
     c0a:	46c0      	nop			; (mov r8, r8)
     c0c:	0000c3c3 	.word	0x0000c3c3
     c10:	0000153d 	.word	0x0000153d

00000c14 <_link_ldcs>:
    @address: reg address
    @data: output 8bit buffer
    @return 0 successful, other value if failed
*/
int _link_ldcs(void *link_ptr, u8 address, u8 *data)
{
     c14:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
    /*
        Load data from Control / Status space
        default return 0 if error
    */
    upd_datalink_t *link = (upd_datalink_t *)link_ptr;
    u8 cmd[] = { UPDI_PHY_SYNC, UPDI_LDCS | (address & 0x0F) };
     c16:	2355      	movs	r3, #85	; 0x55
     c18:	ac03      	add	r4, sp, #12
     c1a:	7023      	strb	r3, [r4, #0]
     c1c:	3b46      	subs	r3, #70	; 0x46
     c1e:	400b      	ands	r3, r1
     c20:	2180      	movs	r1, #128	; 0x80
     c22:	4249      	negs	r1, r1
     c24:	4319      	orrs	r1, r3
{
     c26:	0015      	movs	r5, r2
    u8 cmd[] = { UPDI_PHY_SYNC, UPDI_LDCS | (address & 0x0F) };
     c28:	7061      	strb	r1, [r4, #1]
    u8 resp;
    int result;

    if (!VALID_LINK(link) || !data)
     c2a:	2800      	cmp	r0, #0
     c2c:	d016      	beq.n	c5c <_link_ldcs+0x48>
     c2e:	4b0e      	ldr	r3, [pc, #56]	; (c68 <_link_ldcs+0x54>)
     c30:	6802      	ldr	r2, [r0, #0]
     c32:	429a      	cmp	r2, r3
     c34:	d112      	bne.n	c5c <_link_ldcs+0x48>
     c36:	2d00      	cmp	r5, #0
     c38:	d010      	beq.n	c5c <_link_ldcs+0x48>
        return ERROR_PTR;

    //DBG_INFO(LINK_DEBUG, "<LINK> LDCS from 0x%02x", address);
    result = phy_transfer(PHY(link), cmd, sizeof(cmd), &resp, sizeof(resp));
     c3a:	2301      	movs	r3, #1
     c3c:	260b      	movs	r6, #11
     c3e:	9300      	str	r3, [sp, #0]
     c40:	446e      	add	r6, sp
     c42:	0021      	movs	r1, r4
     c44:	0033      	movs	r3, r6
     c46:	2202      	movs	r2, #2
     c48:	6840      	ldr	r0, [r0, #4]
     c4a:	4c08      	ldr	r4, [pc, #32]	; (c6c <_link_ldcs+0x58>)
     c4c:	47a0      	blx	r4
     if (result != sizeof(resp)) {
     c4e:	2801      	cmp	r0, #1
     c50:	d107      	bne.n	c62 <_link_ldcs+0x4e>
    }

    
    *data = resp;

    return 0;
     c52:	2000      	movs	r0, #0
    *data = resp;
     c54:	7833      	ldrb	r3, [r6, #0]
     c56:	702b      	strb	r3, [r5, #0]
}
     c58:	b004      	add	sp, #16
     c5a:	bd70      	pop	{r4, r5, r6, pc}
        return ERROR_PTR;
     c5c:	2001      	movs	r0, #1
        return -2;
     c5e:	4240      	negs	r0, r0
     c60:	e7fa      	b.n	c58 <_link_ldcs+0x44>
     c62:	2002      	movs	r0, #2
     c64:	e7fb      	b.n	c5e <_link_ldcs+0x4a>
     c66:	46c0      	nop			; (mov r8, r8)
     c68:	0000c3c3 	.word	0x0000c3c3
     c6c:	00001831 	.word	0x00001831

00000c70 <link_check>:
{
     c70:	b573      	push	{r0, r1, r4, r5, r6, lr}
     c72:	1e04      	subs	r4, r0, #0
    if (!VALID_LINK(link))
     c74:	d018      	beq.n	ca8 <link_check+0x38>
     c76:	4b0d      	ldr	r3, [pc, #52]	; (cac <link_check+0x3c>)
     c78:	6802      	ldr	r2, [r0, #0]
     c7a:	429a      	cmp	r2, r3
     c7c:	d114      	bne.n	ca8 <link_check+0x38>
    result = _link_ldcs(link_ptr, UPDI_CS_STATUSB, &resp);
     c7e:	466b      	mov	r3, sp
     c80:	1ddd      	adds	r5, r3, #7
     c82:	2101      	movs	r1, #1
     c84:	002a      	movs	r2, r5
     c86:	4e0a      	ldr	r6, [pc, #40]	; (cb0 <link_check+0x40>)
     c88:	47b0      	blx	r6
     c8a:	1e01      	subs	r1, r0, #0
    if (result) {
     c8c:	d002      	beq.n	c94 <link_check+0x24>
        return -2;
     c8e:	2002      	movs	r0, #2
        return -3;
     c90:	4240      	negs	r0, r0
}
     c92:	bd76      	pop	{r1, r2, r4, r5, r6, pc}
    result = _link_ldcs(link_ptr, UPDI_CS_STATUSA, &resp);
     c94:	002a      	movs	r2, r5
     c96:	0020      	movs	r0, r4
     c98:	47b0      	blx	r6
    if (result) {
     c9a:	2800      	cmp	r0, #0
     c9c:	d1f7      	bne.n	c8e <link_check+0x1e>
    if (resp == 0) {
     c9e:	782b      	ldrb	r3, [r5, #0]
     ca0:	2b00      	cmp	r3, #0
     ca2:	d1f6      	bne.n	c92 <link_check+0x22>
        return -3;
     ca4:	2003      	movs	r0, #3
     ca6:	e7f3      	b.n	c90 <link_check+0x20>
        return ERROR_PTR;
     ca8:	2001      	movs	r0, #1
     caa:	e7f1      	b.n	c90 <link_check+0x20>
     cac:	0000c3c3 	.word	0x0000c3c3
     cb0:	00000c15 	.word	0x00000c15

00000cb4 <link_stcs>:
    @address: reg address
    @value: reg value
    @return 0 successful, other value if failed
*/
int link_stcs(void *link_ptr, u8 address, u8 value)
{
     cb4:	b513      	push	{r0, r1, r4, lr}
    /*
        Store a value to Control / Status space
    */
    upd_datalink_t *link = (upd_datalink_t *)link_ptr;
    u8 cmd[] = { UPDI_PHY_SYNC, UPDI_STCS | (address & 0x0F), value };
     cb6:	2455      	movs	r4, #85	; 0x55
     cb8:	ab01      	add	r3, sp, #4
     cba:	701c      	strb	r4, [r3, #0]
     cbc:	3c46      	subs	r4, #70	; 0x46
     cbe:	400c      	ands	r4, r1
     cc0:	2140      	movs	r1, #64	; 0x40
     cc2:	4249      	negs	r1, r1
     cc4:	4321      	orrs	r1, r4
     cc6:	7059      	strb	r1, [r3, #1]
     cc8:	709a      	strb	r2, [r3, #2]
    int result;

    if (!VALID_LINK(link))
     cca:	2800      	cmp	r0, #0
     ccc:	d00c      	beq.n	ce8 <link_stcs+0x34>
     cce:	4a08      	ldr	r2, [pc, #32]	; (cf0 <link_stcs+0x3c>)
     cd0:	6801      	ldr	r1, [r0, #0]
     cd2:	4291      	cmp	r1, r2
     cd4:	d108      	bne.n	ce8 <link_stcs+0x34>
        return ERROR_PTR;

    //DBG_INFO(LINK_DEBUG, "<LINK> STCS to 0x02x", address);

    result = phy_send(PHY(link), cmd, sizeof(cmd));
     cd6:	0019      	movs	r1, r3
     cd8:	2203      	movs	r2, #3
     cda:	6840      	ldr	r0, [r0, #4]
     cdc:	4b05      	ldr	r3, [pc, #20]	; (cf4 <link_stcs+0x40>)
     cde:	4798      	blx	r3
    if (result) {
     ce0:	2800      	cmp	r0, #0
     ce2:	d003      	beq.n	cec <link_stcs+0x38>
        //DBG_INFO(LINK_DEBUG, "phy_send failed %d", result);
        return -2;
     ce4:	2002      	movs	r0, #2
     ce6:	e000      	b.n	cea <link_stcs+0x36>
        return ERROR_PTR;
     ce8:	2001      	movs	r0, #1
        return -2;
     cea:	4240      	negs	r0, r0
    }

    return 0;
}
     cec:	bd16      	pop	{r1, r2, r4, pc}
     cee:	46c0      	nop			; (mov r8, r8)
     cf0:	0000c3c3 	.word	0x0000c3c3
     cf4:	0000164d 	.word	0x0000164d

00000cf8 <link_set_init>:
{
     cf8:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
    u8 clksel, resp = 0;
     cfa:	466b      	mov	r3, sp
     cfc:	1ddf      	adds	r7, r3, #7
     cfe:	2300      	movs	r3, #0
{
     d00:	0004      	movs	r4, r0
     d02:	000e      	movs	r6, r1
    u8 clksel, resp = 0;
     d04:	703b      	strb	r3, [r7, #0]
    if (!VALID_LINK(link))
     d06:	4298      	cmp	r0, r3
     d08:	d043      	beq.n	d92 <link_set_init+0x9a>
     d0a:	4b25      	ldr	r3, [pc, #148]	; (da0 <link_set_init+0xa8>)
     d0c:	6802      	ldr	r2, [r0, #0]
     d0e:	429a      	cmp	r2, r3
     d10:	d13f      	bne.n	d92 <link_set_init+0x9a>
    result = phy_set_baudrate(PHY(link), 115200);
     d12:	21e1      	movs	r1, #225	; 0xe1
     d14:	6840      	ldr	r0, [r0, #4]
     d16:	0249      	lsls	r1, r1, #9
     d18:	4b22      	ldr	r3, [pc, #136]	; (da4 <link_set_init+0xac>)
     d1a:	4798      	blx	r3
    if (result) {
     d1c:	2800      	cmp	r0, #0
     d1e:	d002      	beq.n	d26 <link_set_init+0x2e>
        return -4;
     d20:	2004      	movs	r0, #4
        return -2;
     d22:	4240      	negs	r0, r0
     d24:	e029      	b.n	d7a <link_set_init+0x82>
    result = link_stcs(link, UPDI_CS_CTRLB, 1 << UPDI_CTRLB_CCDETDIS_BIT);
     d26:	2208      	movs	r2, #8
     d28:	2103      	movs	r1, #3
     d2a:	0020      	movs	r0, r4
     d2c:	4d1e      	ldr	r5, [pc, #120]	; (da8 <link_set_init+0xb0>)
     d2e:	47a8      	blx	r5
    if (result) {
     d30:	2800      	cmp	r0, #0
     d32:	d130      	bne.n	d96 <link_set_init+0x9e>
    result = link_stcs(link, UPDI_CS_CTRLA, 1 << UPDI_CTRLA_IBDLY_BIT);
     d34:	2280      	movs	r2, #128	; 0x80
     d36:	2102      	movs	r1, #2
     d38:	0020      	movs	r0, r4
     d3a:	47a8      	blx	r5
    if (result) {
     d3c:	2800      	cmp	r0, #0
     d3e:	d12c      	bne.n	d9a <link_set_init+0xa2>
    if (baud <= 225000) {
     d40:	4b1a      	ldr	r3, [pc, #104]	; (dac <link_set_init+0xb4>)
     d42:	429e      	cmp	r6, r3
     d44:	dd08      	ble.n	d58 <link_set_init+0x60>
    else if (baud <= 450000) {
     d46:	4b1a      	ldr	r3, [pc, #104]	; (db0 <link_set_init+0xb8>)
     d48:	429e      	cmp	r6, r3
     d4a:	dd17      	ble.n	d7c <link_set_init+0x84>
    else if (baud <= 900000) {
     d4c:	4b19      	ldr	r3, [pc, #100]	; (db4 <link_set_init+0xbc>)
        clksel = UPDI_ASI_CTRLA_CLKSEL_16M;
     d4e:	2501      	movs	r5, #1
    else if (baud <= 900000) {
     d50:	429e      	cmp	r6, r3
     d52:	dd02      	ble.n	d5a <link_set_init+0x62>
        return -2;
     d54:	2002      	movs	r0, #2
     d56:	e7e4      	b.n	d22 <link_set_init+0x2a>
        clksel = UPDI_ASI_CTRLA_CLKSEL_4M;
     d58:	2503      	movs	r5, #3
    result = _link_ldcs(link_ptr, UPDI_ASI_CTRLA, &resp);
     d5a:	003a      	movs	r2, r7
     d5c:	2109      	movs	r1, #9
     d5e:	0020      	movs	r0, r4
     d60:	4b15      	ldr	r3, [pc, #84]	; (db8 <link_set_init+0xc0>)
     d62:	4798      	blx	r3
    if (result || resp != clksel) {
     d64:	2800      	cmp	r0, #0
     d66:	d10b      	bne.n	d80 <link_set_init+0x88>
     d68:	783b      	ldrb	r3, [r7, #0]
     d6a:	42ab      	cmp	r3, r5
     d6c:	d108      	bne.n	d80 <link_set_init+0x88>
    result = phy_set_baudrate(PHY(link), baud);
     d6e:	0031      	movs	r1, r6
     d70:	6860      	ldr	r0, [r4, #4]
     d72:	4b0c      	ldr	r3, [pc, #48]	; (da4 <link_set_init+0xac>)
     d74:	4798      	blx	r3
    if (result) {
     d76:	2800      	cmp	r0, #0
     d78:	d1d2      	bne.n	d20 <link_set_init+0x28>
}
     d7a:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
        clksel = UPDI_ASI_CTRLA_CLKSEL_8M;
     d7c:	2502      	movs	r5, #2
     d7e:	e7ec      	b.n	d5a <link_set_init+0x62>
        result = link_stcs(link, UPDI_ASI_CTRLA, clksel);
     d80:	002a      	movs	r2, r5
     d82:	2109      	movs	r1, #9
     d84:	0020      	movs	r0, r4
     d86:	4b08      	ldr	r3, [pc, #32]	; (da8 <link_set_init+0xb0>)
     d88:	4798      	blx	r3
        if (result) {
     d8a:	2800      	cmp	r0, #0
     d8c:	d0ef      	beq.n	d6e <link_set_init+0x76>
            return -3;
     d8e:	2003      	movs	r0, #3
     d90:	e7c7      	b.n	d22 <link_set_init+0x2a>
        return ERROR_PTR;
     d92:	2001      	movs	r0, #1
     d94:	e7c5      	b.n	d22 <link_set_init+0x2a>
        return -5;
     d96:	2005      	movs	r0, #5
     d98:	e7c3      	b.n	d22 <link_set_init+0x2a>
        return -6;
     d9a:	2006      	movs	r0, #6
     d9c:	e7c1      	b.n	d22 <link_set_init+0x2a>
     d9e:	46c0      	nop			; (mov r8, r8)
     da0:	0000c3c3 	.word	0x0000c3c3
     da4:	00001561 	.word	0x00001561
     da8:	00000cb5 	.word	0x00000cb5
     dac:	00036ee8 	.word	0x00036ee8
     db0:	0006ddd0 	.word	0x0006ddd0
     db4:	000dbba0 	.word	0x000dbba0
     db8:	00000c15 	.word	0x00000c15

00000dbc <updi_datalink_init>:
{
     dbc:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
     dbe:	9101      	str	r1, [sp, #4]
    phy = updi_physical_init(port, 115200);  //default baudrate first
     dc0:	21e1      	movs	r1, #225	; 0xe1
     dc2:	4b13      	ldr	r3, [pc, #76]	; (e10 <updi_datalink_init+0x54>)
     dc4:	0249      	lsls	r1, r1, #9
     dc6:	4798      	blx	r3
     dc8:	1e06      	subs	r6, r0, #0
    if (phy) {
     dca:	d019      	beq.n	e00 <updi_datalink_init+0x44>
        link->phy = (void *)phy;
     dcc:	2704      	movs	r7, #4
        link->mgwd = UPD_DATALINK_MAGIC_WORD;
     dce:	4c11      	ldr	r4, [pc, #68]	; (e14 <updi_datalink_init+0x58>)
     dd0:	4b11      	ldr	r3, [pc, #68]	; (e18 <updi_datalink_init+0x5c>)
        link->phy = (void *)phy;
     dd2:	6060      	str	r0, [r4, #4]
        link->mgwd = UPD_DATALINK_MAGIC_WORD;
     dd4:	6023      	str	r3, [r4, #0]
          result = link_set_init(link, baud);
     dd6:	9901      	ldr	r1, [sp, #4]
     dd8:	0020      	movs	r0, r4
     dda:	4b10      	ldr	r3, [pc, #64]	; (e1c <updi_datalink_init+0x60>)
     ddc:	4798      	blx	r3
     dde:	1e05      	subs	r5, r0, #0
          if (result) {
     de0:	d003      	beq.n	dea <updi_datalink_init+0x2e>
              phy_send_double_break(phy);
     de2:	0030      	movs	r0, r6
     de4:	4b0e      	ldr	r3, [pc, #56]	; (e20 <updi_datalink_init+0x64>)
     de6:	4798      	blx	r3
              continue;
     de8:	e004      	b.n	df4 <updi_datalink_init+0x38>
          result = link_check(link);
     dea:	0020      	movs	r0, r4
     dec:	4b0d      	ldr	r3, [pc, #52]	; (e24 <updi_datalink_init+0x68>)
     dee:	4798      	blx	r3
     df0:	1e05      	subs	r5, r0, #0
          if (result) {
     df2:	d1f6      	bne.n	de2 <updi_datalink_init+0x26>
     df4:	3f01      	subs	r7, #1
        }while(retry-- && result);
     df6:	2f00      	cmp	r7, #0
     df8:	d003      	beq.n	e02 <updi_datalink_init+0x46>
     dfa:	2d00      	cmp	r5, #0
     dfc:	d1eb      	bne.n	dd6 <updi_datalink_init+0x1a>
        link = &datalink;//(upd_datalink_t *)malloc(sizeof(*link));
     dfe:	0020      	movs	r0, r4
}
     e00:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
        link = &datalink;//(upd_datalink_t *)malloc(sizeof(*link));
     e02:	0020      	movs	r0, r4
        if (result) {
     e04:	2d00      	cmp	r5, #0
     e06:	d0fb      	beq.n	e00 <updi_datalink_init+0x44>
          updi_datalink_deinit(link);
     e08:	4b07      	ldr	r3, [pc, #28]	; (e28 <updi_datalink_init+0x6c>)
     e0a:	4798      	blx	r3
          return NULL;
     e0c:	0038      	movs	r0, r7
     e0e:	e7f7      	b.n	e00 <updi_datalink_init+0x44>
     e10:	00001771 	.word	0x00001771
     e14:	20000560 	.word	0x20000560
     e18:	0000c3c3 	.word	0x0000c3c3
     e1c:	00000cf9 	.word	0x00000cf9
     e20:	000016fd 	.word	0x000016fd
     e24:	00000c71 	.word	0x00000c71
     e28:	00000bf5 	.word	0x00000bf5

00000e2c <_link_ld>:
    @address: target address
    @val: output buffer
    @return 0 successful, other value if failed
*/
int _link_ld(void *link_ptr, u16 address, u8 *val)
{
     e2c:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
     e2e:	0015      	movs	r5, r2
    /*
        Load a single byte direct from a 16 - bit address
        return 0 if error
    */
    upd_datalink_t *link = (upd_datalink_t *)link_ptr;
    const u8 cmd[] = { UPDI_PHY_SYNC, UPDI_LDS | UPDI_ADDRESS_16 | UPDI_DATA_8, address & 0xFF, (address >> 8) & 0xFF};
     e30:	2355      	movs	r3, #85	; 0x55
     e32:	2204      	movs	r2, #4
     e34:	ac03      	add	r4, sp, #12
     e36:	70a1      	strb	r1, [r4, #2]
     e38:	0a09      	lsrs	r1, r1, #8
     e3a:	7023      	strb	r3, [r4, #0]
     e3c:	7062      	strb	r2, [r4, #1]
     e3e:	70e1      	strb	r1, [r4, #3]
    u8 resp;
    int result;

    if (!VALID_LINK(link) || !val)
     e40:	2800      	cmp	r0, #0
     e42:	d015      	beq.n	e70 <_link_ld+0x44>
     e44:	4b0d      	ldr	r3, [pc, #52]	; (e7c <_link_ld+0x50>)
     e46:	6801      	ldr	r1, [r0, #0]
     e48:	4299      	cmp	r1, r3
     e4a:	d111      	bne.n	e70 <_link_ld+0x44>
     e4c:	2d00      	cmp	r5, #0
     e4e:	d00f      	beq.n	e70 <_link_ld+0x44>
        return ERROR_PTR;

    //DBG_INFO(LINK_DEBUG, "<LINK> LD from %04X}", address);
  
    result = phy_transfer(PHY(link), cmd, sizeof(cmd), &resp, sizeof(resp));
     e50:	2301      	movs	r3, #1
     e52:	260b      	movs	r6, #11
     e54:	9300      	str	r3, [sp, #0]
     e56:	446e      	add	r6, sp
     e58:	0021      	movs	r1, r4
     e5a:	0033      	movs	r3, r6
     e5c:	6840      	ldr	r0, [r0, #4]
     e5e:	4c08      	ldr	r4, [pc, #32]	; (e80 <_link_ld+0x54>)
     e60:	47a0      	blx	r4
    if (result != sizeof(resp)) {
     e62:	2801      	cmp	r0, #1
     e64:	d107      	bne.n	e76 <_link_ld+0x4a>
        return -2;
    }

    *val = resp;

    return 0;
     e66:	2000      	movs	r0, #0
    *val = resp;
     e68:	7833      	ldrb	r3, [r6, #0]
     e6a:	702b      	strb	r3, [r5, #0]
}
     e6c:	b004      	add	sp, #16
     e6e:	bd70      	pop	{r4, r5, r6, pc}
        return ERROR_PTR;
     e70:	2001      	movs	r0, #1
        return -2;
     e72:	4240      	negs	r0, r0
     e74:	e7fa      	b.n	e6c <_link_ld+0x40>
     e76:	2002      	movs	r0, #2
     e78:	e7fb      	b.n	e72 <_link_ld+0x46>
     e7a:	46c0      	nop			; (mov r8, r8)
     e7c:	0000c3c3 	.word	0x0000c3c3
     e80:	00001831 	.word	0x00001831

00000e84 <_link_ld16>:
    @address: target address
    @val: output buffer
    @return 0 successful, other value if failed
*/
int _link_ld16(void *link_ptr, u16 address, u16 *val)
{
     e84:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
    /*
    Load a 2 byte direct from a 16 - bit address
    */
    upd_datalink_t *link = (upd_datalink_t *)link_ptr;
    const u8 cmd[] = { UPDI_PHY_SYNC , UPDI_LDS | UPDI_ADDRESS_16 | UPDI_DATA_16, address & 0xFF, (address >> 8) & 0xFF};
     e86:	2355      	movs	r3, #85	; 0x55
     e88:	ac03      	add	r4, sp, #12
     e8a:	7023      	strb	r3, [r4, #0]
     e8c:	70a1      	strb	r1, [r4, #2]
     e8e:	3b50      	subs	r3, #80	; 0x50
     e90:	0a09      	lsrs	r1, r1, #8
{
     e92:	0015      	movs	r5, r2
    const u8 cmd[] = { UPDI_PHY_SYNC , UPDI_LDS | UPDI_ADDRESS_16 | UPDI_DATA_16, address & 0xFF, (address >> 8) & 0xFF};
     e94:	7063      	strb	r3, [r4, #1]
     e96:	70e1      	strb	r1, [r4, #3]
    u8 resp[2];
    int result;

    if (!VALID_LINK(link))
     e98:	2800      	cmp	r0, #0
     e9a:	d016      	beq.n	eca <_link_ld16+0x46>
     e9c:	4b0d      	ldr	r3, [pc, #52]	; (ed4 <_link_ld16+0x50>)
     e9e:	6802      	ldr	r2, [r0, #0]
     ea0:	429a      	cmp	r2, r3
     ea2:	d112      	bne.n	eca <_link_ld16+0x46>
        return ERROR_PTR;

    //DBG_INFO(LINK_DEBUG, "<LINK> LD from %04X}", address);

    result = phy_transfer(PHY(link), cmd, sizeof(cmd), resp, sizeof(resp));
     ea4:	2302      	movs	r3, #2
     ea6:	ae02      	add	r6, sp, #8
     ea8:	9300      	str	r3, [sp, #0]
     eaa:	0021      	movs	r1, r4
     eac:	0033      	movs	r3, r6
     eae:	2204      	movs	r2, #4
     eb0:	6840      	ldr	r0, [r0, #4]
     eb2:	4c09      	ldr	r4, [pc, #36]	; (ed8 <_link_ld16+0x54>)
     eb4:	47a0      	blx	r4
    if (result != sizeof(resp)) {
     eb6:	2802      	cmp	r0, #2
     eb8:	d10a      	bne.n	ed0 <_link_ld16+0x4c>
        //DBG_INFO(LINK_DEBUG, "phy_transfer failed %d", result);
        return -2;
    }

    *val = resp[0] | (resp[1] << 8);
    return 0;
     eba:	2000      	movs	r0, #0
    *val = resp[0] | (resp[1] << 8);
     ebc:	7872      	ldrb	r2, [r6, #1]
     ebe:	7833      	ldrb	r3, [r6, #0]
     ec0:	0212      	lsls	r2, r2, #8
     ec2:	4313      	orrs	r3, r2
     ec4:	802b      	strh	r3, [r5, #0]
}
     ec6:	b004      	add	sp, #16
     ec8:	bd70      	pop	{r4, r5, r6, pc}
        return ERROR_PTR;
     eca:	2001      	movs	r0, #1
        return -2;
     ecc:	4240      	negs	r0, r0
     ece:	e7fa      	b.n	ec6 <_link_ld16+0x42>
     ed0:	2002      	movs	r0, #2
     ed2:	e7fb      	b.n	ecc <_link_ld16+0x48>
     ed4:	0000c3c3 	.word	0x0000c3c3
     ed8:	00001831 	.word	0x00001831

00000edc <link_st>:
{
    /*
        Store a single byte value directly to a 16 - bit address
    */
    upd_datalink_t *link = (upd_datalink_t *)link_ptr;
    const u8 cmd[] = { UPDI_PHY_SYNC, UPDI_STS | UPDI_ADDRESS_16 | UPDI_DATA_8, address & 0xFF, (address >> 8) & 0xFF};
     edc:	2355      	movs	r3, #85	; 0x55
{
     ede:	b5f0      	push	{r4, r5, r6, r7, lr}
    const u8 val[] = { value };
    u8 resp = 0xff;
     ee0:	240b      	movs	r4, #11
{
     ee2:	b085      	sub	sp, #20
     ee4:	0005      	movs	r5, r0
    const u8 cmd[] = { UPDI_PHY_SYNC, UPDI_STS | UPDI_ADDRESS_16 | UPDI_DATA_8, address & 0xFF, (address >> 8) & 0xFF};
     ee6:	a803      	add	r0, sp, #12
     ee8:	7003      	strb	r3, [r0, #0]
     eea:	3b11      	subs	r3, #17
     eec:	7043      	strb	r3, [r0, #1]
     eee:	7081      	strb	r1, [r0, #2]
    const u8 val[] = { value };
     ef0:	ae02      	add	r6, sp, #8
    const u8 cmd[] = { UPDI_PHY_SYNC, UPDI_STS | UPDI_ADDRESS_16 | UPDI_DATA_8, address & 0xFF, (address >> 8) & 0xFF};
     ef2:	0a09      	lsrs	r1, r1, #8
    u8 resp = 0xff;
     ef4:	446c      	add	r4, sp
     ef6:	33bb      	adds	r3, #187	; 0xbb
    const u8 cmd[] = { UPDI_PHY_SYNC, UPDI_STS | UPDI_ADDRESS_16 | UPDI_DATA_8, address & 0xFF, (address >> 8) & 0xFF};
     ef8:	70c1      	strb	r1, [r0, #3]
    const u8 val[] = { value };
     efa:	7032      	strb	r2, [r6, #0]
    u8 resp = 0xff;
     efc:	7023      	strb	r3, [r4, #0]
    int result;

    if (!VALID_LINK(link))
     efe:	2d00      	cmp	r5, #0
     f00:	d021      	beq.n	f46 <link_st+0x6a>
     f02:	4b12      	ldr	r3, [pc, #72]	; (f4c <link_st+0x70>)
     f04:	682a      	ldr	r2, [r5, #0]
     f06:	429a      	cmp	r2, r3
     f08:	d11d      	bne.n	f46 <link_st+0x6a>
        return ERROR_PTR;

    //DBG_INFO(LINK_DEBUG, "<LINK> ST to 0x04X: %02x", address, value);

    result = phy_transfer(PHY(link), cmd, sizeof(cmd), &resp, sizeof(resp));
     f0a:	2301      	movs	r3, #1
     f0c:	2204      	movs	r2, #4
     f0e:	9300      	str	r3, [sp, #0]
     f10:	0001      	movs	r1, r0
     f12:	0023      	movs	r3, r4
     f14:	6868      	ldr	r0, [r5, #4]
     f16:	4f0e      	ldr	r7, [pc, #56]	; (f50 <link_st+0x74>)
     f18:	47b8      	blx	r7
     f1a:	0002      	movs	r2, r0
    if (result != sizeof(resp) || resp != UPDI_PHY_ACK) {
     f1c:	2801      	cmp	r0, #1
     f1e:	d002      	beq.n	f26 <link_st+0x4a>
        //DBG_INFO(LINK_DEBUG, "phy_transfer failed %d ack %02x", result, resp);
        return -2;
     f20:	2002      	movs	r0, #2
        return ERROR_PTR;
     f22:	4240      	negs	r0, r0
     f24:	e00d      	b.n	f42 <link_st+0x66>
    if (result != sizeof(resp) || resp != UPDI_PHY_ACK) {
     f26:	7823      	ldrb	r3, [r4, #0]
     f28:	2b40      	cmp	r3, #64	; 0x40
     f2a:	d1f9      	bne.n	f20 <link_st+0x44>
    }

    result = phy_transfer(PHY(link), val, sizeof(val), &resp, sizeof(resp));
     f2c:	9000      	str	r0, [sp, #0]
     f2e:	0023      	movs	r3, r4
     f30:	0031      	movs	r1, r6
     f32:	6868      	ldr	r0, [r5, #4]
     f34:	47b8      	blx	r7
    if (result != sizeof(resp) || resp != UPDI_PHY_ACK) {
     f36:	2801      	cmp	r0, #1
     f38:	d1f2      	bne.n	f20 <link_st+0x44>
     f3a:	7823      	ldrb	r3, [r4, #0]
        //DBG_INFO(LINK_DEBUG, "phy_transfer #2 failed %d ack %02x", result, resp);
        return -2;
    }

    return 0;
     f3c:	2000      	movs	r0, #0
    if (result != sizeof(resp) || resp != UPDI_PHY_ACK) {
     f3e:	2b40      	cmp	r3, #64	; 0x40
     f40:	d1ee      	bne.n	f20 <link_st+0x44>
}
     f42:	b005      	add	sp, #20
     f44:	bdf0      	pop	{r4, r5, r6, r7, pc}
        return ERROR_PTR;
     f46:	2001      	movs	r0, #1
     f48:	e7eb      	b.n	f22 <link_st+0x46>
     f4a:	46c0      	nop			; (mov r8, r8)
     f4c:	0000c3c3 	.word	0x0000c3c3
     f50:	00001831 	.word	0x00001831

00000f54 <link_st16>:
{
    /*
        Store a 16 - bit word value directly to a 16 - bit address
    */
    upd_datalink_t *link = (upd_datalink_t *)link_ptr;
    const u8 cmd[] = { UPDI_PHY_SYNC, UPDI_STS | UPDI_ADDRESS_16 | UPDI_DATA_16, address & 0xFF, (address >> 8) & 0xFF };
     f54:	2355      	movs	r3, #85	; 0x55
{
     f56:	b5f0      	push	{r4, r5, r6, r7, lr}
    const u8 val[] = { value & 0xFF, (value >> 8) & 0xFF };
    u8 resp = 0xff;
     f58:	240f      	movs	r4, #15
{
     f5a:	b087      	sub	sp, #28
     f5c:	0005      	movs	r5, r0
    const u8 cmd[] = { UPDI_PHY_SYNC, UPDI_STS | UPDI_ADDRESS_16 | UPDI_DATA_16, address & 0xFF, (address >> 8) & 0xFF };
     f5e:	a805      	add	r0, sp, #20
    const u8 val[] = { value & 0xFF, (value >> 8) & 0xFF };
     f60:	ae04      	add	r6, sp, #16
    const u8 cmd[] = { UPDI_PHY_SYNC, UPDI_STS | UPDI_ADDRESS_16 | UPDI_DATA_16, address & 0xFF, (address >> 8) & 0xFF };
     f62:	7003      	strb	r3, [r0, #0]
     f64:	3b10      	subs	r3, #16
     f66:	7043      	strb	r3, [r0, #1]
     f68:	7081      	strb	r1, [r0, #2]
    const u8 val[] = { value & 0xFF, (value >> 8) & 0xFF };
     f6a:	7032      	strb	r2, [r6, #0]
    const u8 cmd[] = { UPDI_PHY_SYNC, UPDI_STS | UPDI_ADDRESS_16 | UPDI_DATA_16, address & 0xFF, (address >> 8) & 0xFF };
     f6c:	0a09      	lsrs	r1, r1, #8
    const u8 val[] = { value & 0xFF, (value >> 8) & 0xFF };
     f6e:	0a12      	lsrs	r2, r2, #8
    u8 resp = 0xff;
     f70:	446c      	add	r4, sp
     f72:	33ba      	adds	r3, #186	; 0xba
    const u8 cmd[] = { UPDI_PHY_SYNC, UPDI_STS | UPDI_ADDRESS_16 | UPDI_DATA_16, address & 0xFF, (address >> 8) & 0xFF };
     f74:	70c1      	strb	r1, [r0, #3]
    const u8 val[] = { value & 0xFF, (value >> 8) & 0xFF };
     f76:	7072      	strb	r2, [r6, #1]
    u8 resp = 0xff;
     f78:	7023      	strb	r3, [r4, #0]
    int result;

    if (!VALID_LINK(link))
     f7a:	2d00      	cmp	r5, #0
     f7c:	d021      	beq.n	fc2 <link_st16+0x6e>
     f7e:	4b12      	ldr	r3, [pc, #72]	; (fc8 <link_st16+0x74>)
     f80:	682a      	ldr	r2, [r5, #0]
     f82:	429a      	cmp	r2, r3
     f84:	d11d      	bne.n	fc2 <link_st16+0x6e>
        return ERROR_PTR;

    //DBG_INFO(LINK_DEBUG, "<LINK> ST16 to 0x04X: %04x", address, value);

    result = phy_transfer(PHY(link), cmd, sizeof(cmd), &resp, sizeof(resp));
     f86:	2301      	movs	r3, #1
     f88:	0001      	movs	r1, r0
     f8a:	9300      	str	r3, [sp, #0]
     f8c:	2204      	movs	r2, #4
     f8e:	0023      	movs	r3, r4
     f90:	6868      	ldr	r0, [r5, #4]
     f92:	4f0e      	ldr	r7, [pc, #56]	; (fcc <link_st16+0x78>)
     f94:	47b8      	blx	r7
    if (result != sizeof(resp) || resp != UPDI_PHY_ACK) {
     f96:	2801      	cmp	r0, #1
     f98:	d002      	beq.n	fa0 <link_st16+0x4c>
        //DBG_INFO(LINK_DEBUG, "phy_transfer failed %d ack %02x", result, resp);
        return -2;
     f9a:	2002      	movs	r0, #2
        return ERROR_PTR;
     f9c:	4240      	negs	r0, r0
     f9e:	e00e      	b.n	fbe <link_st16+0x6a>
    if (result != sizeof(resp) || resp != UPDI_PHY_ACK) {
     fa0:	7823      	ldrb	r3, [r4, #0]
     fa2:	2b40      	cmp	r3, #64	; 0x40
     fa4:	d1f9      	bne.n	f9a <link_st16+0x46>
    }

    result = phy_transfer(PHY(link), val, sizeof(val), &resp, sizeof(resp));
     fa6:	9000      	str	r0, [sp, #0]
     fa8:	0023      	movs	r3, r4
     faa:	2202      	movs	r2, #2
     fac:	0031      	movs	r1, r6
     fae:	6868      	ldr	r0, [r5, #4]
     fb0:	47b8      	blx	r7
    if (result != sizeof(resp) || resp != UPDI_PHY_ACK) {
     fb2:	2801      	cmp	r0, #1
     fb4:	d1f1      	bne.n	f9a <link_st16+0x46>
     fb6:	7823      	ldrb	r3, [r4, #0]
        //DBG_INFO(LINK_DEBUG, "phy_transfer #2 failed %d ack %02x", result, resp);
        return -2;
    }

    return 0;
     fb8:	2000      	movs	r0, #0
    if (result != sizeof(resp) || resp != UPDI_PHY_ACK) {
     fba:	2b40      	cmp	r3, #64	; 0x40
     fbc:	d1ed      	bne.n	f9a <link_st16+0x46>
}
     fbe:	b007      	add	sp, #28
     fc0:	bdf0      	pop	{r4, r5, r6, r7, pc}
        return ERROR_PTR;
     fc2:	2001      	movs	r0, #1
     fc4:	e7ea      	b.n	f9c <link_st16+0x48>
     fc6:	46c0      	nop			; (mov r8, r8)
     fc8:	0000c3c3 	.word	0x0000c3c3
     fcc:	00001831 	.word	0x00001831

00000fd0 <link_ld_ptr_inc>:
    @data: data output buffer
    @len: data length to be read
    @return 0 successful, other value if failed
*/
int link_ld_ptr_inc(void *link_ptr, u8 *data, int len)
{
     fd0:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
     fd2:	0004      	movs	r4, r0
     fd4:	000e      	movs	r6, r1
     fd6:	0015      	movs	r5, r2
    /*
        Loads a number of bytes from the pointer location with pointer post - increment
    */
    upd_datalink_t *link = (upd_datalink_t *)link_ptr;
    const u8 cmd[] = { UPDI_PHY_SYNC, UPDI_LD | UPDI_PTR_INC | UPDI_DATA_8 };
     fd8:	490d      	ldr	r1, [pc, #52]	; (1010 <link_ld_ptr_inc+0x40>)
     fda:	2202      	movs	r2, #2
     fdc:	a803      	add	r0, sp, #12
     fde:	4b0d      	ldr	r3, [pc, #52]	; (1014 <link_ld_ptr_inc+0x44>)
     fe0:	4798      	blx	r3
    int result;

    if (!VALID_LINK(link))
     fe2:	2c00      	cmp	r4, #0
     fe4:	d00f      	beq.n	1006 <link_ld_ptr_inc+0x36>
     fe6:	4b0c      	ldr	r3, [pc, #48]	; (1018 <link_ld_ptr_inc+0x48>)
     fe8:	6822      	ldr	r2, [r4, #0]
     fea:	429a      	cmp	r2, r3
     fec:	d10b      	bne.n	1006 <link_ld_ptr_inc+0x36>
        return ERROR_PTR;

    //DBG_INFO(LINK_DEBUG, "<LINK> LD8 from ptr++");
 
    result = phy_transfer(PHY(link), cmd, sizeof(cmd), data, len);
     fee:	9500      	str	r5, [sp, #0]
     ff0:	6860      	ldr	r0, [r4, #4]
     ff2:	0033      	movs	r3, r6
     ff4:	2202      	movs	r2, #2
     ff6:	a903      	add	r1, sp, #12
     ff8:	4c08      	ldr	r4, [pc, #32]	; (101c <link_ld_ptr_inc+0x4c>)
     ffa:	47a0      	blx	r4
    if (result != len) {
     ffc:	4285      	cmp	r5, r0
     ffe:	d105      	bne.n	100c <link_ld_ptr_inc+0x3c>
        //DBG_INFO(LINK_DEBUG, "phy_transfer failed %d", result);
        return -2;
    }

    return 0;
    1000:	2000      	movs	r0, #0
}
    1002:	b004      	add	sp, #16
    1004:	bd70      	pop	{r4, r5, r6, pc}
        return ERROR_PTR;
    1006:	2001      	movs	r0, #1
        return -2;
    1008:	4240      	negs	r0, r0
    100a:	e7fa      	b.n	1002 <link_ld_ptr_inc+0x32>
    100c:	2002      	movs	r0, #2
    100e:	e7fb      	b.n	1008 <link_ld_ptr_inc+0x38>
    1010:	00004f71 	.word	0x00004f71
    1014:	000030b5 	.word	0x000030b5
    1018:	0000c3c3 	.word	0x0000c3c3
    101c:	00001831 	.word	0x00001831

00001020 <link_ld_ptr_inc16>:
    @data: data output buffer
    @len: data length to be read
    @return 0 successful, other value if failed
*/
int link_ld_ptr_inc16(void *link_ptr, u8 *data, int len)
{
    1020:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
    1022:	0015      	movs	r5, r2
    /*
        Load a 16-bit word value from the pointer location with pointer post-increment
    */
    upd_datalink_t *link = (upd_datalink_t *)link_ptr;
    const u8 cmd[] = { UPDI_PHY_SYNC, UPDI_LD | UPDI_PTR_INC | UPDI_DATA_16 };
    1024:	2202      	movs	r2, #2
{
    1026:	000e      	movs	r6, r1
    const u8 cmd[] = { UPDI_PHY_SYNC, UPDI_LD | UPDI_PTR_INC | UPDI_DATA_16 };
    1028:	490e      	ldr	r1, [pc, #56]	; (1064 <link_ld_ptr_inc16+0x44>)
{
    102a:	0004      	movs	r4, r0
    const u8 cmd[] = { UPDI_PHY_SYNC, UPDI_LD | UPDI_PTR_INC | UPDI_DATA_16 };
    102c:	1889      	adds	r1, r1, r2
    102e:	a803      	add	r0, sp, #12
    1030:	4b0d      	ldr	r3, [pc, #52]	; (1068 <link_ld_ptr_inc16+0x48>)
    1032:	4798      	blx	r3
    int result;

    if (!VALID_LINK(link))
    1034:	2c00      	cmp	r4, #0
    1036:	d00f      	beq.n	1058 <link_ld_ptr_inc16+0x38>
    1038:	4b0c      	ldr	r3, [pc, #48]	; (106c <link_ld_ptr_inc16+0x4c>)
    103a:	6822      	ldr	r2, [r4, #0]
    103c:	429a      	cmp	r2, r3
    103e:	d10b      	bne.n	1058 <link_ld_ptr_inc16+0x38>
        return ERROR_PTR;

    //DBG_INFO(LINK_DEBUG, "<LINK> LD16 from ptr++");

    result = phy_transfer(PHY(link), cmd, sizeof(cmd), data, len);
    1040:	9500      	str	r5, [sp, #0]
    1042:	6860      	ldr	r0, [r4, #4]
    1044:	0033      	movs	r3, r6
    1046:	2202      	movs	r2, #2
    1048:	a903      	add	r1, sp, #12
    104a:	4c09      	ldr	r4, [pc, #36]	; (1070 <link_ld_ptr_inc16+0x50>)
    104c:	47a0      	blx	r4
    if (result != len) {
    104e:	4285      	cmp	r5, r0
    1050:	d105      	bne.n	105e <link_ld_ptr_inc16+0x3e>
        //DBG_INFO(LINK_DEBUG, "phy_transfer failed %d", result);
        return -2;
    }

    return 0;
    1052:	2000      	movs	r0, #0
}
    1054:	b004      	add	sp, #16
    1056:	bd70      	pop	{r4, r5, r6, pc}
        return ERROR_PTR;
    1058:	2001      	movs	r0, #1
        return -2;
    105a:	4240      	negs	r0, r0
    105c:	e7fa      	b.n	1054 <link_ld_ptr_inc16+0x34>
    105e:	2002      	movs	r0, #2
    1060:	e7fb      	b.n	105a <link_ld_ptr_inc16+0x3a>
    1062:	46c0      	nop			; (mov r8, r8)
    1064:	00004f71 	.word	0x00004f71
    1068:	000030b5 	.word	0x000030b5
    106c:	0000c3c3 	.word	0x0000c3c3
    1070:	00001831 	.word	0x00001831

00001074 <link_st_ptr>:
{
    /*
        Set the pointer location
    */
    upd_datalink_t *link = (upd_datalink_t *)link_ptr;
    const u8 cmd[] = { UPDI_PHY_SYNC, UPDI_ST | UPDI_PTR_ADDRESS | UPDI_DATA_16, address & 0xFF, (address >> 8) & 0xFF };
    1074:	2355      	movs	r3, #85	; 0x55
{
    1076:	b530      	push	{r4, r5, lr}
    u8 resp = 0xFF;
    1078:	250b      	movs	r5, #11
{
    107a:	b085      	sub	sp, #20
    const u8 cmd[] = { UPDI_PHY_SYNC, UPDI_ST | UPDI_PTR_ADDRESS | UPDI_DATA_16, address & 0xFF, (address >> 8) & 0xFF };
    107c:	ac03      	add	r4, sp, #12
    107e:	7023      	strb	r3, [r4, #0]
    1080:	3314      	adds	r3, #20
    1082:	7063      	strb	r3, [r4, #1]
    1084:	70a1      	strb	r1, [r4, #2]
    u8 resp = 0xFF;
    1086:	446d      	add	r5, sp
    const u8 cmd[] = { UPDI_PHY_SYNC, UPDI_ST | UPDI_PTR_ADDRESS | UPDI_DATA_16, address & 0xFF, (address >> 8) & 0xFF };
    1088:	0a09      	lsrs	r1, r1, #8
    u8 resp = 0xFF;
    108a:	3396      	adds	r3, #150	; 0x96
    const u8 cmd[] = { UPDI_PHY_SYNC, UPDI_ST | UPDI_PTR_ADDRESS | UPDI_DATA_16, address & 0xFF, (address >> 8) & 0xFF };
    108c:	70e1      	strb	r1, [r4, #3]
    u8 resp = 0xFF;
    108e:	702b      	strb	r3, [r5, #0]
    int result;

    if (!VALID_LINK(link))
    1090:	2800      	cmp	r0, #0
    1092:	d013      	beq.n	10bc <link_st_ptr+0x48>
    1094:	4b0b      	ldr	r3, [pc, #44]	; (10c4 <link_st_ptr+0x50>)
    1096:	6802      	ldr	r2, [r0, #0]
    1098:	429a      	cmp	r2, r3
    109a:	d10f      	bne.n	10bc <link_st_ptr+0x48>
        return ERROR_PTR;

    //DBG_INFO(LINK_DEBUG, "<LINK> ST ptr %x", address);

    result = phy_transfer(PHY(link), cmd, sizeof(cmd), &resp, sizeof(resp));
    109c:	2301      	movs	r3, #1
    109e:	9300      	str	r3, [sp, #0]
    10a0:	0021      	movs	r1, r4
    10a2:	002b      	movs	r3, r5
    10a4:	2204      	movs	r2, #4
    10a6:	6840      	ldr	r0, [r0, #4]
    10a8:	4c07      	ldr	r4, [pc, #28]	; (10c8 <link_st_ptr+0x54>)
    10aa:	47a0      	blx	r4
    if (result != sizeof(resp) || resp != UPDI_PHY_ACK) {
    10ac:	2801      	cmp	r0, #1
    10ae:	d103      	bne.n	10b8 <link_st_ptr+0x44>
    10b0:	782b      	ldrb	r3, [r5, #0]
        //DBG_INFO(LINK_DEBUG, "phy_transfer failed %d resp = 0x%02x", result, resp);
        return -2;
    }

    return 0;
    10b2:	2000      	movs	r0, #0
    if (result != sizeof(resp) || resp != UPDI_PHY_ACK) {
    10b4:	2b40      	cmp	r3, #64	; 0x40
    10b6:	d003      	beq.n	10c0 <link_st_ptr+0x4c>
        return -2;
    10b8:	2002      	movs	r0, #2
    10ba:	e000      	b.n	10be <link_st_ptr+0x4a>
        return ERROR_PTR;
    10bc:	2001      	movs	r0, #1
        return -2;
    10be:	4240      	negs	r0, r0
}
    10c0:	b005      	add	sp, #20
    10c2:	bd30      	pop	{r4, r5, pc}
    10c4:	0000c3c3 	.word	0x0000c3c3
    10c8:	00001831 	.word	0x00001831

000010cc <link_st_ptr_inc>:
{
    /*
        Store data to the pointer location with pointer post - increment
    */
    upd_datalink_t *link = (upd_datalink_t *)link_ptr;
    const u8 cmd[] = { UPDI_PHY_SYNC, UPDI_ST | UPDI_PTR_INC | UPDI_DATA_8, data[0] };
    10cc:	2355      	movs	r3, #85	; 0x55
{
    10ce:	b5f0      	push	{r4, r5, r6, r7, lr}
    10d0:	000e      	movs	r6, r1
    10d2:	b089      	sub	sp, #36	; 0x24
    const u8 cmd[] = { UPDI_PHY_SYNC, UPDI_ST | UPDI_PTR_INC | UPDI_DATA_8, data[0] };
    10d4:	a907      	add	r1, sp, #28
    10d6:	700b      	strb	r3, [r1, #0]
    10d8:	330f      	adds	r3, #15
    10da:	704b      	strb	r3, [r1, #1]
    10dc:	7833      	ldrb	r3, [r6, #0]
{
    10de:	1e05      	subs	r5, r0, #0
    10e0:	9204      	str	r2, [sp, #16]
    const u8 cmd[] = { UPDI_PHY_SYNC, UPDI_ST | UPDI_PTR_INC | UPDI_DATA_8, data[0] };
    10e2:	708b      	strb	r3, [r1, #2]
    u8 resp;
    int i;
    int result;

    if (!VALID_LINK(link))
    10e4:	d032      	beq.n	114c <link_st_ptr_inc+0x80>
    10e6:	4b1a      	ldr	r3, [pc, #104]	; (1150 <link_st_ptr_inc+0x84>)
    10e8:	6802      	ldr	r2, [r0, #0]
    10ea:	429a      	cmp	r2, r3
    10ec:	d12e      	bne.n	114c <link_st_ptr_inc+0x80>
        return ERROR_PTR;

    //DBG_INFO(LINK_DEBUG, "<LINK> ST8 to *ptr++");

    result = phy_transfer(PHY(link), cmd, sizeof(cmd), &resp, sizeof(resp));
    10ee:	240b      	movs	r4, #11
    10f0:	ab04      	add	r3, sp, #16
    10f2:	18e4      	adds	r4, r4, r3
    10f4:	2301      	movs	r3, #1
    10f6:	9300      	str	r3, [sp, #0]
    10f8:	2203      	movs	r2, #3
    10fa:	0023      	movs	r3, r4
    10fc:	6840      	ldr	r0, [r0, #4]
    10fe:	4f15      	ldr	r7, [pc, #84]	; (1154 <link_st_ptr_inc+0x88>)
    1100:	47b8      	blx	r7
    if (result != sizeof(resp) || resp != UPDI_PHY_ACK) {
    1102:	2801      	cmp	r0, #1
    1104:	d002      	beq.n	110c <link_st_ptr_inc+0x40>
        //DBG_INFO(LINK_DEBUG, "phy_transfer failed %d resp 0x%02x", result, resp);
        return -2;
    1106:	2002      	movs	r0, #2
        return ERROR_PTR;
    1108:	4240      	negs	r0, r0
    110a:	e009      	b.n	1120 <link_st_ptr_inc+0x54>
    if (result != sizeof(resp) || resp != UPDI_PHY_ACK) {
    110c:	7823      	ldrb	r3, [r4, #0]
    110e:	2b40      	cmp	r3, #64	; 0x40
    1110:	d1f9      	bne.n	1106 <link_st_ptr_inc+0x3a>
    1112:	1c74      	adds	r4, r6, #1
    }

    for (i = 1; i < len; i++) {
        result = phy_transfer(PHY(link), &data[i], 1, &resp, sizeof(resp));
    1114:	9005      	str	r0, [sp, #20]
    for (i = 1; i < len; i++) {
    1116:	9a04      	ldr	r2, [sp, #16]
    1118:	1ba3      	subs	r3, r4, r6
    111a:	429a      	cmp	r2, r3
    111c:	dc02      	bgt.n	1124 <link_st_ptr_inc+0x58>
            //DBG_INFO(LINK_DEBUG, "phy_transfer failed %d i %d resp 0x%02x", result, i, resp);
            return -2;
        }
    }

    return 0;
    111e:	2000      	movs	r0, #0
}
    1120:	b009      	add	sp, #36	; 0x24
    1122:	bdf0      	pop	{r4, r5, r6, r7, pc}
        result = phy_transfer(PHY(link), &data[i], 1, &resp, sizeof(resp));
    1124:	270b      	movs	r7, #11
    1126:	ab04      	add	r3, sp, #16
    1128:	18ff      	adds	r7, r7, r3
    112a:	9b05      	ldr	r3, [sp, #20]
    112c:	9703      	str	r7, [sp, #12]
    112e:	9300      	str	r3, [sp, #0]
    1130:	2201      	movs	r2, #1
    1132:	003b      	movs	r3, r7
    1134:	0021      	movs	r1, r4
    1136:	6868      	ldr	r0, [r5, #4]
    1138:	4f06      	ldr	r7, [pc, #24]	; (1154 <link_st_ptr_inc+0x88>)
    113a:	47b8      	blx	r7
        if (result != sizeof(resp) || resp != UPDI_PHY_ACK) {
    113c:	2801      	cmp	r0, #1
    113e:	d1e2      	bne.n	1106 <link_st_ptr_inc+0x3a>
    1140:	9b03      	ldr	r3, [sp, #12]
    1142:	3401      	adds	r4, #1
    1144:	781b      	ldrb	r3, [r3, #0]
    1146:	2b40      	cmp	r3, #64	; 0x40
    1148:	d0e5      	beq.n	1116 <link_st_ptr_inc+0x4a>
    114a:	e7dc      	b.n	1106 <link_st_ptr_inc+0x3a>
        return ERROR_PTR;
    114c:	2001      	movs	r0, #1
    114e:	e7db      	b.n	1108 <link_st_ptr_inc+0x3c>
    1150:	0000c3c3 	.word	0x0000c3c3
    1154:	00001831 	.word	0x00001831

00001158 <link_st_ptr_inc16>:
{
    /*
        Store a 16 - bit word value to the pointer location with pointer post - increment
    */
    upd_datalink_t *link = (upd_datalink_t *)link_ptr;
    const u8 cmd[] = { UPDI_PHY_SYNC, UPDI_ST | UPDI_PTR_INC | UPDI_DATA_16, data[0], data[1] };
    1158:	2355      	movs	r3, #85	; 0x55
{
    115a:	b5f0      	push	{r4, r5, r6, r7, lr}
    115c:	000c      	movs	r4, r1
    u8 resp = 0xFF;
    115e:	250b      	movs	r5, #11
{
    1160:	b089      	sub	sp, #36	; 0x24
    const u8 cmd[] = { UPDI_PHY_SYNC, UPDI_ST | UPDI_PTR_INC | UPDI_DATA_16, data[0], data[1] };
    1162:	a907      	add	r1, sp, #28
    1164:	700b      	strb	r3, [r1, #0]
    1166:	3310      	adds	r3, #16
    1168:	704b      	strb	r3, [r1, #1]
    116a:	7823      	ldrb	r3, [r4, #0]
{
    116c:	0006      	movs	r6, r0
    const u8 cmd[] = { UPDI_PHY_SYNC, UPDI_ST | UPDI_PTR_INC | UPDI_DATA_16, data[0], data[1] };
    116e:	708b      	strb	r3, [r1, #2]
    1170:	7863      	ldrb	r3, [r4, #1]
{
    1172:	9204      	str	r2, [sp, #16]
    const u8 cmd[] = { UPDI_PHY_SYNC, UPDI_ST | UPDI_PTR_INC | UPDI_DATA_16, data[0], data[1] };
    1174:	70cb      	strb	r3, [r1, #3]
    u8 resp = 0xFF;
    1176:	ab04      	add	r3, sp, #16
    1178:	18ed      	adds	r5, r5, r3
    117a:	23ff      	movs	r3, #255	; 0xff
    117c:	702b      	strb	r3, [r5, #0]
    int i;
    int result;

    if (!VALID_LINK(link))
    117e:	2800      	cmp	r0, #0
    1180:	d02d      	beq.n	11de <link_st_ptr_inc16+0x86>
    1182:	4b19      	ldr	r3, [pc, #100]	; (11e8 <link_st_ptr_inc16+0x90>)
    1184:	6802      	ldr	r2, [r0, #0]
    1186:	429a      	cmp	r2, r3
    1188:	d129      	bne.n	11de <link_st_ptr_inc16+0x86>
        return ERROR_PTR;

    //DBG_INFO(LINK_DEBUG, "<LINK> ST16 to *ptr++");

    result = phy_transfer(PHY(link), cmd, sizeof(cmd), &resp, sizeof(resp));
    118a:	2301      	movs	r3, #1
    118c:	9300      	str	r3, [sp, #0]
    118e:	2204      	movs	r2, #4
    1190:	002b      	movs	r3, r5
    1192:	6840      	ldr	r0, [r0, #4]
    1194:	4f15      	ldr	r7, [pc, #84]	; (11ec <link_st_ptr_inc16+0x94>)
    1196:	47b8      	blx	r7
    if (result != sizeof(resp) || resp != UPDI_PHY_ACK) {
    1198:	2801      	cmp	r0, #1
    119a:	d123      	bne.n	11e4 <link_st_ptr_inc16+0x8c>
    119c:	782b      	ldrb	r3, [r5, #0]
    119e:	2b40      	cmp	r3, #64	; 0x40
    11a0:	d120      	bne.n	11e4 <link_st_ptr_inc16+0x8c>
    11a2:	1ca5      	adds	r5, r4, #2
        //DBG_INFO(LINK_DEBUG, "phy_transfer failed %d resp 0x%02x", result, resp);
        return -2;
    }

    for (i = 2; i < len; i += 2) {
        result = phy_transfer(PHY(link), &data[i], 2, &resp, sizeof(resp));
    11a4:	9005      	str	r0, [sp, #20]
    for (i = 2; i < len; i += 2) {
    11a6:	9a04      	ldr	r2, [sp, #16]
    11a8:	1b2b      	subs	r3, r5, r4
    11aa:	429a      	cmp	r2, r3
    11ac:	dc02      	bgt.n	11b4 <link_st_ptr_inc16+0x5c>
            //DBG_INFO(LINK_DEBUG, "phy_transfer failed %d i %d resp 0x%02x", result, i, resp);
            return -3;
        }
    }

    return 0;
    11ae:	2000      	movs	r0, #0
}
    11b0:	b009      	add	sp, #36	; 0x24
    11b2:	bdf0      	pop	{r4, r5, r6, r7, pc}
        result = phy_transfer(PHY(link), &data[i], 2, &resp, sizeof(resp));
    11b4:	270b      	movs	r7, #11
    11b6:	ab04      	add	r3, sp, #16
    11b8:	18ff      	adds	r7, r7, r3
    11ba:	9b05      	ldr	r3, [sp, #20]
    11bc:	9703      	str	r7, [sp, #12]
    11be:	9300      	str	r3, [sp, #0]
    11c0:	2202      	movs	r2, #2
    11c2:	003b      	movs	r3, r7
    11c4:	0029      	movs	r1, r5
    11c6:	6870      	ldr	r0, [r6, #4]
    11c8:	4f08      	ldr	r7, [pc, #32]	; (11ec <link_st_ptr_inc16+0x94>)
    11ca:	47b8      	blx	r7
        if (result != sizeof(resp) || resp != UPDI_PHY_ACK) {
    11cc:	2801      	cmp	r0, #1
    11ce:	d104      	bne.n	11da <link_st_ptr_inc16+0x82>
    11d0:	9b03      	ldr	r3, [sp, #12]
    11d2:	3502      	adds	r5, #2
    11d4:	781b      	ldrb	r3, [r3, #0]
    11d6:	2b40      	cmp	r3, #64	; 0x40
    11d8:	d0e5      	beq.n	11a6 <link_st_ptr_inc16+0x4e>
            return -3;
    11da:	2003      	movs	r0, #3
    11dc:	e000      	b.n	11e0 <link_st_ptr_inc16+0x88>
        return ERROR_PTR;
    11de:	2001      	movs	r0, #1
            return -3;
    11e0:	4240      	negs	r0, r0
    11e2:	e7e5      	b.n	11b0 <link_st_ptr_inc16+0x58>
        return -2;
    11e4:	2002      	movs	r0, #2
    11e6:	e7fb      	b.n	11e0 <link_st_ptr_inc16+0x88>
    11e8:	0000c3c3 	.word	0x0000c3c3
    11ec:	00001831 	.word	0x00001831

000011f0 <link_repeat>:
    @link_ptr: APP object pointer, acquired from updi_datalink_init()
    @repeats: repeats count
    @return 0 successful, other value if failed
*/
int link_repeat(void *link_ptr, u8 repeats)
{
    11f0:	b507      	push	{r0, r1, r2, lr}
    /*
        Store a value to the 8bit repeat counter
    */
    upd_datalink_t *link = (upd_datalink_t *)link_ptr;
    u8 cmd[] = { UPDI_PHY_SYNC, UPDI_REPEAT | UPDI_REPEAT_BYTE, repeats};
    11f2:	2255      	movs	r2, #85	; 0x55
    11f4:	ab01      	add	r3, sp, #4
    11f6:	701a      	strb	r2, [r3, #0]
    11f8:	324b      	adds	r2, #75	; 0x4b
    11fa:	705a      	strb	r2, [r3, #1]
    11fc:	7099      	strb	r1, [r3, #2]
    int result;
    
    if (!VALID_LINK(link))
    11fe:	2800      	cmp	r0, #0
    1200:	d00c      	beq.n	121c <link_repeat+0x2c>
    1202:	4a08      	ldr	r2, [pc, #32]	; (1224 <link_repeat+0x34>)
    1204:	6801      	ldr	r1, [r0, #0]
    1206:	4291      	cmp	r1, r2
    1208:	d108      	bne.n	121c <link_repeat+0x2c>
        return ERROR_PTR;

    //DBG_INFO(LINK_DEBUG, "<LINK> Repeat %d", repeats);

    result = phy_send(PHY(link), cmd, sizeof(cmd));
    120a:	0019      	movs	r1, r3
    120c:	2203      	movs	r2, #3
    120e:	6840      	ldr	r0, [r0, #4]
    1210:	4b05      	ldr	r3, [pc, #20]	; (1228 <link_repeat+0x38>)
    1212:	4798      	blx	r3
    if (result) {
    1214:	2800      	cmp	r0, #0
    1216:	d003      	beq.n	1220 <link_repeat+0x30>
        //DBG_INFO(LINK_DEBUG, "phy_send failed %d", result);
        return -2;
    1218:	2002      	movs	r0, #2
    121a:	e000      	b.n	121e <link_repeat+0x2e>
        return ERROR_PTR;
    121c:	2001      	movs	r0, #1
        return -2;
    121e:	4240      	negs	r0, r0
    }

    return 0;
}
    1220:	bd0e      	pop	{r1, r2, r3, pc}
    1222:	46c0      	nop			; (mov r8, r8)
    1224:	0000c3c3 	.word	0x0000c3c3
    1228:	0000164d 	.word	0x0000164d

0000122c <link_repeat16>:
    @link_ptr: APP object pointer, acquired from updi_datalink_init()
    @repeats: repeats count(16bit width)
    @return 0 successful, other value if failed
*/
int link_repeat16(void *link_ptr, u16 repeats)
{
    122c:	b507      	push	{r0, r1, r2, lr}
    /*
    Store a value to the 16bit repeat counter
    */
    upd_datalink_t *link = (upd_datalink_t *)link_ptr;
    u8 cmd[] = { UPDI_PHY_SYNC, UPDI_REPEAT | UPDI_REPEAT_WORD, repeats & 0xFF, (repeats >> 8) & 0xFF };
    122e:	2255      	movs	r2, #85	; 0x55
    1230:	ab01      	add	r3, sp, #4
    1232:	701a      	strb	r2, [r3, #0]
    1234:	7099      	strb	r1, [r3, #2]
    1236:	324c      	adds	r2, #76	; 0x4c
    1238:	0a09      	lsrs	r1, r1, #8
    123a:	705a      	strb	r2, [r3, #1]
    123c:	70d9      	strb	r1, [r3, #3]
    int result;

    if (!VALID_LINK(link))
    123e:	2800      	cmp	r0, #0
    1240:	d00c      	beq.n	125c <link_repeat16+0x30>
    1242:	4a08      	ldr	r2, [pc, #32]	; (1264 <link_repeat16+0x38>)
    1244:	6801      	ldr	r1, [r0, #0]
    1246:	4291      	cmp	r1, r2
    1248:	d108      	bne.n	125c <link_repeat16+0x30>
        return ERROR_PTR;

    //DBG_INFO(LINK_DEBUG, "<LINK> Repeat16 %d", repeats);

    result = phy_send(PHY(link), cmd, sizeof(cmd));
    124a:	0019      	movs	r1, r3
    124c:	2204      	movs	r2, #4
    124e:	6840      	ldr	r0, [r0, #4]
    1250:	4b05      	ldr	r3, [pc, #20]	; (1268 <link_repeat16+0x3c>)
    1252:	4798      	blx	r3
    if (result) {
    1254:	2800      	cmp	r0, #0
    1256:	d003      	beq.n	1260 <link_repeat16+0x34>
        //DBG_INFO(LINK_DEBUG, "phy_send failed %d", result);
        return -2;
    1258:	2002      	movs	r0, #2
    125a:	e000      	b.n	125e <link_repeat16+0x32>
        return ERROR_PTR;
    125c:	2001      	movs	r0, #1
        return -2;
    125e:	4240      	negs	r0, r0
    }

    return 0;
}
    1260:	bd0e      	pop	{r1, r2, r3, pc}
    1262:	46c0      	nop			; (mov r8, r8)
    1264:	0000c3c3 	.word	0x0000c3c3
    1268:	0000164d 	.word	0x0000164d

0000126c <link_read_sib>:
    @link_ptr: APP object pointer, acquired from updi_datalink_init()
    @data: output data
    @return 0 successful, other value if failed
*/
int link_read_sib(void *link_ptr, u8 *data, int len)
{
    126c:	b510      	push	{r4, lr}
    /*
        Read the SIB
    */
    upd_datalink_t *link = (upd_datalink_t *)link_ptr;

    if (!VALID_LINK(link))
    126e:	2800      	cmp	r0, #0
    1270:	d007      	beq.n	1282 <link_read_sib+0x16>
    1272:	4b05      	ldr	r3, [pc, #20]	; (1288 <link_read_sib+0x1c>)
    1274:	6804      	ldr	r4, [r0, #0]
    1276:	429c      	cmp	r4, r3
    1278:	d103      	bne.n	1282 <link_read_sib+0x16>
        return ERROR_PTR;

    //DBG_INFO(LINK_DEBUG, "<LINK> Read SIB len %d", len);

    return phy_sib(PHY(link), data, len);
    127a:	6840      	ldr	r0, [r0, #4]
    127c:	4b03      	ldr	r3, [pc, #12]	; (128c <link_read_sib+0x20>)
    127e:	4798      	blx	r3
}
    1280:	bd10      	pop	{r4, pc}
        return ERROR_PTR;
    1282:	2001      	movs	r0, #1
    1284:	4240      	negs	r0, r0
    1286:	e7fb      	b.n	1280 <link_read_sib+0x14>
    1288:	0000c3c3 	.word	0x0000c3c3
    128c:	00001861 	.word	0x00001861

00001290 <link_key>:
    @size_k: key size in 8-bit unit mode, (2 ^ size_k) * 8
    @key: key data
    @return 0 successful, other value if failed
*/
int link_key(void *link_ptr, u8 size_k, const char *key)
{
    1290:	b5f0      	push	{r4, r5, r6, r7, lr}
    1292:	b085      	sub	sp, #20
    1294:	9201      	str	r2, [sp, #4]
    /*
        Write a key
    */
    upd_datalink_t *link = (upd_datalink_t *)link_ptr;
    const u8 cmd[] = { UPDI_PHY_SYNC, UPDI_KEY | UPDI_KEY_KEY | size_k };
    1296:	2255      	movs	r2, #85	; 0x55
    u8 len = 8 << size_k;
    1298:	2708      	movs	r7, #8
    const u8 cmd[] = { UPDI_PHY_SYNC, UPDI_KEY | UPDI_KEY_KEY | size_k };
    129a:	ab03      	add	r3, sp, #12
    129c:	701a      	strb	r2, [r3, #0]
    129e:	3a75      	subs	r2, #117	; 0x75
    12a0:	430a      	orrs	r2, r1
{
    12a2:	0006      	movs	r6, r0
    const u8 cmd[] = { UPDI_PHY_SYNC, UPDI_KEY | UPDI_KEY_KEY | size_k };
    12a4:	705a      	strb	r2, [r3, #1]
    u8 len = 8 << size_k;
    12a6:	408f      	lsls	r7, r1
    int i;
    int result;

    if (!VALID_LINK(link))
    12a8:	2800      	cmp	r0, #0
    12aa:	d01e      	beq.n	12ea <link_key+0x5a>
    12ac:	4a11      	ldr	r2, [pc, #68]	; (12f4 <link_key+0x64>)
    12ae:	6801      	ldr	r1, [r0, #0]
    12b0:	4291      	cmp	r1, r2
    12b2:	d11a      	bne.n	12ea <link_key+0x5a>
        return ERROR_PTR;

    //DBG_INFO(LINK_DEBUG, "<LINK> Key %x", size_k);

    result = phy_send(PHY(link), cmd, sizeof(cmd));
    12b4:	0019      	movs	r1, r3
    12b6:	2202      	movs	r2, #2
    12b8:	6840      	ldr	r0, [r0, #4]
    12ba:	4b0f      	ldr	r3, [pc, #60]	; (12f8 <link_key+0x68>)
    12bc:	4798      	blx	r3
    12be:	b2ff      	uxtb	r7, r7
    12c0:	0004      	movs	r4, r0
    12c2:	1e05      	subs	r5, r0, #0
    if (result) {
    12c4:	d00c      	beq.n	12e0 <link_key+0x50>
        //DBG_INFO(LINK_DEBUG, "phy_send failed %d", result);
        return -2;
    12c6:	2402      	movs	r4, #2
    12c8:	e010      	b.n	12ec <link_key+0x5c>
    }

    for (i = 0; i < len; i++) {
        result = phy_send_byte(PHY(link), (u8)key[len - i - 1]); //Reserse the string
    12ca:	9a01      	ldr	r2, [sp, #4]
    12cc:	1b7b      	subs	r3, r7, r5
    12ce:	18d3      	adds	r3, r2, r3
    12d0:	3b01      	subs	r3, #1
    12d2:	7819      	ldrb	r1, [r3, #0]
    12d4:	6870      	ldr	r0, [r6, #4]
    12d6:	4b09      	ldr	r3, [pc, #36]	; (12fc <link_key+0x6c>)
    12d8:	4798      	blx	r3
        if (result) {
    12da:	2800      	cmp	r0, #0
    12dc:	d108      	bne.n	12f0 <link_key+0x60>
    for (i = 0; i < len; i++) {
    12de:	3501      	adds	r5, #1
    12e0:	42bd      	cmp	r5, r7
    12e2:	dbf2      	blt.n	12ca <link_key+0x3a>
            return -3;
        }
    }

    return 0;
}
    12e4:	0020      	movs	r0, r4
    12e6:	b005      	add	sp, #20
    12e8:	bdf0      	pop	{r4, r5, r6, r7, pc}
        return ERROR_PTR;
    12ea:	2401      	movs	r4, #1
            return -3;
    12ec:	4264      	negs	r4, r4
    12ee:	e7f9      	b.n	12e4 <link_key+0x54>
    12f0:	2403      	movs	r4, #3
    12f2:	e7fb      	b.n	12ec <link_key+0x5c>
    12f4:	0000c3c3 	.word	0x0000c3c3
    12f8:	0000164d 	.word	0x0000164d
    12fc:	000017cd 	.word	0x000017cd

00001300 <updi_nvm_init>:
    @dev: point chip dev object
    @return NVM ptr, NULL if failed
*/
upd_nvm_t nvmmem;
void *updi_nvm_init(const char *port, int baud, void *dev)
{
    1300:	b510      	push	{r4, lr}
    upd_nvm_t *nvm = NULL;
    void *app;

    //DBG_INFO(NVM_DEBUG, "<NVM> init nvm");

    app = updi_application_init(port, baud, dev);
    1302:	4b07      	ldr	r3, [pc, #28]	; (1320 <updi_nvm_init+0x20>)
{
    1304:	0014      	movs	r4, r2
    app = updi_application_init(port, baud, dev);
    1306:	4798      	blx	r3
    upd_nvm_t *nvm = NULL;
    1308:	1e03      	subs	r3, r0, #0
    if (app) {
    130a:	d006      	beq.n	131a <updi_nvm_init+0x1a>
        nvm = &nvmmem;//(upd_nvm_t *)malloc(sizeof(*nvm));
        nvm->mgwd = UPD_NVM_MAGIC_WORD;
    130c:	4b05      	ldr	r3, [pc, #20]	; (1324 <updi_nvm_init+0x24>)
    130e:	4a06      	ldr	r2, [pc, #24]	; (1328 <updi_nvm_init+0x28>)
        nvm->progmode = false;
        nvm->dev = (device_info_t *)dev;
    1310:	60dc      	str	r4, [r3, #12]
        nvm->mgwd = UPD_NVM_MAGIC_WORD;
    1312:	601a      	str	r2, [r3, #0]
        nvm->progmode = false;
    1314:	2200      	movs	r2, #0
        nvm->app = (void *)app;
    1316:	6098      	str	r0, [r3, #8]
        nvm->progmode = false;
    1318:	711a      	strb	r2, [r3, #4]
    }

    return nvm;
}
    131a:	0018      	movs	r0, r3
    131c:	bd10      	pop	{r4, pc}
    131e:	46c0      	nop			; (mov r8, r8)
    1320:	0000045d 	.word	0x0000045d
    1324:	20000568 	.word	0x20000568
    1328:	0000d2d2 	.word	0x0000d2d2

0000132c <updi_nvm_deinit>:
/*
    NVM object destroy
    @nvm_ptr: NVM object pointer, acquired from updi_nvm_init()
*/
void updi_nvm_deinit(void *nvm_ptr)
{
    132c:	b510      	push	{r4, lr}
    upd_nvm_t *nvm = (upd_nvm_t *)nvm_ptr;
    if (VALID_NVM(nvm)) {
    132e:	2800      	cmp	r0, #0
    1330:	d006      	beq.n	1340 <updi_nvm_deinit+0x14>
    1332:	4b04      	ldr	r3, [pc, #16]	; (1344 <updi_nvm_deinit+0x18>)
    1334:	6802      	ldr	r2, [r0, #0]
    1336:	429a      	cmp	r2, r3
    1338:	d102      	bne.n	1340 <updi_nvm_deinit+0x14>
        //DBG_INFO(NVM_DEBUG, "<NVM> deinit nvm");

        updi_application_deinit(APP(nvm));
    133a:	6880      	ldr	r0, [r0, #8]
    133c:	4b02      	ldr	r3, [pc, #8]	; (1348 <updi_nvm_deinit+0x1c>)
    133e:	4798      	blx	r3
        //free(nvm);
    }
}
    1340:	bd10      	pop	{r4, pc}
    1342:	46c0      	nop			; (mov r8, r8)
    1344:	0000d2d2 	.word	0x0000d2d2
    1348:	00000485 	.word	0x00000485

0000134c <nvm_get_device_info>:
    NVM get device ID information
    @nvm_ptr: NVM object pointer, acquired from updi_nvm_init()
    @return 0 successful, other value failed
*/
int nvm_get_device_info(void *nvm_ptr)
{
    134c:	b510      	push	{r4, lr}
    /*
        Reads device info
    */
    upd_nvm_t *nvm = (upd_nvm_t *)nvm_ptr;
    
    if (!VALID_NVM(nvm))
    134e:	2800      	cmp	r0, #0
    1350:	d007      	beq.n	1362 <nvm_get_device_info+0x16>
    1352:	4b05      	ldr	r3, [pc, #20]	; (1368 <nvm_get_device_info+0x1c>)
    1354:	6802      	ldr	r2, [r0, #0]
    1356:	429a      	cmp	r2, r3
    1358:	d103      	bne.n	1362 <nvm_get_device_info+0x16>
        return ERROR_PTR;

    //DBG_INFO(NVM_DEBUG, "<NVM> Reading device info");

    return app_device_info(APP(nvm));
    135a:	6880      	ldr	r0, [r0, #8]
    135c:	4b03      	ldr	r3, [pc, #12]	; (136c <nvm_get_device_info+0x20>)
    135e:	4798      	blx	r3
}
    1360:	bd10      	pop	{r4, pc}
        return ERROR_PTR;
    1362:	2001      	movs	r0, #1
    1364:	4240      	negs	r0, r0
    1366:	e7fb      	b.n	1360 <nvm_get_device_info+0x14>
    1368:	0000d2d2 	.word	0x0000d2d2
    136c:	0000095d 	.word	0x0000095d

00001370 <nvm_enter_progmode>:
    NVM set chip into Unlocked Mode with UPDI_KEY_NVM command
    @nvm_ptr: NVM object pointer, acquired from updi_nvm_init()
    @return 0 successful, other value failed
*/
int nvm_enter_progmode(void *nvm_ptr)
{
    1370:	b510      	push	{r4, lr}
    1372:	1e04      	subs	r4, r0, #0
    Enter programming mode
    */
    upd_nvm_t *nvm = (upd_nvm_t *)nvm_ptr;
    int result;

    if (!VALID_NVM(nvm))
    1374:	d00b      	beq.n	138e <nvm_enter_progmode+0x1e>
    1376:	4b08      	ldr	r3, [pc, #32]	; (1398 <nvm_enter_progmode+0x28>)
    1378:	6802      	ldr	r2, [r0, #0]
    137a:	429a      	cmp	r2, r3
    137c:	d107      	bne.n	138e <nvm_enter_progmode+0x1e>
        return ERROR_PTR;

    //DBG_INFO(NVM_DEBUG, "<NVM> Entering NVM programming mode");
    
    result = app_enter_progmode(APP(nvm));
    137e:	6880      	ldr	r0, [r0, #8]
    1380:	4b06      	ldr	r3, [pc, #24]	; (139c <nvm_enter_progmode+0x2c>)
    1382:	4798      	blx	r3
    if (result) {
    1384:	2800      	cmp	r0, #0
    1386:	d105      	bne.n	1394 <nvm_enter_progmode+0x24>
        //DBG_INFO(NVM_DEBUG, "app_enter_progmode failed %d", result);
        return -2;
    }

    nvm->progmode = true;
    1388:	2301      	movs	r3, #1
    138a:	7123      	strb	r3, [r4, #4]

    return 0;
}
    138c:	bd10      	pop	{r4, pc}
        return ERROR_PTR;
    138e:	2001      	movs	r0, #1
        return -2;
    1390:	4240      	negs	r0, r0
    1392:	e7fb      	b.n	138c <nvm_enter_progmode+0x1c>
    1394:	2002      	movs	r0, #2
    1396:	e7fb      	b.n	1390 <nvm_enter_progmode+0x20>
    1398:	0000d2d2 	.word	0x0000d2d2
    139c:	00000655 	.word	0x00000655

000013a0 <nvm_leave_progmode>:
    NVM chip leave Locked Mode
    @nvm_ptr: NVM object pointer, acquired from updi_nvm_init()
    @return 0 successful, other value failed
*/
int nvm_leave_progmode(void *nvm_ptr)
{
    13a0:	b510      	push	{r4, lr}
    13a2:	1e04      	subs	r4, r0, #0
        Leave programming mode
    */
    upd_nvm_t *nvm = (upd_nvm_t *)nvm_ptr;
    int result;

    if (!VALID_NVM(nvm))
    13a4:	d00e      	beq.n	13c4 <nvm_leave_progmode+0x24>
    13a6:	4b0a      	ldr	r3, [pc, #40]	; (13d0 <nvm_leave_progmode+0x30>)
    13a8:	6802      	ldr	r2, [r0, #0]
    13aa:	429a      	cmp	r2, r3
    13ac:	d10a      	bne.n	13c4 <nvm_leave_progmode+0x24>
        return ERROR_PTR;

    if (!nvm->progmode)
    13ae:	7903      	ldrb	r3, [r0, #4]
        return 0;
    13b0:	2000      	movs	r0, #0
    if (!nvm->progmode)
    13b2:	4283      	cmp	r3, r0
    13b4:	d005      	beq.n	13c2 <nvm_leave_progmode+0x22>

    //DBG_INFO(NVM_DEBUG, "<NVM> Leaving NVM programming mode");

    result = app_leave_progmode(APP(nvm));
    13b6:	68a0      	ldr	r0, [r4, #8]
    13b8:	4b06      	ldr	r3, [pc, #24]	; (13d4 <nvm_leave_progmode+0x34>)
    13ba:	4798      	blx	r3
    if (result) {
    13bc:	2800      	cmp	r0, #0
    13be:	d104      	bne.n	13ca <nvm_leave_progmode+0x2a>
        //DBG_INFO(NVM_DEBUG, "app_leave_progmode failed %d", result);
        return -2;
    }

    nvm->progmode = false;
    13c0:	7120      	strb	r0, [r4, #4]

    return 0;
}
    13c2:	bd10      	pop	{r4, pc}
        return ERROR_PTR;
    13c4:	2001      	movs	r0, #1
        return -2;
    13c6:	4240      	negs	r0, r0
    13c8:	e7fb      	b.n	13c2 <nvm_leave_progmode+0x22>
    13ca:	2002      	movs	r0, #2
    13cc:	e7fb      	b.n	13c6 <nvm_leave_progmode+0x26>
    13ce:	46c0      	nop			; (mov r8, r8)
    13d0:	0000d2d2 	.word	0x0000d2d2
    13d4:	000006e9 	.word	0x000006e9

000013d8 <nvm_unlock_device>:
    NVM set chip into Locked Mode with UPDI_KEY_CHIPERASE command
    @nvm_ptr: NVM object pointer, acquired from updi_nvm_init()
    @return 0 successful, other value failed
*/
int nvm_unlock_device(void *nvm_ptr)
{
    13d8:	b510      	push	{r4, lr}
    13da:	1e04      	subs	r4, r0, #0
    Unlock and erase a device
    */
    upd_nvm_t *nvm = (upd_nvm_t *)nvm_ptr;
    int result = 0;

    if (!VALID_NVM(nvm))
    13dc:	d012      	beq.n	1404 <nvm_unlock_device+0x2c>
    13de:	4b0a      	ldr	r3, [pc, #40]	; (1408 <nvm_unlock_device+0x30>)
    13e0:	6802      	ldr	r2, [r0, #0]
    13e2:	429a      	cmp	r2, r3
    13e4:	d10e      	bne.n	1404 <nvm_unlock_device+0x2c>
        return ERROR_PTR;

    //DBG_INFO(NVM_DEBUG, "<NVM> Unlock and erase a device");

    if (nvm->progmode)
    13e6:	7903      	ldrb	r3, [r0, #4]
    13e8:	2b00      	cmp	r3, #0
    13ea:	d102      	bne.n	13f2 <nvm_unlock_device+0x1a>

    // Unlock
    result = app_unlock(APP(nvm));
    if (!result) {
        //DBG_INFO(NVM_DEBUG, "app_unlock failed %d", result);
        return -2;
    13ec:	2002      	movs	r0, #2
        return ERROR_PTR;
    13ee:	4240      	negs	r0, r0
    13f0:	e007      	b.n	1402 <nvm_unlock_device+0x2a>
    result = app_unlock(APP(nvm));
    13f2:	6880      	ldr	r0, [r0, #8]
    13f4:	4b05      	ldr	r3, [pc, #20]	; (140c <nvm_unlock_device+0x34>)
    13f6:	4798      	blx	r3
    if (!result) {
    13f8:	2800      	cmp	r0, #0
    13fa:	d0f7      	beq.n	13ec <nvm_unlock_device+0x14>
    }

    // Unlock after using the NVM key results in prog mode.
    nvm->progmode = true;
    13fc:	2301      	movs	r3, #1

    return 0;
    13fe:	2000      	movs	r0, #0
    nvm->progmode = true;
    1400:	7123      	strb	r3, [r4, #4]
}
    1402:	bd10      	pop	{r4, pc}
        return ERROR_PTR;
    1404:	2001      	movs	r0, #1
    1406:	e7f2      	b.n	13ee <nvm_unlock_device+0x16>
    1408:	0000d2d2 	.word	0x0000d2d2
    140c:	000005d9 	.word	0x000005d9

00001410 <nvm_chip_erase>:
    NVM erase flash with UPDI_NVMCTRL_CTRLA_CHIP_ERASE command
    @nvm_ptr: NVM object pointer, acquired from updi_nvm_init()
    @return 0 successful, other value failed
*/
int nvm_chip_erase(void *nvm_ptr)
{
    1410:	b510      	push	{r4, lr}
    Erase (unlocked) device
    */
    upd_nvm_t *nvm = (upd_nvm_t *)nvm_ptr;
    int result;

    if (!VALID_NVM(nvm))
    1412:	2800      	cmp	r0, #0
    1414:	d00d      	beq.n	1432 <nvm_chip_erase+0x22>
    1416:	4b09      	ldr	r3, [pc, #36]	; (143c <nvm_chip_erase+0x2c>)
    1418:	6802      	ldr	r2, [r0, #0]
    141a:	429a      	cmp	r2, r3
    141c:	d109      	bne.n	1432 <nvm_chip_erase+0x22>
        return ERROR_PTR;

    //DBG_INFO(NVM_DEBUG, "<NVM> Erase device");

    if (!nvm->progmode) {
    141e:	7903      	ldrb	r3, [r0, #4]
    1420:	2b00      	cmp	r3, #0
    1422:	d009      	beq.n	1438 <nvm_chip_erase+0x28>
        //DBG_INFO(NVM_DEBUG, "Enter progmode first!");
        return -2;
    }

    result = app_chip_erase(APP(nvm));
    1424:	6880      	ldr	r0, [r0, #8]
    1426:	4b06      	ldr	r3, [pc, #24]	; (1440 <nvm_chip_erase+0x30>)
    1428:	4798      	blx	r3
    if (result) {
    142a:	2800      	cmp	r0, #0
    142c:	d003      	beq.n	1436 <nvm_chip_erase+0x26>
        //DBG_INFO(NVM_DEBUG, "app_chip_erase failed %d", result);
        return -3;
    142e:	2003      	movs	r0, #3
    1430:	e000      	b.n	1434 <nvm_chip_erase+0x24>
        return ERROR_PTR;
    1432:	2001      	movs	r0, #1
        return -3;
    1434:	4240      	negs	r0, r0
    }

    return 0;
}
    1436:	bd10      	pop	{r4, pc}
        return -2;
    1438:	2002      	movs	r0, #2
    143a:	e7fb      	b.n	1434 <nvm_chip_erase+0x24>
    143c:	0000d2d2 	.word	0x0000d2d2
    1440:	000007b5 	.word	0x000007b5

00001444 <nvm_get_block_info>:
    @type: NVM type
    @info: chip flash information
    @return 0 successful, other value failed
*/
int nvm_get_block_info(void *nvm_ptr, int type, nvm_info_t *info)
{
    1444:	b510      	push	{r4, lr}
    /*
        get block info
    */
    upd_nvm_t *nvm = (upd_nvm_t *)nvm_ptr;
    
    if (!VALID_NVM(nvm))
    1446:	2800      	cmp	r0, #0
    1448:	d008      	beq.n	145c <nvm_get_block_info+0x18>
    144a:	4b06      	ldr	r3, [pc, #24]	; (1464 <nvm_get_block_info+0x20>)
    144c:	6804      	ldr	r4, [r0, #0]
    144e:	429c      	cmp	r4, r3
    1450:	d104      	bne.n	145c <nvm_get_block_info+0x18>
        return ERROR_PTR;

    //DBG_INFO(NVM_DEBUG, "<NVM> Get chip nvm type %d info", type);

    return dev_get_nvm_info(nvm->dev, type, info);
    1452:	b2c9      	uxtb	r1, r1
    1454:	68c0      	ldr	r0, [r0, #12]
    1456:	4b04      	ldr	r3, [pc, #16]	; (1468 <nvm_get_block_info+0x24>)
    1458:	4798      	blx	r3
}
    145a:	bd10      	pop	{r4, pc}
        return ERROR_PTR;
    145c:	2001      	movs	r0, #1
    145e:	4240      	negs	r0, r0
    1460:	e7fb      	b.n	145a <nvm_get_block_info+0x16>
    1462:	46c0      	nop			; (mov r8, r8)
    1464:	0000d2d2 	.word	0x0000d2d2
    1468:	00000259 	.word	0x00000259

0000146c <nvm_write_flash>:
{
    146c:	b5f0      	push	{r4, r5, r6, r7, lr}
    146e:	b089      	sub	sp, #36	; 0x24
    1470:	0005      	movs	r5, r0
    1472:	9101      	str	r1, [sp, #4]
    1474:	9203      	str	r2, [sp, #12]
    1476:	001e      	movs	r6, r3
    if (!VALID_NVM(nvm) || !data)
    1478:	2800      	cmp	r0, #0
    147a:	d04b      	beq.n	1514 <nvm_write_flash+0xa8>
    147c:	4b2b      	ldr	r3, [pc, #172]	; (152c <nvm_write_flash+0xc0>)
    147e:	6802      	ldr	r2, [r0, #0]
    1480:	429a      	cmp	r2, r3
    1482:	d147      	bne.n	1514 <nvm_write_flash+0xa8>
    1484:	9b03      	ldr	r3, [sp, #12]
    1486:	2b00      	cmp	r3, #0
    1488:	d044      	beq.n	1514 <nvm_write_flash+0xa8>
    if (!nvm->progmode) {
    148a:	7903      	ldrb	r3, [r0, #4]
    148c:	2b00      	cmp	r3, #0
    148e:	d044      	beq.n	151a <nvm_write_flash+0xae>
    result = nvm_get_block_info(nvm, NVM_FLASH, &info);
    1490:	aa06      	add	r2, sp, #24
    1492:	2100      	movs	r1, #0
    1494:	4b26      	ldr	r3, [pc, #152]	; (1530 <nvm_write_flash+0xc4>)
    1496:	4798      	blx	r3
    1498:	1e04      	subs	r4, r0, #0
    if (result) {
    149a:	d140      	bne.n	151e <nvm_write_flash+0xb2>
    flash_size = info.nvm_size;
    149c:	aa06      	add	r2, sp, #24
    flash_address = info.nvm_start;
    149e:	ab06      	add	r3, sp, #24
    flash_size = info.nvm_size;
    14a0:	8851      	ldrh	r1, [r2, #2]
    flash_address = info.nvm_start;
    14a2:	881b      	ldrh	r3, [r3, #0]
    if (address < flash_address)
    14a4:	9a01      	ldr	r2, [sp, #4]
    14a6:	4293      	cmp	r3, r2
    14a8:	dd02      	ble.n	14b0 <nvm_write_flash+0x44>
        address += flash_address;
    14aa:	189a      	adds	r2, r3, r2
    14ac:	b292      	uxth	r2, r2
    14ae:	9201      	str	r2, [sp, #4]
    if (address + len > flash_address + flash_size) {
    14b0:	9a01      	ldr	r2, [sp, #4]
    14b2:	185b      	adds	r3, r3, r1
    14b4:	1992      	adds	r2, r2, r6
    14b6:	429a      	cmp	r2, r3
    14b8:	dc33      	bgt.n	1522 <nvm_write_flash+0xb6>
    page_size = info.nvm_pagesize;
    14ba:	ab06      	add	r3, sp, #24
    14bc:	889f      	ldrh	r7, [r3, #4]
    pages = (len + page_size - 1) / page_size;
    14be:	4b1d      	ldr	r3, [pc, #116]	; (1534 <nvm_write_flash+0xc8>)
    14c0:	19f0      	adds	r0, r6, r7
    14c2:	3801      	subs	r0, #1
    14c4:	0039      	movs	r1, r7
    14c6:	4798      	blx	r3
    14c8:	9b03      	ldr	r3, [sp, #12]
    14ca:	9005      	str	r0, [sp, #20]
    14cc:	9304      	str	r3, [sp, #16]
    for (i = 0, off = 0; i < pages; i++) {
    14ce:	2300      	movs	r3, #0
    14d0:	9602      	str	r6, [sp, #8]
    14d2:	9303      	str	r3, [sp, #12]
    14d4:	9b03      	ldr	r3, [sp, #12]
    14d6:	9a05      	ldr	r2, [sp, #20]
    14d8:	4293      	cmp	r3, r2
    14da:	db02      	blt.n	14e2 <nvm_write_flash+0x76>
}
    14dc:	0020      	movs	r0, r4
    14de:	b009      	add	sp, #36	; 0x24
    14e0:	bdf0      	pop	{r4, r5, r6, r7, pc}
        result = app_write_nvm(APP(nvm), address + off, data + off, size);
    14e2:	9a02      	ldr	r2, [sp, #8]
    14e4:	003b      	movs	r3, r7
    14e6:	4297      	cmp	r7, r2
    14e8:	dd00      	ble.n	14ec <nvm_write_flash+0x80>
    14ea:	0013      	movs	r3, r2
    14ec:	9a04      	ldr	r2, [sp, #16]
    14ee:	9901      	ldr	r1, [sp, #4]
    14f0:	68a8      	ldr	r0, [r5, #8]
    14f2:	4e11      	ldr	r6, [pc, #68]	; (1538 <nvm_write_flash+0xcc>)
    14f4:	47b0      	blx	r6
    14f6:	9b02      	ldr	r3, [sp, #8]
    14f8:	1bdb      	subs	r3, r3, r7
    14fa:	9302      	str	r3, [sp, #8]
    14fc:	9b01      	ldr	r3, [sp, #4]
    14fe:	18fb      	adds	r3, r7, r3
    1500:	b29b      	uxth	r3, r3
    1502:	9301      	str	r3, [sp, #4]
    1504:	9b04      	ldr	r3, [sp, #16]
    1506:	19db      	adds	r3, r3, r7
    1508:	9304      	str	r3, [sp, #16]
        if (result) {
    150a:	2800      	cmp	r0, #0
    150c:	d10b      	bne.n	1526 <nvm_write_flash+0xba>
    for (i = 0, off = 0; i < pages; i++) {
    150e:	9b03      	ldr	r3, [sp, #12]
    1510:	3301      	adds	r3, #1
    1512:	e7de      	b.n	14d2 <nvm_write_flash+0x66>
        return ERROR_PTR;
    1514:	2401      	movs	r4, #1
        return -6;
    1516:	4264      	negs	r4, r4
    1518:	e7e0      	b.n	14dc <nvm_write_flash+0x70>
        return -2;
    151a:	2402      	movs	r4, #2
    151c:	e7fb      	b.n	1516 <nvm_write_flash+0xaa>
        return -3;
    151e:	2403      	movs	r4, #3
    1520:	e7f9      	b.n	1516 <nvm_write_flash+0xaa>
        return -4;
    1522:	2404      	movs	r4, #4
    1524:	e7f7      	b.n	1516 <nvm_write_flash+0xaa>
        return -6;
    1526:	2406      	movs	r4, #6
    1528:	e7f5      	b.n	1516 <nvm_write_flash+0xaa>
    152a:	46c0      	nop			; (mov r8, r8)
    152c:	0000d2d2 	.word	0x0000d2d2
    1530:	00001445 	.word	0x00001445
    1534:	00002621 	.word	0x00002621
    1538:	00000bdd 	.word	0x00000bdd

0000153c <updi_physical_deinit>:
    PHY object destroy
    @ptr_phy: APP object pointer, acquired from updi_physical_init()
    @no return
*/
void updi_physical_deinit(void *ptr_phy)
{
    153c:	b510      	push	{r4, lr}
    upd_physical_t *phy = (upd_physical_t *)ptr_phy;
    if (!VALID_PHY(phy))
    153e:	2800      	cmp	r0, #0
    1540:	d008      	beq.n	1554 <updi_physical_deinit+0x18>
    1542:	4b05      	ldr	r3, [pc, #20]	; (1558 <updi_physical_deinit+0x1c>)
    1544:	6802      	ldr	r2, [r0, #0]
    1546:	429a      	cmp	r2, r3
    1548:	d104      	bne.n	1554 <updi_physical_deinit+0x18>
        return;

    //DBG_INFO(PHY_DEBUG, "<PHY> Deinit");

    if (phy->ser) {
    154a:	6840      	ldr	r0, [r0, #4]
    154c:	2800      	cmp	r0, #0
    154e:	d001      	beq.n	1554 <updi_physical_deinit+0x18>
        ClosePort(SER(phy));
    1550:	4b02      	ldr	r3, [pc, #8]	; (155c <updi_physical_deinit+0x20>)
    1552:	4798      	blx	r3
    }
    //free(phy);
}
    1554:	bd10      	pop	{r4, pc}
    1556:	46c0      	nop			; (mov r8, r8)
    1558:	0000e1e1 	.word	0x0000e1e1
    155c:	00000445 	.word	0x00000445

00001560 <phy_set_baudrate>:
PHY set Sercom baudrate
@ptr_phy: APP object pointer, acquired from updi_physical_init()
@return 0 successful, other value if failed
*/
int phy_set_baudrate(void *ptr_phy, int baud)
{
    1560:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
    1562:	0004      	movs	r4, r0
    1564:	000f      	movs	r7, r1
    upd_physical_t *phy = (upd_physical_t *)ptr_phy;
    SER_PORT_STATE_T stat;
    int result;

    if (!VALID_PHY(phy))
    1566:	2800      	cmp	r0, #0
    1568:	d017      	beq.n	159a <phy_set_baudrate+0x3a>
    156a:	4b0e      	ldr	r3, [pc, #56]	; (15a4 <phy_set_baudrate+0x44>)
    156c:	6802      	ldr	r2, [r0, #0]
    156e:	429a      	cmp	r2, r3
    1570:	d113      	bne.n	159a <phy_set_baudrate+0x3a>
        return ERROR_PTR;

    //DBG_INFO(PHY_DEBUG, "<PHY> Set Baudrate");

    memcpy(&stat, &phy->stat, sizeof(stat));
    1572:	0006      	movs	r6, r0
    1574:	3608      	adds	r6, #8
    1576:	2208      	movs	r2, #8
    1578:	0031      	movs	r1, r6
    157a:	4668      	mov	r0, sp
    157c:	4d0a      	ldr	r5, [pc, #40]	; (15a8 <phy_set_baudrate+0x48>)
    157e:	47a8      	blx	r5

    stat.baudRate = baud;
    result = SetPortState(SER(phy), &stat);
    1580:	6860      	ldr	r0, [r4, #4]
    1582:	4669      	mov	r1, sp
    1584:	4b09      	ldr	r3, [pc, #36]	; (15ac <phy_set_baudrate+0x4c>)
    stat.baudRate = baud;
    1586:	9700      	str	r7, [sp, #0]
    result = SetPortState(SER(phy), &stat);
    1588:	4798      	blx	r3
    158a:	1e04      	subs	r4, r0, #0
    if (result) {
    158c:	d108      	bne.n	15a0 <phy_set_baudrate+0x40>
        //DBG_INFO(PHY_DEBUG, "<PHY> set Baud %d failed %d", baud, result);
        return -2;
    }

    memcpy(&phy->stat, &stat, sizeof(stat));
    158e:	2208      	movs	r2, #8
    1590:	4669      	mov	r1, sp
    1592:	0030      	movs	r0, r6
    1594:	47a8      	blx	r5
    
    return 0;
}
    1596:	0020      	movs	r0, r4
    1598:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
        return ERROR_PTR;
    159a:	2401      	movs	r4, #1
        return -2;
    159c:	4264      	negs	r4, r4
    159e:	e7fa      	b.n	1596 <phy_set_baudrate+0x36>
    15a0:	2402      	movs	r4, #2
    15a2:	e7fb      	b.n	159c <phy_set_baudrate+0x3c>
    15a4:	0000e1e1 	.word	0x0000e1e1
    15a8:	000030b5 	.word	0x000030b5
    15ac:	000002ad 	.word	0x000002ad

000015b0 <phy_send_each>:
    @data: data to be sent
    @len: data lenght
    @return 0 successful, other value if failed
*/
int phy_send_each(void *ptr_phy, const u8 *data, int len)
{
    15b0:	b5f0      	push	{r4, r5, r6, r7, lr}
    15b2:	b085      	sub	sp, #20
    15b4:	0005      	movs	r5, r0
    15b6:	000f      	movs	r7, r1
    15b8:	9201      	str	r2, [sp, #4]
     */
    upd_physical_t * phy = (upd_physical_t *)ptr_phy;
    u8 val;
    int result;

    if (!VALID_PHY(phy))
    15ba:	2800      	cmp	r0, #0
    15bc:	d033      	beq.n	1626 <phy_send_each+0x76>
    15be:	4b1e      	ldr	r3, [pc, #120]	; (1638 <phy_send_each+0x88>)
    15c0:	6802      	ldr	r2, [r0, #0]
    15c2:	429a      	cmp	r2, r3
    15c4:	d12f      	bne.n	1626 <phy_send_each+0x76>
        return ERROR_PTR;

    //DBG(PHY_DEBUG, "<PHY> Send:", data, len, (unsigned char *)"0x%02x ");

    result = FlushPort(SER(phy));
    15c6:	6840      	ldr	r0, [r0, #4]
    15c8:	4b1c      	ldr	r3, [pc, #112]	; (163c <phy_send_each+0x8c>)
    15ca:	4798      	blx	r3
    if (result) {
        //DBG_INFO(PHY_DEBUG, "<PHY> Send: FlushPort failed %d", result);
    }

    for (int i = 0; i < len; i++) {
    15cc:	2400      	movs	r4, #0
    15ce:	9b01      	ldr	r3, [sp, #4]
    15d0:	42a3      	cmp	r3, r4
    15d2:	dc02      	bgt.n	15da <phy_send_each+0x2a>

        if (phy->ibdly)
            msleep(phy->ibdly);
    }

    return 0;
    15d4:	2000      	movs	r0, #0
}
    15d6:	b005      	add	sp, #20
    15d8:	bdf0      	pop	{r4, r5, r6, r7, pc}
        val = data[i];
    15da:	ab02      	add	r3, sp, #8
    15dc:	1dd9      	adds	r1, r3, #7
    15de:	5d3b      	ldrb	r3, [r7, r4]
        result = SendData(SER(phy), &val, 1);   //Todo: should check whether we could send all data once
    15e0:	2201      	movs	r2, #1
        val = data[i];
    15e2:	700b      	strb	r3, [r1, #0]
        result = SendData(SER(phy), &val, 1);   //Todo: should check whether we could send all data once
    15e4:	6868      	ldr	r0, [r5, #4]
    15e6:	4b16      	ldr	r3, [pc, #88]	; (1640 <phy_send_each+0x90>)
    15e8:	4798      	blx	r3
    15ea:	1e06      	subs	r6, r0, #0
        if (result) {
    15ec:	d119      	bne.n	1622 <phy_send_each+0x72>
    15ee:	0004      	movs	r4, r0
			msleep(1);
    15f0:	2001      	movs	r0, #1
    15f2:	4b14      	ldr	r3, [pc, #80]	; (1644 <phy_send_each+0x94>)
    15f4:	4798      	blx	r3
			result += ReadData(SER(phy), &val, 1);
    15f6:	ab02      	add	r3, sp, #8
    15f8:	1dd9      	adds	r1, r3, #7
    15fa:	2201      	movs	r2, #1
    15fc:	6868      	ldr	r0, [r5, #4]
    15fe:	4b12      	ldr	r3, [pc, #72]	; (1648 <phy_send_each+0x98>)
    1600:	4798      	blx	r3
    1602:	1836      	adds	r6, r6, r0
		} while (result != 1 && (i++) < 100);
    1604:	2e01      	cmp	r6, #1
    1606:	d010      	beq.n	162a <phy_send_each+0x7a>
    1608:	3401      	adds	r4, #1
    160a:	2c65      	cmp	r4, #101	; 0x65
    160c:	d1f0      	bne.n	15f0 <phy_send_each+0x40>
            return -3;
    160e:	2003      	movs	r0, #3
        return ERROR_PTR;
    1610:	4240      	negs	r0, r0
    1612:	e7e0      	b.n	15d6 <phy_send_each+0x26>
        if (phy->ibdly)
    1614:	6928      	ldr	r0, [r5, #16]
    1616:	2800      	cmp	r0, #0
    1618:	d001      	beq.n	161e <phy_send_each+0x6e>
            msleep(phy->ibdly);
    161a:	4b0a      	ldr	r3, [pc, #40]	; (1644 <phy_send_each+0x94>)
    161c:	4798      	blx	r3
    for (int i = 0; i < len; i++) {
    161e:	3401      	adds	r4, #1
    1620:	e7d5      	b.n	15ce <phy_send_each+0x1e>
            return -2;
    1622:	2002      	movs	r0, #2
    1624:	e7f4      	b.n	1610 <phy_send_each+0x60>
        return ERROR_PTR;
    1626:	2001      	movs	r0, #1
    1628:	e7f2      	b.n	1610 <phy_send_each+0x60>
        if (data[i] != val) {
    162a:	ab02      	add	r3, sp, #8
    162c:	5d3a      	ldrb	r2, [r7, r4]
    162e:	79db      	ldrb	r3, [r3, #7]
    1630:	429a      	cmp	r2, r3
    1632:	d0ef      	beq.n	1614 <phy_send_each+0x64>
            return -4;
    1634:	2004      	movs	r0, #4
    1636:	e7eb      	b.n	1610 <phy_send_each+0x60>
    1638:	0000e1e1 	.word	0x0000e1e1
    163c:	000003e1 	.word	0x000003e1
    1640:	0000040d 	.word	0x0000040d
    1644:	00000295 	.word	0x00000295
    1648:	00000435 	.word	0x00000435

0000164c <phy_send>:
@return 0 successful, other value if failed
*/
#define MAX_LEN 16
u8 buffer[MAX_LEN];
int phy_send(void *ptr_phy, const u8 *data, int len)
{
    164c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
    164e:	0005      	movs	r5, r0
    1650:	9101      	str	r1, [sp, #4]
    1652:	0014      	movs	r4, r2
    */
    upd_physical_t * phy = (upd_physical_t *)ptr_phy;
    int i, result;
    u8 *rbuf;

    if (!VALID_PHY(phy))
    1654:	2800      	cmp	r0, #0
    1656:	d03f      	beq.n	16d8 <phy_send+0x8c>
    1658:	4b21      	ldr	r3, [pc, #132]	; (16e0 <phy_send+0x94>)
    165a:	6802      	ldr	r2, [r0, #0]
    165c:	429a      	cmp	r2, r3
    165e:	d13b      	bne.n	16d8 <phy_send+0x8c>
        return ERROR_PTR;

    //DBG(PHY_DEBUG, "<PHY> Send:", data, len, (unsigned char *)"0x%02x ");

    memset(buffer, 0, sizeof(buffer));
    1660:	2210      	movs	r2, #16
    1662:	2100      	movs	r1, #0
    1664:	4b1f      	ldr	r3, [pc, #124]	; (16e4 <phy_send+0x98>)
    1666:	4820      	ldr	r0, [pc, #128]	; (16e8 <phy_send+0x9c>)
    1668:	4798      	blx	r3
    if (!rbuf) {
        //DBG_INFO(PHY_DEBUG, "<PHY> Send: malloc rbuf(%d) failed", len);
        return -2;
    }*/

    result = FlushPort(SER(phy));
    166a:	4b20      	ldr	r3, [pc, #128]	; (16ec <phy_send+0xa0>)
    166c:	6868      	ldr	r0, [r5, #4]
    166e:	4798      	blx	r3
    if (result) {
        //DBG_INFO(PHY_DEBUG, "<PHY> Send: FlushPort failed %d", result);
    }
    
    /* Send */
    result = SendData(SER(phy), data, len); 
    1670:	0022      	movs	r2, r4
    1672:	9901      	ldr	r1, [sp, #4]
    1674:	6868      	ldr	r0, [r5, #4]
    1676:	4b1e      	ldr	r3, [pc, #120]	; (16f0 <phy_send+0xa4>)
    1678:	4798      	blx	r3
    167a:	1e06      	subs	r6, r0, #0
    if (result) {
    167c:	d120      	bne.n	16c0 <phy_send+0x74>
    167e:	2765      	movs	r7, #101	; 0x65
	
    /* Echo */
    if (result == 0) {
		i = 0;
		do {
			msleep(1);
    1680:	2001      	movs	r0, #1
    1682:	4b1c      	ldr	r3, [pc, #112]	; (16f4 <phy_send+0xa8>)
    1684:	4798      	blx	r3
            result += ReadData(SER(phy), rbuf, len);
    1686:	0022      	movs	r2, r4
    1688:	4917      	ldr	r1, [pc, #92]	; (16e8 <phy_send+0x9c>)
    168a:	6868      	ldr	r0, [r5, #4]
    168c:	4b1a      	ldr	r3, [pc, #104]	; (16f8 <phy_send+0xac>)
    168e:	4798      	blx	r3
    1690:	1836      	adds	r6, r6, r0
		} while (result != len && (i++) < 100);
    1692:	42b4      	cmp	r4, r6
    1694:	d006      	beq.n	16a4 <phy_send+0x58>
    1696:	3f01      	subs	r7, #1
    1698:	2f00      	cmp	r7, #0
    169a:	d1f1      	bne.n	1680 <phy_send+0x34>
						
        if (result != len) {
            //DBG_INFO(PHY_DEBUG, "<PHY> Send: ReadData (%d) failed %d", len, result);
            result = -4;
    169c:	2604      	movs	r6, #4
        result = -3;
    169e:	4276      	negs	r6, r6
        }
    }

    if (result == len) {
    16a0:	42a6      	cmp	r6, r4
    16a2:	d104      	bne.n	16ae <phy_send+0x62>
            result = -4;
    16a4:	2300      	movs	r3, #0
        for (i = 0; i < len; i++) {
            if (data[i] != rbuf[i]) {
    16a6:	4a10      	ldr	r2, [pc, #64]	; (16e8 <phy_send+0x9c>)
        for (i = 0; i < len; i++) {
    16a8:	42a3      	cmp	r3, r4
    16aa:	db0b      	blt.n	16c4 <phy_send+0x78>
    16ac:	0026      	movs	r6, r4
                break;
            }
        }
    }

    if (phy->ibdly)
    16ae:	6928      	ldr	r0, [r5, #16]
    16b0:	2800      	cmp	r0, #0
    16b2:	d001      	beq.n	16b8 <phy_send+0x6c>
        msleep(phy->ibdly);
    16b4:	4b0f      	ldr	r3, [pc, #60]	; (16f4 <phy_send+0xa8>)
    16b6:	4798      	blx	r3

    //free(rbuf);

    if (result == len)	
    16b8:	42a6      	cmp	r6, r4
    16ba:	d10f      	bne.n	16dc <phy_send+0x90>
        return 0;
    16bc:	2600      	movs	r6, #0
    16be:	e00d      	b.n	16dc <phy_send+0x90>
        result = -3;
    16c0:	2603      	movs	r6, #3
    16c2:	e7ec      	b.n	169e <phy_send+0x52>
            if (data[i] != rbuf[i]) {
    16c4:	9901      	ldr	r1, [sp, #4]
    16c6:	5cc8      	ldrb	r0, [r1, r3]
    16c8:	5cd1      	ldrb	r1, [r2, r3]
    16ca:	4288      	cmp	r0, r1
    16cc:	d101      	bne.n	16d2 <phy_send+0x86>
        for (i = 0; i < len; i++) {
    16ce:	3301      	adds	r3, #1
    16d0:	e7ea      	b.n	16a8 <phy_send+0x5c>
                result = -5;
    16d2:	2605      	movs	r6, #5
    16d4:	4276      	negs	r6, r6
    16d6:	e7ea      	b.n	16ae <phy_send+0x62>
        return ERROR_PTR;
    16d8:	2601      	movs	r6, #1
    16da:	4276      	negs	r6, r6
    else
        return result;
}
    16dc:	0030      	movs	r0, r6
    16de:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
    16e0:	0000e1e1 	.word	0x0000e1e1
    16e4:	000030c7 	.word	0x000030c7
    16e8:	20000578 	.word	0x20000578
    16ec:	000003e1 	.word	0x000003e1
    16f0:	0000040d 	.word	0x0000040d
    16f4:	00000295 	.word	0x00000295
    16f8:	00000435 	.word	0x00000435

000016fc <phy_send_double_break>:
    u8 data[] = { UPDI_BREAK, UPDI_BREAK };
    16fc:	2300      	movs	r3, #0
{
    16fe:	b5f0      	push	{r4, r5, r6, r7, lr}
    1700:	b085      	sub	sp, #20
    u8 data[] = { UPDI_BREAK, UPDI_BREAK };
    1702:	ad01      	add	r5, sp, #4
{
    1704:	0004      	movs	r4, r0
    u8 data[] = { UPDI_BREAK, UPDI_BREAK };
    1706:	702b      	strb	r3, [r5, #0]
    1708:	706b      	strb	r3, [r5, #1]
    if (!VALID_PHY(phy))
    170a:	4298      	cmp	r0, r3
    170c:	d021      	beq.n	1752 <phy_send_double_break+0x56>
    170e:	4a15      	ldr	r2, [pc, #84]	; (1764 <phy_send_double_break+0x68>)
    1710:	6801      	ldr	r1, [r0, #0]
    1712:	4291      	cmp	r1, r2
    1714:	d11d      	bne.n	1752 <phy_send_double_break+0x56>
    stat.baudRate = 300;
    1716:	2296      	movs	r2, #150	; 0x96
    stat.parity = EVENPARITY;
    1718:	2602      	movs	r6, #2
    stat.baudRate = 300;
    171a:	0052      	lsls	r2, r2, #1
    171c:	9202      	str	r2, [sp, #8]
    stat.byteSize = 8;
    171e:	3a25      	subs	r2, #37	; 0x25
    stat.baudRate = 300;
    1720:	a902      	add	r1, sp, #8
    stat.byteSize = 8;
    1722:	3aff      	subs	r2, #255	; 0xff
    result = SetPortState(SER(phy), &stat);
    1724:	6840      	ldr	r0, [r0, #4]
    1726:	4f10      	ldr	r7, [pc, #64]	; (1768 <phy_send_double_break+0x6c>)
    stat.byteSize = 8;
    1728:	710a      	strb	r2, [r1, #4]
    stat.stopBits = ONESTOPBIT;
    172a:	714b      	strb	r3, [r1, #5]
    stat.parity = EVENPARITY;
    172c:	718e      	strb	r6, [r1, #6]
    result = SetPortState(SER(phy), &stat);
    172e:	47b8      	blx	r7
    if (result) {
    1730:	2800      	cmp	r0, #0
    1732:	d112      	bne.n	175a <phy_send_double_break+0x5e>
    result = phy_send(phy, data, 2);
    1734:	0032      	movs	r2, r6
    1736:	0029      	movs	r1, r5
    1738:	0020      	movs	r0, r4
    173a:	4b0c      	ldr	r3, [pc, #48]	; (176c <phy_send_double_break+0x70>)
    173c:	4798      	blx	r3
    if (result) {
    173e:	2800      	cmp	r0, #0
    1740:	d10d      	bne.n	175e <phy_send_double_break+0x62>
    result = SetPortState(SER(phy), &phy->stat);
    1742:	0021      	movs	r1, r4
    1744:	6860      	ldr	r0, [r4, #4]
    1746:	3108      	adds	r1, #8
    1748:	47b8      	blx	r7
    if (result) {
    174a:	2800      	cmp	r0, #0
    174c:	d003      	beq.n	1756 <phy_send_double_break+0x5a>
        return -5;
    174e:	2005      	movs	r0, #5
    1750:	e000      	b.n	1754 <phy_send_double_break+0x58>
        return ERROR_PTR;
    1752:	2001      	movs	r0, #1
        return -5;
    1754:	4240      	negs	r0, r0
}
    1756:	b005      	add	sp, #20
    1758:	bdf0      	pop	{r4, r5, r6, r7, pc}
        return -2;
    175a:	2002      	movs	r0, #2
    175c:	e7fa      	b.n	1754 <phy_send_double_break+0x58>
        return -3;
    175e:	2003      	movs	r0, #3
    1760:	e7f8      	b.n	1754 <phy_send_double_break+0x58>
    1762:	46c0      	nop			; (mov r8, r8)
    1764:	0000e1e1 	.word	0x0000e1e1
    1768:	000002ad 	.word	0x000002ad
    176c:	0000164d 	.word	0x0000164d

00001770 <updi_physical_init>:
{
    1770:	b573      	push	{r0, r1, r4, r5, r6, lr}
    stat.byteSize = 8;
    1772:	2308      	movs	r3, #8
    stat.baudRate = baud;
    1774:	466d      	mov	r5, sp
    stat.byteSize = 8;
    1776:	712b      	strb	r3, [r5, #4]
    stat.stopBits = TWOSTOPBITS;
    1778:	3b06      	subs	r3, #6
    stat.baudRate = baud;
    177a:	9100      	str	r1, [sp, #0]
    stat.stopBits = TWOSTOPBITS;
    177c:	716b      	strb	r3, [r5, #5]
    stat.parity = EVENPARITY;
    177e:	71ab      	strb	r3, [r5, #6]
{
    1780:	000e      	movs	r6, r1
    ser = (void *)OpenPort(port, &stat);
    1782:	4b0d      	ldr	r3, [pc, #52]	; (17b8 <updi_physical_init+0x48>)
    1784:	4669      	mov	r1, sp
    1786:	4798      	blx	r3
    upd_physical_t *phy = NULL;
    1788:	1e04      	subs	r4, r0, #0
    if (ser) {
    178a:	d013      	beq.n	17b4 <updi_physical_init+0x44>
        phy->mgwd = UPD_PHYSICAL_MAGIC_WORD;
    178c:	4c0b      	ldr	r4, [pc, #44]	; (17bc <updi_physical_init+0x4c>)
    178e:	4b0c      	ldr	r3, [pc, #48]	; (17c0 <updi_physical_init+0x50>)
        phy->ser = ser;
    1790:	6060      	str	r0, [r4, #4]
        phy->mgwd = UPD_PHYSICAL_MAGIC_WORD;
    1792:	6023      	str	r3, [r4, #0]
        phy->ibdly = 1;
    1794:	2301      	movs	r3, #1
    1796:	6123      	str	r3, [r4, #16]
        memcpy(&phy->stat, &stat, sizeof(stat));
    1798:	0023      	movs	r3, r4
        stat.baudRate = baud;
    179a:	9600      	str	r6, [sp, #0]
        memcpy(&phy->stat, &stat, sizeof(stat));
    179c:	3308      	adds	r3, #8
    179e:	cd06      	ldmia	r5!, {r1, r2}
    17a0:	c306      	stmia	r3!, {r1, r2}
        result = phy_send_double_break(phy);
    17a2:	0020      	movs	r0, r4
    17a4:	4b07      	ldr	r3, [pc, #28]	; (17c4 <updi_physical_init+0x54>)
    17a6:	4798      	blx	r3
        if (result) {
    17a8:	2800      	cmp	r0, #0
    17aa:	d003      	beq.n	17b4 <updi_physical_init+0x44>
            updi_physical_deinit(phy);
    17ac:	0020      	movs	r0, r4
    17ae:	4b06      	ldr	r3, [pc, #24]	; (17c8 <updi_physical_init+0x58>)
    17b0:	4798      	blx	r3
            return NULL;
    17b2:	2400      	movs	r4, #0
}
    17b4:	0020      	movs	r0, r4
    17b6:	bd76      	pop	{r1, r2, r4, r5, r6, pc}
    17b8:	00000361 	.word	0x00000361
    17bc:	20000588 	.word	0x20000588
    17c0:	0000e1e1 	.word	0x0000e1e1
    17c4:	000016fd 	.word	0x000016fd
    17c8:	0000153d 	.word	0x0000153d

000017cc <phy_send_byte>:
    @data: data to be sent
    @len: data lenght
    @return 0 successful, other value if failed
*/
int phy_send_byte(void *ptr_phy, u8 val)
{
    17cc:	b507      	push	{r0, r1, r2, lr}
    17ce:	466b      	mov	r3, sp
    17d0:	71d9      	strb	r1, [r3, #7]
    17d2:	3307      	adds	r3, #7
    return phy_send_each(ptr_phy, &val, 1);
    17d4:	0019      	movs	r1, r3
    17d6:	2201      	movs	r2, #1
    17d8:	4b01      	ldr	r3, [pc, #4]	; (17e0 <phy_send_byte+0x14>)
    17da:	4798      	blx	r3
}
    17dc:	bd0e      	pop	{r1, r2, r3, pc}
    17de:	46c0      	nop			; (mov r8, r8)
    17e0:	000015b1 	.word	0x000015b1

000017e4 <phy_receive>:
@data: data buffer to receive
@len: data lenght
@return 0 successful, other value if failed
*/
int phy_receive(void *ptr_phy, u8 *data, int len)
{
    17e4:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
    17e6:	0006      	movs	r6, r0
    17e8:	9101      	str	r1, [sp, #4]
    17ea:	0017      	movs	r7, r2
    Receives a frame of a known number of chars from UPDI
    */
    upd_physical_t * phy = (upd_physical_t *)ptr_phy;
    int result = 0;

    if (!VALID_PHY(phy))
    17ec:	2800      	cmp	r0, #0
    17ee:	d015      	beq.n	181c <phy_receive+0x38>
    17f0:	4b0c      	ldr	r3, [pc, #48]	; (1824 <phy_receive+0x40>)
    17f2:	6802      	ldr	r2, [r0, #0]
    17f4:	429a      	cmp	r2, r3
    17f6:	d111      	bne.n	181c <phy_receive+0x38>
    17f8:	250b      	movs	r5, #11
    17fa:	2400      	movs	r4, #0
        return ERROR_PTR;

    /* Read */
	int i = 0;
	do {
		result += ReadData(SER(phy), data, len);
    17fc:	4b0a      	ldr	r3, [pc, #40]	; (1828 <phy_receive+0x44>)
    17fe:	003a      	movs	r2, r7
    1800:	9901      	ldr	r1, [sp, #4]
    1802:	6870      	ldr	r0, [r6, #4]
    1804:	4798      	blx	r3
		msleep(1);
    1806:	4b09      	ldr	r3, [pc, #36]	; (182c <phy_receive+0x48>)
		result += ReadData(SER(phy), data, len);
    1808:	1824      	adds	r4, r4, r0
		msleep(1);
    180a:	2001      	movs	r0, #1
    180c:	4798      	blx	r3
	} while (result != len && i++ < 10);
    180e:	42a7      	cmp	r7, r4
    1810:	d002      	beq.n	1818 <phy_receive+0x34>
    1812:	3d01      	subs	r5, #1
    1814:	2d00      	cmp	r5, #0
    1816:	d1f1      	bne.n	17fc <phy_receive+0x18>
    }

    //DBG(PHY_DEBUG, "<PHY> Recv: Received(%d/%d): ", data, result, (unsigned char *)"0x%02x ", result, len);

    return result;
}
    1818:	0020      	movs	r0, r4
    181a:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
        return ERROR_PTR;
    181c:	2401      	movs	r4, #1
    181e:	4264      	negs	r4, r4
    1820:	e7fa      	b.n	1818 <phy_receive+0x34>
    1822:	46c0      	nop			; (mov r8, r8)
    1824:	0000e1e1 	.word	0x0000e1e1
    1828:	00000435 	.word	0x00000435
    182c:	00000295 	.word	0x00000295

00001830 <phy_transfer>:
    @rdata: data buffer to receive
    @len: receiving lenght
    @return 0 successful, other value if failed
*/
int phy_transfer(void *ptr_phy, const u8 *wdata, int wlen, u8 *rdata, int rlen)
{
    1830:	b570      	push	{r4, r5, r6, lr}
    1832:	001d      	movs	r5, r3
    int retry = 0;  //determine retries in higher level by protocol used

    //DBG_INFO(PHY_DEBUG, "<PHY> Transfer: Write %d bytes, Read %d bytes", wlen, rlen);

    do {
        result = phy_send(ptr_phy, wdata, wlen);
    1834:	4b08      	ldr	r3, [pc, #32]	; (1858 <phy_transfer+0x28>)
{
    1836:	0004      	movs	r4, r0
        result = phy_send(ptr_phy, wdata, wlen);
    1838:	4798      	blx	r3
        if (result) {
    183a:	2800      	cmp	r0, #0
    183c:	d10a      	bne.n	1854 <phy_transfer+0x24>
            //DBG_INFO(PHY_DEBUG, "<PHY> Transfer: phy_send failed %d", result);
            result = -2;
        }
        else {
            result = phy_receive(ptr_phy, rdata, rlen);
    183e:	4b07      	ldr	r3, [pc, #28]	; (185c <phy_transfer+0x2c>)
    1840:	9a04      	ldr	r2, [sp, #16]
    1842:	0029      	movs	r1, r5
    1844:	0020      	movs	r0, r4
    1846:	4798      	blx	r3
            if (result != rlen) {
    1848:	9b04      	ldr	r3, [sp, #16]
    184a:	4283      	cmp	r3, r0
    184c:	d001      	beq.n	1852 <phy_transfer+0x22>
                //DBG_INFO(PHY_DEBUG, "<PHY> Transfer: phy_receive failed, Got %d bytes", result);
                result = -3;
    184e:	2003      	movs	r0, #3
            result = -2;
    1850:	4240      	negs	r0, r0
            retry--;

    } while (retry >= 0);

    return result;
}
    1852:	bd70      	pop	{r4, r5, r6, pc}
            result = -2;
    1854:	2002      	movs	r0, #2
    1856:	e7fb      	b.n	1850 <phy_transfer+0x20>
    1858:	0000164d 	.word	0x0000164d
    185c:	000017e5 	.word	0x000017e5

00001860 <phy_sib>:
    @data: data buffer to store SIB
    @len: SIB lenght
    @return 0 successful, other value if failed
*/
int phy_sib(void *ptr_phy, u8 *data, int len) 
{
    1860:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
    1862:	0005      	movs	r5, r0
    1864:	000e      	movs	r6, r1
    1866:	0014      	movs	r4, r2
    /*
        System information block is just a string coming back from a SIB command
    */

    upd_physical_t * phy = (upd_physical_t *)ptr_phy;
    const u8 val[] = { UPDI_PHY_SYNC, UPDI_KEY | UPDI_KEY_SIB | UPDI_SIB_16BYTES};
    1868:	490f      	ldr	r1, [pc, #60]	; (18a8 <phy_sib+0x48>)
    186a:	2202      	movs	r2, #2
    186c:	a803      	add	r0, sp, #12
    186e:	4b0f      	ldr	r3, [pc, #60]	; (18ac <phy_sib+0x4c>)
    1870:	4798      	blx	r3
    const int sib_size = 16;
    int result;

    if (!VALID_PHY(phy))
    1872:	2d00      	cmp	r5, #0
    1874:	d012      	beq.n	189c <phy_sib+0x3c>
    1876:	4b0e      	ldr	r3, [pc, #56]	; (18b0 <phy_sib+0x50>)
    1878:	682a      	ldr	r2, [r5, #0]
    187a:	429a      	cmp	r2, r3
    187c:	d10e      	bne.n	189c <phy_sib+0x3c>
    187e:	2c10      	cmp	r4, #16
    1880:	dd00      	ble.n	1884 <phy_sib+0x24>
    1882:	2410      	movs	r4, #16
    //DBG_INFO(PHY_DEBUG, "<PHY> Sib");

    if (len > sib_size)
        len = sib_size;

    result = phy_transfer(phy, val, sizeof(val), data, len);
    1884:	0028      	movs	r0, r5
    1886:	9400      	str	r4, [sp, #0]
    1888:	0033      	movs	r3, r6
    188a:	2202      	movs	r2, #2
    188c:	a903      	add	r1, sp, #12
    188e:	4d09      	ldr	r5, [pc, #36]	; (18b4 <phy_sib+0x54>)
    1890:	47a8      	blx	r5
    if (result != len) {
    1892:	42a0      	cmp	r0, r4
    1894:	d105      	bne.n	18a2 <phy_sib+0x42>
        //DBG_INFO(PHY_DEBUG, "<PHY> Sib: phy_transfer failed %d", result);
        return -3;
    }

    return 0;
    1896:	2000      	movs	r0, #0
}
    1898:	b004      	add	sp, #16
    189a:	bd70      	pop	{r4, r5, r6, pc}
        return ERROR_PTR;
    189c:	2001      	movs	r0, #1
        return -3;
    189e:	4240      	negs	r0, r0
    18a0:	e7fa      	b.n	1898 <phy_sib+0x38>
    18a2:	2003      	movs	r0, #3
    18a4:	e7fb      	b.n	189e <phy_sib+0x3e>
    18a6:	46c0      	nop			; (mov r8, r8)
    18a8:	00004f75 	.word	0x00004f75
    18ac:	000030b5 	.word	0x000030b5
    18b0:	0000e1e1 	.word	0x0000e1e1
    18b4:	00001831 	.word	0x00001831

000018b8 <Dummy_Handler>:

/**
 * \brief Default interrupt handler for unused IRQs.
 */
void Dummy_Handler(void)
{
    18b8:	e7fe      	b.n	18b8 <Dummy_Handler>
	...

000018bc <Reset_Handler>:
        if (pSrc != pDest) {
    18bc:	4811      	ldr	r0, [pc, #68]	; (1904 <Reset_Handler+0x48>)
    18be:	4912      	ldr	r1, [pc, #72]	; (1908 <Reset_Handler+0x4c>)
{
    18c0:	b570      	push	{r4, r5, r6, lr}
        if (pSrc != pDest) {
    18c2:	4288      	cmp	r0, r1
    18c4:	d004      	beq.n	18d0 <Reset_Handler+0x14>
    18c6:	2300      	movs	r3, #0
                for (; pDest < &_erelocate;) {
    18c8:	4c10      	ldr	r4, [pc, #64]	; (190c <Reset_Handler+0x50>)
    18ca:	18ca      	adds	r2, r1, r3
    18cc:	42a2      	cmp	r2, r4
    18ce:	d313      	bcc.n	18f8 <Reset_Handler+0x3c>
                *pDest++ = 0;
    18d0:	2100      	movs	r1, #0
    18d2:	4b0f      	ldr	r3, [pc, #60]	; (1910 <Reset_Handler+0x54>)
        for (pDest = &_szero; pDest < &_ezero;) {
    18d4:	4a0f      	ldr	r2, [pc, #60]	; (1914 <Reset_Handler+0x58>)
    18d6:	4293      	cmp	r3, r2
    18d8:	d312      	bcc.n	1900 <Reset_Handler+0x44>
        SCB->VTOR = ((uint32_t) pSrc & SCB_VTOR_TBLOFF_Msk);
    18da:	21ff      	movs	r1, #255	; 0xff
    18dc:	4b0e      	ldr	r3, [pc, #56]	; (1918 <Reset_Handler+0x5c>)
    18de:	4a0f      	ldr	r2, [pc, #60]	; (191c <Reset_Handler+0x60>)
    18e0:	438b      	bics	r3, r1
    18e2:	6093      	str	r3, [r2, #8]
        NVMCTRL->CTRLB.bit.MANW = 1;
    18e4:	2380      	movs	r3, #128	; 0x80
    18e6:	4a0e      	ldr	r2, [pc, #56]	; (1920 <Reset_Handler+0x64>)
    18e8:	6851      	ldr	r1, [r2, #4]
    18ea:	430b      	orrs	r3, r1
    18ec:	6053      	str	r3, [r2, #4]
        __libc_init_array();
    18ee:	4b0d      	ldr	r3, [pc, #52]	; (1924 <Reset_Handler+0x68>)
    18f0:	4798      	blx	r3
        main();
    18f2:	4b0d      	ldr	r3, [pc, #52]	; (1928 <Reset_Handler+0x6c>)
    18f4:	4798      	blx	r3
    18f6:	e7fe      	b.n	18f6 <Reset_Handler+0x3a>
                        *pDest++ = *pSrc++;
    18f8:	58c5      	ldr	r5, [r0, r3]
    18fa:	3304      	adds	r3, #4
    18fc:	6015      	str	r5, [r2, #0]
    18fe:	e7e4      	b.n	18ca <Reset_Handler+0xe>
                *pDest++ = 0;
    1900:	c302      	stmia	r3!, {r1}
    1902:	e7e8      	b.n	18d6 <Reset_Handler+0x1a>
    1904:	00005048 	.word	0x00005048
    1908:	20000000 	.word	0x20000000
    190c:	20000504 	.word	0x20000504
    1910:	20000504 	.word	0x20000504
    1914:	200005ec 	.word	0x200005ec
    1918:	00000000 	.word	0x00000000
    191c:	e000ed00 	.word	0xe000ed00
    1920:	41004000 	.word	0x41004000
    1924:	0000306d 	.word	0x0000306d
    1928:	000024e5 	.word	0x000024e5

0000192c <USART_0_CLOCK_init>:
}

static inline void hri_gclk_write_PCHCTRL_reg(const void *const hw, uint8_t index, hri_gclk_pchctrl_reg_t data)
{
	GCLK_CRITICAL_SECTION_ENTER();
	((Gclk *)hw)->PCHCTRL[index].reg = data;
    192c:	4b06      	ldr	r3, [pc, #24]	; (1948 <USART_0_CLOCK_init+0x1c>)
    192e:	2140      	movs	r1, #64	; 0x40
    1930:	001a      	movs	r2, r3
    1932:	32d8      	adds	r2, #216	; 0xd8
    1934:	6011      	str	r1, [r2, #0]
    1936:	2243      	movs	r2, #67	; 0x43
    1938:	33c4      	adds	r3, #196	; 0xc4
    193a:	601a      	str	r2, [r3, #0]
}

static inline void hri_mclk_set_APBCMASK_SERCOM4_bit(const void *const hw)
{
	MCLK_CRITICAL_SECTION_ENTER();
	((Mclk *)hw)->APBCMASK.reg |= MCLK_APBCMASK_SERCOM4;
    193c:	2310      	movs	r3, #16
    193e:	4a03      	ldr	r2, [pc, #12]	; (194c <USART_0_CLOCK_init+0x20>)
    1940:	69d1      	ldr	r1, [r2, #28]
    1942:	430b      	orrs	r3, r1
    1944:	61d3      	str	r3, [r2, #28]

	hri_gclk_write_PCHCTRL_reg(GCLK, SERCOM4_GCLK_ID_CORE, CONF_GCLK_SERCOM4_CORE_SRC | (1 << GCLK_PCHCTRL_CHEN_Pos));
	hri_gclk_write_PCHCTRL_reg(GCLK, SERCOM4_GCLK_ID_SLOW, CONF_GCLK_SERCOM4_SLOW_SRC | (1 << GCLK_PCHCTRL_CHEN_Pos));

	hri_mclk_set_APBCMASK_SERCOM4_bit(MCLK);
}
    1946:	4770      	bx	lr
    1948:	40001800 	.word	0x40001800
    194c:	40000400 	.word	0x40000400

00001950 <USART_0_PORT_init>:
static inline void hri_port_write_PINCFG_PMUXEN_bit(const void *const hw, uint8_t submodule_index, uint8_t index,
                                                    bool value)
{
	uint8_t tmp;
	PORT_CRITICAL_SECTION_ENTER();
	tmp = ((Port *)hw)->Group[submodule_index].PINCFG[index].reg;
    1950:	4b0d      	ldr	r3, [pc, #52]	; (1988 <USART_0_PORT_init+0x38>)
	tmp &= ~PORT_PINCFG_PMUXEN;
    1952:	2201      	movs	r2, #1
	tmp = ((Port *)hw)->Group[submodule_index].PINCFG[index].reg;
    1954:	0018      	movs	r0, r3
 * \brief USART pinmux initialization function
 *
 * Set each required pin to USART functionality
 */
void USART_0_PORT_init()
{
    1956:	b530      	push	{r4, r5, lr}
    1958:	30c8      	adds	r0, #200	; 0xc8
    195a:	7801      	ldrb	r1, [r0, #0]
	tmp &= ~PORT_PMUX_PMUXE_Msk;
    195c:	240f      	movs	r4, #15
	tmp &= ~PORT_PINCFG_PMUXEN;
    195e:	4391      	bics	r1, r2
	tmp |= value << PORT_PINCFG_PMUXEN_Pos;
    1960:	4311      	orrs	r1, r2
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg = tmp;
    1962:	7001      	strb	r1, [r0, #0]
	tmp = ((Port *)hw)->Group[submodule_index].PMUX[index].reg;
    1964:	0019      	movs	r1, r3
	tmp |= PORT_PMUX_PMUXE(data);
    1966:	2003      	movs	r0, #3
	tmp = ((Port *)hw)->Group[submodule_index].PMUX[index].reg;
    1968:	31b4      	adds	r1, #180	; 0xb4
    196a:	780d      	ldrb	r5, [r1, #0]
	tmp = ((Port *)hw)->Group[submodule_index].PINCFG[index].reg;
    196c:	33c9      	adds	r3, #201	; 0xc9
	tmp &= ~PORT_PMUX_PMUXE_Msk;
    196e:	43a5      	bics	r5, r4
	tmp |= PORT_PMUX_PMUXE(data);
    1970:	4328      	orrs	r0, r5
	((Port *)hw)->Group[submodule_index].PMUX[index].reg = tmp;
    1972:	7008      	strb	r0, [r1, #0]
	tmp = ((Port *)hw)->Group[submodule_index].PINCFG[index].reg;
    1974:	7818      	ldrb	r0, [r3, #0]
	tmp &= ~PORT_PINCFG_PMUXEN;
    1976:	4390      	bics	r0, r2
	tmp |= value << PORT_PINCFG_PMUXEN_Pos;
    1978:	4302      	orrs	r2, r0
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg = tmp;
    197a:	701a      	strb	r2, [r3, #0]
	tmp = ((Port *)hw)->Group[submodule_index].PMUX[index].reg;
    197c:	780b      	ldrb	r3, [r1, #0]
	tmp &= ~PORT_PMUX_PMUXO_Msk;
    197e:	401c      	ands	r4, r3
	tmp |= PORT_PMUX_PMUXO(data);
    1980:	2330      	movs	r3, #48	; 0x30
    1982:	4323      	orrs	r3, r4
	((Port *)hw)->Group[submodule_index].PMUX[index].reg = tmp;
    1984:	700b      	strb	r3, [r1, #0]

	gpio_set_pin_function(PB08, PINMUX_PB08D_SERCOM4_PAD0);

	gpio_set_pin_function(PB09, PINMUX_PB09D_SERCOM4_PAD1);
}
    1986:	bd30      	pop	{r4, r5, pc}
    1988:	40002800 	.word	0x40002800

0000198c <USART_0_init>:
 * \brief USART initialization function
 *
 * Enables USART peripheral, clocks and initializes USART driver
 */
void USART_0_init(void)
{
    198c:	b513      	push	{r0, r1, r4, lr}
	USART_0_CLOCK_init();
    198e:	4b06      	ldr	r3, [pc, #24]	; (19a8 <USART_0_init+0x1c>)
    1990:	4798      	blx	r3
	usart_async_init(&USART_0, SERCOM4, USART_0_buffer, USART_0_BUFFER_SIZE, (void *)NULL);
    1992:	2300      	movs	r3, #0
    1994:	4a05      	ldr	r2, [pc, #20]	; (19ac <USART_0_init+0x20>)
    1996:	9300      	str	r3, [sp, #0]
    1998:	4905      	ldr	r1, [pc, #20]	; (19b0 <USART_0_init+0x24>)
    199a:	3320      	adds	r3, #32
    199c:	4c05      	ldr	r4, [pc, #20]	; (19b4 <USART_0_init+0x28>)
    199e:	4806      	ldr	r0, [pc, #24]	; (19b8 <USART_0_init+0x2c>)
    19a0:	47a0      	blx	r4
	USART_0_PORT_init();
    19a2:	4b06      	ldr	r3, [pc, #24]	; (19bc <USART_0_init+0x30>)
    19a4:	4798      	blx	r3
}
    19a6:	bd13      	pop	{r0, r1, r4, pc}
    19a8:	0000192d 	.word	0x0000192d
    19ac:	20000520 	.word	0x20000520
    19b0:	42001000 	.word	0x42001000
    19b4:	00001bc1 	.word	0x00001bc1
    19b8:	2000059c 	.word	0x2000059c
    19bc:	00001951 	.word	0x00001951

000019c0 <system_init>:

void system_init(void)
{
    19c0:	b510      	push	{r4, lr}
 * Currently the following initialization functions are supported:
 *  - System clock initialization
 */
static inline void init_mcu(void)
{
	_init_chip();
    19c2:	4b02      	ldr	r3, [pc, #8]	; (19cc <system_init+0xc>)
    19c4:	4798      	blx	r3
	init_mcu();

	USART_0_init();
    19c6:	4b02      	ldr	r3, [pc, #8]	; (19d0 <system_init+0x10>)
    19c8:	4798      	blx	r3
}
    19ca:	bd10      	pop	{r4, pc}
    19cc:	00001f5d 	.word	0x00001f5d
    19d0:	0000198d 	.word	0x0000198d

000019d4 <atomic_enter_critical>:
 */
__STATIC_FORCEINLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
    19d4:	f3ef 8310 	mrs	r3, PRIMASK
/**
 * \brief Disable interrupts, enter critical section
 */
void atomic_enter_critical(hal_atomic_t volatile *atomic)
{
	*atomic = __get_PRIMASK();
    19d8:	6003      	str	r3, [r0, #0]
  __ASM volatile ("cpsid i" : : : "memory");
    19da:	b672      	cpsid	i
  \details Ensures the apparent order of the explicit memory operations before
           and after the instruction, without ensuring their completion.
 */
__STATIC_FORCEINLINE void __DMB(void)
{
  __ASM volatile ("dmb 0xF":::"memory");
    19dc:	f3bf 8f5f 	dmb	sy
	__disable_irq();
	__DMB();
}
    19e0:	4770      	bx	lr

000019e2 <atomic_leave_critical>:
    19e2:	f3bf 8f5f 	dmb	sy
 * \brief Exit atomic section
 */
void atomic_leave_critical(hal_atomic_t volatile *atomic)
{
	__DMB();
	__set_PRIMASK(*atomic);
    19e6:	6803      	ldr	r3, [r0, #0]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
    19e8:	f383 8810 	msr	PRIMASK, r3
}
    19ec:	4770      	bx	lr
	...

000019f0 <delay_ms>:
/**
 * \brief Perform delay in ms
 */
void delay_ms(const uint16_t ms)
{
	_delay_cycles(hardware, _get_cycles_for_ms(ms));
    19f0:	4b04      	ldr	r3, [pc, #16]	; (1a04 <delay_ms+0x14>)
{
    19f2:	b510      	push	{r4, lr}
	_delay_cycles(hardware, _get_cycles_for_ms(ms));
    19f4:	681c      	ldr	r4, [r3, #0]
    19f6:	4b04      	ldr	r3, [pc, #16]	; (1a08 <delay_ms+0x18>)
    19f8:	4798      	blx	r3
    19fa:	4b04      	ldr	r3, [pc, #16]	; (1a0c <delay_ms+0x1c>)
    19fc:	0001      	movs	r1, r0
    19fe:	0020      	movs	r0, r4
    1a00:	4798      	blx	r3
}
    1a02:	bd10      	pop	{r4, pc}
    1a04:	20000540 	.word	0x20000540
    1a08:	00001f39 	.word	0x00001f39
    1a0c:	00001f55 	.word	0x00001f55

00001a10 <io_write>:

/**
 * \brief I/O write interface
 */
int32_t io_write(struct io_descriptor *const io_descr, const uint8_t *const buf, const uint16_t length)
{
    1a10:	b570      	push	{r4, r5, r6, lr}
    1a12:	0004      	movs	r4, r0
    1a14:	000d      	movs	r5, r1
    1a16:	0016      	movs	r6, r2
	ASSERT(io_descr && buf);
    1a18:	2800      	cmp	r0, #0
    1a1a:	d003      	beq.n	1a24 <io_write+0x14>
    1a1c:	0008      	movs	r0, r1
    1a1e:	1e43      	subs	r3, r0, #1
    1a20:	4198      	sbcs	r0, r3
    1a22:	b2c0      	uxtb	r0, r0
    1a24:	2234      	movs	r2, #52	; 0x34
    1a26:	4904      	ldr	r1, [pc, #16]	; (1a38 <io_write+0x28>)
    1a28:	4b04      	ldr	r3, [pc, #16]	; (1a3c <io_write+0x2c>)
    1a2a:	4798      	blx	r3
	return io_descr->write(io_descr, buf, length);
    1a2c:	0032      	movs	r2, r6
    1a2e:	0029      	movs	r1, r5
    1a30:	6823      	ldr	r3, [r4, #0]
    1a32:	0020      	movs	r0, r4
    1a34:	4798      	blx	r3
}
    1a36:	bd70      	pop	{r4, r5, r6, pc}
    1a38:	00004f77 	.word	0x00004f77
    1a3c:	00001e25 	.word	0x00001e25

00001a40 <io_read>:

/**
 * \brief I/O read interface
 */
int32_t io_read(struct io_descriptor *const io_descr, uint8_t *const buf, const uint16_t length)
{
    1a40:	b570      	push	{r4, r5, r6, lr}
    1a42:	0004      	movs	r4, r0
    1a44:	000d      	movs	r5, r1
    1a46:	0016      	movs	r6, r2
	ASSERT(io_descr && buf);
    1a48:	2800      	cmp	r0, #0
    1a4a:	d003      	beq.n	1a54 <io_read+0x14>
    1a4c:	0008      	movs	r0, r1
    1a4e:	1e43      	subs	r3, r0, #1
    1a50:	4198      	sbcs	r0, r3
    1a52:	b2c0      	uxtb	r0, r0
    1a54:	223d      	movs	r2, #61	; 0x3d
    1a56:	4904      	ldr	r1, [pc, #16]	; (1a68 <io_read+0x28>)
    1a58:	4b04      	ldr	r3, [pc, #16]	; (1a6c <io_read+0x2c>)
    1a5a:	4798      	blx	r3
	return io_descr->read(io_descr, buf, length);
    1a5c:	0032      	movs	r2, r6
    1a5e:	0029      	movs	r1, r5
    1a60:	6863      	ldr	r3, [r4, #4]
    1a62:	0020      	movs	r0, r4
    1a64:	4798      	blx	r3
}
    1a66:	bd70      	pop	{r4, r5, r6, pc}
    1a68:	00004f77 	.word	0x00004f77
    1a6c:	00001e25 	.word	0x00001e25

00001a70 <usart_transmission_complete>:
 */
static void usart_transmission_complete(struct _usart_async_device *device)
{
	struct usart_async_descriptor *descr = CONTAINER_OF(device, struct usart_async_descriptor, device);

	descr->stat = 0;
    1a70:	2300      	movs	r3, #0
	struct usart_async_descriptor *descr = CONTAINER_OF(device, struct usart_async_descriptor, device);
    1a72:	3808      	subs	r0, #8
{
    1a74:	b510      	push	{r4, lr}
	descr->stat = 0;
    1a76:	6303      	str	r3, [r0, #48]	; 0x30
	if (descr->usart_cb.tx_done) {
    1a78:	6a43      	ldr	r3, [r0, #36]	; 0x24
    1a7a:	2b00      	cmp	r3, #0
    1a7c:	d000      	beq.n	1a80 <usart_transmission_complete+0x10>
		descr->usart_cb.tx_done(descr);
    1a7e:	4798      	blx	r3
	}
}
    1a80:	bd10      	pop	{r4, pc}

00001a82 <usart_error>:
 */
static void usart_error(struct _usart_async_device *device)
{
	struct usart_async_descriptor *descr = CONTAINER_OF(device, struct usart_async_descriptor, device);

	descr->stat = 0;
    1a82:	2300      	movs	r3, #0
	struct usart_async_descriptor *descr = CONTAINER_OF(device, struct usart_async_descriptor, device);
    1a84:	3808      	subs	r0, #8
{
    1a86:	b510      	push	{r4, lr}
	descr->stat = 0;
    1a88:	6303      	str	r3, [r0, #48]	; 0x30
	if (descr->usart_cb.error) {
    1a8a:	6ac3      	ldr	r3, [r0, #44]	; 0x2c
    1a8c:	2b00      	cmp	r3, #0
    1a8e:	d000      	beq.n	1a92 <usart_error+0x10>
		descr->usart_cb.error(descr);
    1a90:	4798      	blx	r3
	}
}
    1a92:	bd10      	pop	{r4, pc}

00001a94 <usart_fill_rx_buffer>:
{
    1a94:	b510      	push	{r4, lr}
	struct usart_async_descriptor *descr = CONTAINER_OF(device, struct usart_async_descriptor, device);
    1a96:	0004      	movs	r4, r0
	ringbuffer_put(&descr->rx, data);
    1a98:	4b04      	ldr	r3, [pc, #16]	; (1aac <usart_fill_rx_buffer+0x18>)
    1a9a:	302c      	adds	r0, #44	; 0x2c
    1a9c:	4798      	blx	r3
	if (descr->usart_cb.rx_done) {
    1a9e:	6a23      	ldr	r3, [r4, #32]
	struct usart_async_descriptor *descr = CONTAINER_OF(device, struct usart_async_descriptor, device);
    1aa0:	3c08      	subs	r4, #8
	if (descr->usart_cb.rx_done) {
    1aa2:	2b00      	cmp	r3, #0
    1aa4:	d001      	beq.n	1aaa <usart_fill_rx_buffer+0x16>
		descr->usart_cb.rx_done(descr);
    1aa6:	0020      	movs	r0, r4
    1aa8:	4798      	blx	r3
}
    1aaa:	bd10      	pop	{r4, pc}
    1aac:	00001eb1 	.word	0x00001eb1

00001ab0 <usart_async_write>:
{
    1ab0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    1ab2:	0004      	movs	r4, r0
    1ab4:	000e      	movs	r6, r1
    1ab6:	0015      	movs	r5, r2
	ASSERT(descr && buf && length);
    1ab8:	2800      	cmp	r0, #0
    1aba:	d004      	beq.n	1ac6 <usart_async_write+0x16>
    1abc:	1e08      	subs	r0, r1, #0
    1abe:	d002      	beq.n	1ac6 <usart_async_write+0x16>
    1ac0:	0010      	movs	r0, r2
    1ac2:	1e43      	subs	r3, r0, #1
    1ac4:	4198      	sbcs	r0, r3
    1ac6:	2701      	movs	r7, #1
    1ac8:	223c      	movs	r2, #60	; 0x3c
    1aca:	4038      	ands	r0, r7
    1acc:	32ff      	adds	r2, #255	; 0xff
    1ace:	490c      	ldr	r1, [pc, #48]	; (1b00 <usart_async_write+0x50>)
    1ad0:	4b0c      	ldr	r3, [pc, #48]	; (1b04 <usart_async_write+0x54>)
    1ad2:	4798      	blx	r3
	if (descr->tx_por != descr->tx_buffer_length) {
    1ad4:	0022      	movs	r2, r4
    1ad6:	1da3      	adds	r3, r4, #6
    1ad8:	324c      	adds	r2, #76	; 0x4c
    1ada:	8fd8      	ldrh	r0, [r3, #62]	; 0x3e
    1adc:	8811      	ldrh	r1, [r2, #0]
    1ade:	4288      	cmp	r0, r1
    1ae0:	d10a      	bne.n	1af8 <usart_async_write+0x48>
	descr->tx_buffer        = (uint8_t *)buf;
    1ae2:	64a6      	str	r6, [r4, #72]	; 0x48
	_usart_async_enable_byte_sent_irq(&descr->device);
    1ae4:	0020      	movs	r0, r4
	descr->tx_buffer_length = length;
    1ae6:	8015      	strh	r5, [r2, #0]
	descr->tx_por           = 0;
    1ae8:	2200      	movs	r2, #0
	_usart_async_enable_byte_sent_irq(&descr->device);
    1aea:	3008      	adds	r0, #8
	descr->tx_por           = 0;
    1aec:	87da      	strh	r2, [r3, #62]	; 0x3e
	descr->stat             = USART_ASYNC_STATUS_BUSY;
    1aee:	6327      	str	r7, [r4, #48]	; 0x30
	_usart_async_enable_byte_sent_irq(&descr->device);
    1af0:	4b05      	ldr	r3, [pc, #20]	; (1b08 <usart_async_write+0x58>)
    1af2:	4798      	blx	r3
	return (int32_t)length;
    1af4:	0028      	movs	r0, r5
}
    1af6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		return ERR_NO_RESOURCE;
    1af8:	201c      	movs	r0, #28
    1afa:	4240      	negs	r0, r0
    1afc:	e7fb      	b.n	1af6 <usart_async_write+0x46>
    1afe:	46c0      	nop			; (mov r8, r8)
    1b00:	00004f8b 	.word	0x00004f8b
    1b04:	00001e25 	.word	0x00001e25
    1b08:	00002411 	.word	0x00002411

00001b0c <usart_process_byte_sent>:
	if (descr->tx_por != descr->tx_buffer_length) {
    1b0c:	0001      	movs	r1, r0
{
    1b0e:	b510      	push	{r4, lr}
    1b10:	0004      	movs	r4, r0
	if (descr->tx_por != descr->tx_buffer_length) {
    1b12:	8f83      	ldrh	r3, [r0, #60]	; 0x3c
    1b14:	3044      	adds	r0, #68	; 0x44
    1b16:	8800      	ldrh	r0, [r0, #0]
    1b18:	3908      	subs	r1, #8
    1b1a:	4298      	cmp	r0, r3
    1b1c:	d00a      	beq.n	1b34 <usart_process_byte_sent+0x28>
		_usart_async_write_byte(&descr->device, descr->tx_buffer[descr->tx_por++]);
    1b1e:	6c89      	ldr	r1, [r1, #72]	; 0x48
    1b20:	1c58      	adds	r0, r3, #1
    1b22:	87a0      	strh	r0, [r4, #60]	; 0x3c
    1b24:	5cc9      	ldrb	r1, [r1, r3]
    1b26:	0020      	movs	r0, r4
    1b28:	4b04      	ldr	r3, [pc, #16]	; (1b3c <usart_process_byte_sent+0x30>)
    1b2a:	4798      	blx	r3
		_usart_async_enable_byte_sent_irq(&descr->device);
    1b2c:	0020      	movs	r0, r4
    1b2e:	4b04      	ldr	r3, [pc, #16]	; (1b40 <usart_process_byte_sent+0x34>)
		_usart_async_enable_tx_done_irq(&descr->device);
    1b30:	4798      	blx	r3
}
    1b32:	bd10      	pop	{r4, pc}
		_usart_async_enable_tx_done_irq(&descr->device);
    1b34:	0020      	movs	r0, r4
    1b36:	4b03      	ldr	r3, [pc, #12]	; (1b44 <usart_process_byte_sent+0x38>)
    1b38:	e7fa      	b.n	1b30 <usart_process_byte_sent+0x24>
    1b3a:	46c0      	nop			; (mov r8, r8)
    1b3c:	00002409 	.word	0x00002409
    1b40:	00002411 	.word	0x00002411
    1b44:	00002419 	.word	0x00002419

00001b48 <usart_async_read>:
{
    1b48:	b5f0      	push	{r4, r5, r6, r7, lr}
    1b4a:	0005      	movs	r5, r0
    1b4c:	b085      	sub	sp, #20
    1b4e:	000e      	movs	r6, r1
    1b50:	0014      	movs	r4, r2
	ASSERT(descr && buf && length);
    1b52:	2800      	cmp	r0, #0
    1b54:	d004      	beq.n	1b60 <usart_async_read+0x18>
    1b56:	1e08      	subs	r0, r1, #0
    1b58:	d002      	beq.n	1b60 <usart_async_read+0x18>
    1b5a:	0010      	movs	r0, r2
    1b5c:	1e43      	subs	r3, r0, #1
    1b5e:	4198      	sbcs	r0, r3
    1b60:	22ac      	movs	r2, #172	; 0xac
    1b62:	4911      	ldr	r1, [pc, #68]	; (1ba8 <usart_async_read+0x60>)
    1b64:	0052      	lsls	r2, r2, #1
    1b66:	4b11      	ldr	r3, [pc, #68]	; (1bac <usart_async_read+0x64>)
    1b68:	4798      	blx	r3
	num = ringbuffer_num(&descr->rx);
    1b6a:	3534      	adds	r5, #52	; 0x34
	CRITICAL_SECTION_ENTER()
    1b6c:	a803      	add	r0, sp, #12
    1b6e:	4b10      	ldr	r3, [pc, #64]	; (1bb0 <usart_async_read+0x68>)
    1b70:	4798      	blx	r3
	num = ringbuffer_num(&descr->rx);
    1b72:	4b10      	ldr	r3, [pc, #64]	; (1bb4 <usart_async_read+0x6c>)
    1b74:	0028      	movs	r0, r5
    1b76:	4798      	blx	r3
	CRITICAL_SECTION_LEAVE()
    1b78:	4b0f      	ldr	r3, [pc, #60]	; (1bb8 <usart_async_read+0x70>)
	num = ringbuffer_num(&descr->rx);
    1b7a:	0007      	movs	r7, r0
	CRITICAL_SECTION_LEAVE()
    1b7c:	a803      	add	r0, sp, #12
    1b7e:	4798      	blx	r3
    1b80:	1933      	adds	r3, r6, r4
	while ((was_read < num) && (was_read < length)) {
    1b82:	0034      	movs	r4, r6
    1b84:	19f7      	adds	r7, r6, r7
    1b86:	9301      	str	r3, [sp, #4]
    1b88:	1ba0      	subs	r0, r4, r6
    1b8a:	b280      	uxth	r0, r0
    1b8c:	42bc      	cmp	r4, r7
    1b8e:	d002      	beq.n	1b96 <usart_async_read+0x4e>
    1b90:	9b01      	ldr	r3, [sp, #4]
    1b92:	429c      	cmp	r4, r3
    1b94:	d101      	bne.n	1b9a <usart_async_read+0x52>
}
    1b96:	b005      	add	sp, #20
    1b98:	bdf0      	pop	{r4, r5, r6, r7, pc}
		ringbuffer_get(&descr->rx, &buf[was_read++]);
    1b9a:	0021      	movs	r1, r4
    1b9c:	0028      	movs	r0, r5
    1b9e:	4b07      	ldr	r3, [pc, #28]	; (1bbc <usart_async_read+0x74>)
    1ba0:	4798      	blx	r3
    1ba2:	3401      	adds	r4, #1
    1ba4:	e7f0      	b.n	1b88 <usart_async_read+0x40>
    1ba6:	46c0      	nop			; (mov r8, r8)
    1ba8:	00004f8b 	.word	0x00004f8b
    1bac:	00001e25 	.word	0x00001e25
    1bb0:	000019d5 	.word	0x000019d5
    1bb4:	00001ef1 	.word	0x00001ef1
    1bb8:	000019e3 	.word	0x000019e3
    1bbc:	00001e6d 	.word	0x00001e6d

00001bc0 <usart_async_init>:
{
    1bc0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    1bc2:	0004      	movs	r4, r0
    1bc4:	000d      	movs	r5, r1
    1bc6:	0016      	movs	r6, r2
    1bc8:	001f      	movs	r7, r3
	ASSERT(descr && hw && rx_buffer && rx_buffer_length);
    1bca:	2800      	cmp	r0, #0
    1bcc:	d006      	beq.n	1bdc <usart_async_init+0x1c>
    1bce:	1e08      	subs	r0, r1, #0
    1bd0:	d004      	beq.n	1bdc <usart_async_init+0x1c>
    1bd2:	1e10      	subs	r0, r2, #0
    1bd4:	d002      	beq.n	1bdc <usart_async_init+0x1c>
    1bd6:	0018      	movs	r0, r3
    1bd8:	1e43      	subs	r3, r0, #1
    1bda:	4198      	sbcs	r0, r3
    1bdc:	223a      	movs	r2, #58	; 0x3a
    1bde:	4911      	ldr	r1, [pc, #68]	; (1c24 <usart_async_init+0x64>)
    1be0:	4b11      	ldr	r3, [pc, #68]	; (1c28 <usart_async_init+0x68>)
    1be2:	4798      	blx	r3
	if (ERR_NONE != ringbuffer_init(&descr->rx, rx_buffer, rx_buffer_length)) {
    1be4:	0020      	movs	r0, r4
    1be6:	003a      	movs	r2, r7
    1be8:	0031      	movs	r1, r6
    1bea:	3034      	adds	r0, #52	; 0x34
    1bec:	4b0f      	ldr	r3, [pc, #60]	; (1c2c <usart_async_init+0x6c>)
    1bee:	4798      	blx	r3
    1bf0:	2800      	cmp	r0, #0
    1bf2:	d113      	bne.n	1c1c <usart_async_init+0x5c>
	init_status = _usart_async_init(&descr->device, hw);
    1bf4:	0020      	movs	r0, r4
    1bf6:	0029      	movs	r1, r5
    1bf8:	3008      	adds	r0, #8
    1bfa:	4b0d      	ldr	r3, [pc, #52]	; (1c30 <usart_async_init+0x70>)
    1bfc:	4798      	blx	r3
	if (init_status) {
    1bfe:	2800      	cmp	r0, #0
    1c00:	d10b      	bne.n	1c1a <usart_async_init+0x5a>
	descr->io.read  = usart_async_read;
    1c02:	4b0c      	ldr	r3, [pc, #48]	; (1c34 <usart_async_init+0x74>)
    1c04:	6063      	str	r3, [r4, #4]
	descr->io.write = usart_async_write;
    1c06:	4b0c      	ldr	r3, [pc, #48]	; (1c38 <usart_async_init+0x78>)
    1c08:	6023      	str	r3, [r4, #0]
	descr->device.usart_cb.tx_byte_sent = usart_process_byte_sent;
    1c0a:	4b0c      	ldr	r3, [pc, #48]	; (1c3c <usart_async_init+0x7c>)
    1c0c:	60a3      	str	r3, [r4, #8]
	descr->device.usart_cb.rx_done_cb   = usart_fill_rx_buffer;
    1c0e:	4b0c      	ldr	r3, [pc, #48]	; (1c40 <usart_async_init+0x80>)
    1c10:	60e3      	str	r3, [r4, #12]
	descr->device.usart_cb.tx_done_cb   = usart_transmission_complete;
    1c12:	4b0c      	ldr	r3, [pc, #48]	; (1c44 <usart_async_init+0x84>)
    1c14:	6123      	str	r3, [r4, #16]
	descr->device.usart_cb.error_cb     = usart_error;
    1c16:	4b0c      	ldr	r3, [pc, #48]	; (1c48 <usart_async_init+0x88>)
    1c18:	6163      	str	r3, [r4, #20]
}
    1c1a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		return ERR_INVALID_ARG;
    1c1c:	200d      	movs	r0, #13
    1c1e:	4240      	negs	r0, r0
    1c20:	e7fb      	b.n	1c1a <usart_async_init+0x5a>
    1c22:	46c0      	nop			; (mov r8, r8)
    1c24:	00004f8b 	.word	0x00004f8b
    1c28:	00001e25 	.word	0x00001e25
    1c2c:	00001e2d 	.word	0x00001e2d
    1c30:	00002335 	.word	0x00002335
    1c34:	00001b49 	.word	0x00001b49
    1c38:	00001ab1 	.word	0x00001ab1
    1c3c:	00001b0d 	.word	0x00001b0d
    1c40:	00001a95 	.word	0x00001a95
    1c44:	00001a71 	.word	0x00001a71
    1c48:	00001a83 	.word	0x00001a83

00001c4c <usart_async_enable>:
{
    1c4c:	b510      	push	{r4, lr}
    1c4e:	0004      	movs	r4, r0
	ASSERT(descr);
    1c50:	1e43      	subs	r3, r0, #1
    1c52:	4198      	sbcs	r0, r3
    1c54:	2261      	movs	r2, #97	; 0x61
    1c56:	4905      	ldr	r1, [pc, #20]	; (1c6c <usart_async_enable+0x20>)
    1c58:	b2c0      	uxtb	r0, r0
    1c5a:	4b05      	ldr	r3, [pc, #20]	; (1c70 <usart_async_enable+0x24>)
    1c5c:	4798      	blx	r3
	_usart_async_enable(&descr->device);
    1c5e:	0020      	movs	r0, r4
    1c60:	4b04      	ldr	r3, [pc, #16]	; (1c74 <usart_async_enable+0x28>)
    1c62:	3008      	adds	r0, #8
    1c64:	4798      	blx	r3
}
    1c66:	2000      	movs	r0, #0
    1c68:	bd10      	pop	{r4, pc}
    1c6a:	46c0      	nop			; (mov r8, r8)
    1c6c:	00004f8b 	.word	0x00004f8b
    1c70:	00001e25 	.word	0x00001e25
    1c74:	000023a1 	.word	0x000023a1

00001c78 <usart_async_disable>:
{
    1c78:	b510      	push	{r4, lr}
    1c7a:	0004      	movs	r4, r0
	ASSERT(descr);
    1c7c:	1e43      	subs	r3, r0, #1
    1c7e:	4198      	sbcs	r0, r3
    1c80:	226c      	movs	r2, #108	; 0x6c
    1c82:	4905      	ldr	r1, [pc, #20]	; (1c98 <usart_async_disable+0x20>)
    1c84:	b2c0      	uxtb	r0, r0
    1c86:	4b05      	ldr	r3, [pc, #20]	; (1c9c <usart_async_disable+0x24>)
    1c88:	4798      	blx	r3
	_usart_async_disable(&descr->device);
    1c8a:	0020      	movs	r0, r4
    1c8c:	4b04      	ldr	r3, [pc, #16]	; (1ca0 <usart_async_disable+0x28>)
    1c8e:	3008      	adds	r0, #8
    1c90:	4798      	blx	r3
}
    1c92:	2000      	movs	r0, #0
    1c94:	bd10      	pop	{r4, pc}
    1c96:	46c0      	nop			; (mov r8, r8)
    1c98:	00004f8b 	.word	0x00004f8b
    1c9c:	00001e25 	.word	0x00001e25
    1ca0:	000023b9 	.word	0x000023b9

00001ca4 <usart_async_get_io_descriptor>:
{
    1ca4:	b570      	push	{r4, r5, r6, lr}
    1ca6:	0004      	movs	r4, r0
    1ca8:	000d      	movs	r5, r1
	ASSERT(descr && io);
    1caa:	2800      	cmp	r0, #0
    1cac:	d003      	beq.n	1cb6 <usart_async_get_io_descriptor+0x12>
    1cae:	0008      	movs	r0, r1
    1cb0:	1e43      	subs	r3, r0, #1
    1cb2:	4198      	sbcs	r0, r3
    1cb4:	b2c0      	uxtb	r0, r0
    1cb6:	2277      	movs	r2, #119	; 0x77
    1cb8:	4902      	ldr	r1, [pc, #8]	; (1cc4 <usart_async_get_io_descriptor+0x20>)
    1cba:	4b03      	ldr	r3, [pc, #12]	; (1cc8 <usart_async_get_io_descriptor+0x24>)
    1cbc:	4798      	blx	r3
	*io = &descr->io;
    1cbe:	602c      	str	r4, [r5, #0]
}
    1cc0:	2000      	movs	r0, #0
    1cc2:	bd70      	pop	{r4, r5, r6, pc}
    1cc4:	00004f8b 	.word	0x00004f8b
    1cc8:	00001e25 	.word	0x00001e25

00001ccc <usart_async_register_callback>:
{
    1ccc:	b570      	push	{r4, r5, r6, lr}
    1cce:	0005      	movs	r5, r0
	ASSERT(descr);
    1cd0:	1e43      	subs	r3, r0, #1
    1cd2:	4198      	sbcs	r0, r3
{
    1cd4:	000e      	movs	r6, r1
    1cd6:	0014      	movs	r4, r2
	ASSERT(descr);
    1cd8:	b2c0      	uxtb	r0, r0
    1cda:	2283      	movs	r2, #131	; 0x83
    1cdc:	4913      	ldr	r1, [pc, #76]	; (1d2c <usart_async_register_callback+0x60>)
    1cde:	4b14      	ldr	r3, [pc, #80]	; (1d30 <usart_async_register_callback+0x64>)
    1ce0:	4798      	blx	r3
	switch (type) {
    1ce2:	2e01      	cmp	r6, #1
    1ce4:	d011      	beq.n	1d0a <usart_async_register_callback+0x3e>
    1ce6:	2e00      	cmp	r6, #0
    1ce8:	d004      	beq.n	1cf4 <usart_async_register_callback+0x28>
    1cea:	2e02      	cmp	r6, #2
    1cec:	d015      	beq.n	1d1a <usart_async_register_callback+0x4e>
		return ERR_INVALID_ARG;
    1cee:	200d      	movs	r0, #13
    1cf0:	4240      	negs	r0, r0
    1cf2:	e009      	b.n	1d08 <usart_async_register_callback+0x3c>
		descr->usart_cb.rx_done = cb;
    1cf4:	62ac      	str	r4, [r5, #40]	; 0x28
		_usart_async_set_irq_state(&descr->device, USART_ASYNC_RX_DONE, NULL != cb);
    1cf6:	0028      	movs	r0, r5
    1cf8:	1e62      	subs	r2, r4, #1
    1cfa:	4194      	sbcs	r4, r2
    1cfc:	2101      	movs	r1, #1
    1cfe:	b2e2      	uxtb	r2, r4
    1d00:	3008      	adds	r0, #8
		_usart_async_set_irq_state(&descr->device, USART_ASYNC_ERROR, NULL != cb);
    1d02:	4b0c      	ldr	r3, [pc, #48]	; (1d34 <usart_async_register_callback+0x68>)
    1d04:	4798      	blx	r3
	return ERR_NONE;
    1d06:	2000      	movs	r0, #0
}
    1d08:	bd70      	pop	{r4, r5, r6, pc}
		descr->usart_cb.tx_done = cb;
    1d0a:	626c      	str	r4, [r5, #36]	; 0x24
		_usart_async_set_irq_state(&descr->device, USART_ASYNC_TX_DONE, NULL != cb);
    1d0c:	0028      	movs	r0, r5
    1d0e:	1e62      	subs	r2, r4, #1
    1d10:	4194      	sbcs	r4, r2
    1d12:	3008      	adds	r0, #8
    1d14:	b2e2      	uxtb	r2, r4
    1d16:	2102      	movs	r1, #2
    1d18:	e7f3      	b.n	1d02 <usart_async_register_callback+0x36>
		descr->usart_cb.error = cb;
    1d1a:	62ec      	str	r4, [r5, #44]	; 0x2c
		_usart_async_set_irq_state(&descr->device, USART_ASYNC_ERROR, NULL != cb);
    1d1c:	0028      	movs	r0, r5
    1d1e:	1e62      	subs	r2, r4, #1
    1d20:	4194      	sbcs	r4, r2
    1d22:	3008      	adds	r0, #8
    1d24:	b2e2      	uxtb	r2, r4
    1d26:	2103      	movs	r1, #3
    1d28:	e7eb      	b.n	1d02 <usart_async_register_callback+0x36>
    1d2a:	46c0      	nop			; (mov r8, r8)
    1d2c:	00004f8b 	.word	0x00004f8b
    1d30:	00001e25 	.word	0x00001e25
    1d34:	00002421 	.word	0x00002421

00001d38 <usart_async_set_baud_rate>:
{
    1d38:	b570      	push	{r4, r5, r6, lr}
    1d3a:	0004      	movs	r4, r0
	ASSERT(descr);
    1d3c:	1e43      	subs	r3, r0, #1
    1d3e:	4198      	sbcs	r0, r3
{
    1d40:	000d      	movs	r5, r1
	ASSERT(descr);
    1d42:	22aa      	movs	r2, #170	; 0xaa
    1d44:	b2c0      	uxtb	r0, r0
    1d46:	4905      	ldr	r1, [pc, #20]	; (1d5c <usart_async_set_baud_rate+0x24>)
    1d48:	4b05      	ldr	r3, [pc, #20]	; (1d60 <usart_async_set_baud_rate+0x28>)
    1d4a:	4798      	blx	r3
	_usart_async_set_baud_rate(&descr->device, baud_rate);
    1d4c:	0020      	movs	r0, r4
    1d4e:	0029      	movs	r1, r5
    1d50:	3008      	adds	r0, #8
    1d52:	4b04      	ldr	r3, [pc, #16]	; (1d64 <usart_async_set_baud_rate+0x2c>)
    1d54:	4798      	blx	r3
}
    1d56:	2000      	movs	r0, #0
    1d58:	bd70      	pop	{r4, r5, r6, pc}
    1d5a:	46c0      	nop			; (mov r8, r8)
    1d5c:	00004f8b 	.word	0x00004f8b
    1d60:	00001e25 	.word	0x00001e25
    1d64:	000023c9 	.word	0x000023c9

00001d68 <usart_async_set_parity>:
{
    1d68:	b570      	push	{r4, r5, r6, lr}
    1d6a:	0004      	movs	r4, r0
	ASSERT(descr);
    1d6c:	1e43      	subs	r3, r0, #1
    1d6e:	4198      	sbcs	r0, r3
{
    1d70:	000d      	movs	r5, r1
	ASSERT(descr);
    1d72:	22cb      	movs	r2, #203	; 0xcb
    1d74:	b2c0      	uxtb	r0, r0
    1d76:	4905      	ldr	r1, [pc, #20]	; (1d8c <usart_async_set_parity+0x24>)
    1d78:	4b05      	ldr	r3, [pc, #20]	; (1d90 <usart_async_set_parity+0x28>)
    1d7a:	4798      	blx	r3
	_usart_async_set_parity(&descr->device, parity);
    1d7c:	0020      	movs	r0, r4
    1d7e:	0029      	movs	r1, r5
    1d80:	3008      	adds	r0, #8
    1d82:	4b04      	ldr	r3, [pc, #16]	; (1d94 <usart_async_set_parity+0x2c>)
    1d84:	4798      	blx	r3
}
    1d86:	2000      	movs	r0, #0
    1d88:	bd70      	pop	{r4, r5, r6, pc}
    1d8a:	46c0      	nop			; (mov r8, r8)
    1d8c:	00004f8b 	.word	0x00004f8b
    1d90:	00001e25 	.word	0x00001e25
    1d94:	000023d9 	.word	0x000023d9

00001d98 <usart_async_set_stopbits>:
{
    1d98:	b570      	push	{r4, r5, r6, lr}
    1d9a:	0004      	movs	r4, r0
	ASSERT(descr);
    1d9c:	1e43      	subs	r3, r0, #1
    1d9e:	4198      	sbcs	r0, r3
{
    1da0:	000d      	movs	r5, r1
	ASSERT(descr);
    1da2:	22d6      	movs	r2, #214	; 0xd6
    1da4:	b2c0      	uxtb	r0, r0
    1da6:	4905      	ldr	r1, [pc, #20]	; (1dbc <usart_async_set_stopbits+0x24>)
    1da8:	4b05      	ldr	r3, [pc, #20]	; (1dc0 <usart_async_set_stopbits+0x28>)
    1daa:	4798      	blx	r3
	_usart_async_set_stop_bits(&descr->device, stop_bits);
    1dac:	0020      	movs	r0, r4
    1dae:	0029      	movs	r1, r5
    1db0:	3008      	adds	r0, #8
    1db2:	4b04      	ldr	r3, [pc, #16]	; (1dc4 <usart_async_set_stopbits+0x2c>)
    1db4:	4798      	blx	r3
}
    1db6:	2000      	movs	r0, #0
    1db8:	bd70      	pop	{r4, r5, r6, pc}
    1dba:	46c0      	nop			; (mov r8, r8)
    1dbc:	00004f8b 	.word	0x00004f8b
    1dc0:	00001e25 	.word	0x00001e25
    1dc4:	000023e9 	.word	0x000023e9

00001dc8 <usart_async_set_character_size>:
{
    1dc8:	b570      	push	{r4, r5, r6, lr}
    1dca:	0004      	movs	r4, r0
	ASSERT(descr);
    1dcc:	1e43      	subs	r3, r0, #1
    1dce:	4198      	sbcs	r0, r3
{
    1dd0:	000d      	movs	r5, r1
	ASSERT(descr);
    1dd2:	22e1      	movs	r2, #225	; 0xe1
    1dd4:	b2c0      	uxtb	r0, r0
    1dd6:	4905      	ldr	r1, [pc, #20]	; (1dec <usart_async_set_character_size+0x24>)
    1dd8:	4b05      	ldr	r3, [pc, #20]	; (1df0 <usart_async_set_character_size+0x28>)
    1dda:	4798      	blx	r3
	_usart_async_set_character_size(&descr->device, size);
    1ddc:	0020      	movs	r0, r4
    1dde:	0029      	movs	r1, r5
    1de0:	3008      	adds	r0, #8
    1de2:	4b04      	ldr	r3, [pc, #16]	; (1df4 <usart_async_set_character_size+0x2c>)
    1de4:	4798      	blx	r3
}
    1de6:	2000      	movs	r0, #0
    1de8:	bd70      	pop	{r4, r5, r6, pc}
    1dea:	46c0      	nop			; (mov r8, r8)
    1dec:	00004f8b 	.word	0x00004f8b
    1df0:	00001e25 	.word	0x00001e25
    1df4:	000023f9 	.word	0x000023f9

00001df8 <usart_async_flush_rx_buffer>:
{
    1df8:	b510      	push	{r4, lr}
	ASSERT(descr);
    1dfa:	2222      	movs	r2, #34	; 0x22
{
    1dfc:	0004      	movs	r4, r0
	ASSERT(descr);
    1dfe:	1e43      	subs	r3, r0, #1
    1e00:	4198      	sbcs	r0, r3
    1e02:	32ff      	adds	r2, #255	; 0xff
    1e04:	4904      	ldr	r1, [pc, #16]	; (1e18 <usart_async_flush_rx_buffer+0x20>)
    1e06:	b2c0      	uxtb	r0, r0
    1e08:	4b04      	ldr	r3, [pc, #16]	; (1e1c <usart_async_flush_rx_buffer+0x24>)
    1e0a:	4798      	blx	r3
	return ringbuffer_flush(&descr->rx);
    1e0c:	0020      	movs	r0, r4
    1e0e:	4b04      	ldr	r3, [pc, #16]	; (1e20 <usart_async_flush_rx_buffer+0x28>)
    1e10:	3034      	adds	r0, #52	; 0x34
    1e12:	4798      	blx	r3
}
    1e14:	bd10      	pop	{r4, pc}
    1e16:	46c0      	nop			; (mov r8, r8)
    1e18:	00004f8b 	.word	0x00004f8b
    1e1c:	00001e25 	.word	0x00001e25
    1e20:	00001f15 	.word	0x00001f15

00001e24 <assert>:
/**
 * \brief Assert function
 */
void assert(const bool condition, const char *const file, const int line)
{
	if (!(condition)) {
    1e24:	2800      	cmp	r0, #0
    1e26:	d100      	bne.n	1e2a <assert+0x6>
		__asm("BKPT #0");
    1e28:	be00      	bkpt	0x0000
	}
	(void)file;
	(void)line;
}
    1e2a:	4770      	bx	lr

00001e2c <ringbuffer_init>:

/**
 * \brief Ringbuffer init
 */
int32_t ringbuffer_init(struct ringbuffer *const rb, void *buf, uint32_t size)
{
    1e2c:	b570      	push	{r4, r5, r6, lr}
    1e2e:	0005      	movs	r5, r0
    1e30:	000e      	movs	r6, r1
    1e32:	0014      	movs	r4, r2
	ASSERT(rb && buf && size);
    1e34:	2800      	cmp	r0, #0
    1e36:	d004      	beq.n	1e42 <ringbuffer_init+0x16>
    1e38:	1e08      	subs	r0, r1, #0
    1e3a:	d002      	beq.n	1e42 <ringbuffer_init+0x16>
    1e3c:	0010      	movs	r0, r2
    1e3e:	1e43      	subs	r3, r0, #1
    1e40:	4198      	sbcs	r0, r3
    1e42:	4b08      	ldr	r3, [pc, #32]	; (1e64 <ringbuffer_init+0x38>)
    1e44:	2228      	movs	r2, #40	; 0x28
    1e46:	4908      	ldr	r1, [pc, #32]	; (1e68 <ringbuffer_init+0x3c>)
    1e48:	4798      	blx	r3

	/*
	 * buf size must be aligned to power of 2
	 */
	if ((size & (size - 1)) != 0) {
    1e4a:	0020      	movs	r0, r4
    1e4c:	1e63      	subs	r3, r4, #1
    1e4e:	4018      	ands	r0, r3
    1e50:	d104      	bne.n	1e5c <ringbuffer_init+0x30>
		return ERR_INVALID_ARG;
	}

	/* size - 1 is faster in calculation */
	rb->size        = size - 1;
    1e52:	606b      	str	r3, [r5, #4]
	rb->read_index  = 0;
    1e54:	60a8      	str	r0, [r5, #8]
	rb->write_index = rb->read_index;
    1e56:	60e8      	str	r0, [r5, #12]
	rb->buf         = (uint8_t *)buf;
    1e58:	602e      	str	r6, [r5, #0]

	return ERR_NONE;
}
    1e5a:	bd70      	pop	{r4, r5, r6, pc}
		return ERR_INVALID_ARG;
    1e5c:	200d      	movs	r0, #13
    1e5e:	4240      	negs	r0, r0
    1e60:	e7fb      	b.n	1e5a <ringbuffer_init+0x2e>
    1e62:	46c0      	nop			; (mov r8, r8)
    1e64:	00001e25 	.word	0x00001e25
    1e68:	00004fa8 	.word	0x00004fa8

00001e6c <ringbuffer_get>:
/**
 * \brief Get one byte from ringbuffer
 *
 */
int32_t ringbuffer_get(struct ringbuffer *const rb, uint8_t *data)
{
    1e6c:	b570      	push	{r4, r5, r6, lr}
    1e6e:	0004      	movs	r4, r0
    1e70:	000d      	movs	r5, r1
	ASSERT(rb && data);
    1e72:	2800      	cmp	r0, #0
    1e74:	d003      	beq.n	1e7e <ringbuffer_get+0x12>
    1e76:	0008      	movs	r0, r1
    1e78:	1e43      	subs	r3, r0, #1
    1e7a:	4198      	sbcs	r0, r3
    1e7c:	b2c0      	uxtb	r0, r0
    1e7e:	2240      	movs	r2, #64	; 0x40
    1e80:	4b09      	ldr	r3, [pc, #36]	; (1ea8 <ringbuffer_get+0x3c>)
    1e82:	490a      	ldr	r1, [pc, #40]	; (1eac <ringbuffer_get+0x40>)
    1e84:	4798      	blx	r3

	if (rb->write_index != rb->read_index) {
    1e86:	68a3      	ldr	r3, [r4, #8]
    1e88:	68e2      	ldr	r2, [r4, #12]
    1e8a:	429a      	cmp	r2, r3
    1e8c:	d009      	beq.n	1ea2 <ringbuffer_get+0x36>
		*data = rb->buf[rb->read_index & rb->size];
		rb->read_index++;
		return ERR_NONE;
    1e8e:	2000      	movs	r0, #0
		*data = rb->buf[rb->read_index & rb->size];
    1e90:	6862      	ldr	r2, [r4, #4]
    1e92:	4013      	ands	r3, r2
    1e94:	6822      	ldr	r2, [r4, #0]
    1e96:	5cd3      	ldrb	r3, [r2, r3]
    1e98:	702b      	strb	r3, [r5, #0]
		rb->read_index++;
    1e9a:	68a3      	ldr	r3, [r4, #8]
    1e9c:	3301      	adds	r3, #1
    1e9e:	60a3      	str	r3, [r4, #8]
	}

	return ERR_NOT_FOUND;
}
    1ea0:	bd70      	pop	{r4, r5, r6, pc}
	return ERR_NOT_FOUND;
    1ea2:	200a      	movs	r0, #10
    1ea4:	4240      	negs	r0, r0
    1ea6:	e7fb      	b.n	1ea0 <ringbuffer_get+0x34>
    1ea8:	00001e25 	.word	0x00001e25
    1eac:	00004fa8 	.word	0x00004fa8

00001eb0 <ringbuffer_put>:
/**
 * \brief Put one byte to ringbuffer
 *
 */
int32_t ringbuffer_put(struct ringbuffer *const rb, uint8_t data)
{
    1eb0:	b570      	push	{r4, r5, r6, lr}
    1eb2:	0004      	movs	r4, r0
	ASSERT(rb);
    1eb4:	1e43      	subs	r3, r0, #1
    1eb6:	4198      	sbcs	r0, r3
{
    1eb8:	000d      	movs	r5, r1
	ASSERT(rb);
    1eba:	2251      	movs	r2, #81	; 0x51
    1ebc:	490a      	ldr	r1, [pc, #40]	; (1ee8 <ringbuffer_put+0x38>)
    1ebe:	4b0b      	ldr	r3, [pc, #44]	; (1eec <ringbuffer_put+0x3c>)
    1ec0:	b2c0      	uxtb	r0, r0
    1ec2:	4798      	blx	r3

	rb->buf[rb->write_index & rb->size] = data;
    1ec4:	68e2      	ldr	r2, [r4, #12]
    1ec6:	6863      	ldr	r3, [r4, #4]
    1ec8:	4013      	ands	r3, r2
    1eca:	6822      	ldr	r2, [r4, #0]
    1ecc:	54d5      	strb	r5, [r2, r3]

	/*
	 * buffer full strategy: new data will overwrite the oldest data in
	 * the buffer
	 */
	if ((rb->write_index - rb->read_index) > rb->size) {
    1ece:	68e3      	ldr	r3, [r4, #12]
    1ed0:	68a1      	ldr	r1, [r4, #8]
    1ed2:	6862      	ldr	r2, [r4, #4]
    1ed4:	1a59      	subs	r1, r3, r1
    1ed6:	4291      	cmp	r1, r2
    1ed8:	d901      	bls.n	1ede <ringbuffer_put+0x2e>
		rb->read_index = rb->write_index - rb->size;
    1eda:	1a9a      	subs	r2, r3, r2
    1edc:	60a2      	str	r2, [r4, #8]
	}

	rb->write_index++;
    1ede:	3301      	adds	r3, #1

	return ERR_NONE;
}
    1ee0:	2000      	movs	r0, #0
	rb->write_index++;
    1ee2:	60e3      	str	r3, [r4, #12]
}
    1ee4:	bd70      	pop	{r4, r5, r6, pc}
    1ee6:	46c0      	nop			; (mov r8, r8)
    1ee8:	00004fa8 	.word	0x00004fa8
    1eec:	00001e25 	.word	0x00001e25

00001ef0 <ringbuffer_num>:

/**
 * \brief Return the element number of ringbuffer
 */
uint32_t ringbuffer_num(const struct ringbuffer *const rb)
{
    1ef0:	b510      	push	{r4, lr}
    1ef2:	0004      	movs	r4, r0
	ASSERT(rb);
    1ef4:	1e43      	subs	r3, r0, #1
    1ef6:	4198      	sbcs	r0, r3
    1ef8:	2267      	movs	r2, #103	; 0x67
    1efa:	b2c0      	uxtb	r0, r0
    1efc:	4903      	ldr	r1, [pc, #12]	; (1f0c <ringbuffer_num+0x1c>)
    1efe:	4b04      	ldr	r3, [pc, #16]	; (1f10 <ringbuffer_num+0x20>)
    1f00:	4798      	blx	r3

	return rb->write_index - rb->read_index;
    1f02:	68e0      	ldr	r0, [r4, #12]
    1f04:	68a3      	ldr	r3, [r4, #8]
    1f06:	1ac0      	subs	r0, r0, r3
}
    1f08:	bd10      	pop	{r4, pc}
    1f0a:	46c0      	nop			; (mov r8, r8)
    1f0c:	00004fa8 	.word	0x00004fa8
    1f10:	00001e25 	.word	0x00001e25

00001f14 <ringbuffer_flush>:

/**
 * \brief Flush ringbuffer
 */
uint32_t ringbuffer_flush(struct ringbuffer *const rb)
{
    1f14:	b510      	push	{r4, lr}
    1f16:	0004      	movs	r4, r0
	ASSERT(rb);
    1f18:	1e43      	subs	r3, r0, #1
    1f1a:	4198      	sbcs	r0, r3
    1f1c:	2271      	movs	r2, #113	; 0x71
    1f1e:	b2c0      	uxtb	r0, r0
    1f20:	4903      	ldr	r1, [pc, #12]	; (1f30 <ringbuffer_flush+0x1c>)
    1f22:	4b04      	ldr	r3, [pc, #16]	; (1f34 <ringbuffer_flush+0x20>)
    1f24:	4798      	blx	r3

	rb->read_index = rb->write_index;
    1f26:	68e3      	ldr	r3, [r4, #12]

	return ERR_NONE;
}
    1f28:	2000      	movs	r0, #0
	rb->read_index = rb->write_index;
    1f2a:	60a3      	str	r3, [r4, #8]
}
    1f2c:	bd10      	pop	{r4, pc}
    1f2e:	46c0      	nop			; (mov r8, r8)
    1f30:	00004fa8 	.word	0x00004fa8
    1f34:	00001e25 	.word	0x00001e25

00001f38 <_get_cycles_for_ms>:

/**
 * \brief Retrieve the amount of cycles to delay for the given amount of ms
 */
uint32_t _get_cycles_for_ms(const uint16_t ms)
{
    1f38:	0003      	movs	r3, r0
		return (ms * (freq / 100000) + 2) / 3 * 100;
    1f3a:	20a0      	movs	r0, #160	; 0xa0
    1f3c:	4358      	muls	r0, r3
{
    1f3e:	b510      	push	{r4, lr}
		return (ms * (freq / 100000) + 2) / 3 * 100;
    1f40:	4b03      	ldr	r3, [pc, #12]	; (1f50 <_get_cycles_for_ms+0x18>)
    1f42:	3002      	adds	r0, #2
    1f44:	2103      	movs	r1, #3
    1f46:	4798      	blx	r3
    1f48:	2364      	movs	r3, #100	; 0x64
    1f4a:	4358      	muls	r0, r3
	return _get_cycles_for_ms_internal(ms, CONF_CPU_FREQUENCY, CPU_FREQ_POWER);
}
    1f4c:	bd10      	pop	{r4, pc}
    1f4e:	46c0      	nop			; (mov r8, r8)
    1f50:	0000250d 	.word	0x0000250d

00001f54 <_delay_cycles>:
{
#ifndef _UNIT_TEST_
	(void)hw;
	(void)cycles;
#if defined __GNUC__
	__asm(".syntax unified\n"
    1f54:	3901      	subs	r1, #1
    1f56:	d8fd      	bhi.n	1f54 <_delay_cycles>
	__asm("__delay:\n"
	      "subs r1, r1, #1\n"
	      "bhi __delay\n");
#endif
#endif
}
    1f58:	4770      	bx	lr
	...

00001f5c <_init_chip>:

/**
 * \brief Initialize the hardware abstraction layer
 */
void _init_chip(void)
{
    1f5c:	b510      	push	{r4, lr}
}

static inline void hri_nvmctrl_set_CTRLB_RWS_bf(const void *const hw, hri_nvmctrl_ctrlb_reg_t mask)
{
	NVMCTRL_CRITICAL_SECTION_ENTER();
	((Nvmctrl *)hw)->CTRLB.reg |= NVMCTRL_CTRLB_RWS(mask);
    1f5e:	4b09      	ldr	r3, [pc, #36]	; (1f84 <_init_chip+0x28>)
	hri_nvmctrl_set_CTRLB_RWS_bf(NVMCTRL, CONF_NVM_WAIT_STATE);

	_set_performance_level(2);
    1f60:	2002      	movs	r0, #2
    1f62:	685a      	ldr	r2, [r3, #4]
    1f64:	605a      	str	r2, [r3, #4]
    1f66:	4b08      	ldr	r3, [pc, #32]	; (1f88 <_init_chip+0x2c>)
    1f68:	4798      	blx	r3

	_osc32kctrl_init_sources();
    1f6a:	4b08      	ldr	r3, [pc, #32]	; (1f8c <_init_chip+0x30>)
    1f6c:	4798      	blx	r3
	_oscctrl_init_sources();
    1f6e:	4b08      	ldr	r3, [pc, #32]	; (1f90 <_init_chip+0x34>)
    1f70:	4798      	blx	r3
	_mclk_init();
    1f72:	4b08      	ldr	r3, [pc, #32]	; (1f94 <_init_chip+0x38>)
    1f74:	4798      	blx	r3
#if _GCLK_INIT_1ST
	_gclk_init_generators_by_fref(_GCLK_INIT_1ST);
#endif
	_oscctrl_init_referenced_generators();
    1f76:	4b08      	ldr	r3, [pc, #32]	; (1f98 <_init_chip+0x3c>)
    1f78:	4798      	blx	r3
	_gclk_init_generators_by_fref(_GCLK_INIT_LAST);
    1f7a:	20ff      	movs	r0, #255	; 0xff
    1f7c:	4b07      	ldr	r3, [pc, #28]	; (1f9c <_init_chip+0x40>)
    1f7e:	4798      	blx	r3
#endif

#if (CONF_PORT_EVCTRL_PORT_0 | CONF_PORT_EVCTRL_PORT_1 | CONF_PORT_EVCTRL_PORT_2 | CONF_PORT_EVCTRL_PORT_3)
	_port_event_init();
#endif
}
    1f80:	bd10      	pop	{r4, pc}
    1f82:	46c0      	nop			; (mov r8, r8)
    1f84:	41004000 	.word	0x41004000
    1f88:	00002027 	.word	0x00002027
    1f8c:	00001fd5 	.word	0x00001fd5
    1f90:	00001fed 	.word	0x00001fed
    1f94:	00001fc1 	.word	0x00001fc1
    1f98:	00002025 	.word	0x00002025
    1f9c:	00001fa1 	.word	0x00001fa1

00001fa0 <_gclk_init_generators_by_fref>:

void _gclk_init_generators_by_fref(uint32_t bm)
{

#if CONF_GCLK_GENERATOR_0_CONFIG == 1
	if (bm & (1ul << 0)) {
    1fa0:	07c3      	lsls	r3, r0, #31
    1fa2:	d506      	bpl.n	1fb2 <_gclk_init_generators_by_fref+0x12>
	((Gclk *)hw)->GENCTRL[index].reg = data;
    1fa4:	4a03      	ldr	r2, [pc, #12]	; (1fb4 <_gclk_init_generators_by_fref+0x14>)
    1fa6:	4b04      	ldr	r3, [pc, #16]	; (1fb8 <_gclk_init_generators_by_fref+0x18>)
    1fa8:	621a      	str	r2, [r3, #32]
	while (((Gclk *)hw)->SYNCBUSY.reg & reg) {
    1faa:	4a04      	ldr	r2, [pc, #16]	; (1fbc <_gclk_init_generators_by_fref+0x1c>)
    1fac:	6859      	ldr	r1, [r3, #4]
    1fae:	4211      	tst	r1, r2
    1fb0:	d1fc      	bne.n	1fac <_gclk_init_generators_by_fref+0xc>
		        | (CONF_GCLK_GEN_8_DIVSEL << GCLK_GENCTRL_DIVSEL_Pos) | (CONF_GCLK_GEN_8_OE << GCLK_GENCTRL_OE_Pos)
		        | (CONF_GCLK_GEN_8_OOV << GCLK_GENCTRL_OOV_Pos) | (CONF_GCLK_GEN_8_IDC << GCLK_GENCTRL_IDC_Pos)
		        | (CONF_GCLK_GENERATOR_8_CONFIG << GCLK_GENCTRL_GENEN_Pos) | CONF_GCLK_GEN_8_SOURCE);
	}
#endif
}
    1fb2:	4770      	bx	lr
    1fb4:	00010106 	.word	0x00010106
    1fb8:	40001800 	.word	0x40001800
    1fbc:	000007fd 	.word	0x000007fd

00001fc0 <_mclk_init>:
	((Mclk *)hw)->BUPDIV.reg = data;
    1fc0:	2208      	movs	r2, #8
    1fc2:	4b03      	ldr	r3, [pc, #12]	; (1fd0 <_mclk_init+0x10>)
    1fc4:	719a      	strb	r2, [r3, #6]
	((Mclk *)hw)->LPDIV.reg = data;
    1fc6:	3a04      	subs	r2, #4
    1fc8:	715a      	strb	r2, [r3, #5]
	((Mclk *)hw)->CPUDIV.reg = data;
    1fca:	3a03      	subs	r2, #3
    1fcc:	711a      	strb	r2, [r3, #4]
{
	void *hw = (void *)MCLK;
	hri_mclk_write_BUPDIV_reg(hw, MCLK_BUPDIV_BUPDIV(CONF_MCLK_BUPDIV));
	hri_mclk_write_LPDIV_reg(hw, MCLK_LPDIV_LPDIV(CONF_MCLK_LPDIV));
	hri_mclk_write_CPUDIV_reg(hw, MCLK_CPUDIV_CPUDIV(CONF_MCLK_CPUDIV));
}
    1fce:	4770      	bx	lr
    1fd0:	40000400 	.word	0x40000400

00001fd4 <_osc32kctrl_init_sources>:
	calib = hri_osc32kctrl_read_OSCULP32K_CALIB_bf(hw);
	hri_osc32kctrl_write_OSCULP32K_reg(hw,
#if CONF_OSC32K_CALIB_ENABLE == 1
	                                   OSC32KCTRL_OSCULP32K_CALIB(CONF_OSC32K_CALIB)
#else
	                                   OSC32KCTRL_OSCULP32K_CALIB(calib)
    1fd4:	21f8      	movs	r1, #248	; 0xf8
}

static inline hri_osc32kctrl_osculp32k_reg_t hri_osc32kctrl_read_OSCULP32K_CALIB_bf(const void *const hw)
{
	uint32_t tmp;
	tmp = ((Osc32kctrl *)hw)->OSCULP32K.reg;
    1fd6:	4b04      	ldr	r3, [pc, #16]	; (1fe8 <_osc32kctrl_init_sources+0x14>)
    1fd8:	0149      	lsls	r1, r1, #5
    1fda:	69da      	ldr	r2, [r3, #28]
    1fdc:	400a      	ands	r2, r1
}

static inline void hri_osc32kctrl_write_OSCULP32K_reg(const void *const hw, hri_osc32kctrl_osculp32k_reg_t data)
{
	OSC32KCTRL_CRITICAL_SECTION_ENTER();
	((Osc32kctrl *)hw)->OSCULP32K.reg = data;
    1fde:	61da      	str	r2, [r3, #28]
	((Osc32kctrl *)hw)->RTCCTRL.reg = data;
    1fe0:	2201      	movs	r2, #1
    1fe2:	611a      	str	r2, [r3, #16]
		;
#endif
#endif
	hri_osc32kctrl_write_RTCCTRL_reg(hw, OSC32KCTRL_RTCCTRL_RTCSEL(CONF_RTCCTRL));
	(void)calib;
}
    1fe4:	4770      	bx	lr
    1fe6:	46c0      	nop			; (mov r8, r8)
    1fe8:	40001000 	.word	0x40001000

00001fec <_oscctrl_init_sources>:
}

static inline void hri_oscctrl_write_OSC16MCTRL_reg(const void *const hw, hri_oscctrl_osc16mctrl_reg_t data)
{
	OSCCTRL_CRITICAL_SECTION_ENTER();
	((Oscctrl *)hw)->OSC16MCTRL.reg = data;
    1fec:	228e      	movs	r2, #142	; 0x8e
    1fee:	4b0b      	ldr	r3, [pc, #44]	; (201c <STACK_SIZE+0x1c>)

/**
 * \brief Initialize clock sources
 */
void _oscctrl_init_sources(void)
{
    1ff0:	b510      	push	{r4, lr}
    1ff2:	751a      	strb	r2, [r3, #20]
	while (((Oscctrl *)hw)->DPLLSYNCBUSY.reg & reg) {
    1ff4:	4a0a      	ldr	r2, [pc, #40]	; (2020 <STACK_SIZE+0x20>)
    1ff6:	2002      	movs	r0, #2
    1ff8:	0011      	movs	r1, r2
    1ffa:	7814      	ldrb	r4, [r2, #0]
    1ffc:	4204      	tst	r4, r0
    1ffe:	d1fc      	bne.n	1ffa <_oscctrl_init_sources+0xe>
#endif
#endif

#if CONF_OSC16M_CONFIG == 1
#if CONF_OSC16M_ENABLE == 1
	while (!hri_oscctrl_get_STATUS_OSC16MRDY_bit(hw))
    2000:	2210      	movs	r2, #16
	return (((Oscctrl *)hw)->STATUS.reg & OSCCTRL_STATUS_OSC16MRDY) >> OSCCTRL_STATUS_OSC16MRDY_Pos;
    2002:	68d8      	ldr	r0, [r3, #12]
    2004:	4210      	tst	r0, r2
    2006:	d0fc      	beq.n	2002 <STACK_SIZE+0x2>
	((Oscctrl *)hw)->OSC16MCTRL.reg |= OSCCTRL_OSC16MCTRL_ONDEMAND;
    2008:	2080      	movs	r0, #128	; 0x80
    200a:	7d1a      	ldrb	r2, [r3, #20]
    200c:	4302      	orrs	r2, r0
    200e:	751a      	strb	r2, [r3, #20]
	while (((Oscctrl *)hw)->DPLLSYNCBUSY.reg & reg) {
    2010:	230e      	movs	r3, #14
    2012:	780a      	ldrb	r2, [r1, #0]
    2014:	421a      	tst	r2, r3
    2016:	d1fc      	bne.n	2012 <STACK_SIZE+0x12>
#if CONF_OSC16M_ONDEMAND == 1
	hri_oscctrl_set_OSC16MCTRL_ONDEMAND_bit(hw);
#endif
#endif
	(void)hw;
}
    2018:	bd10      	pop	{r4, pc}
    201a:	46c0      	nop			; (mov r8, r8)
    201c:	40000c00 	.word	0x40000c00
    2020:	40000c38 	.word	0x40000c38

00002024 <_oscctrl_init_referenced_generators>:
#if CONF_DFLL_CONFIG == 1
	while (hri_gclk_read_SYNCBUSY_reg(GCLK))
		;
#endif
	(void)hw, (void)tmp;
}
    2024:	4770      	bx	lr

00002026 <_set_performance_level>:
}

static inline hri_pm_plcfg_reg_t hri_pm_get_PLCFG_PLSEL_bf(const void *const hw, hri_pm_plcfg_reg_t mask)
{
	uint8_t tmp;
	tmp = ((Pm *)hw)->PLCFG.reg;
    2026:	2380      	movs	r3, #128	; 0x80
	tmp = (tmp & PM_PLCFG_PLSEL(mask)) >> PM_PLCFG_PLSEL_Pos;
    2028:	2103      	movs	r1, #3
	tmp = ((Pm *)hw)->PLCFG.reg;
    202a:	05db      	lsls	r3, r3, #23
    202c:	789a      	ldrb	r2, [r3, #2]
/**
 * \brief Set performance level
 */
void _set_performance_level(const uint8_t level)
{
	if (hri_pm_get_PLCFG_PLSEL_bf(PM, PM_PLCFG_PLSEL_Msk) != level) {
    202e:	400a      	ands	r2, r1
    2030:	4290      	cmp	r0, r2
    2032:	d009      	beq.n	2048 <_set_performance_level+0x22>
	((Pm *)hw)->INTFLAG.reg = mask;
    2034:	22ff      	movs	r2, #255	; 0xff
    2036:	719a      	strb	r2, [r3, #6]

static inline void hri_pm_write_PLCFG_PLSEL_bf(const void *const hw, hri_pm_plcfg_reg_t data)
{
	uint8_t tmp;
	PM_CRITICAL_SECTION_ENTER();
	tmp = ((Pm *)hw)->PLCFG.reg;
    2038:	789a      	ldrb	r2, [r3, #2]
	tmp &= ~PM_PLCFG_PLSEL_Msk;
	tmp |= PM_PLCFG_PLSEL(data);
    203a:	4008      	ands	r0, r1
	tmp &= ~PM_PLCFG_PLSEL_Msk;
    203c:	438a      	bics	r2, r1
	tmp |= PM_PLCFG_PLSEL(data);
    203e:	4310      	orrs	r0, r2
	((Pm *)hw)->PLCFG.reg = tmp;
    2040:	7098      	strb	r0, [r3, #2]
	return ((Pm *)hw)->INTFLAG.reg;
    2042:	799a      	ldrb	r2, [r3, #6]
		hri_pm_clear_INTFLAG_reg(PM, 0xFF);
		hri_pm_write_PLCFG_PLSEL_bf(PM, level);
		while (!hri_pm_read_INTFLAG_reg(PM))
    2044:	2a00      	cmp	r2, #0
    2046:	d0fc      	beq.n	2042 <_set_performance_level+0x1c>
			;
	}
}
    2048:	4770      	bx	lr
	...

0000204c <__NVIC_EnableIRQ>:
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
  if ((int32_t)(IRQn) >= 0)
    204c:	2800      	cmp	r0, #0
    204e:	db05      	blt.n	205c <__NVIC_EnableIRQ+0x10>
  {
    NVIC->ISER[0U] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
    2050:	231f      	movs	r3, #31
    2052:	4018      	ands	r0, r3
    2054:	3b1e      	subs	r3, #30
    2056:	4083      	lsls	r3, r0
    2058:	4a01      	ldr	r2, [pc, #4]	; (2060 <__NVIC_EnableIRQ+0x14>)
    205a:	6013      	str	r3, [r2, #0]
  }
}
    205c:	4770      	bx	lr
    205e:	46c0      	nop			; (mov r8, r8)
    2060:	e000e100 	.word	0xe000e100

00002064 <__NVIC_DisableIRQ>:
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_DisableIRQ(IRQn_Type IRQn)
{
  if ((int32_t)(IRQn) >= 0)
    2064:	2800      	cmp	r0, #0
    2066:	db09      	blt.n	207c <__NVIC_DisableIRQ+0x18>
  {
    NVIC->ICER[0U] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
    2068:	231f      	movs	r3, #31
    206a:	4018      	ands	r0, r3
    206c:	3b1e      	subs	r3, #30
    206e:	4083      	lsls	r3, r0
    2070:	4a03      	ldr	r2, [pc, #12]	; (2080 <__NVIC_DisableIRQ+0x1c>)
    2072:	67d3      	str	r3, [r2, #124]	; 0x7c
  __ASM volatile ("dsb 0xF":::"memory");
    2074:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
    2078:	f3bf 8f6f 	isb	sy
    __DSB();
    __ISB();
  }
}
    207c:	4770      	bx	lr
    207e:	46c0      	nop			; (mov r8, r8)
    2080:	e000e104 	.word	0xe000e104

00002084 <__NVIC_ClearPendingIRQ>:
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_ClearPendingIRQ(IRQn_Type IRQn)
{
  if ((int32_t)(IRQn) >= 0)
    2084:	2800      	cmp	r0, #0
    2086:	db07      	blt.n	2098 <__NVIC_ClearPendingIRQ+0x14>
  {
    NVIC->ICPR[0U] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
    2088:	231f      	movs	r3, #31
    208a:	22c0      	movs	r2, #192	; 0xc0
    208c:	4018      	ands	r0, r3
    208e:	3b1e      	subs	r3, #30
    2090:	4083      	lsls	r3, r0
    2092:	4902      	ldr	r1, [pc, #8]	; (209c <__NVIC_ClearPendingIRQ+0x18>)
    2094:	0052      	lsls	r2, r2, #1
    2096:	508b      	str	r3, [r1, r2]
  }
}
    2098:	4770      	bx	lr
    209a:	46c0      	nop			; (mov r8, r8)
    209c:	e000e100 	.word	0xe000e100

000020a0 <hri_sercomusart_wait_for_sync>:
	return ((Sercom *)hw)->SPI.SYNCBUSY.reg & reg;
}

static inline void hri_sercomusart_wait_for_sync(const void *const hw, hri_sercomusart_syncbusy_reg_t reg)
{
	while (((Sercom *)hw)->USART.SYNCBUSY.reg & reg) {
    20a0:	69c3      	ldr	r3, [r0, #28]
    20a2:	4219      	tst	r1, r3
    20a4:	d1fc      	bne.n	20a0 <hri_sercomusart_wait_for_sync>
	};
}
    20a6:	4770      	bx	lr

000020a8 <hri_sercomusart_get_CTRLA_ENABLE_bit>:
	hri_sercomusart_wait_for_sync(hw, SERCOM_USART_SYNCBUSY_SWRST | SERCOM_USART_SYNCBUSY_ENABLE);
	SERCOM_CRITICAL_SECTION_LEAVE();
}

static inline bool hri_sercomusart_get_CTRLA_ENABLE_bit(const void *const hw)
{
    20a8:	b510      	push	{r4, lr}
    20aa:	0004      	movs	r4, r0
	uint32_t tmp;
	hri_sercomusart_wait_for_sync(hw, SERCOM_USART_SYNCBUSY_SWRST | SERCOM_USART_SYNCBUSY_ENABLE);
    20ac:	2103      	movs	r1, #3
    20ae:	4b03      	ldr	r3, [pc, #12]	; (20bc <hri_sercomusart_get_CTRLA_ENABLE_bit+0x14>)
    20b0:	4798      	blx	r3
	tmp = ((Sercom *)hw)->USART.CTRLA.reg;
    20b2:	6820      	ldr	r0, [r4, #0]
	tmp = (tmp & SERCOM_USART_CTRLA_ENABLE) >> SERCOM_USART_CTRLA_ENABLE_Pos;
	return (bool)tmp;
    20b4:	0780      	lsls	r0, r0, #30
    20b6:	0fc0      	lsrs	r0, r0, #31
}
    20b8:	bd10      	pop	{r4, pc}
    20ba:	46c0      	nop			; (mov r8, r8)
    20bc:	000020a1 	.word	0x000020a1

000020c0 <hri_sercomusart_write_CTRLA_ENABLE_bit>:
static inline void hri_sercomusart_write_CTRLA_ENABLE_bit(const void *const hw, bool value)
{
	uint32_t tmp;
	SERCOM_CRITICAL_SECTION_ENTER();
	tmp = ((Sercom *)hw)->USART.CTRLA.reg;
	tmp &= ~SERCOM_USART_CTRLA_ENABLE;
    20c0:	2202      	movs	r2, #2
	tmp = ((Sercom *)hw)->USART.CTRLA.reg;
    20c2:	6803      	ldr	r3, [r0, #0]
{
    20c4:	b510      	push	{r4, lr}
	tmp &= ~SERCOM_USART_CTRLA_ENABLE;
    20c6:	4393      	bics	r3, r2
	tmp |= value << SERCOM_USART_CTRLA_ENABLE_Pos;
    20c8:	0049      	lsls	r1, r1, #1
    20ca:	4319      	orrs	r1, r3
	((Sercom *)hw)->USART.CTRLA.reg = tmp;
    20cc:	6001      	str	r1, [r0, #0]
	hri_sercomusart_wait_for_sync(hw, SERCOM_USART_SYNCBUSY_SWRST | SERCOM_USART_SYNCBUSY_ENABLE);
    20ce:	4b02      	ldr	r3, [pc, #8]	; (20d8 <hri_sercomusart_write_CTRLA_ENABLE_bit+0x18>)
    20d0:	2103      	movs	r1, #3
    20d2:	4798      	blx	r3
	SERCOM_CRITICAL_SECTION_LEAVE();
}
    20d4:	bd10      	pop	{r4, pc}
    20d6:	46c0      	nop			; (mov r8, r8)
    20d8:	000020a1 	.word	0x000020a1

000020dc <hri_sercomusart_clear_CTRLA_ENABLE_bit>:

static inline void hri_sercomusart_clear_CTRLA_ENABLE_bit(const void *const hw)
{
	SERCOM_CRITICAL_SECTION_ENTER();
	((Sercom *)hw)->USART.CTRLA.reg &= ~SERCOM_USART_CTRLA_ENABLE;
    20dc:	2202      	movs	r2, #2
{
    20de:	b510      	push	{r4, lr}
	((Sercom *)hw)->USART.CTRLA.reg &= ~SERCOM_USART_CTRLA_ENABLE;
    20e0:	6803      	ldr	r3, [r0, #0]
	hri_sercomusart_wait_for_sync(hw, SERCOM_USART_SYNCBUSY_SWRST | SERCOM_USART_SYNCBUSY_ENABLE);
    20e2:	2103      	movs	r1, #3
	((Sercom *)hw)->USART.CTRLA.reg &= ~SERCOM_USART_CTRLA_ENABLE;
    20e4:	4393      	bics	r3, r2
    20e6:	6003      	str	r3, [r0, #0]
	hri_sercomusart_wait_for_sync(hw, SERCOM_USART_SYNCBUSY_SWRST | SERCOM_USART_SYNCBUSY_ENABLE);
    20e8:	4b01      	ldr	r3, [pc, #4]	; (20f0 <hri_sercomusart_clear_CTRLA_ENABLE_bit+0x14>)
    20ea:	4798      	blx	r3
	SERCOM_CRITICAL_SECTION_LEAVE();
}
    20ec:	bd10      	pop	{r4, pc}
    20ee:	46c0      	nop			; (mov r8, r8)
    20f0:	000020a1 	.word	0x000020a1

000020f4 <_usart_set_baud_rate>:
 *
 * \param[in] device The pointer to USART device instance
 * \param[in] baud_rate A baud rate to set
 */
static void _usart_set_baud_rate(void *const hw, const uint32_t baud_rate)
{
    20f4:	b573      	push	{r0, r1, r4, r5, r6, lr}
	bool enabled = hri_sercomusart_get_CTRLA_ENABLE_bit(hw);
    20f6:	4b0c      	ldr	r3, [pc, #48]	; (2128 <_usart_set_baud_rate+0x34>)
{
    20f8:	0004      	movs	r4, r0
    20fa:	000d      	movs	r5, r1
	bool enabled = hri_sercomusart_get_CTRLA_ENABLE_bit(hw);
    20fc:	4798      	blx	r3
    20fe:	0006      	movs	r6, r0

	hri_sercomusart_clear_CTRLA_ENABLE_bit(hw);
    2100:	4b0a      	ldr	r3, [pc, #40]	; (212c <_usart_set_baud_rate+0x38>)
    2102:	0020      	movs	r0, r4
    2104:	4798      	blx	r3

	CRITICAL_SECTION_ENTER()
    2106:	a801      	add	r0, sp, #4
    2108:	4b09      	ldr	r3, [pc, #36]	; (2130 <_usart_set_baud_rate+0x3c>)
    210a:	4798      	blx	r3
	hri_sercomusart_wait_for_sync(hw, SERCOM_USART_SYNCBUSY_ENABLE);
	hri_sercomusart_write_BAUD_reg(hw, baud_rate);
    210c:	b2ad      	uxth	r5, r5
	hri_sercomusart_wait_for_sync(hw, SERCOM_USART_SYNCBUSY_ENABLE);
    210e:	2102      	movs	r1, #2
    2110:	0020      	movs	r0, r4
    2112:	4b08      	ldr	r3, [pc, #32]	; (2134 <_usart_set_baud_rate+0x40>)
    2114:	4798      	blx	r3
}

static inline void hri_sercomusart_write_BAUD_reg(const void *const hw, hri_sercomusart_baud_reg_t data)
{
	SERCOM_CRITICAL_SECTION_ENTER();
	((Sercom *)hw)->USART.BAUD.reg = data;
    2116:	81a5      	strh	r5, [r4, #12]
	CRITICAL_SECTION_LEAVE()
    2118:	a801      	add	r0, sp, #4
    211a:	4b07      	ldr	r3, [pc, #28]	; (2138 <_usart_set_baud_rate+0x44>)
    211c:	4798      	blx	r3

	hri_sercomusart_write_CTRLA_ENABLE_bit(hw, enabled);
    211e:	0031      	movs	r1, r6
    2120:	0020      	movs	r0, r4
    2122:	4b06      	ldr	r3, [pc, #24]	; (213c <_usart_set_baud_rate+0x48>)
    2124:	4798      	blx	r3
}
    2126:	bd73      	pop	{r0, r1, r4, r5, r6, pc}
    2128:	000020a9 	.word	0x000020a9
    212c:	000020dd 	.word	0x000020dd
    2130:	000019d5 	.word	0x000019d5
    2134:	000020a1 	.word	0x000020a1
    2138:	000019e3 	.word	0x000019e3
    213c:	000020c1 	.word	0x000020c1

00002140 <_usart_set_stop_bits>:
 *
 * \param[in] device The pointer to USART device instance
 * \param[in] stop_bits A stop bits mode to set
 */
static void _usart_set_stop_bits(void *const hw, const enum usart_stop_bits stop_bits)
{
    2140:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
	bool enabled = hri_sercomusart_get_CTRLA_ENABLE_bit(hw);
    2142:	4b11      	ldr	r3, [pc, #68]	; (2188 <_usart_set_stop_bits+0x48>)
{
    2144:	0004      	movs	r4, r0
    2146:	000d      	movs	r5, r1
	bool enabled = hri_sercomusart_get_CTRLA_ENABLE_bit(hw);
    2148:	4798      	blx	r3

	hri_sercomusart_clear_CTRLA_ENABLE_bit(hw);
    214a:	4b10      	ldr	r3, [pc, #64]	; (218c <_usart_set_stop_bits+0x4c>)
	bool enabled = hri_sercomusart_get_CTRLA_ENABLE_bit(hw);
    214c:	0007      	movs	r7, r0
	hri_sercomusart_clear_CTRLA_ENABLE_bit(hw);
    214e:	0020      	movs	r0, r4
    2150:	4798      	blx	r3

	CRITICAL_SECTION_ENTER()
    2152:	a801      	add	r0, sp, #4
    2154:	4b0e      	ldr	r3, [pc, #56]	; (2190 <_usart_set_stop_bits+0x50>)
    2156:	4798      	blx	r3
	hri_sercomusart_wait_for_sync(hw, SERCOM_USART_SYNCBUSY_ENABLE);
    2158:	4e0e      	ldr	r6, [pc, #56]	; (2194 <_usart_set_stop_bits+0x54>)
    215a:	0020      	movs	r0, r4
    215c:	2102      	movs	r1, #2
    215e:	47b0      	blx	r6
	tmp &= ~SERCOM_USART_CTRLB_SBMODE;
    2160:	2240      	movs	r2, #64	; 0x40
	tmp = ((Sercom *)hw)->USART.CTRLB.reg;
    2162:	6863      	ldr	r3, [r4, #4]
	hri_sercomusart_wait_for_sync(hw, SERCOM_USART_SYNCBUSY_MASK);
    2164:	2107      	movs	r1, #7
	tmp &= ~SERCOM_USART_CTRLB_SBMODE;
    2166:	4393      	bics	r3, r2
	hri_sercomusart_write_CTRLB_SBMODE_bit(hw, stop_bits);
    2168:	1e6a      	subs	r2, r5, #1
    216a:	4195      	sbcs	r5, r2
	tmp |= value << SERCOM_USART_CTRLB_SBMODE_Pos;
    216c:	01ad      	lsls	r5, r5, #6
    216e:	431d      	orrs	r5, r3
	((Sercom *)hw)->USART.CTRLB.reg = tmp;
    2170:	6065      	str	r5, [r4, #4]
	hri_sercomusart_wait_for_sync(hw, SERCOM_USART_SYNCBUSY_MASK);
    2172:	0020      	movs	r0, r4
    2174:	47b0      	blx	r6
	CRITICAL_SECTION_LEAVE()
    2176:	a801      	add	r0, sp, #4
    2178:	4b07      	ldr	r3, [pc, #28]	; (2198 <_usart_set_stop_bits+0x58>)
    217a:	4798      	blx	r3

	hri_sercomusart_write_CTRLA_ENABLE_bit(hw, enabled);
    217c:	0039      	movs	r1, r7
    217e:	0020      	movs	r0, r4
    2180:	4b06      	ldr	r3, [pc, #24]	; (219c <_usart_set_stop_bits+0x5c>)
    2182:	4798      	blx	r3
}
    2184:	bdf7      	pop	{r0, r1, r2, r4, r5, r6, r7, pc}
    2186:	46c0      	nop			; (mov r8, r8)
    2188:	000020a9 	.word	0x000020a9
    218c:	000020dd 	.word	0x000020dd
    2190:	000019d5 	.word	0x000019d5
    2194:	000020a1 	.word	0x000020a1
    2198:	000019e3 	.word	0x000019e3
    219c:	000020c1 	.word	0x000020c1

000021a0 <_usart_set_character_size>:
 *
 * \param[in] device The pointer to USART device instance
 * \param[in] size A character size to set
 */
static void _usart_set_character_size(void *const hw, const enum usart_character_size size)
{
    21a0:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
	bool enabled = hri_sercomusart_get_CTRLA_ENABLE_bit(hw);
    21a2:	4b12      	ldr	r3, [pc, #72]	; (21ec <_usart_set_character_size+0x4c>)
{
    21a4:	0004      	movs	r4, r0
    21a6:	000d      	movs	r5, r1
	bool enabled = hri_sercomusart_get_CTRLA_ENABLE_bit(hw);
    21a8:	4798      	blx	r3

	hri_sercomusart_clear_CTRLA_ENABLE_bit(hw);
    21aa:	4b11      	ldr	r3, [pc, #68]	; (21f0 <_usart_set_character_size+0x50>)
	bool enabled = hri_sercomusart_get_CTRLA_ENABLE_bit(hw);
    21ac:	0007      	movs	r7, r0
	hri_sercomusart_clear_CTRLA_ENABLE_bit(hw);
    21ae:	0020      	movs	r0, r4
    21b0:	4798      	blx	r3

	CRITICAL_SECTION_ENTER()
    21b2:	4b10      	ldr	r3, [pc, #64]	; (21f4 <_usart_set_character_size+0x54>)
    21b4:	a801      	add	r0, sp, #4
    21b6:	4798      	blx	r3
	hri_sercomusart_wait_for_sync(hw, SERCOM_USART_SYNCBUSY_ENABLE);
    21b8:	2102      	movs	r1, #2
    21ba:	0020      	movs	r0, r4
    21bc:	4e0e      	ldr	r6, [pc, #56]	; (21f8 <_usart_set_character_size+0x58>)
    21be:	47b0      	blx	r6
	tmp &= ~SERCOM_USART_CTRLB_CHSIZE_Msk;
    21c0:	2107      	movs	r1, #7
	tmp = ((Sercom *)hw)->USART.CTRLB.reg;
    21c2:	6863      	ldr	r3, [r4, #4]
	tmp |= SERCOM_USART_CTRLB_CHSIZE(data);
    21c4:	400d      	ands	r5, r1
	tmp &= ~SERCOM_USART_CTRLB_CHSIZE_Msk;
    21c6:	438b      	bics	r3, r1
	tmp |= SERCOM_USART_CTRLB_CHSIZE(data);
    21c8:	431d      	orrs	r5, r3
	hri_sercomusart_wait_for_sync(hw, SERCOM_USART_SYNCBUSY_MASK);
    21ca:	0020      	movs	r0, r4
	((Sercom *)hw)->USART.CTRLB.reg = tmp;
    21cc:	6065      	str	r5, [r4, #4]
	hri_sercomusart_wait_for_sync(hw, SERCOM_USART_SYNCBUSY_MASK);
    21ce:	47b0      	blx	r6
	hri_sercomusart_write_CTRLB_CHSIZE_bf(hw, size);
	CRITICAL_SECTION_LEAVE()
    21d0:	a801      	add	r0, sp, #4
    21d2:	4b0a      	ldr	r3, [pc, #40]	; (21fc <_usart_set_character_size+0x5c>)
    21d4:	4798      	blx	r3

	if (enabled) {
    21d6:	2f00      	cmp	r7, #0
    21d8:	d006      	beq.n	21e8 <_usart_set_character_size+0x48>
	((Sercom *)hw)->USART.CTRLA.reg |= SERCOM_USART_CTRLA_ENABLE;
    21da:	2302      	movs	r3, #2
    21dc:	6822      	ldr	r2, [r4, #0]
	hri_sercomusart_wait_for_sync(hw, SERCOM_USART_SYNCBUSY_SWRST | SERCOM_USART_SYNCBUSY_ENABLE);
    21de:	2103      	movs	r1, #3
	((Sercom *)hw)->USART.CTRLA.reg |= SERCOM_USART_CTRLA_ENABLE;
    21e0:	4313      	orrs	r3, r2
    21e2:	6023      	str	r3, [r4, #0]
	hri_sercomusart_wait_for_sync(hw, SERCOM_USART_SYNCBUSY_SWRST | SERCOM_USART_SYNCBUSY_ENABLE);
    21e4:	0020      	movs	r0, r4
    21e6:	47b0      	blx	r6
		hri_sercomusart_set_CTRLA_ENABLE_bit(hw);
	}
}
    21e8:	bdf7      	pop	{r0, r1, r2, r4, r5, r6, r7, pc}
    21ea:	46c0      	nop			; (mov r8, r8)
    21ec:	000020a9 	.word	0x000020a9
    21f0:	000020dd 	.word	0x000020dd
    21f4:	000019d5 	.word	0x000019d5
    21f8:	000020a1 	.word	0x000020a1
    21fc:	000019e3 	.word	0x000019e3

00002200 <_usart_set_parity>:
{
    2200:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
	bool enabled = hri_sercomusart_get_CTRLA_ENABLE_bit(hw);
    2202:	4b18      	ldr	r3, [pc, #96]	; (2264 <_usart_set_parity+0x64>)
{
    2204:	000d      	movs	r5, r1
    2206:	0004      	movs	r4, r0
	bool enabled = hri_sercomusart_get_CTRLA_ENABLE_bit(hw);
    2208:	4798      	blx	r3
	hri_sercomusart_clear_CTRLA_ENABLE_bit(hw);
    220a:	4b17      	ldr	r3, [pc, #92]	; (2268 <_usart_set_parity+0x68>)
	bool enabled = hri_sercomusart_get_CTRLA_ENABLE_bit(hw);
    220c:	0007      	movs	r7, r0
	hri_sercomusart_clear_CTRLA_ENABLE_bit(hw);
    220e:	0020      	movs	r0, r4
    2210:	4798      	blx	r3
	CRITICAL_SECTION_ENTER()
    2212:	a801      	add	r0, sp, #4
    2214:	4b15      	ldr	r3, [pc, #84]	; (226c <_usart_set_parity+0x6c>)
    2216:	4798      	blx	r3
	hri_sercomusart_wait_for_sync(hw, SERCOM_USART_SYNCBUSY_ENABLE);
    2218:	2102      	movs	r1, #2
    221a:	0020      	movs	r0, r4
    221c:	4e14      	ldr	r6, [pc, #80]	; (2270 <_usart_set_parity+0x70>)
    221e:	47b0      	blx	r6
	if (USART_PARITY_NONE != parity) {
    2220:	2d02      	cmp	r5, #2
    2222:	d01a      	beq.n	225a <_usart_set_parity+0x5a>
	((Sercom *)hw)->USART.CTRLA.reg |= SERCOM_USART_CTRLA_FORM(mask);
    2224:	2380      	movs	r3, #128	; 0x80
    2226:	6822      	ldr	r2, [r4, #0]
    2228:	045b      	lsls	r3, r3, #17
    222a:	4313      	orrs	r3, r2
	((Sercom *)hw)->USART.CTRLA.reg &= ~SERCOM_USART_CTRLA_FORM(mask);
    222c:	6023      	str	r3, [r4, #0]
	hri_sercomusart_wait_for_sync(hw, SERCOM_USART_SYNCBUSY_MASK);
    222e:	0020      	movs	r0, r4
    2230:	2107      	movs	r1, #7
    2232:	47b0      	blx	r6
	tmp &= ~SERCOM_USART_CTRLB_PMODE;
    2234:	4a0f      	ldr	r2, [pc, #60]	; (2274 <_usart_set_parity+0x74>)
	tmp = ((Sercom *)hw)->USART.CTRLB.reg;
    2236:	6863      	ldr	r3, [r4, #4]
	hri_sercomusart_wait_for_sync(hw, SERCOM_USART_SYNCBUSY_MASK);
    2238:	2107      	movs	r1, #7
	tmp &= ~SERCOM_USART_CTRLB_PMODE;
    223a:	4013      	ands	r3, r2
	hri_sercomusart_write_CTRLB_PMODE_bit(hw, parity);
    223c:	1e6a      	subs	r2, r5, #1
    223e:	4195      	sbcs	r5, r2
	tmp |= value << SERCOM_USART_CTRLB_PMODE_Pos;
    2240:	036d      	lsls	r5, r5, #13
    2242:	431d      	orrs	r5, r3
	((Sercom *)hw)->USART.CTRLB.reg = tmp;
    2244:	6065      	str	r5, [r4, #4]
	hri_sercomusart_wait_for_sync(hw, SERCOM_USART_SYNCBUSY_MASK);
    2246:	0020      	movs	r0, r4
    2248:	47b0      	blx	r6
	CRITICAL_SECTION_LEAVE()
    224a:	a801      	add	r0, sp, #4
    224c:	4b0a      	ldr	r3, [pc, #40]	; (2278 <_usart_set_parity+0x78>)
    224e:	4798      	blx	r3
	hri_sercomusart_write_CTRLA_ENABLE_bit(hw, enabled);
    2250:	0039      	movs	r1, r7
    2252:	0020      	movs	r0, r4
    2254:	4b09      	ldr	r3, [pc, #36]	; (227c <_usart_set_parity+0x7c>)
    2256:	4798      	blx	r3
}
    2258:	bdf7      	pop	{r0, r1, r2, r4, r5, r6, r7, pc}
	((Sercom *)hw)->USART.CTRLA.reg &= ~SERCOM_USART_CTRLA_FORM(mask);
    225a:	6823      	ldr	r3, [r4, #0]
    225c:	4a08      	ldr	r2, [pc, #32]	; (2280 <_usart_set_parity+0x80>)
    225e:	4013      	ands	r3, r2
    2260:	e7e4      	b.n	222c <_usart_set_parity+0x2c>
    2262:	46c0      	nop			; (mov r8, r8)
    2264:	000020a9 	.word	0x000020a9
    2268:	000020dd 	.word	0x000020dd
    226c:	000019d5 	.word	0x000019d5
    2270:	000020a1 	.word	0x000020a1
    2274:	ffffdfff 	.word	0xffffdfff
    2278:	000019e3 	.word	0x000019e3
    227c:	000020c1 	.word	0x000020c1
    2280:	feffffff 	.word	0xfeffffff

00002284 <_usart_init>:
	if ((uint32_t)SERCOM5 == (uint32_t)hw) {
    2284:	4b1c      	ldr	r3, [pc, #112]	; (22f8 <_usart_init+0x74>)
{
    2286:	b570      	push	{r4, r5, r6, lr}
    2288:	0004      	movs	r4, r0
	if ((uint32_t)SERCOM5 == (uint32_t)hw) {
    228a:	4298      	cmp	r0, r3
    228c:	d003      	beq.n	2296 <_usart_init+0x12>
	return ((uint32_t)hw - (uint32_t)SERCOM0) >> 10;
    228e:	0383      	lsls	r3, r0, #14
		if (_usarts[i].number == sercom_offset) {
    2290:	0e1b      	lsrs	r3, r3, #24
    2292:	2b04      	cmp	r3, #4
    2294:	d004      	beq.n	22a0 <_usart_init+0x1c>
	ASSERT(false);
    2296:	4a19      	ldr	r2, [pc, #100]	; (22fc <_usart_init+0x78>)
    2298:	4919      	ldr	r1, [pc, #100]	; (2300 <_usart_init+0x7c>)
    229a:	2000      	movs	r0, #0
    229c:	4b19      	ldr	r3, [pc, #100]	; (2304 <_usart_init+0x80>)
    229e:	4798      	blx	r3
	return ((Sercom *)hw)->USART.SYNCBUSY.reg & reg;
    22a0:	69e3      	ldr	r3, [r4, #28]
    22a2:	4d19      	ldr	r5, [pc, #100]	; (2308 <_usart_init+0x84>)
	if (!hri_sercomusart_is_syncing(hw, SERCOM_USART_SYNCBUSY_SWRST)) {
    22a4:	07db      	lsls	r3, r3, #31
    22a6:	d411      	bmi.n	22cc <_usart_init+0x48>
	tmp &= mask;
    22a8:	2602      	movs	r6, #2
	hri_sercomusart_wait_for_sync(hw, SERCOM_USART_SYNCBUSY_SWRST | SERCOM_USART_SYNCBUSY_ENABLE);
    22aa:	2103      	movs	r1, #3
    22ac:	0020      	movs	r0, r4
    22ae:	47a8      	blx	r5
	tmp = ((Sercom *)hw)->USART.CTRLA.reg;
    22b0:	6823      	ldr	r3, [r4, #0]
		if (hri_sercomusart_get_CTRLA_reg(hw, SERCOM_USART_CTRLA_ENABLE)) {
    22b2:	4233      	tst	r3, r6
    22b4:	d005      	beq.n	22c2 <_usart_init+0x3e>
			hri_sercomusart_clear_CTRLA_ENABLE_bit(hw);
    22b6:	0020      	movs	r0, r4
    22b8:	4b14      	ldr	r3, [pc, #80]	; (230c <_usart_init+0x88>)
    22ba:	4798      	blx	r3
			hri_sercomusart_wait_for_sync(hw, SERCOM_USART_SYNCBUSY_ENABLE);
    22bc:	0031      	movs	r1, r6
    22be:	0020      	movs	r0, r4
    22c0:	47a8      	blx	r5
	((Sercom *)hw)->USART.CTRLA.reg = data;
    22c2:	2305      	movs	r3, #5
	hri_sercomusart_wait_for_sync(hw, SERCOM_USART_SYNCBUSY_SWRST | SERCOM_USART_SYNCBUSY_ENABLE);
    22c4:	2103      	movs	r1, #3
	((Sercom *)hw)->USART.CTRLA.reg = data;
    22c6:	6023      	str	r3, [r4, #0]
	hri_sercomusart_wait_for_sync(hw, SERCOM_USART_SYNCBUSY_SWRST | SERCOM_USART_SYNCBUSY_ENABLE);
    22c8:	0020      	movs	r0, r4
    22ca:	47a8      	blx	r5
	hri_sercomusart_wait_for_sync(hw, SERCOM_USART_SYNCBUSY_SWRST);
    22cc:	0020      	movs	r0, r4
    22ce:	2101      	movs	r1, #1
    22d0:	47a8      	blx	r5
	((Sercom *)hw)->USART.CTRLA.reg = data;
    22d2:	4b0f      	ldr	r3, [pc, #60]	; (2310 <_usart_init+0x8c>)
	hri_sercomusart_wait_for_sync(hw, SERCOM_USART_SYNCBUSY_SWRST | SERCOM_USART_SYNCBUSY_ENABLE);
    22d4:	0020      	movs	r0, r4
	((Sercom *)hw)->USART.CTRLA.reg = data;
    22d6:	6023      	str	r3, [r4, #0]
	hri_sercomusart_wait_for_sync(hw, SERCOM_USART_SYNCBUSY_SWRST | SERCOM_USART_SYNCBUSY_ENABLE);
    22d8:	2103      	movs	r1, #3
    22da:	47a8      	blx	r5
	((Sercom *)hw)->USART.CTRLB.reg = data;
    22dc:	23c0      	movs	r3, #192	; 0xc0
    22de:	029b      	lsls	r3, r3, #10
    22e0:	6063      	str	r3, [r4, #4]
	hri_sercomusart_wait_for_sync(hw, SERCOM_USART_SYNCBUSY_MASK);
    22e2:	0020      	movs	r0, r4
    22e4:	2107      	movs	r1, #7
    22e6:	47a8      	blx	r5
}

static inline void hri_sercomusart_write_RXPL_reg(const void *const hw, hri_sercomusart_rxpl_reg_t data)
{
	SERCOM_CRITICAL_SECTION_ENTER();
	((Sercom *)hw)->USART.RXPL.reg = data;
    22e8:	2000      	movs	r0, #0
	((Sercom *)hw)->USART.BAUD.reg = data;
    22ea:	4b0a      	ldr	r3, [pc, #40]	; (2314 <_usart_init+0x90>)
    22ec:	81a3      	strh	r3, [r4, #12]
	((Sercom *)hw)->USART.RXPL.reg = data;
    22ee:	73a0      	strb	r0, [r4, #14]
}

static inline void hri_sercomusart_write_DBGCTRL_reg(const void *const hw, hri_sercomusart_dbgctrl_reg_t data)
{
	SERCOM_CRITICAL_SECTION_ENTER();
	((Sercom *)hw)->USART.DBGCTRL.reg = data;
    22f0:	3430      	adds	r4, #48	; 0x30
    22f2:	7020      	strb	r0, [r4, #0]
}
    22f4:	bd70      	pop	{r4, r5, r6, pc}
    22f6:	46c0      	nop			; (mov r8, r8)
    22f8:	43000400 	.word	0x43000400
    22fc:	00000261 	.word	0x00000261
    2300:	00004fcc 	.word	0x00004fcc
    2304:	00001e25 	.word	0x00001e25
    2308:	000020a1 	.word	0x000020a1
    230c:	000020dd 	.word	0x000020dd
    2310:	40100004 	.word	0x40100004
    2314:	fffffd8a 	.word	0xfffffd8a

00002318 <_sercom_get_irq_num>:
	if ((uint32_t)SERCOM5 == (uint32_t)hw) {
    2318:	4a05      	ldr	r2, [pc, #20]	; (2330 <_sercom_get_irq_num+0x18>)
    231a:	2305      	movs	r3, #5
    231c:	4290      	cmp	r0, r2
    231e:	d003      	beq.n	2328 <_sercom_get_irq_num+0x10>
	return ((uint32_t)hw - (uint32_t)SERCOM0) >> 10;
    2320:	23be      	movs	r3, #190	; 0xbe
    2322:	061b      	lsls	r3, r3, #24
    2324:	18c0      	adds	r0, r0, r3
    2326:	0a83      	lsrs	r3, r0, #10
/**
 * \brief Retrieve IRQ number for the given hardware instance
 */
static uint8_t _sercom_get_irq_num(const void *const hw)
{
	return SERCOM0_IRQn + _sercom_get_hardware_index(hw);
    2328:	3308      	adds	r3, #8
    232a:	b2d8      	uxtb	r0, r3
}
    232c:	4770      	bx	lr
    232e:	46c0      	nop			; (mov r8, r8)
    2330:	43000400 	.word	0x43000400

00002334 <_usart_async_init>:
{
    2334:	b570      	push	{r4, r5, r6, lr}
    2336:	0006      	movs	r6, r0
	ASSERT(device);
    2338:	1e43      	subs	r3, r0, #1
    233a:	4198      	sbcs	r0, r3
{
    233c:	000c      	movs	r4, r1
	ASSERT(device);
    233e:	b2c0      	uxtb	r0, r0
    2340:	22c4      	movs	r2, #196	; 0xc4
    2342:	490e      	ldr	r1, [pc, #56]	; (237c <_usart_async_init+0x48>)
    2344:	4b0e      	ldr	r3, [pc, #56]	; (2380 <_usart_async_init+0x4c>)
    2346:	4798      	blx	r3
	init_status = _usart_init(hw);
    2348:	0020      	movs	r0, r4
    234a:	4b0e      	ldr	r3, [pc, #56]	; (2384 <_usart_async_init+0x50>)
    234c:	4798      	blx	r3
    234e:	1e05      	subs	r5, r0, #0
	if (init_status) {
    2350:	d112      	bne.n	2378 <_usart_async_init+0x44>
	if (hw == SERCOM4) {
    2352:	4b0d      	ldr	r3, [pc, #52]	; (2388 <_usart_async_init+0x54>)
	device->hw = hw;
    2354:	61b4      	str	r4, [r6, #24]
	if (hw == SERCOM4) {
    2356:	429c      	cmp	r4, r3
    2358:	d101      	bne.n	235e <_usart_async_init+0x2a>
		_sercom4_dev = (struct _usart_async_device *)dev;
    235a:	4b0c      	ldr	r3, [pc, #48]	; (238c <_usart_async_init+0x58>)
    235c:	601e      	str	r6, [r3, #0]
	NVIC_DisableIRQ((IRQn_Type)_sercom_get_irq_num(hw));
    235e:	4b0c      	ldr	r3, [pc, #48]	; (2390 <_usart_async_init+0x5c>)
    2360:	0020      	movs	r0, r4
    2362:	4798      	blx	r3
    2364:	b244      	sxtb	r4, r0
    2366:	0020      	movs	r0, r4
    2368:	4b0a      	ldr	r3, [pc, #40]	; (2394 <_usart_async_init+0x60>)
    236a:	4798      	blx	r3
	NVIC_ClearPendingIRQ((IRQn_Type)_sercom_get_irq_num(hw));
    236c:	0020      	movs	r0, r4
    236e:	4b0a      	ldr	r3, [pc, #40]	; (2398 <_usart_async_init+0x64>)
    2370:	4798      	blx	r3
	NVIC_EnableIRQ((IRQn_Type)_sercom_get_irq_num(hw));
    2372:	0020      	movs	r0, r4
    2374:	4b09      	ldr	r3, [pc, #36]	; (239c <_usart_async_init+0x68>)
    2376:	4798      	blx	r3
}
    2378:	0028      	movs	r0, r5
    237a:	bd70      	pop	{r4, r5, r6, pc}
    237c:	00004fcc 	.word	0x00004fcc
    2380:	00001e25 	.word	0x00001e25
    2384:	00002285 	.word	0x00002285
    2388:	42001000 	.word	0x42001000
    238c:	20000544 	.word	0x20000544
    2390:	00002319 	.word	0x00002319
    2394:	00002065 	.word	0x00002065
    2398:	00002085 	.word	0x00002085
    239c:	0000204d 	.word	0x0000204d

000023a0 <_usart_async_enable>:
	((Sercom *)hw)->USART.CTRLA.reg |= SERCOM_USART_CTRLA_ENABLE;
    23a0:	2302      	movs	r3, #2
{
    23a2:	b510      	push	{r4, lr}
	hri_sercomusart_set_CTRLA_ENABLE_bit(device->hw);
    23a4:	6980      	ldr	r0, [r0, #24]
	hri_sercomusart_wait_for_sync(hw, SERCOM_USART_SYNCBUSY_SWRST | SERCOM_USART_SYNCBUSY_ENABLE);
    23a6:	2103      	movs	r1, #3
	((Sercom *)hw)->USART.CTRLA.reg |= SERCOM_USART_CTRLA_ENABLE;
    23a8:	6802      	ldr	r2, [r0, #0]
    23aa:	4313      	orrs	r3, r2
    23ac:	6003      	str	r3, [r0, #0]
	hri_sercomusart_wait_for_sync(hw, SERCOM_USART_SYNCBUSY_SWRST | SERCOM_USART_SYNCBUSY_ENABLE);
    23ae:	4b01      	ldr	r3, [pc, #4]	; (23b4 <_usart_async_enable+0x14>)
    23b0:	4798      	blx	r3
}
    23b2:	bd10      	pop	{r4, pc}
    23b4:	000020a1 	.word	0x000020a1

000023b8 <_usart_async_disable>:
{
    23b8:	b510      	push	{r4, lr}
	hri_sercomusart_clear_CTRLA_ENABLE_bit(device->hw);
    23ba:	6980      	ldr	r0, [r0, #24]
    23bc:	4b01      	ldr	r3, [pc, #4]	; (23c4 <_usart_async_disable+0xc>)
    23be:	4798      	blx	r3
}
    23c0:	bd10      	pop	{r4, pc}
    23c2:	46c0      	nop			; (mov r8, r8)
    23c4:	000020dd 	.word	0x000020dd

000023c8 <_usart_async_set_baud_rate>:
{
    23c8:	b510      	push	{r4, lr}
	_usart_set_baud_rate(device->hw, baud_rate);
    23ca:	6980      	ldr	r0, [r0, #24]
    23cc:	4b01      	ldr	r3, [pc, #4]	; (23d4 <_usart_async_set_baud_rate+0xc>)
    23ce:	4798      	blx	r3
}
    23d0:	bd10      	pop	{r4, pc}
    23d2:	46c0      	nop			; (mov r8, r8)
    23d4:	000020f5 	.word	0x000020f5

000023d8 <_usart_async_set_parity>:
{
    23d8:	b510      	push	{r4, lr}
	_usart_set_parity(device->hw, parity);
    23da:	6980      	ldr	r0, [r0, #24]
    23dc:	4b01      	ldr	r3, [pc, #4]	; (23e4 <_usart_async_set_parity+0xc>)
    23de:	4798      	blx	r3
}
    23e0:	bd10      	pop	{r4, pc}
    23e2:	46c0      	nop			; (mov r8, r8)
    23e4:	00002201 	.word	0x00002201

000023e8 <_usart_async_set_stop_bits>:
{
    23e8:	b510      	push	{r4, lr}
	_usart_set_stop_bits(device->hw, stop_bits);
    23ea:	6980      	ldr	r0, [r0, #24]
    23ec:	4b01      	ldr	r3, [pc, #4]	; (23f4 <_usart_async_set_stop_bits+0xc>)
    23ee:	4798      	blx	r3
}
    23f0:	bd10      	pop	{r4, pc}
    23f2:	46c0      	nop			; (mov r8, r8)
    23f4:	00002141 	.word	0x00002141

000023f8 <_usart_async_set_character_size>:
{
    23f8:	b510      	push	{r4, lr}
	_usart_set_character_size(device->hw, size);
    23fa:	6980      	ldr	r0, [r0, #24]
    23fc:	4b01      	ldr	r3, [pc, #4]	; (2404 <_usart_async_set_character_size+0xc>)
    23fe:	4798      	blx	r3
}
    2400:	bd10      	pop	{r4, pc}
    2402:	46c0      	nop			; (mov r8, r8)
    2404:	000021a1 	.word	0x000021a1

00002408 <_usart_async_write_byte>:
	hri_sercomusart_write_DATA_reg(device->hw, data);
    2408:	6983      	ldr	r3, [r0, #24]
    240a:	b289      	uxth	r1, r1
	((Sercom *)hw)->USART.DATA.reg = data;
    240c:	8519      	strh	r1, [r3, #40]	; 0x28
}
    240e:	4770      	bx	lr

00002410 <_usart_async_enable_byte_sent_irq>:
	((Sercom *)hw)->USART.INTENSET.reg = SERCOM_USART_INTENSET_DRE;
    2410:	2201      	movs	r2, #1
	hri_sercomusart_set_INTEN_DRE_bit(device->hw);
    2412:	6983      	ldr	r3, [r0, #24]
    2414:	759a      	strb	r2, [r3, #22]
}
    2416:	4770      	bx	lr

00002418 <_usart_async_enable_tx_done_irq>:
	((Sercom *)hw)->USART.INTENSET.reg = SERCOM_USART_INTENSET_TXC;
    2418:	2202      	movs	r2, #2
	hri_sercomusart_set_INTEN_TXC_bit(device->hw);
    241a:	6983      	ldr	r3, [r0, #24]
    241c:	759a      	strb	r2, [r3, #22]
}
    241e:	4770      	bx	lr

00002420 <_usart_async_set_irq_state>:
{
    2420:	b570      	push	{r4, r5, r6, lr}
    2422:	0004      	movs	r4, r0
	ASSERT(device);
    2424:	1e43      	subs	r3, r0, #1
    2426:	4198      	sbcs	r0, r3
{
    2428:	000e      	movs	r6, r1
	ASSERT(device);
    242a:	4b10      	ldr	r3, [pc, #64]	; (246c <_usart_async_set_irq_state+0x4c>)
{
    242c:	0015      	movs	r5, r2
	ASSERT(device);
    242e:	b2c0      	uxtb	r0, r0
    2430:	4a0f      	ldr	r2, [pc, #60]	; (2470 <_usart_async_set_irq_state+0x50>)
    2432:	4910      	ldr	r1, [pc, #64]	; (2474 <_usart_async_set_irq_state+0x54>)
    2434:	4798      	blx	r3
	if (USART_ASYNC_BYTE_SENT == type || USART_ASYNC_TX_DONE == type) {
    2436:	2202      	movs	r2, #2
    2438:	0033      	movs	r3, r6
    243a:	4393      	bics	r3, r2
    243c:	d109      	bne.n	2452 <_usart_async_set_irq_state+0x32>
		hri_sercomusart_write_INTEN_DRE_bit(device->hw, state);
    243e:	69a3      	ldr	r3, [r4, #24]
    2440:	2101      	movs	r1, #1
	if (value == 0x0) {
    2442:	2d00      	cmp	r5, #0
    2444:	d102      	bne.n	244c <_usart_async_set_irq_state+0x2c>
		((Sercom *)hw)->USART.INTENCLR.reg = SERCOM_USART_INTENSET_DRE;
    2446:	7519      	strb	r1, [r3, #20]
		((Sercom *)hw)->USART.INTENCLR.reg = SERCOM_USART_INTENSET_ERROR;
    2448:	751a      	strb	r2, [r3, #20]
}
    244a:	bd70      	pop	{r4, r5, r6, pc}
		((Sercom *)hw)->USART.INTENSET.reg = SERCOM_USART_INTENSET_DRE;
    244c:	7599      	strb	r1, [r3, #22]
		((Sercom *)hw)->USART.INTENSET.reg = SERCOM_USART_INTENSET_ERROR;
    244e:	759a      	strb	r2, [r3, #22]
    2450:	e7fb      	b.n	244a <_usart_async_set_irq_state+0x2a>
	} else if (USART_ASYNC_RX_DONE == type) {
    2452:	2e01      	cmp	r6, #1
    2454:	d104      	bne.n	2460 <_usart_async_set_irq_state+0x40>
    2456:	2204      	movs	r2, #4
		hri_sercomusart_write_INTEN_RXC_bit(device->hw, state);
    2458:	69a3      	ldr	r3, [r4, #24]
	if (value == 0x0) {
    245a:	2d00      	cmp	r5, #0
    245c:	d1f7      	bne.n	244e <_usart_async_set_irq_state+0x2e>
    245e:	e7f3      	b.n	2448 <_usart_async_set_irq_state+0x28>
	} else if (USART_ASYNC_ERROR == type) {
    2460:	2e03      	cmp	r6, #3
    2462:	d1f2      	bne.n	244a <_usart_async_set_irq_state+0x2a>
		hri_sercomusart_write_INTEN_ERROR_bit(device->hw, state);
    2464:	69a3      	ldr	r3, [r4, #24]
    2466:	2280      	movs	r2, #128	; 0x80
    2468:	e7f7      	b.n	245a <_usart_async_set_irq_state+0x3a>
    246a:	46c0      	nop			; (mov r8, r8)
    246c:	00001e25 	.word	0x00001e25
    2470:	00000221 	.word	0x00000221
    2474:	00004fcc 	.word	0x00004fcc

00002478 <SERCOM4_Handler>:
	return NULL;
}

void SERCOM4_Handler(void)
{
	_sercom_usart_interrupt_handler(_sercom4_dev);
    2478:	4b19      	ldr	r3, [pc, #100]	; (24e0 <SERCOM4_Handler+0x68>)
{
    247a:	b510      	push	{r4, lr}
	_sercom_usart_interrupt_handler(_sercom4_dev);
    247c:	6818      	ldr	r0, [r3, #0]
	if (hri_sercomusart_get_interrupt_DRE_bit(hw) && hri_sercomusart_get_INTEN_DRE_bit(hw)) {
    247e:	2301      	movs	r3, #1
	void *hw = device->hw;
    2480:	6984      	ldr	r4, [r0, #24]
	return (((Sercom *)hw)->USART.INTFLAG.reg & SERCOM_USART_INTFLAG_DRE) >> SERCOM_USART_INTFLAG_DRE_Pos;
    2482:	7e22      	ldrb	r2, [r4, #24]
	if (hri_sercomusart_get_interrupt_DRE_bit(hw) && hri_sercomusart_get_INTEN_DRE_bit(hw)) {
    2484:	421a      	tst	r2, r3
    2486:	d006      	beq.n	2496 <SERCOM4_Handler+0x1e>
	return (((Sercom *)hw)->USART.INTENSET.reg & SERCOM_USART_INTENSET_DRE) >> SERCOM_USART_INTENSET_DRE_Pos;
    2488:	7da2      	ldrb	r2, [r4, #22]
    248a:	421a      	tst	r2, r3
    248c:	d003      	beq.n	2496 <SERCOM4_Handler+0x1e>
	((Sercom *)hw)->USART.INTENCLR.reg = SERCOM_USART_INTENSET_DRE;
    248e:	7523      	strb	r3, [r4, #20]
		device->usart_cb.tx_byte_sent(device);
    2490:	6803      	ldr	r3, [r0, #0]
		device->usart_cb.tx_done_cb(device);
    2492:	4798      	blx	r3
}
    2494:	bd10      	pop	{r4, pc}
	return (((Sercom *)hw)->USART.INTFLAG.reg & SERCOM_USART_INTFLAG_TXC) >> SERCOM_USART_INTFLAG_TXC_Pos;
    2496:	7e23      	ldrb	r3, [r4, #24]
    2498:	2201      	movs	r2, #1
	} else if (hri_sercomusart_get_interrupt_TXC_bit(hw) && hri_sercomusart_get_INTEN_TXC_bit(hw)) {
    249a:	079b      	lsls	r3, r3, #30
    249c:	d507      	bpl.n	24ae <SERCOM4_Handler+0x36>
	return (((Sercom *)hw)->USART.INTENSET.reg & SERCOM_USART_INTENSET_TXC) >> SERCOM_USART_INTENSET_TXC_Pos;
    249e:	7da3      	ldrb	r3, [r4, #22]
    24a0:	40d3      	lsrs	r3, r2
    24a2:	4213      	tst	r3, r2
    24a4:	d003      	beq.n	24ae <SERCOM4_Handler+0x36>
	((Sercom *)hw)->USART.INTENCLR.reg = SERCOM_USART_INTENSET_TXC;
    24a6:	2302      	movs	r3, #2
    24a8:	7523      	strb	r3, [r4, #20]
		device->usart_cb.tx_done_cb(device);
    24aa:	6883      	ldr	r3, [r0, #8]
    24ac:	e7f1      	b.n	2492 <SERCOM4_Handler+0x1a>
	return (((Sercom *)hw)->USART.INTFLAG.reg & SERCOM_USART_INTFLAG_RXC) >> SERCOM_USART_INTFLAG_RXC_Pos;
    24ae:	7e23      	ldrb	r3, [r4, #24]
	} else if (hri_sercomusart_get_interrupt_RXC_bit(hw)) {
    24b0:	075b      	lsls	r3, r3, #29
    24b2:	d50b      	bpl.n	24cc <SERCOM4_Handler+0x54>
		if (hri_sercomusart_read_STATUS_reg(hw)
    24b4:	2337      	movs	r3, #55	; 0x37
	SERCOM_CRITICAL_SECTION_LEAVE();
}

static inline hri_sercomusart_status_reg_t hri_sercomusart_read_STATUS_reg(const void *const hw)
{
	return ((Sercom *)hw)->USART.STATUS.reg;
    24b6:	8b62      	ldrh	r2, [r4, #26]
    24b8:	421a      	tst	r2, r3
    24ba:	d002      	beq.n	24c2 <SERCOM4_Handler+0x4a>
	((Sercom *)hw)->USART.STATUS.reg = mask;
    24bc:	3308      	adds	r3, #8
    24be:	8363      	strh	r3, [r4, #26]
}
    24c0:	e7e8      	b.n	2494 <SERCOM4_Handler+0x1c>
	return ((Sercom *)hw)->USART.DATA.reg;
    24c2:	8d21      	ldrh	r1, [r4, #40]	; 0x28
		device->usart_cb.rx_done_cb(device, hri_sercomusart_read_DATA_reg(hw));
    24c4:	6843      	ldr	r3, [r0, #4]
    24c6:	b2c9      	uxtb	r1, r1
    24c8:	4798      	blx	r3
    24ca:	e7e3      	b.n	2494 <SERCOM4_Handler+0x1c>
	return (((Sercom *)hw)->USART.INTFLAG.reg & SERCOM_USART_INTFLAG_ERROR) >> SERCOM_USART_INTFLAG_ERROR_Pos;
    24cc:	7e23      	ldrb	r3, [r4, #24]
	} else if (hri_sercomusart_get_interrupt_ERROR_bit(hw)) {
    24ce:	09db      	lsrs	r3, r3, #7
    24d0:	d0e0      	beq.n	2494 <SERCOM4_Handler+0x1c>
	((Sercom *)hw)->USART.INTFLAG.reg = SERCOM_USART_INTFLAG_ERROR;
    24d2:	2380      	movs	r3, #128	; 0x80
    24d4:	7623      	strb	r3, [r4, #24]
		device->usart_cb.error_cb(device);
    24d6:	68c3      	ldr	r3, [r0, #12]
    24d8:	4798      	blx	r3
	return ((Sercom *)hw)->USART.STATUS.reg;
    24da:	8b63      	ldrh	r3, [r4, #26]
    24dc:	b29b      	uxth	r3, r3
    24de:	e7ee      	b.n	24be <SERCOM4_Handler+0x46>
    24e0:	20000544 	.word	0x20000544

000024e4 <main>:
#include "cupdi/cupdi.h"

int main(void)
{
	/* Initializes MCU, drivers and middleware */
	atmel_start_init();
    24e4:	4b02      	ldr	r3, [pc, #8]	; (24f0 <main+0xc>)
{
    24e6:	b510      	push	{r4, lr}
	atmel_start_init();
    24e8:	4798      	blx	r3

#ifdef CUPDI
	cupdi_operate();
    24ea:	4b02      	ldr	r3, [pc, #8]	; (24f4 <main+0x10>)
    24ec:	4798      	blx	r3
    24ee:	e7fe      	b.n	24ee <main+0xa>
    24f0:	00000115 	.word	0x00000115
    24f4:	000001c5 	.word	0x000001c5

000024f8 <__gnu_thumb1_case_uqi>:
    24f8:	b402      	push	{r1}
    24fa:	4671      	mov	r1, lr
    24fc:	0849      	lsrs	r1, r1, #1
    24fe:	0049      	lsls	r1, r1, #1
    2500:	5c09      	ldrb	r1, [r1, r0]
    2502:	0049      	lsls	r1, r1, #1
    2504:	448e      	add	lr, r1
    2506:	bc02      	pop	{r1}
    2508:	4770      	bx	lr
    250a:	46c0      	nop			; (mov r8, r8)

0000250c <__udivsi3>:
    250c:	2200      	movs	r2, #0
    250e:	0843      	lsrs	r3, r0, #1
    2510:	428b      	cmp	r3, r1
    2512:	d374      	bcc.n	25fe <__udivsi3+0xf2>
    2514:	0903      	lsrs	r3, r0, #4
    2516:	428b      	cmp	r3, r1
    2518:	d35f      	bcc.n	25da <__udivsi3+0xce>
    251a:	0a03      	lsrs	r3, r0, #8
    251c:	428b      	cmp	r3, r1
    251e:	d344      	bcc.n	25aa <__udivsi3+0x9e>
    2520:	0b03      	lsrs	r3, r0, #12
    2522:	428b      	cmp	r3, r1
    2524:	d328      	bcc.n	2578 <__udivsi3+0x6c>
    2526:	0c03      	lsrs	r3, r0, #16
    2528:	428b      	cmp	r3, r1
    252a:	d30d      	bcc.n	2548 <__udivsi3+0x3c>
    252c:	22ff      	movs	r2, #255	; 0xff
    252e:	0209      	lsls	r1, r1, #8
    2530:	ba12      	rev	r2, r2
    2532:	0c03      	lsrs	r3, r0, #16
    2534:	428b      	cmp	r3, r1
    2536:	d302      	bcc.n	253e <__udivsi3+0x32>
    2538:	1212      	asrs	r2, r2, #8
    253a:	0209      	lsls	r1, r1, #8
    253c:	d065      	beq.n	260a <__udivsi3+0xfe>
    253e:	0b03      	lsrs	r3, r0, #12
    2540:	428b      	cmp	r3, r1
    2542:	d319      	bcc.n	2578 <__udivsi3+0x6c>
    2544:	e000      	b.n	2548 <__udivsi3+0x3c>
    2546:	0a09      	lsrs	r1, r1, #8
    2548:	0bc3      	lsrs	r3, r0, #15
    254a:	428b      	cmp	r3, r1
    254c:	d301      	bcc.n	2552 <__udivsi3+0x46>
    254e:	03cb      	lsls	r3, r1, #15
    2550:	1ac0      	subs	r0, r0, r3
    2552:	4152      	adcs	r2, r2
    2554:	0b83      	lsrs	r3, r0, #14
    2556:	428b      	cmp	r3, r1
    2558:	d301      	bcc.n	255e <__udivsi3+0x52>
    255a:	038b      	lsls	r3, r1, #14
    255c:	1ac0      	subs	r0, r0, r3
    255e:	4152      	adcs	r2, r2
    2560:	0b43      	lsrs	r3, r0, #13
    2562:	428b      	cmp	r3, r1
    2564:	d301      	bcc.n	256a <__udivsi3+0x5e>
    2566:	034b      	lsls	r3, r1, #13
    2568:	1ac0      	subs	r0, r0, r3
    256a:	4152      	adcs	r2, r2
    256c:	0b03      	lsrs	r3, r0, #12
    256e:	428b      	cmp	r3, r1
    2570:	d301      	bcc.n	2576 <__udivsi3+0x6a>
    2572:	030b      	lsls	r3, r1, #12
    2574:	1ac0      	subs	r0, r0, r3
    2576:	4152      	adcs	r2, r2
    2578:	0ac3      	lsrs	r3, r0, #11
    257a:	428b      	cmp	r3, r1
    257c:	d301      	bcc.n	2582 <__udivsi3+0x76>
    257e:	02cb      	lsls	r3, r1, #11
    2580:	1ac0      	subs	r0, r0, r3
    2582:	4152      	adcs	r2, r2
    2584:	0a83      	lsrs	r3, r0, #10
    2586:	428b      	cmp	r3, r1
    2588:	d301      	bcc.n	258e <__udivsi3+0x82>
    258a:	028b      	lsls	r3, r1, #10
    258c:	1ac0      	subs	r0, r0, r3
    258e:	4152      	adcs	r2, r2
    2590:	0a43      	lsrs	r3, r0, #9
    2592:	428b      	cmp	r3, r1
    2594:	d301      	bcc.n	259a <__udivsi3+0x8e>
    2596:	024b      	lsls	r3, r1, #9
    2598:	1ac0      	subs	r0, r0, r3
    259a:	4152      	adcs	r2, r2
    259c:	0a03      	lsrs	r3, r0, #8
    259e:	428b      	cmp	r3, r1
    25a0:	d301      	bcc.n	25a6 <__udivsi3+0x9a>
    25a2:	020b      	lsls	r3, r1, #8
    25a4:	1ac0      	subs	r0, r0, r3
    25a6:	4152      	adcs	r2, r2
    25a8:	d2cd      	bcs.n	2546 <__udivsi3+0x3a>
    25aa:	09c3      	lsrs	r3, r0, #7
    25ac:	428b      	cmp	r3, r1
    25ae:	d301      	bcc.n	25b4 <__udivsi3+0xa8>
    25b0:	01cb      	lsls	r3, r1, #7
    25b2:	1ac0      	subs	r0, r0, r3
    25b4:	4152      	adcs	r2, r2
    25b6:	0983      	lsrs	r3, r0, #6
    25b8:	428b      	cmp	r3, r1
    25ba:	d301      	bcc.n	25c0 <__udivsi3+0xb4>
    25bc:	018b      	lsls	r3, r1, #6
    25be:	1ac0      	subs	r0, r0, r3
    25c0:	4152      	adcs	r2, r2
    25c2:	0943      	lsrs	r3, r0, #5
    25c4:	428b      	cmp	r3, r1
    25c6:	d301      	bcc.n	25cc <__udivsi3+0xc0>
    25c8:	014b      	lsls	r3, r1, #5
    25ca:	1ac0      	subs	r0, r0, r3
    25cc:	4152      	adcs	r2, r2
    25ce:	0903      	lsrs	r3, r0, #4
    25d0:	428b      	cmp	r3, r1
    25d2:	d301      	bcc.n	25d8 <__udivsi3+0xcc>
    25d4:	010b      	lsls	r3, r1, #4
    25d6:	1ac0      	subs	r0, r0, r3
    25d8:	4152      	adcs	r2, r2
    25da:	08c3      	lsrs	r3, r0, #3
    25dc:	428b      	cmp	r3, r1
    25de:	d301      	bcc.n	25e4 <__udivsi3+0xd8>
    25e0:	00cb      	lsls	r3, r1, #3
    25e2:	1ac0      	subs	r0, r0, r3
    25e4:	4152      	adcs	r2, r2
    25e6:	0883      	lsrs	r3, r0, #2
    25e8:	428b      	cmp	r3, r1
    25ea:	d301      	bcc.n	25f0 <__udivsi3+0xe4>
    25ec:	008b      	lsls	r3, r1, #2
    25ee:	1ac0      	subs	r0, r0, r3
    25f0:	4152      	adcs	r2, r2
    25f2:	0843      	lsrs	r3, r0, #1
    25f4:	428b      	cmp	r3, r1
    25f6:	d301      	bcc.n	25fc <__udivsi3+0xf0>
    25f8:	004b      	lsls	r3, r1, #1
    25fa:	1ac0      	subs	r0, r0, r3
    25fc:	4152      	adcs	r2, r2
    25fe:	1a41      	subs	r1, r0, r1
    2600:	d200      	bcs.n	2604 <__udivsi3+0xf8>
    2602:	4601      	mov	r1, r0
    2604:	4152      	adcs	r2, r2
    2606:	4610      	mov	r0, r2
    2608:	4770      	bx	lr
    260a:	e7ff      	b.n	260c <__udivsi3+0x100>
    260c:	b501      	push	{r0, lr}
    260e:	2000      	movs	r0, #0
    2610:	f000 f8f0 	bl	27f4 <__aeabi_idiv0>
    2614:	bd02      	pop	{r1, pc}
    2616:	46c0      	nop			; (mov r8, r8)

00002618 <__aeabi_uidivmod>:
    2618:	2900      	cmp	r1, #0
    261a:	d0f7      	beq.n	260c <__udivsi3+0x100>
    261c:	e776      	b.n	250c <__udivsi3>
    261e:	4770      	bx	lr

00002620 <__divsi3>:
    2620:	4603      	mov	r3, r0
    2622:	430b      	orrs	r3, r1
    2624:	d47f      	bmi.n	2726 <__divsi3+0x106>
    2626:	2200      	movs	r2, #0
    2628:	0843      	lsrs	r3, r0, #1
    262a:	428b      	cmp	r3, r1
    262c:	d374      	bcc.n	2718 <__divsi3+0xf8>
    262e:	0903      	lsrs	r3, r0, #4
    2630:	428b      	cmp	r3, r1
    2632:	d35f      	bcc.n	26f4 <__divsi3+0xd4>
    2634:	0a03      	lsrs	r3, r0, #8
    2636:	428b      	cmp	r3, r1
    2638:	d344      	bcc.n	26c4 <__divsi3+0xa4>
    263a:	0b03      	lsrs	r3, r0, #12
    263c:	428b      	cmp	r3, r1
    263e:	d328      	bcc.n	2692 <__divsi3+0x72>
    2640:	0c03      	lsrs	r3, r0, #16
    2642:	428b      	cmp	r3, r1
    2644:	d30d      	bcc.n	2662 <__divsi3+0x42>
    2646:	22ff      	movs	r2, #255	; 0xff
    2648:	0209      	lsls	r1, r1, #8
    264a:	ba12      	rev	r2, r2
    264c:	0c03      	lsrs	r3, r0, #16
    264e:	428b      	cmp	r3, r1
    2650:	d302      	bcc.n	2658 <__divsi3+0x38>
    2652:	1212      	asrs	r2, r2, #8
    2654:	0209      	lsls	r1, r1, #8
    2656:	d065      	beq.n	2724 <__divsi3+0x104>
    2658:	0b03      	lsrs	r3, r0, #12
    265a:	428b      	cmp	r3, r1
    265c:	d319      	bcc.n	2692 <__divsi3+0x72>
    265e:	e000      	b.n	2662 <__divsi3+0x42>
    2660:	0a09      	lsrs	r1, r1, #8
    2662:	0bc3      	lsrs	r3, r0, #15
    2664:	428b      	cmp	r3, r1
    2666:	d301      	bcc.n	266c <__divsi3+0x4c>
    2668:	03cb      	lsls	r3, r1, #15
    266a:	1ac0      	subs	r0, r0, r3
    266c:	4152      	adcs	r2, r2
    266e:	0b83      	lsrs	r3, r0, #14
    2670:	428b      	cmp	r3, r1
    2672:	d301      	bcc.n	2678 <__divsi3+0x58>
    2674:	038b      	lsls	r3, r1, #14
    2676:	1ac0      	subs	r0, r0, r3
    2678:	4152      	adcs	r2, r2
    267a:	0b43      	lsrs	r3, r0, #13
    267c:	428b      	cmp	r3, r1
    267e:	d301      	bcc.n	2684 <__divsi3+0x64>
    2680:	034b      	lsls	r3, r1, #13
    2682:	1ac0      	subs	r0, r0, r3
    2684:	4152      	adcs	r2, r2
    2686:	0b03      	lsrs	r3, r0, #12
    2688:	428b      	cmp	r3, r1
    268a:	d301      	bcc.n	2690 <__divsi3+0x70>
    268c:	030b      	lsls	r3, r1, #12
    268e:	1ac0      	subs	r0, r0, r3
    2690:	4152      	adcs	r2, r2
    2692:	0ac3      	lsrs	r3, r0, #11
    2694:	428b      	cmp	r3, r1
    2696:	d301      	bcc.n	269c <__divsi3+0x7c>
    2698:	02cb      	lsls	r3, r1, #11
    269a:	1ac0      	subs	r0, r0, r3
    269c:	4152      	adcs	r2, r2
    269e:	0a83      	lsrs	r3, r0, #10
    26a0:	428b      	cmp	r3, r1
    26a2:	d301      	bcc.n	26a8 <__divsi3+0x88>
    26a4:	028b      	lsls	r3, r1, #10
    26a6:	1ac0      	subs	r0, r0, r3
    26a8:	4152      	adcs	r2, r2
    26aa:	0a43      	lsrs	r3, r0, #9
    26ac:	428b      	cmp	r3, r1
    26ae:	d301      	bcc.n	26b4 <__divsi3+0x94>
    26b0:	024b      	lsls	r3, r1, #9
    26b2:	1ac0      	subs	r0, r0, r3
    26b4:	4152      	adcs	r2, r2
    26b6:	0a03      	lsrs	r3, r0, #8
    26b8:	428b      	cmp	r3, r1
    26ba:	d301      	bcc.n	26c0 <__divsi3+0xa0>
    26bc:	020b      	lsls	r3, r1, #8
    26be:	1ac0      	subs	r0, r0, r3
    26c0:	4152      	adcs	r2, r2
    26c2:	d2cd      	bcs.n	2660 <__divsi3+0x40>
    26c4:	09c3      	lsrs	r3, r0, #7
    26c6:	428b      	cmp	r3, r1
    26c8:	d301      	bcc.n	26ce <__divsi3+0xae>
    26ca:	01cb      	lsls	r3, r1, #7
    26cc:	1ac0      	subs	r0, r0, r3
    26ce:	4152      	adcs	r2, r2
    26d0:	0983      	lsrs	r3, r0, #6
    26d2:	428b      	cmp	r3, r1
    26d4:	d301      	bcc.n	26da <__divsi3+0xba>
    26d6:	018b      	lsls	r3, r1, #6
    26d8:	1ac0      	subs	r0, r0, r3
    26da:	4152      	adcs	r2, r2
    26dc:	0943      	lsrs	r3, r0, #5
    26de:	428b      	cmp	r3, r1
    26e0:	d301      	bcc.n	26e6 <__divsi3+0xc6>
    26e2:	014b      	lsls	r3, r1, #5
    26e4:	1ac0      	subs	r0, r0, r3
    26e6:	4152      	adcs	r2, r2
    26e8:	0903      	lsrs	r3, r0, #4
    26ea:	428b      	cmp	r3, r1
    26ec:	d301      	bcc.n	26f2 <__divsi3+0xd2>
    26ee:	010b      	lsls	r3, r1, #4
    26f0:	1ac0      	subs	r0, r0, r3
    26f2:	4152      	adcs	r2, r2
    26f4:	08c3      	lsrs	r3, r0, #3
    26f6:	428b      	cmp	r3, r1
    26f8:	d301      	bcc.n	26fe <__divsi3+0xde>
    26fa:	00cb      	lsls	r3, r1, #3
    26fc:	1ac0      	subs	r0, r0, r3
    26fe:	4152      	adcs	r2, r2
    2700:	0883      	lsrs	r3, r0, #2
    2702:	428b      	cmp	r3, r1
    2704:	d301      	bcc.n	270a <__divsi3+0xea>
    2706:	008b      	lsls	r3, r1, #2
    2708:	1ac0      	subs	r0, r0, r3
    270a:	4152      	adcs	r2, r2
    270c:	0843      	lsrs	r3, r0, #1
    270e:	428b      	cmp	r3, r1
    2710:	d301      	bcc.n	2716 <__divsi3+0xf6>
    2712:	004b      	lsls	r3, r1, #1
    2714:	1ac0      	subs	r0, r0, r3
    2716:	4152      	adcs	r2, r2
    2718:	1a41      	subs	r1, r0, r1
    271a:	d200      	bcs.n	271e <__divsi3+0xfe>
    271c:	4601      	mov	r1, r0
    271e:	4152      	adcs	r2, r2
    2720:	4610      	mov	r0, r2
    2722:	4770      	bx	lr
    2724:	e05d      	b.n	27e2 <__divsi3+0x1c2>
    2726:	0fca      	lsrs	r2, r1, #31
    2728:	d000      	beq.n	272c <__divsi3+0x10c>
    272a:	4249      	negs	r1, r1
    272c:	1003      	asrs	r3, r0, #32
    272e:	d300      	bcc.n	2732 <__divsi3+0x112>
    2730:	4240      	negs	r0, r0
    2732:	4053      	eors	r3, r2
    2734:	2200      	movs	r2, #0
    2736:	469c      	mov	ip, r3
    2738:	0903      	lsrs	r3, r0, #4
    273a:	428b      	cmp	r3, r1
    273c:	d32d      	bcc.n	279a <__divsi3+0x17a>
    273e:	0a03      	lsrs	r3, r0, #8
    2740:	428b      	cmp	r3, r1
    2742:	d312      	bcc.n	276a <__divsi3+0x14a>
    2744:	22fc      	movs	r2, #252	; 0xfc
    2746:	0189      	lsls	r1, r1, #6
    2748:	ba12      	rev	r2, r2
    274a:	0a03      	lsrs	r3, r0, #8
    274c:	428b      	cmp	r3, r1
    274e:	d30c      	bcc.n	276a <__divsi3+0x14a>
    2750:	0189      	lsls	r1, r1, #6
    2752:	1192      	asrs	r2, r2, #6
    2754:	428b      	cmp	r3, r1
    2756:	d308      	bcc.n	276a <__divsi3+0x14a>
    2758:	0189      	lsls	r1, r1, #6
    275a:	1192      	asrs	r2, r2, #6
    275c:	428b      	cmp	r3, r1
    275e:	d304      	bcc.n	276a <__divsi3+0x14a>
    2760:	0189      	lsls	r1, r1, #6
    2762:	d03a      	beq.n	27da <__divsi3+0x1ba>
    2764:	1192      	asrs	r2, r2, #6
    2766:	e000      	b.n	276a <__divsi3+0x14a>
    2768:	0989      	lsrs	r1, r1, #6
    276a:	09c3      	lsrs	r3, r0, #7
    276c:	428b      	cmp	r3, r1
    276e:	d301      	bcc.n	2774 <__divsi3+0x154>
    2770:	01cb      	lsls	r3, r1, #7
    2772:	1ac0      	subs	r0, r0, r3
    2774:	4152      	adcs	r2, r2
    2776:	0983      	lsrs	r3, r0, #6
    2778:	428b      	cmp	r3, r1
    277a:	d301      	bcc.n	2780 <__divsi3+0x160>
    277c:	018b      	lsls	r3, r1, #6
    277e:	1ac0      	subs	r0, r0, r3
    2780:	4152      	adcs	r2, r2
    2782:	0943      	lsrs	r3, r0, #5
    2784:	428b      	cmp	r3, r1
    2786:	d301      	bcc.n	278c <__divsi3+0x16c>
    2788:	014b      	lsls	r3, r1, #5
    278a:	1ac0      	subs	r0, r0, r3
    278c:	4152      	adcs	r2, r2
    278e:	0903      	lsrs	r3, r0, #4
    2790:	428b      	cmp	r3, r1
    2792:	d301      	bcc.n	2798 <__divsi3+0x178>
    2794:	010b      	lsls	r3, r1, #4
    2796:	1ac0      	subs	r0, r0, r3
    2798:	4152      	adcs	r2, r2
    279a:	08c3      	lsrs	r3, r0, #3
    279c:	428b      	cmp	r3, r1
    279e:	d301      	bcc.n	27a4 <__divsi3+0x184>
    27a0:	00cb      	lsls	r3, r1, #3
    27a2:	1ac0      	subs	r0, r0, r3
    27a4:	4152      	adcs	r2, r2
    27a6:	0883      	lsrs	r3, r0, #2
    27a8:	428b      	cmp	r3, r1
    27aa:	d301      	bcc.n	27b0 <__divsi3+0x190>
    27ac:	008b      	lsls	r3, r1, #2
    27ae:	1ac0      	subs	r0, r0, r3
    27b0:	4152      	adcs	r2, r2
    27b2:	d2d9      	bcs.n	2768 <__divsi3+0x148>
    27b4:	0843      	lsrs	r3, r0, #1
    27b6:	428b      	cmp	r3, r1
    27b8:	d301      	bcc.n	27be <__divsi3+0x19e>
    27ba:	004b      	lsls	r3, r1, #1
    27bc:	1ac0      	subs	r0, r0, r3
    27be:	4152      	adcs	r2, r2
    27c0:	1a41      	subs	r1, r0, r1
    27c2:	d200      	bcs.n	27c6 <__divsi3+0x1a6>
    27c4:	4601      	mov	r1, r0
    27c6:	4663      	mov	r3, ip
    27c8:	4152      	adcs	r2, r2
    27ca:	105b      	asrs	r3, r3, #1
    27cc:	4610      	mov	r0, r2
    27ce:	d301      	bcc.n	27d4 <__divsi3+0x1b4>
    27d0:	4240      	negs	r0, r0
    27d2:	2b00      	cmp	r3, #0
    27d4:	d500      	bpl.n	27d8 <__divsi3+0x1b8>
    27d6:	4249      	negs	r1, r1
    27d8:	4770      	bx	lr
    27da:	4663      	mov	r3, ip
    27dc:	105b      	asrs	r3, r3, #1
    27de:	d300      	bcc.n	27e2 <__divsi3+0x1c2>
    27e0:	4240      	negs	r0, r0
    27e2:	b501      	push	{r0, lr}
    27e4:	2000      	movs	r0, #0
    27e6:	f000 f805 	bl	27f4 <__aeabi_idiv0>
    27ea:	bd02      	pop	{r1, pc}

000027ec <__aeabi_idivmod>:
    27ec:	2900      	cmp	r1, #0
    27ee:	d0f8      	beq.n	27e2 <__divsi3+0x1c2>
    27f0:	e716      	b.n	2620 <__divsi3>
    27f2:	4770      	bx	lr

000027f4 <__aeabi_idiv0>:
    27f4:	4770      	bx	lr
    27f6:	46c0      	nop			; (mov r8, r8)

000027f8 <__aeabi_f2uiz>:
    27f8:	219e      	movs	r1, #158	; 0x9e
    27fa:	b510      	push	{r4, lr}
    27fc:	05c9      	lsls	r1, r1, #23
    27fe:	1c04      	adds	r4, r0, #0
    2800:	f000 fb64 	bl	2ecc <__aeabi_fcmpge>
    2804:	2800      	cmp	r0, #0
    2806:	d103      	bne.n	2810 <__aeabi_f2uiz+0x18>
    2808:	1c20      	adds	r0, r4, #0
    280a:	f000 fac9 	bl	2da0 <__aeabi_f2iz>
    280e:	bd10      	pop	{r4, pc}
    2810:	219e      	movs	r1, #158	; 0x9e
    2812:	1c20      	adds	r0, r4, #0
    2814:	05c9      	lsls	r1, r1, #23
    2816:	f000 f927 	bl	2a68 <__aeabi_fsub>
    281a:	f000 fac1 	bl	2da0 <__aeabi_f2iz>
    281e:	2380      	movs	r3, #128	; 0x80
    2820:	061b      	lsls	r3, r3, #24
    2822:	469c      	mov	ip, r3
    2824:	4460      	add	r0, ip
    2826:	e7f2      	b.n	280e <__aeabi_f2uiz+0x16>

00002828 <__aeabi_fmul>:
    2828:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    282a:	4657      	mov	r7, sl
    282c:	464e      	mov	r6, r9
    282e:	4645      	mov	r5, r8
    2830:	46de      	mov	lr, fp
    2832:	b5e0      	push	{r5, r6, r7, lr}
    2834:	0247      	lsls	r7, r0, #9
    2836:	0046      	lsls	r6, r0, #1
    2838:	4688      	mov	r8, r1
    283a:	0a7f      	lsrs	r7, r7, #9
    283c:	0e36      	lsrs	r6, r6, #24
    283e:	0fc4      	lsrs	r4, r0, #31
    2840:	2e00      	cmp	r6, #0
    2842:	d047      	beq.n	28d4 <__aeabi_fmul+0xac>
    2844:	2eff      	cmp	r6, #255	; 0xff
    2846:	d024      	beq.n	2892 <__aeabi_fmul+0x6a>
    2848:	00fb      	lsls	r3, r7, #3
    284a:	2780      	movs	r7, #128	; 0x80
    284c:	04ff      	lsls	r7, r7, #19
    284e:	431f      	orrs	r7, r3
    2850:	2300      	movs	r3, #0
    2852:	4699      	mov	r9, r3
    2854:	469a      	mov	sl, r3
    2856:	3e7f      	subs	r6, #127	; 0x7f
    2858:	4643      	mov	r3, r8
    285a:	025d      	lsls	r5, r3, #9
    285c:	0058      	lsls	r0, r3, #1
    285e:	0fdb      	lsrs	r3, r3, #31
    2860:	0a6d      	lsrs	r5, r5, #9
    2862:	0e00      	lsrs	r0, r0, #24
    2864:	4698      	mov	r8, r3
    2866:	d043      	beq.n	28f0 <__aeabi_fmul+0xc8>
    2868:	28ff      	cmp	r0, #255	; 0xff
    286a:	d03b      	beq.n	28e4 <__aeabi_fmul+0xbc>
    286c:	00eb      	lsls	r3, r5, #3
    286e:	2580      	movs	r5, #128	; 0x80
    2870:	2200      	movs	r2, #0
    2872:	04ed      	lsls	r5, r5, #19
    2874:	431d      	orrs	r5, r3
    2876:	387f      	subs	r0, #127	; 0x7f
    2878:	1836      	adds	r6, r6, r0
    287a:	1c73      	adds	r3, r6, #1
    287c:	4641      	mov	r1, r8
    287e:	469b      	mov	fp, r3
    2880:	464b      	mov	r3, r9
    2882:	4061      	eors	r1, r4
    2884:	4313      	orrs	r3, r2
    2886:	2b0f      	cmp	r3, #15
    2888:	d864      	bhi.n	2954 <__aeabi_fmul+0x12c>
    288a:	4875      	ldr	r0, [pc, #468]	; (2a60 <__aeabi_fmul+0x238>)
    288c:	009b      	lsls	r3, r3, #2
    288e:	58c3      	ldr	r3, [r0, r3]
    2890:	469f      	mov	pc, r3
    2892:	2f00      	cmp	r7, #0
    2894:	d142      	bne.n	291c <__aeabi_fmul+0xf4>
    2896:	2308      	movs	r3, #8
    2898:	4699      	mov	r9, r3
    289a:	3b06      	subs	r3, #6
    289c:	26ff      	movs	r6, #255	; 0xff
    289e:	469a      	mov	sl, r3
    28a0:	e7da      	b.n	2858 <__aeabi_fmul+0x30>
    28a2:	4641      	mov	r1, r8
    28a4:	2a02      	cmp	r2, #2
    28a6:	d028      	beq.n	28fa <__aeabi_fmul+0xd2>
    28a8:	2a03      	cmp	r2, #3
    28aa:	d100      	bne.n	28ae <__aeabi_fmul+0x86>
    28ac:	e0ce      	b.n	2a4c <__aeabi_fmul+0x224>
    28ae:	2a01      	cmp	r2, #1
    28b0:	d000      	beq.n	28b4 <__aeabi_fmul+0x8c>
    28b2:	e0ac      	b.n	2a0e <__aeabi_fmul+0x1e6>
    28b4:	4011      	ands	r1, r2
    28b6:	2000      	movs	r0, #0
    28b8:	2200      	movs	r2, #0
    28ba:	b2cc      	uxtb	r4, r1
    28bc:	0240      	lsls	r0, r0, #9
    28be:	05d2      	lsls	r2, r2, #23
    28c0:	0a40      	lsrs	r0, r0, #9
    28c2:	07e4      	lsls	r4, r4, #31
    28c4:	4310      	orrs	r0, r2
    28c6:	4320      	orrs	r0, r4
    28c8:	bc3c      	pop	{r2, r3, r4, r5}
    28ca:	4690      	mov	r8, r2
    28cc:	4699      	mov	r9, r3
    28ce:	46a2      	mov	sl, r4
    28d0:	46ab      	mov	fp, r5
    28d2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    28d4:	2f00      	cmp	r7, #0
    28d6:	d115      	bne.n	2904 <__aeabi_fmul+0xdc>
    28d8:	2304      	movs	r3, #4
    28da:	4699      	mov	r9, r3
    28dc:	3b03      	subs	r3, #3
    28de:	2600      	movs	r6, #0
    28e0:	469a      	mov	sl, r3
    28e2:	e7b9      	b.n	2858 <__aeabi_fmul+0x30>
    28e4:	20ff      	movs	r0, #255	; 0xff
    28e6:	2202      	movs	r2, #2
    28e8:	2d00      	cmp	r5, #0
    28ea:	d0c5      	beq.n	2878 <__aeabi_fmul+0x50>
    28ec:	2203      	movs	r2, #3
    28ee:	e7c3      	b.n	2878 <__aeabi_fmul+0x50>
    28f0:	2d00      	cmp	r5, #0
    28f2:	d119      	bne.n	2928 <__aeabi_fmul+0x100>
    28f4:	2000      	movs	r0, #0
    28f6:	2201      	movs	r2, #1
    28f8:	e7be      	b.n	2878 <__aeabi_fmul+0x50>
    28fa:	2401      	movs	r4, #1
    28fc:	22ff      	movs	r2, #255	; 0xff
    28fe:	400c      	ands	r4, r1
    2900:	2000      	movs	r0, #0
    2902:	e7db      	b.n	28bc <__aeabi_fmul+0x94>
    2904:	0038      	movs	r0, r7
    2906:	f000 faeb 	bl	2ee0 <__clzsi2>
    290a:	2676      	movs	r6, #118	; 0x76
    290c:	1f43      	subs	r3, r0, #5
    290e:	409f      	lsls	r7, r3
    2910:	2300      	movs	r3, #0
    2912:	4276      	negs	r6, r6
    2914:	1a36      	subs	r6, r6, r0
    2916:	4699      	mov	r9, r3
    2918:	469a      	mov	sl, r3
    291a:	e79d      	b.n	2858 <__aeabi_fmul+0x30>
    291c:	230c      	movs	r3, #12
    291e:	4699      	mov	r9, r3
    2920:	3b09      	subs	r3, #9
    2922:	26ff      	movs	r6, #255	; 0xff
    2924:	469a      	mov	sl, r3
    2926:	e797      	b.n	2858 <__aeabi_fmul+0x30>
    2928:	0028      	movs	r0, r5
    292a:	f000 fad9 	bl	2ee0 <__clzsi2>
    292e:	1f43      	subs	r3, r0, #5
    2930:	409d      	lsls	r5, r3
    2932:	2376      	movs	r3, #118	; 0x76
    2934:	425b      	negs	r3, r3
    2936:	1a18      	subs	r0, r3, r0
    2938:	2200      	movs	r2, #0
    293a:	e79d      	b.n	2878 <__aeabi_fmul+0x50>
    293c:	2080      	movs	r0, #128	; 0x80
    293e:	2400      	movs	r4, #0
    2940:	03c0      	lsls	r0, r0, #15
    2942:	22ff      	movs	r2, #255	; 0xff
    2944:	e7ba      	b.n	28bc <__aeabi_fmul+0x94>
    2946:	003d      	movs	r5, r7
    2948:	4652      	mov	r2, sl
    294a:	e7ab      	b.n	28a4 <__aeabi_fmul+0x7c>
    294c:	003d      	movs	r5, r7
    294e:	0021      	movs	r1, r4
    2950:	4652      	mov	r2, sl
    2952:	e7a7      	b.n	28a4 <__aeabi_fmul+0x7c>
    2954:	0c3b      	lsrs	r3, r7, #16
    2956:	469c      	mov	ip, r3
    2958:	042a      	lsls	r2, r5, #16
    295a:	0c12      	lsrs	r2, r2, #16
    295c:	0c2b      	lsrs	r3, r5, #16
    295e:	0014      	movs	r4, r2
    2960:	4660      	mov	r0, ip
    2962:	4665      	mov	r5, ip
    2964:	043f      	lsls	r7, r7, #16
    2966:	0c3f      	lsrs	r7, r7, #16
    2968:	437c      	muls	r4, r7
    296a:	4342      	muls	r2, r0
    296c:	435d      	muls	r5, r3
    296e:	437b      	muls	r3, r7
    2970:	0c27      	lsrs	r7, r4, #16
    2972:	189b      	adds	r3, r3, r2
    2974:	18ff      	adds	r7, r7, r3
    2976:	42ba      	cmp	r2, r7
    2978:	d903      	bls.n	2982 <__aeabi_fmul+0x15a>
    297a:	2380      	movs	r3, #128	; 0x80
    297c:	025b      	lsls	r3, r3, #9
    297e:	469c      	mov	ip, r3
    2980:	4465      	add	r5, ip
    2982:	0424      	lsls	r4, r4, #16
    2984:	043a      	lsls	r2, r7, #16
    2986:	0c24      	lsrs	r4, r4, #16
    2988:	1912      	adds	r2, r2, r4
    298a:	0193      	lsls	r3, r2, #6
    298c:	1e5c      	subs	r4, r3, #1
    298e:	41a3      	sbcs	r3, r4
    2990:	0c3f      	lsrs	r7, r7, #16
    2992:	0e92      	lsrs	r2, r2, #26
    2994:	197d      	adds	r5, r7, r5
    2996:	431a      	orrs	r2, r3
    2998:	01ad      	lsls	r5, r5, #6
    299a:	4315      	orrs	r5, r2
    299c:	012b      	lsls	r3, r5, #4
    299e:	d504      	bpl.n	29aa <__aeabi_fmul+0x182>
    29a0:	2301      	movs	r3, #1
    29a2:	465e      	mov	r6, fp
    29a4:	086a      	lsrs	r2, r5, #1
    29a6:	401d      	ands	r5, r3
    29a8:	4315      	orrs	r5, r2
    29aa:	0032      	movs	r2, r6
    29ac:	327f      	adds	r2, #127	; 0x7f
    29ae:	2a00      	cmp	r2, #0
    29b0:	dd25      	ble.n	29fe <__aeabi_fmul+0x1d6>
    29b2:	076b      	lsls	r3, r5, #29
    29b4:	d004      	beq.n	29c0 <__aeabi_fmul+0x198>
    29b6:	230f      	movs	r3, #15
    29b8:	402b      	ands	r3, r5
    29ba:	2b04      	cmp	r3, #4
    29bc:	d000      	beq.n	29c0 <__aeabi_fmul+0x198>
    29be:	3504      	adds	r5, #4
    29c0:	012b      	lsls	r3, r5, #4
    29c2:	d503      	bpl.n	29cc <__aeabi_fmul+0x1a4>
    29c4:	0032      	movs	r2, r6
    29c6:	4b27      	ldr	r3, [pc, #156]	; (2a64 <__aeabi_fmul+0x23c>)
    29c8:	3280      	adds	r2, #128	; 0x80
    29ca:	401d      	ands	r5, r3
    29cc:	2afe      	cmp	r2, #254	; 0xfe
    29ce:	dc94      	bgt.n	28fa <__aeabi_fmul+0xd2>
    29d0:	2401      	movs	r4, #1
    29d2:	01a8      	lsls	r0, r5, #6
    29d4:	0a40      	lsrs	r0, r0, #9
    29d6:	b2d2      	uxtb	r2, r2
    29d8:	400c      	ands	r4, r1
    29da:	e76f      	b.n	28bc <__aeabi_fmul+0x94>
    29dc:	2080      	movs	r0, #128	; 0x80
    29de:	03c0      	lsls	r0, r0, #15
    29e0:	4207      	tst	r7, r0
    29e2:	d007      	beq.n	29f4 <__aeabi_fmul+0x1cc>
    29e4:	4205      	tst	r5, r0
    29e6:	d105      	bne.n	29f4 <__aeabi_fmul+0x1cc>
    29e8:	4328      	orrs	r0, r5
    29ea:	0240      	lsls	r0, r0, #9
    29ec:	0a40      	lsrs	r0, r0, #9
    29ee:	4644      	mov	r4, r8
    29f0:	22ff      	movs	r2, #255	; 0xff
    29f2:	e763      	b.n	28bc <__aeabi_fmul+0x94>
    29f4:	4338      	orrs	r0, r7
    29f6:	0240      	lsls	r0, r0, #9
    29f8:	0a40      	lsrs	r0, r0, #9
    29fa:	22ff      	movs	r2, #255	; 0xff
    29fc:	e75e      	b.n	28bc <__aeabi_fmul+0x94>
    29fe:	2401      	movs	r4, #1
    2a00:	1aa3      	subs	r3, r4, r2
    2a02:	2b1b      	cmp	r3, #27
    2a04:	dd05      	ble.n	2a12 <__aeabi_fmul+0x1ea>
    2a06:	400c      	ands	r4, r1
    2a08:	2200      	movs	r2, #0
    2a0a:	2000      	movs	r0, #0
    2a0c:	e756      	b.n	28bc <__aeabi_fmul+0x94>
    2a0e:	465e      	mov	r6, fp
    2a10:	e7cb      	b.n	29aa <__aeabi_fmul+0x182>
    2a12:	002a      	movs	r2, r5
    2a14:	2020      	movs	r0, #32
    2a16:	40da      	lsrs	r2, r3
    2a18:	1ac3      	subs	r3, r0, r3
    2a1a:	409d      	lsls	r5, r3
    2a1c:	002b      	movs	r3, r5
    2a1e:	1e5d      	subs	r5, r3, #1
    2a20:	41ab      	sbcs	r3, r5
    2a22:	4313      	orrs	r3, r2
    2a24:	075a      	lsls	r2, r3, #29
    2a26:	d004      	beq.n	2a32 <__aeabi_fmul+0x20a>
    2a28:	220f      	movs	r2, #15
    2a2a:	401a      	ands	r2, r3
    2a2c:	2a04      	cmp	r2, #4
    2a2e:	d000      	beq.n	2a32 <__aeabi_fmul+0x20a>
    2a30:	3304      	adds	r3, #4
    2a32:	015a      	lsls	r2, r3, #5
    2a34:	d504      	bpl.n	2a40 <__aeabi_fmul+0x218>
    2a36:	2401      	movs	r4, #1
    2a38:	2201      	movs	r2, #1
    2a3a:	400c      	ands	r4, r1
    2a3c:	2000      	movs	r0, #0
    2a3e:	e73d      	b.n	28bc <__aeabi_fmul+0x94>
    2a40:	2401      	movs	r4, #1
    2a42:	019b      	lsls	r3, r3, #6
    2a44:	0a58      	lsrs	r0, r3, #9
    2a46:	400c      	ands	r4, r1
    2a48:	2200      	movs	r2, #0
    2a4a:	e737      	b.n	28bc <__aeabi_fmul+0x94>
    2a4c:	2080      	movs	r0, #128	; 0x80
    2a4e:	2401      	movs	r4, #1
    2a50:	03c0      	lsls	r0, r0, #15
    2a52:	4328      	orrs	r0, r5
    2a54:	0240      	lsls	r0, r0, #9
    2a56:	0a40      	lsrs	r0, r0, #9
    2a58:	400c      	ands	r4, r1
    2a5a:	22ff      	movs	r2, #255	; 0xff
    2a5c:	e72e      	b.n	28bc <__aeabi_fmul+0x94>
    2a5e:	46c0      	nop			; (mov r8, r8)
    2a60:	00004fe8 	.word	0x00004fe8
    2a64:	f7ffffff 	.word	0xf7ffffff

00002a68 <__aeabi_fsub>:
    2a68:	b5f0      	push	{r4, r5, r6, r7, lr}
    2a6a:	464f      	mov	r7, r9
    2a6c:	46d6      	mov	lr, sl
    2a6e:	4646      	mov	r6, r8
    2a70:	0044      	lsls	r4, r0, #1
    2a72:	b5c0      	push	{r6, r7, lr}
    2a74:	0fc2      	lsrs	r2, r0, #31
    2a76:	0247      	lsls	r7, r0, #9
    2a78:	0248      	lsls	r0, r1, #9
    2a7a:	0a40      	lsrs	r0, r0, #9
    2a7c:	4684      	mov	ip, r0
    2a7e:	4666      	mov	r6, ip
    2a80:	0a7b      	lsrs	r3, r7, #9
    2a82:	0048      	lsls	r0, r1, #1
    2a84:	0fc9      	lsrs	r1, r1, #31
    2a86:	469a      	mov	sl, r3
    2a88:	0e24      	lsrs	r4, r4, #24
    2a8a:	0015      	movs	r5, r2
    2a8c:	00db      	lsls	r3, r3, #3
    2a8e:	0e00      	lsrs	r0, r0, #24
    2a90:	4689      	mov	r9, r1
    2a92:	00f6      	lsls	r6, r6, #3
    2a94:	28ff      	cmp	r0, #255	; 0xff
    2a96:	d100      	bne.n	2a9a <__aeabi_fsub+0x32>
    2a98:	e08f      	b.n	2bba <__aeabi_fsub+0x152>
    2a9a:	2101      	movs	r1, #1
    2a9c:	464f      	mov	r7, r9
    2a9e:	404f      	eors	r7, r1
    2aa0:	0039      	movs	r1, r7
    2aa2:	4291      	cmp	r1, r2
    2aa4:	d066      	beq.n	2b74 <__aeabi_fsub+0x10c>
    2aa6:	1a22      	subs	r2, r4, r0
    2aa8:	2a00      	cmp	r2, #0
    2aaa:	dc00      	bgt.n	2aae <__aeabi_fsub+0x46>
    2aac:	e09d      	b.n	2bea <__aeabi_fsub+0x182>
    2aae:	2800      	cmp	r0, #0
    2ab0:	d13d      	bne.n	2b2e <__aeabi_fsub+0xc6>
    2ab2:	2e00      	cmp	r6, #0
    2ab4:	d100      	bne.n	2ab8 <__aeabi_fsub+0x50>
    2ab6:	e08b      	b.n	2bd0 <__aeabi_fsub+0x168>
    2ab8:	1e51      	subs	r1, r2, #1
    2aba:	2900      	cmp	r1, #0
    2abc:	d000      	beq.n	2ac0 <__aeabi_fsub+0x58>
    2abe:	e0b5      	b.n	2c2c <__aeabi_fsub+0x1c4>
    2ac0:	2401      	movs	r4, #1
    2ac2:	1b9b      	subs	r3, r3, r6
    2ac4:	015a      	lsls	r2, r3, #5
    2ac6:	d544      	bpl.n	2b52 <__aeabi_fsub+0xea>
    2ac8:	019b      	lsls	r3, r3, #6
    2aca:	099f      	lsrs	r7, r3, #6
    2acc:	0038      	movs	r0, r7
    2ace:	f000 fa07 	bl	2ee0 <__clzsi2>
    2ad2:	3805      	subs	r0, #5
    2ad4:	4087      	lsls	r7, r0
    2ad6:	4284      	cmp	r4, r0
    2ad8:	dd00      	ble.n	2adc <__aeabi_fsub+0x74>
    2ada:	e096      	b.n	2c0a <__aeabi_fsub+0x1a2>
    2adc:	1b04      	subs	r4, r0, r4
    2ade:	003a      	movs	r2, r7
    2ae0:	2020      	movs	r0, #32
    2ae2:	3401      	adds	r4, #1
    2ae4:	40e2      	lsrs	r2, r4
    2ae6:	1b04      	subs	r4, r0, r4
    2ae8:	40a7      	lsls	r7, r4
    2aea:	003b      	movs	r3, r7
    2aec:	1e5f      	subs	r7, r3, #1
    2aee:	41bb      	sbcs	r3, r7
    2af0:	2400      	movs	r4, #0
    2af2:	4313      	orrs	r3, r2
    2af4:	075a      	lsls	r2, r3, #29
    2af6:	d004      	beq.n	2b02 <__aeabi_fsub+0x9a>
    2af8:	220f      	movs	r2, #15
    2afa:	401a      	ands	r2, r3
    2afc:	2a04      	cmp	r2, #4
    2afe:	d000      	beq.n	2b02 <__aeabi_fsub+0x9a>
    2b00:	3304      	adds	r3, #4
    2b02:	015a      	lsls	r2, r3, #5
    2b04:	d527      	bpl.n	2b56 <__aeabi_fsub+0xee>
    2b06:	3401      	adds	r4, #1
    2b08:	2cff      	cmp	r4, #255	; 0xff
    2b0a:	d100      	bne.n	2b0e <__aeabi_fsub+0xa6>
    2b0c:	e079      	b.n	2c02 <__aeabi_fsub+0x19a>
    2b0e:	2201      	movs	r2, #1
    2b10:	019b      	lsls	r3, r3, #6
    2b12:	0a5b      	lsrs	r3, r3, #9
    2b14:	b2e4      	uxtb	r4, r4
    2b16:	402a      	ands	r2, r5
    2b18:	025b      	lsls	r3, r3, #9
    2b1a:	05e4      	lsls	r4, r4, #23
    2b1c:	0a58      	lsrs	r0, r3, #9
    2b1e:	07d2      	lsls	r2, r2, #31
    2b20:	4320      	orrs	r0, r4
    2b22:	4310      	orrs	r0, r2
    2b24:	bc1c      	pop	{r2, r3, r4}
    2b26:	4690      	mov	r8, r2
    2b28:	4699      	mov	r9, r3
    2b2a:	46a2      	mov	sl, r4
    2b2c:	bdf0      	pop	{r4, r5, r6, r7, pc}
    2b2e:	2cff      	cmp	r4, #255	; 0xff
    2b30:	d0e0      	beq.n	2af4 <__aeabi_fsub+0x8c>
    2b32:	2180      	movs	r1, #128	; 0x80
    2b34:	04c9      	lsls	r1, r1, #19
    2b36:	430e      	orrs	r6, r1
    2b38:	2a1b      	cmp	r2, #27
    2b3a:	dc7b      	bgt.n	2c34 <__aeabi_fsub+0x1cc>
    2b3c:	0031      	movs	r1, r6
    2b3e:	2020      	movs	r0, #32
    2b40:	40d1      	lsrs	r1, r2
    2b42:	1a82      	subs	r2, r0, r2
    2b44:	4096      	lsls	r6, r2
    2b46:	1e72      	subs	r2, r6, #1
    2b48:	4196      	sbcs	r6, r2
    2b4a:	430e      	orrs	r6, r1
    2b4c:	1b9b      	subs	r3, r3, r6
    2b4e:	015a      	lsls	r2, r3, #5
    2b50:	d4ba      	bmi.n	2ac8 <__aeabi_fsub+0x60>
    2b52:	075a      	lsls	r2, r3, #29
    2b54:	d1d0      	bne.n	2af8 <__aeabi_fsub+0x90>
    2b56:	2201      	movs	r2, #1
    2b58:	08df      	lsrs	r7, r3, #3
    2b5a:	402a      	ands	r2, r5
    2b5c:	2cff      	cmp	r4, #255	; 0xff
    2b5e:	d133      	bne.n	2bc8 <__aeabi_fsub+0x160>
    2b60:	2f00      	cmp	r7, #0
    2b62:	d100      	bne.n	2b66 <__aeabi_fsub+0xfe>
    2b64:	e0a8      	b.n	2cb8 <__aeabi_fsub+0x250>
    2b66:	2380      	movs	r3, #128	; 0x80
    2b68:	03db      	lsls	r3, r3, #15
    2b6a:	433b      	orrs	r3, r7
    2b6c:	025b      	lsls	r3, r3, #9
    2b6e:	0a5b      	lsrs	r3, r3, #9
    2b70:	24ff      	movs	r4, #255	; 0xff
    2b72:	e7d1      	b.n	2b18 <__aeabi_fsub+0xb0>
    2b74:	1a21      	subs	r1, r4, r0
    2b76:	2900      	cmp	r1, #0
    2b78:	dd4c      	ble.n	2c14 <__aeabi_fsub+0x1ac>
    2b7a:	2800      	cmp	r0, #0
    2b7c:	d02a      	beq.n	2bd4 <__aeabi_fsub+0x16c>
    2b7e:	2cff      	cmp	r4, #255	; 0xff
    2b80:	d0b8      	beq.n	2af4 <__aeabi_fsub+0x8c>
    2b82:	2080      	movs	r0, #128	; 0x80
    2b84:	04c0      	lsls	r0, r0, #19
    2b86:	4306      	orrs	r6, r0
    2b88:	291b      	cmp	r1, #27
    2b8a:	dd00      	ble.n	2b8e <__aeabi_fsub+0x126>
    2b8c:	e0af      	b.n	2cee <__aeabi_fsub+0x286>
    2b8e:	0030      	movs	r0, r6
    2b90:	2720      	movs	r7, #32
    2b92:	40c8      	lsrs	r0, r1
    2b94:	1a79      	subs	r1, r7, r1
    2b96:	408e      	lsls	r6, r1
    2b98:	1e71      	subs	r1, r6, #1
    2b9a:	418e      	sbcs	r6, r1
    2b9c:	4306      	orrs	r6, r0
    2b9e:	199b      	adds	r3, r3, r6
    2ba0:	0159      	lsls	r1, r3, #5
    2ba2:	d5d6      	bpl.n	2b52 <__aeabi_fsub+0xea>
    2ba4:	3401      	adds	r4, #1
    2ba6:	2cff      	cmp	r4, #255	; 0xff
    2ba8:	d100      	bne.n	2bac <__aeabi_fsub+0x144>
    2baa:	e085      	b.n	2cb8 <__aeabi_fsub+0x250>
    2bac:	2201      	movs	r2, #1
    2bae:	497a      	ldr	r1, [pc, #488]	; (2d98 <__aeabi_fsub+0x330>)
    2bb0:	401a      	ands	r2, r3
    2bb2:	085b      	lsrs	r3, r3, #1
    2bb4:	400b      	ands	r3, r1
    2bb6:	4313      	orrs	r3, r2
    2bb8:	e79c      	b.n	2af4 <__aeabi_fsub+0x8c>
    2bba:	2e00      	cmp	r6, #0
    2bbc:	d000      	beq.n	2bc0 <__aeabi_fsub+0x158>
    2bbe:	e770      	b.n	2aa2 <__aeabi_fsub+0x3a>
    2bc0:	e76b      	b.n	2a9a <__aeabi_fsub+0x32>
    2bc2:	1e3b      	subs	r3, r7, #0
    2bc4:	d1c5      	bne.n	2b52 <__aeabi_fsub+0xea>
    2bc6:	2200      	movs	r2, #0
    2bc8:	027b      	lsls	r3, r7, #9
    2bca:	0a5b      	lsrs	r3, r3, #9
    2bcc:	b2e4      	uxtb	r4, r4
    2bce:	e7a3      	b.n	2b18 <__aeabi_fsub+0xb0>
    2bd0:	0014      	movs	r4, r2
    2bd2:	e78f      	b.n	2af4 <__aeabi_fsub+0x8c>
    2bd4:	2e00      	cmp	r6, #0
    2bd6:	d04d      	beq.n	2c74 <__aeabi_fsub+0x20c>
    2bd8:	1e48      	subs	r0, r1, #1
    2bda:	2800      	cmp	r0, #0
    2bdc:	d157      	bne.n	2c8e <__aeabi_fsub+0x226>
    2bde:	199b      	adds	r3, r3, r6
    2be0:	2401      	movs	r4, #1
    2be2:	015a      	lsls	r2, r3, #5
    2be4:	d5b5      	bpl.n	2b52 <__aeabi_fsub+0xea>
    2be6:	2402      	movs	r4, #2
    2be8:	e7e0      	b.n	2bac <__aeabi_fsub+0x144>
    2bea:	2a00      	cmp	r2, #0
    2bec:	d125      	bne.n	2c3a <__aeabi_fsub+0x1d2>
    2bee:	1c62      	adds	r2, r4, #1
    2bf0:	b2d2      	uxtb	r2, r2
    2bf2:	2a01      	cmp	r2, #1
    2bf4:	dd72      	ble.n	2cdc <__aeabi_fsub+0x274>
    2bf6:	1b9f      	subs	r7, r3, r6
    2bf8:	017a      	lsls	r2, r7, #5
    2bfa:	d535      	bpl.n	2c68 <__aeabi_fsub+0x200>
    2bfc:	1af7      	subs	r7, r6, r3
    2bfe:	000d      	movs	r5, r1
    2c00:	e764      	b.n	2acc <__aeabi_fsub+0x64>
    2c02:	2201      	movs	r2, #1
    2c04:	2300      	movs	r3, #0
    2c06:	402a      	ands	r2, r5
    2c08:	e786      	b.n	2b18 <__aeabi_fsub+0xb0>
    2c0a:	003b      	movs	r3, r7
    2c0c:	4a63      	ldr	r2, [pc, #396]	; (2d9c <__aeabi_fsub+0x334>)
    2c0e:	1a24      	subs	r4, r4, r0
    2c10:	4013      	ands	r3, r2
    2c12:	e76f      	b.n	2af4 <__aeabi_fsub+0x8c>
    2c14:	2900      	cmp	r1, #0
    2c16:	d16c      	bne.n	2cf2 <__aeabi_fsub+0x28a>
    2c18:	1c61      	adds	r1, r4, #1
    2c1a:	b2c8      	uxtb	r0, r1
    2c1c:	2801      	cmp	r0, #1
    2c1e:	dd4e      	ble.n	2cbe <__aeabi_fsub+0x256>
    2c20:	29ff      	cmp	r1, #255	; 0xff
    2c22:	d049      	beq.n	2cb8 <__aeabi_fsub+0x250>
    2c24:	199b      	adds	r3, r3, r6
    2c26:	085b      	lsrs	r3, r3, #1
    2c28:	000c      	movs	r4, r1
    2c2a:	e763      	b.n	2af4 <__aeabi_fsub+0x8c>
    2c2c:	2aff      	cmp	r2, #255	; 0xff
    2c2e:	d041      	beq.n	2cb4 <__aeabi_fsub+0x24c>
    2c30:	000a      	movs	r2, r1
    2c32:	e781      	b.n	2b38 <__aeabi_fsub+0xd0>
    2c34:	2601      	movs	r6, #1
    2c36:	1b9b      	subs	r3, r3, r6
    2c38:	e789      	b.n	2b4e <__aeabi_fsub+0xe6>
    2c3a:	2c00      	cmp	r4, #0
    2c3c:	d01c      	beq.n	2c78 <__aeabi_fsub+0x210>
    2c3e:	28ff      	cmp	r0, #255	; 0xff
    2c40:	d021      	beq.n	2c86 <__aeabi_fsub+0x21e>
    2c42:	2480      	movs	r4, #128	; 0x80
    2c44:	04e4      	lsls	r4, r4, #19
    2c46:	4252      	negs	r2, r2
    2c48:	4323      	orrs	r3, r4
    2c4a:	2a1b      	cmp	r2, #27
    2c4c:	dd00      	ble.n	2c50 <__aeabi_fsub+0x1e8>
    2c4e:	e096      	b.n	2d7e <__aeabi_fsub+0x316>
    2c50:	001c      	movs	r4, r3
    2c52:	2520      	movs	r5, #32
    2c54:	40d4      	lsrs	r4, r2
    2c56:	1aaa      	subs	r2, r5, r2
    2c58:	4093      	lsls	r3, r2
    2c5a:	1e5a      	subs	r2, r3, #1
    2c5c:	4193      	sbcs	r3, r2
    2c5e:	4323      	orrs	r3, r4
    2c60:	1af3      	subs	r3, r6, r3
    2c62:	0004      	movs	r4, r0
    2c64:	000d      	movs	r5, r1
    2c66:	e72d      	b.n	2ac4 <__aeabi_fsub+0x5c>
    2c68:	2f00      	cmp	r7, #0
    2c6a:	d000      	beq.n	2c6e <__aeabi_fsub+0x206>
    2c6c:	e72e      	b.n	2acc <__aeabi_fsub+0x64>
    2c6e:	2200      	movs	r2, #0
    2c70:	2400      	movs	r4, #0
    2c72:	e7a9      	b.n	2bc8 <__aeabi_fsub+0x160>
    2c74:	000c      	movs	r4, r1
    2c76:	e73d      	b.n	2af4 <__aeabi_fsub+0x8c>
    2c78:	2b00      	cmp	r3, #0
    2c7a:	d058      	beq.n	2d2e <__aeabi_fsub+0x2c6>
    2c7c:	43d2      	mvns	r2, r2
    2c7e:	2a00      	cmp	r2, #0
    2c80:	d0ee      	beq.n	2c60 <__aeabi_fsub+0x1f8>
    2c82:	28ff      	cmp	r0, #255	; 0xff
    2c84:	d1e1      	bne.n	2c4a <__aeabi_fsub+0x1e2>
    2c86:	0033      	movs	r3, r6
    2c88:	24ff      	movs	r4, #255	; 0xff
    2c8a:	000d      	movs	r5, r1
    2c8c:	e732      	b.n	2af4 <__aeabi_fsub+0x8c>
    2c8e:	29ff      	cmp	r1, #255	; 0xff
    2c90:	d010      	beq.n	2cb4 <__aeabi_fsub+0x24c>
    2c92:	0001      	movs	r1, r0
    2c94:	e778      	b.n	2b88 <__aeabi_fsub+0x120>
    2c96:	2b00      	cmp	r3, #0
    2c98:	d06e      	beq.n	2d78 <__aeabi_fsub+0x310>
    2c9a:	24ff      	movs	r4, #255	; 0xff
    2c9c:	2e00      	cmp	r6, #0
    2c9e:	d100      	bne.n	2ca2 <__aeabi_fsub+0x23a>
    2ca0:	e728      	b.n	2af4 <__aeabi_fsub+0x8c>
    2ca2:	2280      	movs	r2, #128	; 0x80
    2ca4:	4651      	mov	r1, sl
    2ca6:	03d2      	lsls	r2, r2, #15
    2ca8:	4211      	tst	r1, r2
    2caa:	d003      	beq.n	2cb4 <__aeabi_fsub+0x24c>
    2cac:	4661      	mov	r1, ip
    2cae:	4211      	tst	r1, r2
    2cb0:	d100      	bne.n	2cb4 <__aeabi_fsub+0x24c>
    2cb2:	0033      	movs	r3, r6
    2cb4:	24ff      	movs	r4, #255	; 0xff
    2cb6:	e71d      	b.n	2af4 <__aeabi_fsub+0x8c>
    2cb8:	24ff      	movs	r4, #255	; 0xff
    2cba:	2300      	movs	r3, #0
    2cbc:	e72c      	b.n	2b18 <__aeabi_fsub+0xb0>
    2cbe:	2c00      	cmp	r4, #0
    2cc0:	d1e9      	bne.n	2c96 <__aeabi_fsub+0x22e>
    2cc2:	2b00      	cmp	r3, #0
    2cc4:	d063      	beq.n	2d8e <__aeabi_fsub+0x326>
    2cc6:	2e00      	cmp	r6, #0
    2cc8:	d100      	bne.n	2ccc <__aeabi_fsub+0x264>
    2cca:	e713      	b.n	2af4 <__aeabi_fsub+0x8c>
    2ccc:	199b      	adds	r3, r3, r6
    2cce:	015a      	lsls	r2, r3, #5
    2cd0:	d400      	bmi.n	2cd4 <__aeabi_fsub+0x26c>
    2cd2:	e73e      	b.n	2b52 <__aeabi_fsub+0xea>
    2cd4:	4a31      	ldr	r2, [pc, #196]	; (2d9c <__aeabi_fsub+0x334>)
    2cd6:	000c      	movs	r4, r1
    2cd8:	4013      	ands	r3, r2
    2cda:	e70b      	b.n	2af4 <__aeabi_fsub+0x8c>
    2cdc:	2c00      	cmp	r4, #0
    2cde:	d11e      	bne.n	2d1e <__aeabi_fsub+0x2b6>
    2ce0:	2b00      	cmp	r3, #0
    2ce2:	d12f      	bne.n	2d44 <__aeabi_fsub+0x2dc>
    2ce4:	2e00      	cmp	r6, #0
    2ce6:	d04f      	beq.n	2d88 <__aeabi_fsub+0x320>
    2ce8:	0033      	movs	r3, r6
    2cea:	000d      	movs	r5, r1
    2cec:	e702      	b.n	2af4 <__aeabi_fsub+0x8c>
    2cee:	2601      	movs	r6, #1
    2cf0:	e755      	b.n	2b9e <__aeabi_fsub+0x136>
    2cf2:	2c00      	cmp	r4, #0
    2cf4:	d11f      	bne.n	2d36 <__aeabi_fsub+0x2ce>
    2cf6:	2b00      	cmp	r3, #0
    2cf8:	d043      	beq.n	2d82 <__aeabi_fsub+0x31a>
    2cfa:	43c9      	mvns	r1, r1
    2cfc:	2900      	cmp	r1, #0
    2cfe:	d00b      	beq.n	2d18 <__aeabi_fsub+0x2b0>
    2d00:	28ff      	cmp	r0, #255	; 0xff
    2d02:	d039      	beq.n	2d78 <__aeabi_fsub+0x310>
    2d04:	291b      	cmp	r1, #27
    2d06:	dc44      	bgt.n	2d92 <__aeabi_fsub+0x32a>
    2d08:	001c      	movs	r4, r3
    2d0a:	2720      	movs	r7, #32
    2d0c:	40cc      	lsrs	r4, r1
    2d0e:	1a79      	subs	r1, r7, r1
    2d10:	408b      	lsls	r3, r1
    2d12:	1e59      	subs	r1, r3, #1
    2d14:	418b      	sbcs	r3, r1
    2d16:	4323      	orrs	r3, r4
    2d18:	199b      	adds	r3, r3, r6
    2d1a:	0004      	movs	r4, r0
    2d1c:	e740      	b.n	2ba0 <__aeabi_fsub+0x138>
    2d1e:	2b00      	cmp	r3, #0
    2d20:	d11a      	bne.n	2d58 <__aeabi_fsub+0x2f0>
    2d22:	2e00      	cmp	r6, #0
    2d24:	d124      	bne.n	2d70 <__aeabi_fsub+0x308>
    2d26:	2780      	movs	r7, #128	; 0x80
    2d28:	2200      	movs	r2, #0
    2d2a:	03ff      	lsls	r7, r7, #15
    2d2c:	e71b      	b.n	2b66 <__aeabi_fsub+0xfe>
    2d2e:	0033      	movs	r3, r6
    2d30:	0004      	movs	r4, r0
    2d32:	000d      	movs	r5, r1
    2d34:	e6de      	b.n	2af4 <__aeabi_fsub+0x8c>
    2d36:	28ff      	cmp	r0, #255	; 0xff
    2d38:	d01e      	beq.n	2d78 <__aeabi_fsub+0x310>
    2d3a:	2480      	movs	r4, #128	; 0x80
    2d3c:	04e4      	lsls	r4, r4, #19
    2d3e:	4249      	negs	r1, r1
    2d40:	4323      	orrs	r3, r4
    2d42:	e7df      	b.n	2d04 <__aeabi_fsub+0x29c>
    2d44:	2e00      	cmp	r6, #0
    2d46:	d100      	bne.n	2d4a <__aeabi_fsub+0x2e2>
    2d48:	e6d4      	b.n	2af4 <__aeabi_fsub+0x8c>
    2d4a:	1b9f      	subs	r7, r3, r6
    2d4c:	017a      	lsls	r2, r7, #5
    2d4e:	d400      	bmi.n	2d52 <__aeabi_fsub+0x2ea>
    2d50:	e737      	b.n	2bc2 <__aeabi_fsub+0x15a>
    2d52:	1af3      	subs	r3, r6, r3
    2d54:	000d      	movs	r5, r1
    2d56:	e6cd      	b.n	2af4 <__aeabi_fsub+0x8c>
    2d58:	24ff      	movs	r4, #255	; 0xff
    2d5a:	2e00      	cmp	r6, #0
    2d5c:	d100      	bne.n	2d60 <__aeabi_fsub+0x2f8>
    2d5e:	e6c9      	b.n	2af4 <__aeabi_fsub+0x8c>
    2d60:	2280      	movs	r2, #128	; 0x80
    2d62:	4650      	mov	r0, sl
    2d64:	03d2      	lsls	r2, r2, #15
    2d66:	4210      	tst	r0, r2
    2d68:	d0a4      	beq.n	2cb4 <__aeabi_fsub+0x24c>
    2d6a:	4660      	mov	r0, ip
    2d6c:	4210      	tst	r0, r2
    2d6e:	d1a1      	bne.n	2cb4 <__aeabi_fsub+0x24c>
    2d70:	0033      	movs	r3, r6
    2d72:	000d      	movs	r5, r1
    2d74:	24ff      	movs	r4, #255	; 0xff
    2d76:	e6bd      	b.n	2af4 <__aeabi_fsub+0x8c>
    2d78:	0033      	movs	r3, r6
    2d7a:	24ff      	movs	r4, #255	; 0xff
    2d7c:	e6ba      	b.n	2af4 <__aeabi_fsub+0x8c>
    2d7e:	2301      	movs	r3, #1
    2d80:	e76e      	b.n	2c60 <__aeabi_fsub+0x1f8>
    2d82:	0033      	movs	r3, r6
    2d84:	0004      	movs	r4, r0
    2d86:	e6b5      	b.n	2af4 <__aeabi_fsub+0x8c>
    2d88:	2700      	movs	r7, #0
    2d8a:	2200      	movs	r2, #0
    2d8c:	e71c      	b.n	2bc8 <__aeabi_fsub+0x160>
    2d8e:	0033      	movs	r3, r6
    2d90:	e6b0      	b.n	2af4 <__aeabi_fsub+0x8c>
    2d92:	2301      	movs	r3, #1
    2d94:	e7c0      	b.n	2d18 <__aeabi_fsub+0x2b0>
    2d96:	46c0      	nop			; (mov r8, r8)
    2d98:	7dffffff 	.word	0x7dffffff
    2d9c:	fbffffff 	.word	0xfbffffff

00002da0 <__aeabi_f2iz>:
    2da0:	0241      	lsls	r1, r0, #9
    2da2:	0043      	lsls	r3, r0, #1
    2da4:	0fc2      	lsrs	r2, r0, #31
    2da6:	0a49      	lsrs	r1, r1, #9
    2da8:	0e1b      	lsrs	r3, r3, #24
    2daa:	2000      	movs	r0, #0
    2dac:	2b7e      	cmp	r3, #126	; 0x7e
    2dae:	dd0d      	ble.n	2dcc <__aeabi_f2iz+0x2c>
    2db0:	2b9d      	cmp	r3, #157	; 0x9d
    2db2:	dc0c      	bgt.n	2dce <__aeabi_f2iz+0x2e>
    2db4:	2080      	movs	r0, #128	; 0x80
    2db6:	0400      	lsls	r0, r0, #16
    2db8:	4301      	orrs	r1, r0
    2dba:	2b95      	cmp	r3, #149	; 0x95
    2dbc:	dc0a      	bgt.n	2dd4 <__aeabi_f2iz+0x34>
    2dbe:	2096      	movs	r0, #150	; 0x96
    2dc0:	1ac3      	subs	r3, r0, r3
    2dc2:	40d9      	lsrs	r1, r3
    2dc4:	4248      	negs	r0, r1
    2dc6:	2a00      	cmp	r2, #0
    2dc8:	d100      	bne.n	2dcc <__aeabi_f2iz+0x2c>
    2dca:	0008      	movs	r0, r1
    2dcc:	4770      	bx	lr
    2dce:	4b03      	ldr	r3, [pc, #12]	; (2ddc <__aeabi_f2iz+0x3c>)
    2dd0:	18d0      	adds	r0, r2, r3
    2dd2:	e7fb      	b.n	2dcc <__aeabi_f2iz+0x2c>
    2dd4:	3b96      	subs	r3, #150	; 0x96
    2dd6:	4099      	lsls	r1, r3
    2dd8:	e7f4      	b.n	2dc4 <__aeabi_f2iz+0x24>
    2dda:	46c0      	nop			; (mov r8, r8)
    2ddc:	7fffffff 	.word	0x7fffffff

00002de0 <__aeabi_ui2f>:
    2de0:	b510      	push	{r4, lr}
    2de2:	1e04      	subs	r4, r0, #0
    2de4:	d027      	beq.n	2e36 <__aeabi_ui2f+0x56>
    2de6:	f000 f87b 	bl	2ee0 <__clzsi2>
    2dea:	239e      	movs	r3, #158	; 0x9e
    2dec:	1a1b      	subs	r3, r3, r0
    2dee:	2b96      	cmp	r3, #150	; 0x96
    2df0:	dc0a      	bgt.n	2e08 <__aeabi_ui2f+0x28>
    2df2:	2296      	movs	r2, #150	; 0x96
    2df4:	1ad2      	subs	r2, r2, r3
    2df6:	4094      	lsls	r4, r2
    2df8:	0264      	lsls	r4, r4, #9
    2dfa:	0a64      	lsrs	r4, r4, #9
    2dfc:	b2db      	uxtb	r3, r3
    2dfe:	0264      	lsls	r4, r4, #9
    2e00:	05db      	lsls	r3, r3, #23
    2e02:	0a60      	lsrs	r0, r4, #9
    2e04:	4318      	orrs	r0, r3
    2e06:	bd10      	pop	{r4, pc}
    2e08:	2b99      	cmp	r3, #153	; 0x99
    2e0a:	dc17      	bgt.n	2e3c <__aeabi_ui2f+0x5c>
    2e0c:	2299      	movs	r2, #153	; 0x99
    2e0e:	1ad2      	subs	r2, r2, r3
    2e10:	2a00      	cmp	r2, #0
    2e12:	dd27      	ble.n	2e64 <__aeabi_ui2f+0x84>
    2e14:	4094      	lsls	r4, r2
    2e16:	0022      	movs	r2, r4
    2e18:	4c13      	ldr	r4, [pc, #76]	; (2e68 <__aeabi_ui2f+0x88>)
    2e1a:	4014      	ands	r4, r2
    2e1c:	0751      	lsls	r1, r2, #29
    2e1e:	d004      	beq.n	2e2a <__aeabi_ui2f+0x4a>
    2e20:	210f      	movs	r1, #15
    2e22:	400a      	ands	r2, r1
    2e24:	2a04      	cmp	r2, #4
    2e26:	d000      	beq.n	2e2a <__aeabi_ui2f+0x4a>
    2e28:	3404      	adds	r4, #4
    2e2a:	0162      	lsls	r2, r4, #5
    2e2c:	d412      	bmi.n	2e54 <__aeabi_ui2f+0x74>
    2e2e:	01a4      	lsls	r4, r4, #6
    2e30:	0a64      	lsrs	r4, r4, #9
    2e32:	b2db      	uxtb	r3, r3
    2e34:	e7e3      	b.n	2dfe <__aeabi_ui2f+0x1e>
    2e36:	2300      	movs	r3, #0
    2e38:	2400      	movs	r4, #0
    2e3a:	e7e0      	b.n	2dfe <__aeabi_ui2f+0x1e>
    2e3c:	22b9      	movs	r2, #185	; 0xb9
    2e3e:	0021      	movs	r1, r4
    2e40:	1ad2      	subs	r2, r2, r3
    2e42:	4091      	lsls	r1, r2
    2e44:	000a      	movs	r2, r1
    2e46:	1e51      	subs	r1, r2, #1
    2e48:	418a      	sbcs	r2, r1
    2e4a:	2105      	movs	r1, #5
    2e4c:	1a09      	subs	r1, r1, r0
    2e4e:	40cc      	lsrs	r4, r1
    2e50:	4314      	orrs	r4, r2
    2e52:	e7db      	b.n	2e0c <__aeabi_ui2f+0x2c>
    2e54:	4b04      	ldr	r3, [pc, #16]	; (2e68 <__aeabi_ui2f+0x88>)
    2e56:	401c      	ands	r4, r3
    2e58:	239f      	movs	r3, #159	; 0x9f
    2e5a:	01a4      	lsls	r4, r4, #6
    2e5c:	1a1b      	subs	r3, r3, r0
    2e5e:	0a64      	lsrs	r4, r4, #9
    2e60:	b2db      	uxtb	r3, r3
    2e62:	e7cc      	b.n	2dfe <__aeabi_ui2f+0x1e>
    2e64:	0022      	movs	r2, r4
    2e66:	e7d7      	b.n	2e18 <__aeabi_ui2f+0x38>
    2e68:	fbffffff 	.word	0xfbffffff

00002e6c <__aeabi_cfrcmple>:
    2e6c:	4684      	mov	ip, r0
    2e6e:	1c08      	adds	r0, r1, #0
    2e70:	4661      	mov	r1, ip
    2e72:	e7ff      	b.n	2e74 <__aeabi_cfcmpeq>

00002e74 <__aeabi_cfcmpeq>:
    2e74:	b51f      	push	{r0, r1, r2, r3, r4, lr}
    2e76:	f000 f8b7 	bl	2fe8 <__lesf2>
    2e7a:	2800      	cmp	r0, #0
    2e7c:	d401      	bmi.n	2e82 <__aeabi_cfcmpeq+0xe>
    2e7e:	2100      	movs	r1, #0
    2e80:	42c8      	cmn	r0, r1
    2e82:	bd1f      	pop	{r0, r1, r2, r3, r4, pc}

00002e84 <__aeabi_fcmpeq>:
    2e84:	b510      	push	{r4, lr}
    2e86:	f000 f849 	bl	2f1c <__eqsf2>
    2e8a:	4240      	negs	r0, r0
    2e8c:	3001      	adds	r0, #1
    2e8e:	bd10      	pop	{r4, pc}

00002e90 <__aeabi_fcmplt>:
    2e90:	b510      	push	{r4, lr}
    2e92:	f000 f8a9 	bl	2fe8 <__lesf2>
    2e96:	2800      	cmp	r0, #0
    2e98:	db01      	blt.n	2e9e <__aeabi_fcmplt+0xe>
    2e9a:	2000      	movs	r0, #0
    2e9c:	bd10      	pop	{r4, pc}
    2e9e:	2001      	movs	r0, #1
    2ea0:	bd10      	pop	{r4, pc}
    2ea2:	46c0      	nop			; (mov r8, r8)

00002ea4 <__aeabi_fcmple>:
    2ea4:	b510      	push	{r4, lr}
    2ea6:	f000 f89f 	bl	2fe8 <__lesf2>
    2eaa:	2800      	cmp	r0, #0
    2eac:	dd01      	ble.n	2eb2 <__aeabi_fcmple+0xe>
    2eae:	2000      	movs	r0, #0
    2eb0:	bd10      	pop	{r4, pc}
    2eb2:	2001      	movs	r0, #1
    2eb4:	bd10      	pop	{r4, pc}
    2eb6:	46c0      	nop			; (mov r8, r8)

00002eb8 <__aeabi_fcmpgt>:
    2eb8:	b510      	push	{r4, lr}
    2eba:	f000 f855 	bl	2f68 <__gesf2>
    2ebe:	2800      	cmp	r0, #0
    2ec0:	dc01      	bgt.n	2ec6 <__aeabi_fcmpgt+0xe>
    2ec2:	2000      	movs	r0, #0
    2ec4:	bd10      	pop	{r4, pc}
    2ec6:	2001      	movs	r0, #1
    2ec8:	bd10      	pop	{r4, pc}
    2eca:	46c0      	nop			; (mov r8, r8)

00002ecc <__aeabi_fcmpge>:
    2ecc:	b510      	push	{r4, lr}
    2ece:	f000 f84b 	bl	2f68 <__gesf2>
    2ed2:	2800      	cmp	r0, #0
    2ed4:	da01      	bge.n	2eda <__aeabi_fcmpge+0xe>
    2ed6:	2000      	movs	r0, #0
    2ed8:	bd10      	pop	{r4, pc}
    2eda:	2001      	movs	r0, #1
    2edc:	bd10      	pop	{r4, pc}
    2ede:	46c0      	nop			; (mov r8, r8)

00002ee0 <__clzsi2>:
    2ee0:	211c      	movs	r1, #28
    2ee2:	2301      	movs	r3, #1
    2ee4:	041b      	lsls	r3, r3, #16
    2ee6:	4298      	cmp	r0, r3
    2ee8:	d301      	bcc.n	2eee <__clzsi2+0xe>
    2eea:	0c00      	lsrs	r0, r0, #16
    2eec:	3910      	subs	r1, #16
    2eee:	0a1b      	lsrs	r3, r3, #8
    2ef0:	4298      	cmp	r0, r3
    2ef2:	d301      	bcc.n	2ef8 <__clzsi2+0x18>
    2ef4:	0a00      	lsrs	r0, r0, #8
    2ef6:	3908      	subs	r1, #8
    2ef8:	091b      	lsrs	r3, r3, #4
    2efa:	4298      	cmp	r0, r3
    2efc:	d301      	bcc.n	2f02 <__clzsi2+0x22>
    2efe:	0900      	lsrs	r0, r0, #4
    2f00:	3904      	subs	r1, #4
    2f02:	a202      	add	r2, pc, #8	; (adr r2, 2f0c <__clzsi2+0x2c>)
    2f04:	5c10      	ldrb	r0, [r2, r0]
    2f06:	1840      	adds	r0, r0, r1
    2f08:	4770      	bx	lr
    2f0a:	46c0      	nop			; (mov r8, r8)
    2f0c:	02020304 	.word	0x02020304
    2f10:	01010101 	.word	0x01010101
	...

00002f1c <__eqsf2>:
    2f1c:	b570      	push	{r4, r5, r6, lr}
    2f1e:	0042      	lsls	r2, r0, #1
    2f20:	0245      	lsls	r5, r0, #9
    2f22:	024e      	lsls	r6, r1, #9
    2f24:	004c      	lsls	r4, r1, #1
    2f26:	0fc3      	lsrs	r3, r0, #31
    2f28:	0a6d      	lsrs	r5, r5, #9
    2f2a:	0e12      	lsrs	r2, r2, #24
    2f2c:	0a76      	lsrs	r6, r6, #9
    2f2e:	0e24      	lsrs	r4, r4, #24
    2f30:	0fc9      	lsrs	r1, r1, #31
    2f32:	2001      	movs	r0, #1
    2f34:	2aff      	cmp	r2, #255	; 0xff
    2f36:	d006      	beq.n	2f46 <__eqsf2+0x2a>
    2f38:	2cff      	cmp	r4, #255	; 0xff
    2f3a:	d003      	beq.n	2f44 <__eqsf2+0x28>
    2f3c:	42a2      	cmp	r2, r4
    2f3e:	d101      	bne.n	2f44 <__eqsf2+0x28>
    2f40:	42b5      	cmp	r5, r6
    2f42:	d006      	beq.n	2f52 <__eqsf2+0x36>
    2f44:	bd70      	pop	{r4, r5, r6, pc}
    2f46:	2d00      	cmp	r5, #0
    2f48:	d1fc      	bne.n	2f44 <__eqsf2+0x28>
    2f4a:	2cff      	cmp	r4, #255	; 0xff
    2f4c:	d1fa      	bne.n	2f44 <__eqsf2+0x28>
    2f4e:	2e00      	cmp	r6, #0
    2f50:	d1f8      	bne.n	2f44 <__eqsf2+0x28>
    2f52:	428b      	cmp	r3, r1
    2f54:	d006      	beq.n	2f64 <__eqsf2+0x48>
    2f56:	2001      	movs	r0, #1
    2f58:	2a00      	cmp	r2, #0
    2f5a:	d1f3      	bne.n	2f44 <__eqsf2+0x28>
    2f5c:	0028      	movs	r0, r5
    2f5e:	1e45      	subs	r5, r0, #1
    2f60:	41a8      	sbcs	r0, r5
    2f62:	e7ef      	b.n	2f44 <__eqsf2+0x28>
    2f64:	2000      	movs	r0, #0
    2f66:	e7ed      	b.n	2f44 <__eqsf2+0x28>

00002f68 <__gesf2>:
    2f68:	b5f0      	push	{r4, r5, r6, r7, lr}
    2f6a:	0042      	lsls	r2, r0, #1
    2f6c:	0245      	lsls	r5, r0, #9
    2f6e:	024c      	lsls	r4, r1, #9
    2f70:	0fc3      	lsrs	r3, r0, #31
    2f72:	0048      	lsls	r0, r1, #1
    2f74:	0a6d      	lsrs	r5, r5, #9
    2f76:	0e12      	lsrs	r2, r2, #24
    2f78:	0a64      	lsrs	r4, r4, #9
    2f7a:	0e00      	lsrs	r0, r0, #24
    2f7c:	0fc9      	lsrs	r1, r1, #31
    2f7e:	2aff      	cmp	r2, #255	; 0xff
    2f80:	d01e      	beq.n	2fc0 <__gesf2+0x58>
    2f82:	28ff      	cmp	r0, #255	; 0xff
    2f84:	d021      	beq.n	2fca <__gesf2+0x62>
    2f86:	2a00      	cmp	r2, #0
    2f88:	d10a      	bne.n	2fa0 <__gesf2+0x38>
    2f8a:	426e      	negs	r6, r5
    2f8c:	416e      	adcs	r6, r5
    2f8e:	b2f6      	uxtb	r6, r6
    2f90:	2800      	cmp	r0, #0
    2f92:	d10f      	bne.n	2fb4 <__gesf2+0x4c>
    2f94:	2c00      	cmp	r4, #0
    2f96:	d10d      	bne.n	2fb4 <__gesf2+0x4c>
    2f98:	2000      	movs	r0, #0
    2f9a:	2d00      	cmp	r5, #0
    2f9c:	d009      	beq.n	2fb2 <__gesf2+0x4a>
    2f9e:	e005      	b.n	2fac <__gesf2+0x44>
    2fa0:	2800      	cmp	r0, #0
    2fa2:	d101      	bne.n	2fa8 <__gesf2+0x40>
    2fa4:	2c00      	cmp	r4, #0
    2fa6:	d001      	beq.n	2fac <__gesf2+0x44>
    2fa8:	428b      	cmp	r3, r1
    2faa:	d011      	beq.n	2fd0 <__gesf2+0x68>
    2fac:	2101      	movs	r1, #1
    2fae:	4258      	negs	r0, r3
    2fb0:	4308      	orrs	r0, r1
    2fb2:	bdf0      	pop	{r4, r5, r6, r7, pc}
    2fb4:	2e00      	cmp	r6, #0
    2fb6:	d0f7      	beq.n	2fa8 <__gesf2+0x40>
    2fb8:	2001      	movs	r0, #1
    2fba:	3901      	subs	r1, #1
    2fbc:	4308      	orrs	r0, r1
    2fbe:	e7f8      	b.n	2fb2 <__gesf2+0x4a>
    2fc0:	2d00      	cmp	r5, #0
    2fc2:	d0de      	beq.n	2f82 <__gesf2+0x1a>
    2fc4:	2002      	movs	r0, #2
    2fc6:	4240      	negs	r0, r0
    2fc8:	e7f3      	b.n	2fb2 <__gesf2+0x4a>
    2fca:	2c00      	cmp	r4, #0
    2fcc:	d0db      	beq.n	2f86 <__gesf2+0x1e>
    2fce:	e7f9      	b.n	2fc4 <__gesf2+0x5c>
    2fd0:	4282      	cmp	r2, r0
    2fd2:	dceb      	bgt.n	2fac <__gesf2+0x44>
    2fd4:	db04      	blt.n	2fe0 <__gesf2+0x78>
    2fd6:	42a5      	cmp	r5, r4
    2fd8:	d8e8      	bhi.n	2fac <__gesf2+0x44>
    2fda:	2000      	movs	r0, #0
    2fdc:	42a5      	cmp	r5, r4
    2fde:	d2e8      	bcs.n	2fb2 <__gesf2+0x4a>
    2fe0:	2101      	movs	r1, #1
    2fe2:	1e58      	subs	r0, r3, #1
    2fe4:	4308      	orrs	r0, r1
    2fe6:	e7e4      	b.n	2fb2 <__gesf2+0x4a>

00002fe8 <__lesf2>:
    2fe8:	b5f0      	push	{r4, r5, r6, r7, lr}
    2fea:	0042      	lsls	r2, r0, #1
    2fec:	024d      	lsls	r5, r1, #9
    2fee:	004c      	lsls	r4, r1, #1
    2ff0:	0246      	lsls	r6, r0, #9
    2ff2:	0a76      	lsrs	r6, r6, #9
    2ff4:	0e12      	lsrs	r2, r2, #24
    2ff6:	0fc3      	lsrs	r3, r0, #31
    2ff8:	0a6d      	lsrs	r5, r5, #9
    2ffa:	0e24      	lsrs	r4, r4, #24
    2ffc:	0fc9      	lsrs	r1, r1, #31
    2ffe:	2aff      	cmp	r2, #255	; 0xff
    3000:	d016      	beq.n	3030 <__lesf2+0x48>
    3002:	2cff      	cmp	r4, #255	; 0xff
    3004:	d018      	beq.n	3038 <__lesf2+0x50>
    3006:	2a00      	cmp	r2, #0
    3008:	d10a      	bne.n	3020 <__lesf2+0x38>
    300a:	4270      	negs	r0, r6
    300c:	4170      	adcs	r0, r6
    300e:	b2c0      	uxtb	r0, r0
    3010:	2c00      	cmp	r4, #0
    3012:	d015      	beq.n	3040 <__lesf2+0x58>
    3014:	2800      	cmp	r0, #0
    3016:	d005      	beq.n	3024 <__lesf2+0x3c>
    3018:	2001      	movs	r0, #1
    301a:	3901      	subs	r1, #1
    301c:	4308      	orrs	r0, r1
    301e:	bdf0      	pop	{r4, r5, r6, r7, pc}
    3020:	2c00      	cmp	r4, #0
    3022:	d013      	beq.n	304c <__lesf2+0x64>
    3024:	4299      	cmp	r1, r3
    3026:	d014      	beq.n	3052 <__lesf2+0x6a>
    3028:	2001      	movs	r0, #1
    302a:	425b      	negs	r3, r3
    302c:	4318      	orrs	r0, r3
    302e:	e7f6      	b.n	301e <__lesf2+0x36>
    3030:	2002      	movs	r0, #2
    3032:	2e00      	cmp	r6, #0
    3034:	d1f3      	bne.n	301e <__lesf2+0x36>
    3036:	e7e4      	b.n	3002 <__lesf2+0x1a>
    3038:	2002      	movs	r0, #2
    303a:	2d00      	cmp	r5, #0
    303c:	d1ef      	bne.n	301e <__lesf2+0x36>
    303e:	e7e2      	b.n	3006 <__lesf2+0x1e>
    3040:	2d00      	cmp	r5, #0
    3042:	d1e7      	bne.n	3014 <__lesf2+0x2c>
    3044:	2000      	movs	r0, #0
    3046:	2e00      	cmp	r6, #0
    3048:	d0e9      	beq.n	301e <__lesf2+0x36>
    304a:	e7ed      	b.n	3028 <__lesf2+0x40>
    304c:	2d00      	cmp	r5, #0
    304e:	d1e9      	bne.n	3024 <__lesf2+0x3c>
    3050:	e7ea      	b.n	3028 <__lesf2+0x40>
    3052:	42a2      	cmp	r2, r4
    3054:	dc06      	bgt.n	3064 <__lesf2+0x7c>
    3056:	dbdf      	blt.n	3018 <__lesf2+0x30>
    3058:	42ae      	cmp	r6, r5
    305a:	d803      	bhi.n	3064 <__lesf2+0x7c>
    305c:	2000      	movs	r0, #0
    305e:	42ae      	cmp	r6, r5
    3060:	d3da      	bcc.n	3018 <__lesf2+0x30>
    3062:	e7dc      	b.n	301e <__lesf2+0x36>
    3064:	2001      	movs	r0, #1
    3066:	4249      	negs	r1, r1
    3068:	4308      	orrs	r0, r1
    306a:	e7d8      	b.n	301e <__lesf2+0x36>

0000306c <__libc_init_array>:
    306c:	b570      	push	{r4, r5, r6, lr}
    306e:	2600      	movs	r6, #0
    3070:	4d0c      	ldr	r5, [pc, #48]	; (30a4 <__libc_init_array+0x38>)
    3072:	4c0d      	ldr	r4, [pc, #52]	; (30a8 <__libc_init_array+0x3c>)
    3074:	1b64      	subs	r4, r4, r5
    3076:	10a4      	asrs	r4, r4, #2
    3078:	42a6      	cmp	r6, r4
    307a:	d109      	bne.n	3090 <__libc_init_array+0x24>
    307c:	2600      	movs	r6, #0
    307e:	f001 ffd3 	bl	5028 <_init>
    3082:	4d0a      	ldr	r5, [pc, #40]	; (30ac <__libc_init_array+0x40>)
    3084:	4c0a      	ldr	r4, [pc, #40]	; (30b0 <__libc_init_array+0x44>)
    3086:	1b64      	subs	r4, r4, r5
    3088:	10a4      	asrs	r4, r4, #2
    308a:	42a6      	cmp	r6, r4
    308c:	d105      	bne.n	309a <__libc_init_array+0x2e>
    308e:	bd70      	pop	{r4, r5, r6, pc}
    3090:	00b3      	lsls	r3, r6, #2
    3092:	58eb      	ldr	r3, [r5, r3]
    3094:	4798      	blx	r3
    3096:	3601      	adds	r6, #1
    3098:	e7ee      	b.n	3078 <__libc_init_array+0xc>
    309a:	00b3      	lsls	r3, r6, #2
    309c:	58eb      	ldr	r3, [r5, r3]
    309e:	4798      	blx	r3
    30a0:	3601      	adds	r6, #1
    30a2:	e7f2      	b.n	308a <__libc_init_array+0x1e>
    30a4:	00005034 	.word	0x00005034
    30a8:	00005034 	.word	0x00005034
    30ac:	00005034 	.word	0x00005034
    30b0:	00005038 	.word	0x00005038

000030b4 <memcpy>:
    30b4:	2300      	movs	r3, #0
    30b6:	b510      	push	{r4, lr}
    30b8:	429a      	cmp	r2, r3
    30ba:	d100      	bne.n	30be <memcpy+0xa>
    30bc:	bd10      	pop	{r4, pc}
    30be:	5ccc      	ldrb	r4, [r1, r3]
    30c0:	54c4      	strb	r4, [r0, r3]
    30c2:	3301      	adds	r3, #1
    30c4:	e7f8      	b.n	30b8 <memcpy+0x4>

000030c6 <memset>:
    30c6:	0003      	movs	r3, r0
    30c8:	1882      	adds	r2, r0, r2
    30ca:	4293      	cmp	r3, r2
    30cc:	d100      	bne.n	30d0 <memset+0xa>
    30ce:	4770      	bx	lr
    30d0:	7019      	strb	r1, [r3, #0]
    30d2:	3301      	adds	r3, #1
    30d4:	e7f9      	b.n	30ca <memset+0x4>
    30d6:	6974      	.short	0x6974
    30d8:	3631796e 	.word	0x3631796e
    30dc:	00003731 	.word	0x00003731

000030e0 <device_1617>:
    30e0:	000030d6 000030e8                       .0...0..

000030e8 <device_tiny_161x>:
    30e8:	0000310c 40008000 0f000040 11001000     .1.....@@.......
    30f8:	000b1280 13000001 00200020 00801400     ........ . .....
    3108:	00000020 796e6974 78313631 3e940c00               ...tiny161x.

00003115 <bindata0>:
    3115:	003e940c 005b940c 005b940c 005b940c     ..>...[...[...[.
    3125:	005b940c 005b940c 0062940c 005b940c     ..[...[...b...[.
    3135:	005b940c 005b940c 005b940c 005b940c     ..[...[...[...[.
    3145:	005b940c 005b940c 005b940c 005b940c     ..[...[...[...[.
    3155:	005b940c 005b940c 005b940c 005b940c     ..[...[...[...[.
    3165:	0368940c 038c940c 005b940c 005b940c     ..h.......[...[.
    3175:	005b940c 005b940c 005b940c 005b940c     ..[...[...[...[.
    3185:	005b940c 005b940c 005b940c be1f2411     ..[...[...[..$..
    3195:	bfcdefcf bfdee3df e0a0e318 eee4e3b8     ................
    31a5:	c002e1fd 920d9005 07b136a6 e328f7d9     .........6....(.
    31b5:	e3b8e6a6 921dc001 07b23bad 940ef7e1     .........;......
    31c5:	940c0089 940c0eed 940e0000 940e03e7     ................
    31d5:	9508021f 920f921f 920fb60f 932f2411     .............$/.
    31e5:	934f933f 936f935f 938f937f 93af939f     ?.O._.o.........
    31f5:	93ef93bf 940e93ff e082030d 01439380     ..............C.
    3205:	91ef91ff 91af91bf 918f919f 916f917f     ..............o.
    3215:	914f915f 912f913f be0f900f 901f900f     _.O.?./.........
    3225:	940e9518 b78f005d bf8f6880 0274940e     ....]....h....t.
    3235:	386c9180 f7d13081 386c9210 e090e080     ..l8.0....l8....
    3245:	0359940e e0812fc8 940ee090 2b8c0359     ..Y../......Y..+
    3255:	982cf414 9a2ccfeb 9508cfe9 2fc893cf     ..,...,......../
    3265:	0424940e f3e12388 940e2f8c 940e0432     ..$..#.../..2...
    3275:	1181042a 91cfcffc 92ef9508 930f92ff     *...............
    3285:	93cf931f d00093df b7deb7cd 38669180     ..............f8
    3295:	f481708f e318e000 e1f32e0f e3f82eef     .p..............
    32a5:	2df02eff 918101f8 940e018f 16e000a6     ...-............
    32b5:	f7c106f1 940ee585 918000a6 940e3866     ............f8..
    32c5:	821900a6 8189821a 9702819a c053f008     ..............S.
    32d5:	819a8189 0332940e 940e2f19 2f8100a6     ......2../...../
    32e5:	00a6940e 819a8189 033f940e 940e2f19     ..........?../..
    32f5:	2f8100a6 00a6940e 819a8189 0332940e     .../..........2.
    3305:	8189018c 940e819a 1b08033f 2f800b19     ........?....../
    3315:	00a6940e 940e2f81 818900a6 940e819a     ...../..........
    3325:	2f19034c 00a6940e 940e2f81 818900a6     L../...../......
    3335:	940e819a 23880359 e081f424 00a6940e     ....Y..#$.......
    3345:	e080c003 00a6940e 819a8189 0fee01fc     ................
    3355:	0f8e1fff 01fc1f9f 4cf75ced 940e8180     .........\.L....
    3365:	818900a6 9601819a 839a8389 819a8189     ................
    3375:	f4089702 9180cfad 940e386b 918000a6     ........k8......
    3385:	e0913866 93900f98 940e3866 ea8a00a6     f8......f8......
    3395:	00a6940e 900f900f 91cf91df 910f911f     ................
    33a5:	90ef90ff e0819508 386d9380 91e09508     ..........m8....
    33b5:	91f0382b 8180382c f4442388 389091e0     +8..,8...#D....8
    33c5:	389191f0 60848180 c0038380 9380e081     ...8...`........
    33d5:	940e386c 950800b5 f4242388 9380e081     l8.......#$.....
    33e5:	c009386b c003fd86 386b9210 708fc004     k8........k8...p
    33f5:	93805f8e 940e386b 950800b5 e398e88c     ._..k8..........
    3405:	0c5c940e e070e060 e398e489 0cce940e     ..\.`.p.........
    3415:	e070e060 e398e489 0ced940e e070e061     `.p.........a.p.
    3425:	e398e489 0cce940e e070e061 e398e489     ........a.p.....
    3435:	0ced940e e358e842 e28be060 940ee398     ....B.X.`.......
    3445:	e84704ae e061e358 e398e28b 04ae940e     ..G.X.a.........
    3455:	019c9508 f0692b89 e0f1e4e0 fd928191     .....+i.........
    3465:	e4e0cffd 8722e0f1 81828733 83826082     ......".3....`..
    3475:	e4e0c005 8182e0f1 83827f8d e0f1e4e0     ................
    3485:	fd818181 9210cffd 92100148 95080149     ........H...I...
    3495:	e0f1e8e0 8a138215 e0f1e4e0 fd808181     ................
    34a5:	e4e0cffd 8180e0f1 83807f8e fd808981     ................
    34b5:	e4e0cffd 8980e0f1 8b807f8e e090e184     ................
    34c5:	38679380 38689390 38489180 f4983085     ..g8..h8..H8.0..
    34d5:	01479210 fd808181 e989cffd 01409380     ..G...........@.
    34e5:	38679180 38689190 1f990f88 1f990f88     ..g8..h8........
    34f5:	01a1940e e081c011 01479380 e0f1e4e0     ..........G.....
    3505:	fd808181 e881cffd 01409380 38679180     ..........@...g8
    3515:	38689190 01a1940e e0f1e4e0 fd808181     ..h8............
    3525:	e4e0cffd 8180e0f1 83806081 91809508     .........`......
    3535:	91903867 97443868 940ef049 e08101c0     g8..h8D.I.......
    3545:	386e9380 38699210 386a9210 e1849508     ..n8..i8..j8....
    3555:	940ee090 e1e701a1 8180e0f4 83807f87     ................
    3565:	7f888180 83806084 e0f4e1e6 7f878180     .....`..........
    3575:	81808380 60847f88 940e8380 e9e201c0     .......`........
    3585:	8210e3f8 e398e287 83928381 e398e283     ................
    3595:	83948383 e398e18b 83968385 e398e18f     ................
    35a5:	87908387 e398e183 87928781 e398e187     ................
    35b5:	87948783 e09ae988 87968785 e091e786     ................
    35c5:	8b908787 e091e684 8b928b81 e091e48b     ................
    35d5:	8b948b83 8a168a15 e091e48f 8f908b87     ................
    35e5:	940e01cf 940e0893 9380088e 93903890     .............8..
    35f5:	940e3891 950800a5 386e9180 f4393081     .8........n8.09.
    3605:	940ee080 118108f2 9210c002 9180386e     ............n8..
    3615:	3081386d c083f009 0942940e c0031181     m8.0......B.....
    3625:	094a940e e880c003 0164940e 386d9210     ..J.......d...m8
    3635:	389091e0 389191f0 ff828180 e081c007     ...8...8........
    3645:	386e9380 7f8b8180 c0698380 387c9180     ..n8......i...|8
    3655:	c005ff80 38699210 386a9210 9180c056     ......i8..j8V...
    3665:	91903869 3888386a f4084193 e06fc04e     i8..j8.8.A..N.o.
    3675:	e483e072 940ee398 91200d2e 91303867     r......... .g80.
    3685:	3d203868 f4094037 1181c04a e4e0c048     h8 =7@..J...H...
    3695:	8181e0f1 cffdfd80 e0f1e4e0 7f8e8180     ................
    36a5:	ed808380 9380e097 93903867 91803868     ........g8..h8..
    36b5:	30853848 e191f460 e8e01b98 8395e0f1     H8.0`...........
    36c5:	8b83e086 e19fe480 01a1940e e196c00b     ................
    36d5:	e8e01b98 8395e0f1 8b83e086 e097ed80     ................
    36e5:	01a1940e e0f1e4e0 fd808981 e4e0cffd     ................
    36f5:	8980e0f1 8b806081 fd808181 e4e0cffd     .....`..........
    3705:	8180e0f1 83806081 9180c00a 91903867     .....`......g8..
    3715:	97443868 940ef021 940e0e6a 918001c0     h8D.!...j.......
    3725:	3081386e 9588f009 e0819508 386e9380     n8.0..........n8
    3735:	38679180 38689190 04a3940e 38679120     ..g8..h8.... .g8
    3745:	38689130 38699180 386a9190 954001a9     0.h8..i8..j8..@.
    3755:	17849550 f4380795 1f930f82 38699380     P.....8.......i8
    3765:	386a9390 ef8f9508 9380ef9f 93903869     ..j8........i8..
    3775:	9508386a 0f22019c 0f221f33 0f821f33     j8....".3.".3...
    3785:	01fc1f93 4cf757ee 81928181 019c9508     .....W.L........
    3795:	1f330f22 1f930f82 0fee01fc 55e51fff     ".3............U
    37a5:	81844cf7 95088195 0f22019c 0f221f33     .L........".3.".
    37b5:	0f821f33 01fc1f93 4cf757ee 81948183     3........W.L....
    37c5:	019c9508 1f330f22 1f930f82 1f990f88     ....".3.........
    37d5:	382f91e0 383091f0 1ff90fe8 95088180     ../8..08........
    37e5:	920f921f 920fb60f 932f2411 934f933f     .........$/.?.O.
    37f5:	936f935f 938f937f 93af939f 93ef93bf     _.o.............
    3805:	940e93ff 91ff0e7b 91bf91ef 919f91af     ....{...........
    3815:	917f918f 915f916f 913f914f 900f912f     ....o._.O.?./...
    3825:	900fbe0f 9518901f 920f921f 920fb60f     ................
    3835:	932f2411 934f933f 936f935f 938f937f     .$/.?.O._.o.....
    3845:	93af939f 93ef93bf 940e93ff 91ff0ea7     ................
    3855:	91bf91ef 919f91af 917f918f 915f916f     ............o._.
    3865:	913f914f 900f912f 900fbe0f 9518901f     O.?./...........
    3875:	9380e082 e0800089 e0409508 e681ed68     ..........@.h...
    3885:	940ee090 e0800402 94789508 9508e080     ..........x.....
    3895:	e0f4e1e0 60888180 31e89381 07f8e084     .......`...1....
    38a5:	e3e0f7c9 8180e0f4 93816088 e08433e8     .........`...3..
    38b5:	f7c907f8 e0f4e5e0 60888180 35e89381     ...........`...5
    38c5:	07f8e084 9508f7c9 e3e39823 8180e0f4     ........#.......
    38d5:	83807f87 9a22982a 041a940e 940e9508     ....*.".........
    38e5:	9a2c03c0 940e9a24 940e03b5 940e0406     ..,.$...........
    38f5:	940e03dc 940e03fa 940e03bd 940e0415     ................
    3905:	950803b0 e0f1e8e0 8385e181 8b83e086     ................
    3915:	9508e080 bf6401fc 95088340 e0f1e4e0     ......d.@.......
    3925:	11818181 e4e0cffd e881e0f1 e0818380     ................
    3935:	e0828387 e0808382 e0839508 00509380     ..............P.
    3945:	9508e080 e0f8e0e0 e098e283 87918780     ................
    3955:	8386ec80 9508e080 08049180 2788fb85     ...............'
    3965:	9508f980 08049180 2788fb86 e091f980     ...........'....
    3975:	95082789 e0f8e0e0 ff958194 9380cffd     .'..............
    3985:	95080802 92df92cf 930f92ff 93cf931f     ................
    3995:	01ec93df 81bf81ae 0fcc01eb 0fc61fdd     ................
    39a5:	0fca1fd7 80fa1fdb 814401fc e0e68155     ..........D.U...
    39b5:	01909fe6 0d309fe7 018a2411 1f130f02     ......0..$......
    39c5:	812201f8 01f98133 81328121 810401f8     ..".3...!.2.....
    39d5:	1b208115 81e80b31 09311b2e 81ea01ec     .. .1.....1.....
    39e5:	810081fb 01fa8111 e050e040 07511740     ........@.P.@.Q.
    39f5:	1746f139 f0f90757 918c9612 12f89712     9.F.W...........
    3a05:	8180c01a 30825885 80c4f0e8 818280d5     .....X.0........
    3a15:	01ec8193 819a8189 06d916c8 198cf460     ............`...
    3a25:	91cc099d 17c8e0d0 f42807d9 0b9d1b8c     ..........(.....
    3a35:	07391728 5f4ff038 96134f5f cfd69636     (.9.8.O__O..6...
    3a45:	c001e080 91dfe081 911f91cf 90ff910f     ................
    3a55:	90cf90df 91209508 9130386f 0f823870     ...... .o80.p8..
    3a65:	93801f93 9390386f 95083870 f0d99700     ....o8..p8......
    3a75:	05511541 e026f0c1 01b09f62 01dc2411     A.Q...&.b....$..
    3a85:	91ed9614 971591fc 1ff70fe6 8320e021     ............!. .
    3a95:	918d9614 9715919c 0fe601fc 83421ff7     ..............B.
    3aa5:	e0808353 e08b9508 922f9508 924f923f     S........./.?.O.
    3ab5:	926f925f 928f927f 92af929f 92cf92bf     _.o.............
    3ac5:	92ef92df 930f92ff 93cf931f 970093df     ................
    3ad5:	c37df409 2ca101ec 2c812cb1 2c212c91     ..}....,.,.,.,!,
    3ae5:	e0332cd1 e8452ec3 e8562e64 e0672e75     .,3...E.d.V.u.g.
    3af5:	e0722e36 e0e82e47 81ea2e5e 818081fb     6.r.G...^.......
    3b05:	16888191 f0080699 0175c1a5 1cff0cee     ..........u.....
    3b15:	811d810c 1d1f0d0e 918c01d8 f4093084     .............0..
    3b25:	f438c0a2 f1013082 c049f008 f0593081     ..8..0....I..0Y.
    3b35:	3885c18a c0c2f409 f4093886 3087c0f6     ...8.....8.....0
    3b45:	c181f009 01d8c137 91ed9612 971391fc     ....7...........
    3b55:	718e8180 c169f009 818c924c 01fc819d     ...q..i.L.......
    3b65:	1dff0dee c1618251 812101f8 f1292322     ....Q.a...!."#).
    3b75:	81f38002 30252de0 8181f020 01d88192     .....-%0 .......
    3b85:	01d8c00e 918d9614 9715919c 81528141     ............A.R.
    3b95:	07951784 1748f069 f4300759 96149701     ....i.H.Y.0.....
    3ba5:	939c938d c0049715 01f89601 83958384     ................
    3bb5:	01d85021 932c9611 01f8c138 01d8c131     !P....,.8...1...
    3bc5:	912d9614 9715913c 918d9612 9713919c     ..-.<...........
    3bd5:	961101dc 915c914d 17249712 f4090735     ....M.\...$.5...
    3be5:	818ec132 1742819f f4e00753 0b351b24     2.....B.S...$.5.
    3bf5:	0daa01dc 918c1dbb 8005e090 9595c002     ................
    3c05:	940a9587 2799f7e2 07391728 c11bf408     .......'(.9.....
    3c15:	23888184 c117f409 823001f8 81fb81ea     ...#......0.....
    3c25:	c01a8124 0dea01fc 1b421dfb 81800b53     $.........B.S...
    3c35:	1748e090 f4080759 8182c106 f0312388     ..H.Y........#1.
    3c45:	01ce01b4 043a940e c0fd1181 01d8e0e4     ......:.........
    3c55:	81ea93ec 812281fb 819d818c 0dee01fc     ......".........
    3c65:	83211dff 01d8c0e2 912d9614 9715913c     ..!.......-.<...
    3c75:	91ed9612 971391fc 81928181 07931782     ................
    3c85:	c0d7f408 81ff81ee 1dfb0dea 0b931b82     ................
    3c95:	e0308120 07391728 c0aff008 23888182      .0.(.9........#
    3ca5:	01b4f031 940e01ce 1181043a 01f8c0cc     1.......:.......
    3cb5:	23888181 c067f409 c0b65081 81b981a8     ...#..g..P......
    3cc5:	96138580 81ec938c 0dee81fd 81441dff     ..............D.
    3cd5:	81a28155 961181b3 919c918d 17849712     U...............
    3ce5:	f0c00795 81bf81ae 1dbb0daa 2f26916c     ............l.&/
    3cf5:	9611e030 5f7f917c 9535c002 957a9527     0...|.._..5.'.z.
    3d05:	1b84f7e2 1b620b95 e0302f26 07391728     ......b.&/0.(.9.
    3d15:	c097f408 81ea8270 812281fb 819d818c     ....p.....".....
    3d25:	0dee01fc 83211dff 01d8c042 916d9614     ......!.B.....m.
    3d35:	9715917c 91ed9612 971391fc 81328121     |...........!.2.
    3d45:	07371726 9611f458 9711918c c0021181     &.7.X...........
    3d55:	c07792cc 01f85081 c0738381 81ff81ee     ..w..P....s.....
    3d65:	1dfb0dea 2f488180 8191e050 c0025f9f     ......H/P...._..
    3d75:	95479555 f7e2959a 0b371b26 e0901b84     U.G.....&.7.....
    3d85:	07931782 01d8f460 81ea926c 812381fb     ....`...l.....#.
    3d95:	819d818c 0dee01fc 83211dff 01f8c052     ..........!.R...
    3da5:	11818181 82c0c002 5081c04c 24228381     ........L..P.."$
    3db5:	c03b9423 961401d8 913c912d 96129715     #.;.....-.<.....
    3dc5:	919c918d 01dc9713 918d9611 9712919c     ................
    3dd5:	07931782 1b28f568 81ae0b39 0daa81bf     ....h.(.9.......
    3de5:	918c1dbb 8005e090 9595c002 940a9587     ................
    3df5:	2799f7e2 07391728 01f8f418 c01a82c0     ...'(.9.........
    3e05:	961101d8 9711918c c00c1181 938ce081     ................
    3e15:	819d818c 0dee01fc 80021dff 2de081f3     ...............-
    3e25:	c01182c0 01f85081 24dd8381 c00b94d3     .....P.....$....
    3e35:	92cc01d8 819d818c 0dee01fc 82111dff     ................
    3e45:	2422c002 efbf9423 0a9b1a8b 0eaee0e3     .."$#...........
    3e55:	ce531cb1 81f981e8 ff878180 e040c023     ..S.........#.@.
    3e65:	e020e050 81eae030 818081fb 17288191     P. .0.........(.
    3e75:	f4980739 81fd81ec 1ff50fe4 81b381a2     9...............
    3e85:	fd80918c 8190c005 f0117f97 938c6081     .............`..
    3e95:	4f3f5f2f 4f5f5f4a 81e8cfe6 818081f9     /_?OJ__O........
    3ea5:	8380778f c00710d1 81f981e8 c06f1021     .w..........!.o.
    3eb5:	7f8e8180 81eac06e 858181fb f3a12388     ....n........#..
    3ec5:	81f981e8 68808180 81ea8380 858181fb     .......h........
    3ed5:	f7513081 e050e040 e030e020 2ed9e096     .0Q.@.P. .0.....
    3ee5:	81fb81ea 81718160 07371726 810cf6e8     ....`.q.&.7.....
    3ef5:	01fa811d 1fff0fee 1ff10fe0 2f988180     .............../
    3f05:	f1a17f97 f0113885 f5b13083 80ff80ee     .....8...0......
    3f15:	0fa401d7 96121fb5 20bb90bc e080f139     ........... 9...
    3f25:	2cc1e090 07971786 1728f4f8 f0d10739     ...,......(.9...
    3f35:	01d09ed8 0db09ed9 0fa02411 91ac1fb1     .........$......
    3f45:	f01130a4 f47138a6 0faa01dc 0fa81fbb     .0...8q.........
    3f55:	0dae1fb9 96121dbf 12ba91ac 01cbc003     ................
    3f65:	94c324cc cfde9601 c00610c1 81f38002     .$..............
    3f75:	81802de0 c0057f8e 81f38002 81802de0     .-...........-..
    3f85:	83806081 4f3f5f2f 4f5f5f4d 8180cfa9     .`../_?OM__O....
    3f95:	83806081 386f9180 38709190 81f981e8     .`....o8..p8....
    3fa5:	81328121 534801a9 17484f5f f4380759     !.2...HS_OH.Y.8.
    3fb5:	0b931b82 94a324aa 2ebae0a3 1782c044     .....$......D...
    3fc5:	f0100793 c104e080 0b931b82 3c899701     ...............<
    3fd5:	f3c00591 5c88cfef 81e80991 812181f9     .......\......!.
    3fe5:	53288132 83214f3f 81238332 c0961121     2.(S?O!.2.#.!...
    3ff5:	23228124 5021f011 81e88324 812581f9     $."#..!P$.....%.
    4005:	f0112322 83255021 809b808a 961601d4     "#..!P%.........
    4015:	9716912c c01b1121 809b808a 812701f4     ,...!.........'.
    4025:	c0481121 81fb81ea 23228123 e020f061     !.H.....#."#a. .
    4035:	e0a0e030 81eae0b0 814081fb 17a48151     0.........@.Q...
    4045:	f40807b5 3c89c06e f6280591 8108cfbb     ....n..<..(.....
    4055:	01f88119 11218124 90edcfdf e06090fc     ....$.!.......`.
    4065:	e040e070 154ee050 f0f1055f 81fd81ec     p.@.P.N._.......
    4075:	1ff70fe6 30238120 3028f011 8124f481     .... .#0..(0..$.
    4085:	80c28135 01d680d3 90cd9611 971290dc     5...............
    4095:	053d152c 5f2ff420 83244f3f 5f4f8335     ,.=. ./_?O$.5.O_
    40a5:	5f6a4f5f cfdf4f7f 812601f4 961401d8     _Oj_.O....&.....
    40b5:	cfb2932c 81198108 961501d8 1121912c     ,...........,.!.
    40c5:	80e0cfb1 e06080f1 e040e070 154ee050     ......`.p.@.P.N.
    40d5:	f0f1055f 81fd81ec 1ff70fe6 30238120     _........... .#0
    40e5:	3028f011 8124f481 80c28135 01d680d3     ..(0..$.5.......
    40f5:	90cd9611 971290dc 06d316c2 5021f420     ............ .!P
    4105:	83240931 5f4f8335 5f6a4f5f cfdf4f7f     1.$.5.O__Oj_.O..
    4115:	812701f4 961501d8 cf84932c 83235021     ..'.....,...!P#.
    4125:	01a9cf81 1f550f44 81fd81ec 1ff50fe4     ....D.U.........
    4135:	38658160 c047f009 23668161 5061f019     `.e8..G.a.f#..aP
    4145:	c0418361 816c82a0 01fb817d 1ff50fe4     a.A...l.}.......
    4155:	81f38002 82b02de0 81ff81ee 1ff30fe2     .....-..........
    4165:	20dd80d2 e040f181 e000e050 81eae010     ... ..@.P.......
    4175:	816081fb 17068171 f5280717 81ff81ee     ..`.q.....(.....
    4185:	1ff50fe4 12d68162 01bac019 1f770f66     ....b.......f.w.
    4195:	81fd81ec 0e86014f 01f41e97 80f380e2     ....O...........
    41a5:	80f001f7 c00afef0 82a001f4 81fd81ec     ................
    41b5:	1ff70fe6 81f38002 82b02de0 4f1f5f0f     .........-..._.O
    41c5:	4f5f5f4d 9611cfd4 4f3f5f2d e08bcf34     M__O....-_?O4...
    41d5:	91cf91df 910f911f 90ef90ff 90cf90df     ................
    41e5:	90af90bf 908f909f 906f907f 904f905f     ..........o._.O.
    41f5:	902f903f e0959508 38739390 38b791e0     ?./.......s8...8
    4205:	38b891f0 89f28801 97302de0 9409f009     ...8.....-0.....
    4215:	91e0cfff 91f038b7 880338b8 2de089f4     .....8...8.....-
    4225:	f0099730 e4809409 0873940c 38b79180     0.........s....8
    4235:	38b89190 93cf9508 38b79380 38b89390     ...8.......8...8
    4245:	38739180 f0393085 f0283082 38719180     ..s8.09..0(...q8
    4255:	f1712388 9210c040 e0c03871 38b791a0     .#q.@...q8.....8
    4265:	38b891b0 e0902f8c 1f990f88 91ed9611     ...8./..........
    4275:	971291fc 1ff90fe8 81f09001 97302de0     .............-0.
    4285:	9617f329 913c912d 01d99718 1fb90fa8     )...-.<.........
    4295:	919c918d 23889509 9180f029 5f8f3871     .......#)...q8._
    42a5:	38719380 91805fcf 23883871 cfcef2b9     ..q8._..q8.#....
    42b5:	9380e082 91e03873 91f038b7 840738b8     ....s8...8...8..
    42c5:	2de089f0 f0119730 c0089509 9380e085     ...-0...........
    42d5:	e0813873 5f8fc001 38719380 38719180     s8....._..q8..q8
    42e5:	f0312388 38719210 91cfe880 0873940c     .#1...q8......s.
    42f5:	950891cf 93cf931f 2f1893df 38b791a0     .........../...8
    4305:	38b891b0 912d9615 9716913c 01f9e0d0     ...8..-.<.......
    4315:	1df10fed 1df10fed 81918180 f0112b89     .............+..
    4325:	cff55fdf 918d9653 9754919c f1492b89     ._..S.....T..+I.
    4335:	e0902f81 1f990f88 0fe801f9 90011ff9     ./..............
    4345:	2de081f0 f0e99730 912d961b 971c913c     ...-0.....-.<...
    4355:	0fa801d9 918d1fb9 9700919c e861f091     ..............a.
    4365:	9509e078 11812fc8 e083c006 38739380     x..../........s8
    4375:	38729210 e082c003 38739380 f028171d     ..r8......s8..(.
    4385:	e0c2c001 940ee882 2f8c0873 91cf91df     ........s../....
    4395:	9508911f 38b791e0 38b891f0 85f68405     .......8...8....
    43a5:	94092de0 93cf931f 921f93df b7deb7cd     .-..............
    43b5:	91e08219 91f038b7 880538b8 2de089f6     .....8...8.....-
    43c5:	f0499730 9380e082 01ce3873 95099601     0.I.....s8......
    43d5:	9380e083 91803873 11813871 8119c02c     ....s8..q8..,...
    43e5:	c0291111 9380e084 91a03873 91b038b7     ..).....s8...8..
    43f5:	918038b8 e0903872 1f990f88 91ed9613     .8..r8..........
    4405:	971491fc 1ff90fe8 81f09001 96192de0     .............-..
    4415:	913c912d 9730971a 01d9f081 1fb90fa8     -.<...0.........
    4425:	919c918d 11819509 9180c03e 5f8f3872     ........>...r8._
    4435:	38729380 e010cfda 9210c03d 01f93872     ..r8....=...r8..
    4445:	1df10fe1 1df10fe1 81f09001 97302de0     .............-0.
    4455:	9001f059 2de081f0 ff878180 919cc003     Y......-........
    4465:	939c6094 cfeb5f1f 38729310 9380e082     .`..._....r8....
    4475:	96573873 91fc91ed 97309758 9509f011     s8W.....X.0.....
    4485:	9180c005 5f8f3871 38719380 9180e010     ....q8._..q8....
    4495:	23883871 9210f079 91803871 64803872     q8.#y...q8..r8.d
    44a5:	0873940e 9180c007 5f8f3871 38719380     ..s.....q8._..q8
    44b5:	cfede013 900f2f81 91cf91df 9508911f     ...../..........
    44c5:	38799180 387a9190 38b991a0 38ba91b0     ..y8..z8...8...8
    44d5:	91fc91ed 81409711 e0258151 01b09f28     ......@.Q.%.(...
    44e5:	0d709f29 e0202411 1784e030 f4a80795     ).p..$ .0.......
    44f5:	91ed9614 971591fc 1ff30fe2 1ff70fe6     ................
    4505:	5f2b81e0 fde04f3f 9601c002 9380cfee     ..+_?O..........
    4515:	93903879 e080387a 92109508 92103879     y8..z8......y8..
    4525:	e081387a 01bc9508 38b991e0 38ba91f0     z8.........8...8
    4535:	e083019c 1f330f22 f7e1958a 81b381a2     ....".3.........
    4545:	1fb30fa2 919c9612 96139712 9390918c     ................
    4555:	9380062a 81a2062b 0fa281b3 919c1fb3     *...+...........
    4565:	918c9611 06269390 06279380 9f96e095     ......&...'.....
    4575:	9f9701a0 24110d50 81b581a4 1fb50fa4     ....P..$........
    4585:	918c9613 061a9380 81b581a4 1fb50fa4     ................
    4595:	918c9614 061b9380 81b581a4 1fb50fa4     ................
    45a5:	fd81918c 8184939c 01dc8195 1fb50fa4     ................
    45b5:	718c918c 81a2f469 0fa281b3 96161fb3     ...qi...........
    45c5:	95a291ac e0b070af 46b252a2 c001918c     .....p...R.F....
    45d5:	9380e38f 81a2061c 0fa281b3 96141fb3     ................
    45e5:	318b918c 5f8cf410 e18fc001 06059380     ...1..._........
    45f5:	81b381a2 1fb30fa2 918c9617 06019380     ................
    4605:	81b381a2 1fb30fa2 918c9615 708f9582     ...............p
    4615:	06199380 81938182 0fe201fc 81851ff3     ................
    4625:	6180708f 06029380 06189180 93806083     .p.a.........`..
    4635:	e8810618 06009380 9380e081 95080608     ................
    4645:	924f923f 926f925f 928f927f 92af929f     ?.O._.o.........
    4655:	92cf92bf 92ef92df 930f92ff 93cf931f     ................
    4665:	918093df 23883878 c148f409 38b991a0     ....x8.#..H....8
    4675:	38ba91b0 38bb90c0 38bc90d0 e010e000     ...8...8...8....
    4685:	e070e060 2cf12ce1 2433e080 e8d19433     `.p..,.,..3$3...
    4695:	24882e4d 2499948a 906d9493 9711907c     M..$...$..m.|...
    46a5:	812001f3 16e28131 f00806f3 01e6c123     .. .1.......#...
    46b5:	91399129 9614016e 91fc91ed 0fe69715     ).9.n...........
    46c5:	81401ff7 e050714c 95479556 95479556     ..@.LqP.V.G.V.G.
    46d5:	05511541 3041f021 f0b90551 9612c102     A.Q.!.A0Q.......
    46e5:	91dc91cd 0fc09713 814e1fd1 819f704f     ..........N.Op..
    46f5:	f4101749 c0011b94 c002e090 95279536     I...........6.'.
    4705:	f7e2959a 83328321 9612c0ed 915c914d     ....!.2.....M.\.
    4715:	0f409713 01ea1f51 c002800f 95279536     ..@.Q.......6.'.
    4725:	f7e2940a 83328321 80b480a3 e0d21521     ....!.2.....!...
    4735:	f020073d 40315f2f c005e091 1b4201a4     =. ./_1@......B.
    4745:	019a0b53 01e3e090 e4d0805a c005125d     S.......Z...]...
    4755:	95279536 f0192399 2399c009 ef4ff039     6.'..#.....#9.O.
    4765:	06b416a4 8240f431 c007e08e 94732477     ....1.@.....w$s.
    4775:	2c71c001 0531302a 9614f490 91fc91ed     ..q,*01.........
    4785:	0fe69715 81901ff7 8230ff97 91ed9614     ..........0.....
    4795:	971591fc 1ff70fe6 82b482a3 01e5c0a3     ................
    47a5:	27dd2fcd 70cf95c2 01a52f9c 705f2744     ./.'...p./..D'_p
    47b5:	01a52e65 27557f40 95429552 2745704f     e...@.U'R.B.OpE'
    47c5:	2745705f 705f2d5a 30c42ea5 7093f030     _pE'Z-_p...00..p
    47d5:	95c795d6 95c795d6 10710f9c e850c03c     ..........q.<.P.
    47e5:	30520d55 e056f410 e053c007 1795c005     U.R0..V...S.....
    47f5:	5f9ff468 09315c2f 05313d20 c006f7c0     h.._/\1. =1.....
    4805:	166ce0cf 9463f049 09315125 05313126     ..l.I.c.%Q1.&11.
    4815:	e0dff7b8 c00e126d f4201795 e0d55f9f     ....m..... .._..
    4825:	c0082e6d 2e6ce0cf 304fc005 5f4ff049     m.....l...O0I.O_
    4835:	09315022 05313023 304ff7c0 c065f009     "P1.#01...O0..e.
    4845:	1664e04f 9463f181 c05fe045 f0612399     O.d...c.E._..#a.
    4855:	5c2f5091 3d200931 f7c00531 2066c005     .P/\1. =1.....f 
    4865:	946af041 09315125 05313126 1061f7c0     A.j.%Q1.&11...a.
    4875:	2399c00d 5091f021 2e65e05a 2c61c007     ...#!..PZ.e...a,
    4885:	2344c005 5041f041 09315022 05313023     ..D#A.AP"P1.#01.
    4895:	1141f7c0 2066c010 946af1e9 3023e04a     ..A...f ..j.J.#0
    48a5:	f6c80531 1359c008 3023c02f f1400531     1.....Y./.#01.@.
    48b5:	2ea4e04f 3094e04f 0f99f018 50990f99     O...O..0.......P
    48c5:	9f4ce1c0 241101a0 294a2956 e0d02fc9     ..L....$V)J)./..
    48d5:	27cc2fdc 7fd095d2 2b5d2b4c 83548343     ./.'....L+]+C.T.
    48e5:	cfffc001 1aedefdf 5f6b0afd 5f084f7f     ..........k_.O._
    48f5:	ced34f1f 9390e092 c00e3878 c00ce083     .O......x8......
    4905:	e02fe04f cfd72ea2 3023e04f f0080531     O./.....O.#01...
    4915:	cfd1cf73 cfcfe040 91cf91df 910f911f     s...@...........
    4925:	90ef90ff 90cf90df 90af90bf 908f909f     ................
    4935:	906f907f 904f905f 9508903f 93df93cf     ..o._.O.?.......
    4945:	f1e19700 91ed01dc 81a091fc e06081b1     ..............`.
    4955:	e040e070 e020e050 174ae030 f099075b     p.@.P. .0.J.[...
    4965:	81ea01ec 0fe681fb 81c01ff7 800281d1     ................
    4975:	2de081f3 2bfd2bec 2b3f2b2e 4f5f5f4f     ...-.+.+.+?+O__O
    4985:	4f7f5f68 1521cfea f0d10531 38789180     h_.O..!.1.....x8
    4995:	c0081181 06229320 06239330 9380e081     .... .".0.#.....
    49a5:	c00a3878 06229180 93802b82 91800622     x8...."..+.."...
    49b5:	2b830623 06239380 c003e080 c001e08b     #..+..#.........
    49c5:	91dfe082 950891cf f0319700 38bb9380     ..........1....8
    49d5:	38bc9390 9508e080 9508e08b 05711561     ...8........a.q.
    49e5:	9700f1a1 9120f191 23223878 3024f181     ...... .x8"#..$0
    49f5:	9380f181 939038b9 936038ba 93703876     .....8...8`.v8p.
    4a05:	92103877 01dc0618 91fc91ed 34208122     w8..........". 4
    4a15:	ec20f439 06189320 06189120 c0056220     9. . ... ... b..
    4a25:	f4413820 06189120 93206228 92100618      8A. ...(b .....
    4a35:	c013061e f4793821 06189120 93206228     ....!8y. ...(b .
    4a45:	e8260618 061e9320 e08bc008 e0839508     ..&. ...........
    4a55:	e0819508 e0829508 92109508 01dc0600     ................
    4a65:	91fc91ed 31808184 e180f008 06039380     .......1........
    4a75:	9380e081 9380060b 9380060a 92103864     ............d8..
    4a85:	92103879 940e387a 118109d8 e084c00b     y8..z8..........
    4a95:	38789380 38799180 387a9190 0a0b940e     ..x8..y8..z8....
    4aa5:	9508e080 9380e082 95083878 f0c99700     ........x8......
    4ab5:	91ed01dc 971191fc 81318120 07371726     ........ .1.&.7.
    4ac5:	e045f090 01909f46 0d309f47 96142411     ..E.F...G.0..$..
    4ad5:	91fc91ed 0fe29715 e0811ff3 e0808380     ................
    4ae5:	e08b9508 e0829508 01fc9508 f1d12b89     .............+..
    4af5:	81b181a0 919c918d 17869711 f1a00797     ................
    4b05:	919c9612 81f58004 34902de0 e085f459     .........-.4Y...
    4b15:	01d09f86 0db09f87 0fae2411 e3841fbf     .........$......
    4b25:	c00de092 30925890 e085f480 01d09f86     .....X.0........
    4b35:	0db09f87 0fae2411 e6871fbf 9613e095     .....$..........
    4b45:	939c938d e0809714 e082c001 9f96e095     ................
    4b55:	9f970190 24110d30 1ff30fe2 60928190     ....0..$.......`
    4b65:	95088390 9508e08b 9508e082 931f930f     ................
    4b75:	93df93cf 2b8901fc c12cf409 81b181a0     .......+..,.....
    4b85:	f4099710 1561c127 f4090571 900dc123     ....'.a.q...#...
    4b95:	2da091bc 81338122 919c918d 07391728     ...-".3.....(.9.
    4ba5:	c11af008 06009210 06189210 81b181a0     ................
    4bb5:	91bc900d 96122da0 3480918c ec80f439     .....-.....49...
    4bc5:	06189380 06189180 c0036280 06189180     .........b......
    4bd5:	93806288 93600618 93703874 e0823875     .b....`.t8p.u8..
    4be5:	38649380 81538142 38799340 387a9350     ..d8B.S.@.y8P.z8
    4bf5:	81d181c0 38b993c0 38ba93d0 e07301ca     .......8...8..s.
    4c05:	1f990f88 f7e1957a 81bb81aa 1fb90fa8     ....z...........
    4c15:	913c9612 96139712 9330912c 9320062a     ..<.....,.0.*. .
    4c25:	81aa062b 0fa881bb 913c1fb9 912c9611     +.........<...,.
    4c35:	06269330 06279320 9f64e065 9f650190     0.&. .'.e.d...e.
    4c45:	24110d30 81b181a0 900d9614 2da091bc     0..$...........-
    4c55:	1fb30fa2 914c9613 061a9340 81b181a0     ......L.@.......
    4c65:	914d9614 9715915c 0fa201da 96141fb3     ..M.\...........
    4c75:	9320912c 81a0061b 961281b1 91bc900d     ,. .............
    4c85:	0fa82da0 96161fb9 95a291ac e0b070af     .-...........p..
    4c95:	46b252a2 9320912c 8120061c 81a28131     .R.F,. ... .1...
    4ca5:	01ad81b3 0f44e0a3 95aa1f55 01d9f7e1     ......D.U.......
    4cb5:	912d9612 9713913c 0fa201da 96141fb3     ..-.<...........
    4cc5:	312b912c 5f2cf410 e12fc001 06059320     ,.+1..,_../. ...
    4cd5:	81b181a0 900d9612 2da091bc 1fb90fa8     ...........-....
    4ce5:	912c9617 06019320 81b181a0 900d9612     ..,. ...........
    4cf5:	2da091bc 1fb90fa8 912c9615 93207f20     ...-......,. . .
    4d05:	812a0619 01d9813b 1fb90fa8 918c9615     ..*.;...........
    4d15:	6180708f 06029380 81118100 81938182     .p.a............
    4d25:	9f48e045 9f490190 24110d30 961401d8     E.H...I.0..$....
    4d35:	915c914d 01da9715 1fb30fa2 912d9611     M.\...........-.
    4d45:	9712913c e0708164 0f4601a9 1b261f57     <...d.p...F.W.&.
    4d55:	e0630b37 1f990f88 f7e1956a 961201d8     7.c.....j.......
    4d65:	91fc91ed 0fe89713 816a1ff9 01db817b     ..........j.{...
    4d75:	1fb90fa8 919c9616 8187709f 2e081b89     .........p......
    4d85:	0f44c002 940a1f55 01b9f7e2 0f66c002     ..D.U.........f.
    4d95:	958a1f77 01cbf7e2 06149340 06159350     w.......@...P...
    4da5:	06129360 06139390 9380e084 e0830604     `...............
    4db5:	060b9380 9380e082 e081060a 06099380     ................
    4dc5:	06189180 93806083 e8810618 06009380     .....`..........
    4dd5:	c003e080 c001e08b 91dfe082 911f91cf     ................
    4de5:	9508910f 38649180 f4593082 9380e081     ......d8.0Y.....
    4df5:	92103864 92100618 92100600 e0800609     d8..............
    4e05:	e0839508 92109508 91400600 91500610     ..........@...P.
    4e15:	91800611 91903879 019c387a 1f330f22     ....y8..z8..".3.
    4e25:	38bb91e0 38bc91f0 1ff30fe2 83518340     ...8...8....@.Q.
    4e35:	93809601 93903879 940e387a 118109d8     ....y8..z8......
    4e45:	e084c009 38789380 38799180 387a9190     ......x8..y8..z8
    4e55:	0a0b940c 387691e0 387791f0 91209409     ......v8..w8.. .
    4e65:	91300610 91600611 91703879 01cb387a     ..0...`.y8p.z8..
    4e75:	1f990f88 38bb91e0 38bc91f0 1ff90fe8     .......8...8....
    4e85:	83318320 38b991a0 38ba91b0 e05301cb      .1....8...8..S.
    4e95:	1f990f88 f7e1955a 91ed9612 971391fc     ....Z...........
    4ea5:	1ff90fe8 709f8196 17988187 1b89f410     .......p........
    4eb5:	e080c001 9f96e095 9f9701a0 24110d50     ............P..$
    4ec5:	91ed9614 971591fc 1ff50fe4 9536c002     ..............6.
    4ed5:	958a9527 8321f7e2 e0828332 38789380     '.....!.2.....x8
    4ee5:	387491e0 387591f0 94f89409 1c3fcfff     ..t8..u8......?.
    4ef5:	0103050b 8600b45f 00eb034a 00000000     ...._...J.......
    4f05:	55aa0000 2ba06e01 49000038 66000038     ...U.n.+8..I8..f
    4f15:	4900000c cd000038 16000004 7c00000c     ...I8..........|
    4f25:	ab383938 1e383338 011e0001 02000200     898.838.........
    4f35:	14000500 49011405 1e000038 4f385f05     .......I8...._8O
    4f45:	00388238 00000800 00040002 00000400     8.8.............
    4f55:	02040002 00308000 564e0001 6172454d     ......0...NVMEra
    4f65:	4e006573 72504d56 0020676f 25552455     se.NVMProg .U$U%
    4f75:	2e2ee555 6c61682f 6372732f 6c61682f     U.../hal/src/hal
    4f85:	2e6f695f 2e2e0063 6c61682f 6372732f     _io.c.../hal/src
    4f95:	6c61682f 6173755f 615f7472 636e7973     /hal_usart_async
    4fa5:	2e00632e 61682f2e 74752f6c 2f736c69     .c.../hal/utils/
    4fb5:	2f637273 6c697475 69725f73 7562676e     src/utils_ringbu
    4fc5:	72656666 2e00632e 70682f2e 65732f6c     ffer.c.../hpl/se
    4fd5:	6d6f6372 6c70682f 7265735f 2e6d6f63     rcom/hpl_sercom.
    4fe5:	54000063 a4000029 a4000028 a2000028     c..T)...(...(...
    4ff5:	46000028 46000029 3c000029 a2000029     (..F)..F)..<)...
    5005:	46000028 3c000029 46000029 a2000029     (..F)..<)..F)...
    5015:	4c000028 4c000029 4c000029 dc000029     (..L)..L)..L)...
    5025:	f8000029                                         )..

00005028 <_init>:
    5028:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    502a:	46c0      	nop			; (mov r8, r8)
    502c:	bcf8      	pop	{r3, r4, r5, r6, r7}
    502e:	bc08      	pop	{r3}
    5030:	469e      	mov	lr, r3
    5032:	4770      	bx	lr

00005034 <__init_array_start>:
    5034:	000000dd 	.word	0x000000dd

00005038 <_fini>:
    5038:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    503a:	46c0      	nop			; (mov r8, r8)
    503c:	bcf8      	pop	{r3, r4, r5, r6, r7}
    503e:	bc08      	pop	{r3}
    5040:	469e      	mov	lr, r3
    5042:	4770      	bx	lr

00005044 <__fini_array_start>:
    5044:	000000b5 	.word	0x000000b5
